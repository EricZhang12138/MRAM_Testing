
Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd0c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  0800cebc  0800cebc  0000debc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d11c  0800d11c  0000f094  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d11c  0800d11c  0000e11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d124  0800d124  0000f094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d124  0800d124  0000e124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d128  0800d128  0000e128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  0800d12c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000af8  20000094  0800d1c0  0000f094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b8c  0800d1c0  0000fb8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001afb0  00000000  00000000  0000f0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e7e  00000000  00000000  0002a074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  0002def8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f2f  00000000  00000000  0002f2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002af76  00000000  00000000  00030207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019bda  00000000  00000000  0005b17d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdf5b  00000000  00000000  00074d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00172cb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005770  00000000  00000000  00172cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00178468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cea4 	.word	0x0800cea4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800cea4 	.word	0x0800cea4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <clrstr>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void clrstr(uint8_t* str, int len){
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]
	for(int i=0; i<len; i++){
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	e007      	b.n	80005ec <clrstr+0x20>
		*(str+i)='\0';
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<len; i++){
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	3301      	adds	r3, #1
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fa      	ldr	r2, [r7, #12]
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	dbf3      	blt.n	80005dc <clrstr+0x10>
	}
}
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
	...

08000604 <HAL_UART_RxCpltCallback>:

	uint32_t start_cycle = DWT->CYCCNT;
	while((DWT->CYCCNT-start_cycle)<cycles_needed);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){                                       // Weakly defined function, used for callback in the ISR in this case
 8000604:	b580      	push	{r7, lr}
 8000606:	b09c      	sub	sp, #112	@ 0x70
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	                                                                                          // Better practice to have it in a separate file
	HAL_UART_Receive_IT(&hlpuart1, Rx, 1); //It will then self-sustain
 800060c:	2201      	movs	r2, #1
 800060e:	498f      	ldr	r1, [pc, #572]	@ (800084c <HAL_UART_RxCpltCallback+0x248>)
 8000610:	488f      	ldr	r0, [pc, #572]	@ (8000850 <HAL_UART_RxCpltCallback+0x24c>)
 8000612:	f005 fe7f 	bl	8006314 <HAL_UART_Receive_IT>

    if(Rx[0]==testDetailCmd[read])                                                    //strcmp may be wrongly used here
 8000616:	4b8d      	ldr	r3, [pc, #564]	@ (800084c <HAL_UART_RxCpltCallback+0x248>)
 8000618:	781a      	ldrb	r2, [r3, #0]
 800061a:	4b8e      	ldr	r3, [pc, #568]	@ (8000854 <HAL_UART_RxCpltCallback+0x250>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	4619      	mov	r1, r3
 8000620:	4b8d      	ldr	r3, [pc, #564]	@ (8000858 <HAL_UART_RxCpltCallback+0x254>)
 8000622:	5c5b      	ldrb	r3, [r3, r1]
 8000624:	429a      	cmp	r2, r3
 8000626:	d106      	bne.n	8000636 <HAL_UART_RxCpltCallback+0x32>
      {
      	read++;
 8000628:	4b8a      	ldr	r3, [pc, #552]	@ (8000854 <HAL_UART_RxCpltCallback+0x250>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	3301      	adds	r3, #1
 800062e:	b2da      	uxtb	r2, r3
 8000630:	4b88      	ldr	r3, [pc, #544]	@ (8000854 <HAL_UART_RxCpltCallback+0x250>)
 8000632:	701a      	strb	r2, [r3, #0]
 8000634:	e00c      	b.n	8000650 <HAL_UART_RxCpltCallback+0x4c>
      }
    else
      {
    	  if(Rx[0]==testDetailCmd[0]){
 8000636:	4b85      	ldr	r3, [pc, #532]	@ (800084c <HAL_UART_RxCpltCallback+0x248>)
 8000638:	781a      	ldrb	r2, [r3, #0]
 800063a:	4b87      	ldr	r3, [pc, #540]	@ (8000858 <HAL_UART_RxCpltCallback+0x254>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	429a      	cmp	r2, r3
 8000640:	d103      	bne.n	800064a <HAL_UART_RxCpltCallback+0x46>
    		  read = 1;
 8000642:	4b84      	ldr	r3, [pc, #528]	@ (8000854 <HAL_UART_RxCpltCallback+0x250>)
 8000644:	2201      	movs	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	e002      	b.n	8000650 <HAL_UART_RxCpltCallback+0x4c>
    	  }
    	  else{
    	      	read=0;
 800064a:	4b82      	ldr	r3, [pc, #520]	@ (8000854 <HAL_UART_RxCpltCallback+0x250>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
    	  }
      }
      if(read>=2)
 8000650:	4b80      	ldr	r3, [pc, #512]	@ (8000854 <HAL_UART_RxCpltCallback+0x250>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b01      	cmp	r3, #1
 8000656:	f240 81d6 	bls.w	8000a06 <HAL_UART_RxCpltCallback+0x402>
      {
      	read=0;
 800065a:	4b7e      	ldr	r3, [pc, #504]	@ (8000854 <HAL_UART_RxCpltCallback+0x250>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
      	if(consoleMode){
 8000660:	4b7e      	ldr	r3, [pc, #504]	@ (800085c <HAL_UART_RxCpltCallback+0x258>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	f000 8131 	beq.w	80008cc <HAL_UART_RxCpltCallback+0x2c8>
      		uint8_t data[76];
      		clrstr(data, 76);
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	214c      	movs	r1, #76	@ 0x4c
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ffab 	bl	80005cc <clrstr>
      		HAL_UART_Transmit(&hlpuart1,"Memory Test Latest Results: \r\n\n" ,31,40); //SET TO /0 SO AS TO REMOVE EXTRANEOUS STUFF
 8000676:	2328      	movs	r3, #40	@ 0x28
 8000678:	221f      	movs	r2, #31
 800067a:	4979      	ldr	r1, [pc, #484]	@ (8000860 <HAL_UART_RxCpltCallback+0x25c>)
 800067c:	4874      	ldr	r0, [pc, #464]	@ (8000850 <HAL_UART_RxCpltCallback+0x24c>)
 800067e:	f005 fdbf 	bl	8006200 <HAL_UART_Transmit>
      		clrstr(data, 76);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	214c      	movs	r1, #76	@ 0x4c
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff9f 	bl	80005cc <clrstr>
      		sprintf(data, "MRAM0 tests completed:\t%lu\r\nMRAM0 failures:\t\t%u\r\n", numTestsMRAM0, numFailsMRAM0);
 800068e:	4b75      	ldr	r3, [pc, #468]	@ (8000864 <HAL_UART_RxCpltCallback+0x260>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	4b75      	ldr	r3, [pc, #468]	@ (8000868 <HAL_UART_RxCpltCallback+0x264>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f107 0008 	add.w	r0, r7, #8
 800069a:	4974      	ldr	r1, [pc, #464]	@ (800086c <HAL_UART_RxCpltCallback+0x268>)
 800069c:	f00c f810 	bl	800c6c0 <siprintf>
      		HAL_UART_Transmit(&hlpuart1,data,strlen(data),40);
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fda3 	bl	80001f0 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	f107 0108 	add.w	r1, r7, #8
 80006b2:	2328      	movs	r3, #40	@ 0x28
 80006b4:	4866      	ldr	r0, [pc, #408]	@ (8000850 <HAL_UART_RxCpltCallback+0x24c>)
 80006b6:	f005 fda3 	bl	8006200 <HAL_UART_Transmit>
      		clrstr(data, 76);
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	214c      	movs	r1, #76	@ 0x4c
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff83 	bl	80005cc <clrstr>
      		sprintf(data, "MRAM1 tests completed:\t%lu\r\nMRAM1 failures:\t\t%u\r\n", numTestsMRAM1, numFailsMRAM1);
 80006c6:	4b6a      	ldr	r3, [pc, #424]	@ (8000870 <HAL_UART_RxCpltCallback+0x26c>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	4b6a      	ldr	r3, [pc, #424]	@ (8000874 <HAL_UART_RxCpltCallback+0x270>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f107 0008 	add.w	r0, r7, #8
 80006d2:	4969      	ldr	r1, [pc, #420]	@ (8000878 <HAL_UART_RxCpltCallback+0x274>)
 80006d4:	f00b fff4 	bl	800c6c0 <siprintf>
      		HAL_UART_Transmit(&hlpuart1,data,strlen(data),40);
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff fd87 	bl	80001f0 <strlen>
 80006e2:	4603      	mov	r3, r0
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	f107 0108 	add.w	r1, r7, #8
 80006ea:	2328      	movs	r3, #40	@ 0x28
 80006ec:	4858      	ldr	r0, [pc, #352]	@ (8000850 <HAL_UART_RxCpltCallback+0x24c>)
 80006ee:	f005 fd87 	bl	8006200 <HAL_UART_Transmit>
      		clrstr(data, 76);
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	214c      	movs	r1, #76	@ 0x4c
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ff67 	bl	80005cc <clrstr>
      		sprintf(data, "MRAM2 tests completed:\t%lu\r\nMRAM2 failures:\t\t%u\r\n", numTestsMRAM2, numFailsMRAM2);
 80006fe:	4b5f      	ldr	r3, [pc, #380]	@ (800087c <HAL_UART_RxCpltCallback+0x278>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	4b5f      	ldr	r3, [pc, #380]	@ (8000880 <HAL_UART_RxCpltCallback+0x27c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f107 0008 	add.w	r0, r7, #8
 800070a:	495e      	ldr	r1, [pc, #376]	@ (8000884 <HAL_UART_RxCpltCallback+0x280>)
 800070c:	f00b ffd8 	bl	800c6c0 <siprintf>
      		HAL_UART_Transmit(&hlpuart1,data,strlen(data),40);
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fd6b 	bl	80001f0 <strlen>
 800071a:	4603      	mov	r3, r0
 800071c:	b29a      	uxth	r2, r3
 800071e:	f107 0108 	add.w	r1, r7, #8
 8000722:	2328      	movs	r3, #40	@ 0x28
 8000724:	484a      	ldr	r0, [pc, #296]	@ (8000850 <HAL_UART_RxCpltCallback+0x24c>)
 8000726:	f005 fd6b 	bl	8006200 <HAL_UART_Transmit>
      		clrstr(data, 76);
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	214c      	movs	r1, #76	@ 0x4c
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff4b 	bl	80005cc <clrstr>
      		sprintf(data, "MRAM3 tests completed:\t%lu\r\nMRAM3 failures:\t\t%u\r\n", numTestsMRAM3, numFailsMRAM3);
 8000736:	4b54      	ldr	r3, [pc, #336]	@ (8000888 <HAL_UART_RxCpltCallback+0x284>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	4b54      	ldr	r3, [pc, #336]	@ (800088c <HAL_UART_RxCpltCallback+0x288>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f107 0008 	add.w	r0, r7, #8
 8000742:	4953      	ldr	r1, [pc, #332]	@ (8000890 <HAL_UART_RxCpltCallback+0x28c>)
 8000744:	f00b ffbc 	bl	800c6c0 <siprintf>
      		HAL_UART_Transmit(&hlpuart1,data,strlen(data),40);
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff fd4f 	bl	80001f0 <strlen>
 8000752:	4603      	mov	r3, r0
 8000754:	b29a      	uxth	r2, r3
 8000756:	f107 0108 	add.w	r1, r7, #8
 800075a:	2328      	movs	r3, #40	@ 0x28
 800075c:	483c      	ldr	r0, [pc, #240]	@ (8000850 <HAL_UART_RxCpltCallback+0x24c>)
 800075e:	f005 fd4f 	bl	8006200 <HAL_UART_Transmit>

      		HAL_UART_Transmit(&hlpuart1,"\nCurrently testing chip ",24,40);
 8000762:	2328      	movs	r3, #40	@ 0x28
 8000764:	2218      	movs	r2, #24
 8000766:	494b      	ldr	r1, [pc, #300]	@ (8000894 <HAL_UART_RxCpltCallback+0x290>)
 8000768:	4839      	ldr	r0, [pc, #228]	@ (8000850 <HAL_UART_RxCpltCallback+0x24c>)
 800076a:	f005 fd49 	bl	8006200 <HAL_UART_Transmit>
      		switch(currChip){
 800076e:	4b4a      	ldr	r3, [pc, #296]	@ (8000898 <HAL_UART_RxCpltCallback+0x294>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b03      	cmp	r3, #3
 8000774:	d826      	bhi.n	80007c4 <HAL_UART_RxCpltCallback+0x1c0>
 8000776:	a201      	add	r2, pc, #4	@ (adr r2, 800077c <HAL_UART_RxCpltCallback+0x178>)
 8000778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077c:	0800078d 	.word	0x0800078d
 8000780:	0800079b 	.word	0x0800079b
 8000784:	080007a9 	.word	0x080007a9
 8000788:	080007b7 	.word	0x080007b7
      		case 0:
      			HAL_UART_Transmit(&hlpuart1,"MRAM0\r\n",7,40);
 800078c:	2328      	movs	r3, #40	@ 0x28
 800078e:	2207      	movs	r2, #7
 8000790:	4942      	ldr	r1, [pc, #264]	@ (800089c <HAL_UART_RxCpltCallback+0x298>)
 8000792:	482f      	ldr	r0, [pc, #188]	@ (8000850 <HAL_UART_RxCpltCallback+0x24c>)
 8000794:	f005 fd34 	bl	8006200 <HAL_UART_Transmit>
      			break;
 8000798:	e014      	b.n	80007c4 <HAL_UART_RxCpltCallback+0x1c0>
      		case 1:
      			HAL_UART_Transmit(&hlpuart1,"MRAM1\r\n",7,40);
 800079a:	2328      	movs	r3, #40	@ 0x28
 800079c:	2207      	movs	r2, #7
 800079e:	4940      	ldr	r1, [pc, #256]	@ (80008a0 <HAL_UART_RxCpltCallback+0x29c>)
 80007a0:	482b      	ldr	r0, [pc, #172]	@ (8000850 <HAL_UART_RxCpltCallback+0x24c>)
 80007a2:	f005 fd2d 	bl	8006200 <HAL_UART_Transmit>
      			break;
 80007a6:	e00d      	b.n	80007c4 <HAL_UART_RxCpltCallback+0x1c0>
      		case 2:
      			HAL_UART_Transmit(&hlpuart1,"MRAM2\r\n",7,40);
 80007a8:	2328      	movs	r3, #40	@ 0x28
 80007aa:	2207      	movs	r2, #7
 80007ac:	493d      	ldr	r1, [pc, #244]	@ (80008a4 <HAL_UART_RxCpltCallback+0x2a0>)
 80007ae:	4828      	ldr	r0, [pc, #160]	@ (8000850 <HAL_UART_RxCpltCallback+0x24c>)
 80007b0:	f005 fd26 	bl	8006200 <HAL_UART_Transmit>
      			break;
 80007b4:	e006      	b.n	80007c4 <HAL_UART_RxCpltCallback+0x1c0>
      		case 3:
      			HAL_UART_Transmit(&hlpuart1,"MRAM3\r\n",7,40);
 80007b6:	2328      	movs	r3, #40	@ 0x28
 80007b8:	2207      	movs	r2, #7
 80007ba:	493b      	ldr	r1, [pc, #236]	@ (80008a8 <HAL_UART_RxCpltCallback+0x2a4>)
 80007bc:	4824      	ldr	r0, [pc, #144]	@ (8000850 <HAL_UART_RxCpltCallback+0x24c>)
 80007be:	f005 fd1f 	bl	8006200 <HAL_UART_Transmit>
      			break;
 80007c2:	bf00      	nop
      		}

      		HAL_UART_Transmit(&hlpuart1,"Current state: ",15,40);
 80007c4:	2328      	movs	r3, #40	@ 0x28
 80007c6:	220f      	movs	r2, #15
 80007c8:	4938      	ldr	r1, [pc, #224]	@ (80008ac <HAL_UART_RxCpltCallback+0x2a8>)
 80007ca:	4821      	ldr	r0, [pc, #132]	@ (8000850 <HAL_UART_RxCpltCallback+0x24c>)
 80007cc:	f005 fd18 	bl	8006200 <HAL_UART_Transmit>
      		switch(currState){
 80007d0:	4b37      	ldr	r3, [pc, #220]	@ (80008b0 <HAL_UART_RxCpltCallback+0x2ac>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b05      	cmp	r3, #5
 80007d6:	f200 8116 	bhi.w	8000a06 <HAL_UART_RxCpltCallback+0x402>
 80007da:	a201      	add	r2, pc, #4	@ (adr r2, 80007e0 <HAL_UART_RxCpltCallback+0x1dc>)
 80007dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e0:	080007f9 	.word	0x080007f9
 80007e4:	08000807 	.word	0x08000807
 80007e8:	08000815 	.word	0x08000815
 80007ec:	08000823 	.word	0x08000823
 80007f0:	08000831 	.word	0x08000831
 80007f4:	0800083f 	.word	0x0800083f
      		case 0:
      			HAL_UART_Transmit(&hlpuart1,"UP:w0\r\n\r\n",9,40);
 80007f8:	2328      	movs	r3, #40	@ 0x28
 80007fa:	2209      	movs	r2, #9
 80007fc:	492d      	ldr	r1, [pc, #180]	@ (80008b4 <HAL_UART_RxCpltCallback+0x2b0>)
 80007fe:	4814      	ldr	r0, [pc, #80]	@ (8000850 <HAL_UART_RxCpltCallback+0x24c>)
 8000800:	f005 fcfe 	bl	8006200 <HAL_UART_Transmit>
      			break;
 8000804:	e0ff      	b.n	8000a06 <HAL_UART_RxCpltCallback+0x402>
      		case 1:
      			HAL_UART_Transmit(&hlpuart1,"UP:r0 w1\r\n\r\n",12,40);
 8000806:	2328      	movs	r3, #40	@ 0x28
 8000808:	220c      	movs	r2, #12
 800080a:	492b      	ldr	r1, [pc, #172]	@ (80008b8 <HAL_UART_RxCpltCallback+0x2b4>)
 800080c:	4810      	ldr	r0, [pc, #64]	@ (8000850 <HAL_UART_RxCpltCallback+0x24c>)
 800080e:	f005 fcf7 	bl	8006200 <HAL_UART_Transmit>
      			break;
 8000812:	e0f8      	b.n	8000a06 <HAL_UART_RxCpltCallback+0x402>
      		case 2:
      			HAL_UART_Transmit(&hlpuart1,"UP:r1 w0\r\n\r\n",12,40);
 8000814:	2328      	movs	r3, #40	@ 0x28
 8000816:	220c      	movs	r2, #12
 8000818:	4928      	ldr	r1, [pc, #160]	@ (80008bc <HAL_UART_RxCpltCallback+0x2b8>)
 800081a:	480d      	ldr	r0, [pc, #52]	@ (8000850 <HAL_UART_RxCpltCallback+0x24c>)
 800081c:	f005 fcf0 	bl	8006200 <HAL_UART_Transmit>
      			break;
 8000820:	e0f1      	b.n	8000a06 <HAL_UART_RxCpltCallback+0x402>
      		case 3:
      			HAL_UART_Transmit(&hlpuart1,"DOWN:r0 w1\r\n\r\n",14,40);
 8000822:	2328      	movs	r3, #40	@ 0x28
 8000824:	220e      	movs	r2, #14
 8000826:	4926      	ldr	r1, [pc, #152]	@ (80008c0 <HAL_UART_RxCpltCallback+0x2bc>)
 8000828:	4809      	ldr	r0, [pc, #36]	@ (8000850 <HAL_UART_RxCpltCallback+0x24c>)
 800082a:	f005 fce9 	bl	8006200 <HAL_UART_Transmit>
      			break;
 800082e:	e0ea      	b.n	8000a06 <HAL_UART_RxCpltCallback+0x402>
      		case 4:
      			HAL_UART_Transmit(&hlpuart1,"DOWN:r1 w0\r\n\r\n",14,40);
 8000830:	2328      	movs	r3, #40	@ 0x28
 8000832:	220e      	movs	r2, #14
 8000834:	4923      	ldr	r1, [pc, #140]	@ (80008c4 <HAL_UART_RxCpltCallback+0x2c0>)
 8000836:	4806      	ldr	r0, [pc, #24]	@ (8000850 <HAL_UART_RxCpltCallback+0x24c>)
 8000838:	f005 fce2 	bl	8006200 <HAL_UART_Transmit>
      			break;
 800083c:	e0e3      	b.n	8000a06 <HAL_UART_RxCpltCallback+0x402>
      		case 5:
      			HAL_UART_Transmit(&hlpuart1,"DOWN:r0\r\n\r\n",11,40);
 800083e:	2328      	movs	r3, #40	@ 0x28
 8000840:	220b      	movs	r2, #11
 8000842:	4921      	ldr	r1, [pc, #132]	@ (80008c8 <HAL_UART_RxCpltCallback+0x2c4>)
 8000844:	4802      	ldr	r0, [pc, #8]	@ (8000850 <HAL_UART_RxCpltCallback+0x24c>)
 8000846:	f005 fcdb 	bl	8006200 <HAL_UART_Transmit>
      			break;
 800084a:	e0dc      	b.n	8000a06 <HAL_UART_RxCpltCallback+0x402>
 800084c:	20000248 	.word	0x20000248
 8000850:	200000b0 	.word	0x200000b0
 8000854:	20000249 	.word	0x20000249
 8000858:	20000014 	.word	0x20000014
 800085c:	20000000 	.word	0x20000000
 8000860:	0800cebc 	.word	0x0800cebc
 8000864:	20000224 	.word	0x20000224
 8000868:	20000234 	.word	0x20000234
 800086c:	0800cedc 	.word	0x0800cedc
 8000870:	20000228 	.word	0x20000228
 8000874:	20000238 	.word	0x20000238
 8000878:	0800cf10 	.word	0x0800cf10
 800087c:	2000022c 	.word	0x2000022c
 8000880:	2000023c 	.word	0x2000023c
 8000884:	0800cf44 	.word	0x0800cf44
 8000888:	20000230 	.word	0x20000230
 800088c:	20000240 	.word	0x20000240
 8000890:	0800cf78 	.word	0x0800cf78
 8000894:	0800cfac 	.word	0x0800cfac
 8000898:	20000244 	.word	0x20000244
 800089c:	0800cfc8 	.word	0x0800cfc8
 80008a0:	0800cfd0 	.word	0x0800cfd0
 80008a4:	0800cfd8 	.word	0x0800cfd8
 80008a8:	0800cfe0 	.word	0x0800cfe0
 80008ac:	0800cfe8 	.word	0x0800cfe8
 80008b0:	20000245 	.word	0x20000245
 80008b4:	0800cff8 	.word	0x0800cff8
 80008b8:	0800d004 	.word	0x0800d004
 80008bc:	0800d014 	.word	0x0800d014
 80008c0:	0800d024 	.word	0x0800d024
 80008c4:	0800d034 	.word	0x0800d034
 80008c8:	0800d044 	.word	0x0800d044
      		}
      	}
      	else{
      		uint8_t data[28];

      		data[0] = (numTestsMRAM0>>24)&0x000000FF;
 80008cc:	4b51      	ldr	r3, [pc, #324]	@ (8000a14 <HAL_UART_RxCpltCallback+0x410>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	0e1b      	lsrs	r3, r3, #24
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
      		data[1] = (numTestsMRAM0>>16)&0x000000FF;
 80008d8:	4b4e      	ldr	r3, [pc, #312]	@ (8000a14 <HAL_UART_RxCpltCallback+0x410>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	0c1b      	lsrs	r3, r3, #16
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
      		data[2] = (numTestsMRAM0>>8)&0x000000FF;
 80008e4:	4b4b      	ldr	r3, [pc, #300]	@ (8000a14 <HAL_UART_RxCpltCallback+0x410>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
      		data[3] = numTestsMRAM0&0x000000FF;              //for MRAM0
 80008f0:	4b48      	ldr	r3, [pc, #288]	@ (8000a14 <HAL_UART_RxCpltCallback+0x410>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      		data[4] = (numTestsMRAM1>>24)&0x000000FF;
 80008fa:	4b47      	ldr	r3, [pc, #284]	@ (8000a18 <HAL_UART_RxCpltCallback+0x414>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	0e1b      	lsrs	r3, r3, #24
 8000900:	b2db      	uxtb	r3, r3
 8000902:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
      		data[5] = (numTestsMRAM1>>16)&0x000000FF;
 8000906:	4b44      	ldr	r3, [pc, #272]	@ (8000a18 <HAL_UART_RxCpltCallback+0x414>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	0c1b      	lsrs	r3, r3, #16
 800090c:	b2db      	uxtb	r3, r3
 800090e:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
      		data[6] = (numTestsMRAM1>>8)&0x000000FF;
 8000912:	4b41      	ldr	r3, [pc, #260]	@ (8000a18 <HAL_UART_RxCpltCallback+0x414>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	0a1b      	lsrs	r3, r3, #8
 8000918:	b2db      	uxtb	r3, r3
 800091a:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
      		data[7] = numTestsMRAM1&0x000000FF;              //for MRAM1
 800091e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a18 <HAL_UART_RxCpltCallback+0x414>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	b2db      	uxtb	r3, r3
 8000924:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
      		data[8] = (numTestsMRAM2>>24)&0x000000FF;
 8000928:	4b3c      	ldr	r3, [pc, #240]	@ (8000a1c <HAL_UART_RxCpltCallback+0x418>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	0e1b      	lsrs	r3, r3, #24
 800092e:	b2db      	uxtb	r3, r3
 8000930:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
      		data[9] = (numTestsMRAM2>>16)&0x000000FF;
 8000934:	4b39      	ldr	r3, [pc, #228]	@ (8000a1c <HAL_UART_RxCpltCallback+0x418>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	0c1b      	lsrs	r3, r3, #16
 800093a:	b2db      	uxtb	r3, r3
 800093c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
      		data[10] = (numTestsMRAM2>>8)&0x000000FF;
 8000940:	4b36      	ldr	r3, [pc, #216]	@ (8000a1c <HAL_UART_RxCpltCallback+0x418>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	b2db      	uxtb	r3, r3
 8000948:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
      		data[11] = numTestsMRAM2&0x000000FF;             //for MRAM2
 800094c:	4b33      	ldr	r3, [pc, #204]	@ (8000a1c <HAL_UART_RxCpltCallback+0x418>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      		data[12] = (numTestsMRAM3>>24)&0x000000FF;
 8000956:	4b32      	ldr	r3, [pc, #200]	@ (8000a20 <HAL_UART_RxCpltCallback+0x41c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	0e1b      	lsrs	r3, r3, #24
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
      		data[13] = (numTestsMRAM3>>16)&0x000000FF;
 8000962:	4b2f      	ldr	r3, [pc, #188]	@ (8000a20 <HAL_UART_RxCpltCallback+0x41c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	0c1b      	lsrs	r3, r3, #16
 8000968:	b2db      	uxtb	r3, r3
 800096a:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
      		data[14] = (numTestsMRAM3>>8)&0x000000FF;
 800096e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a20 <HAL_UART_RxCpltCallback+0x41c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	0a1b      	lsrs	r3, r3, #8
 8000974:	b2db      	uxtb	r3, r3
 8000976:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
      		data[15] = numTestsMRAM3&0x000000FF;             //for MRAM3
 800097a:	4b29      	ldr	r3, [pc, #164]	@ (8000a20 <HAL_UART_RxCpltCallback+0x41c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63


      		data[16] = (numFailsMRAM0>>8)&0x00FF;
 8000984:	4b27      	ldr	r3, [pc, #156]	@ (8000a24 <HAL_UART_RxCpltCallback+0x420>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	0a1b      	lsrs	r3, r3, #8
 800098a:	b2db      	uxtb	r3, r3
 800098c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
      		data[17] = numFailsMRAM0&0x00FF;
 8000990:	4b24      	ldr	r3, [pc, #144]	@ (8000a24 <HAL_UART_RxCpltCallback+0x420>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
      		data[18] = (numFailsMRAM1>>8)&0x00FF;
 800099a:	4b23      	ldr	r3, [pc, #140]	@ (8000a28 <HAL_UART_RxCpltCallback+0x424>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	0a1b      	lsrs	r3, r3, #8
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
      		data[19] = numFailsMRAM1&0x00FF;
 80009a6:	4b20      	ldr	r3, [pc, #128]	@ (8000a28 <HAL_UART_RxCpltCallback+0x424>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      		data[20] = (numFailsMRAM2>>8)&0x00FF;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a2c <HAL_UART_RxCpltCallback+0x428>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
      		data[21] = numFailsMRAM2&0x00FF;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <HAL_UART_RxCpltCallback+0x428>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
      		data[22] = (numFailsMRAM3>>8)&0x00FF;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a30 <HAL_UART_RxCpltCallback+0x42c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	0a1b      	lsrs	r3, r3, #8
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
      		data[23] = numFailsMRAM3&0x00FF;
 80009d2:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <HAL_UART_RxCpltCallback+0x42c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b


      		data[24] = currChip;
 80009dc:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <HAL_UART_RxCpltCallback+0x430>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
      		data[25] = currState;
 80009e4:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <HAL_UART_RxCpltCallback+0x434>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d


      		data[26] = '\r';
 80009ec:	230d      	movs	r3, #13
 80009ee:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      		data[27] = '\n';
 80009f2:	230a      	movs	r3, #10
 80009f4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

      		HAL_UART_Transmit(&hlpuart1,data,28,30);
 80009f8:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80009fc:	231e      	movs	r3, #30
 80009fe:	221c      	movs	r2, #28
 8000a00:	480e      	ldr	r0, [pc, #56]	@ (8000a3c <HAL_UART_RxCpltCallback+0x438>)
 8000a02:	f005 fbfd 	bl	8006200 <HAL_UART_Transmit>

      	}
      }
      Rx[0] = '\0';
 8000a06:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <HAL_UART_RxCpltCallback+0x43c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]

}
 8000a0c:	bf00      	nop
 8000a0e:	3770      	adds	r7, #112	@ 0x70
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000224 	.word	0x20000224
 8000a18:	20000228 	.word	0x20000228
 8000a1c:	2000022c 	.word	0x2000022c
 8000a20:	20000230 	.word	0x20000230
 8000a24:	20000234 	.word	0x20000234
 8000a28:	20000238 	.word	0x20000238
 8000a2c:	2000023c 	.word	0x2000023c
 8000a30:	20000240 	.word	0x20000240
 8000a34:	20000244 	.word	0x20000244
 8000a38:	20000245 	.word	0x20000245
 8000a3c:	200000b0 	.word	0x200000b0
 8000a40:	20000248 	.word	0x20000248

08000a44 <WriteMem>:

void WriteMem(uint8_t chip, uint32_t addr, uint16_t length, uint8_t* data){
 8000a44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a48:	b089      	sub	sp, #36	@ 0x24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	4603      	mov	r3, r0
 8000a52:	73fb      	strb	r3, [r7, #15]
 8000a54:	4613      	mov	r3, r2
 8000a56:	81bb      	strh	r3, [r7, #12]
	length += 4; //Account for the header
 8000a58:	89bb      	ldrh	r3, [r7, #12]
 8000a5a:	3304      	adds	r3, #4
 8000a5c:	81bb      	strh	r3, [r7, #12]
	uint16_t selectedPin = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	83fb      	strh	r3, [r7, #30]
	switch(chip){
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	2b03      	cmp	r3, #3
 8000a66:	d81b      	bhi.n	8000aa0 <WriteMem+0x5c>
 8000a68:	a201      	add	r2, pc, #4	@ (adr r2, 8000a70 <WriteMem+0x2c>)
 8000a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6e:	bf00      	nop
 8000a70:	08000a81 	.word	0x08000a81
 8000a74:	08000a89 	.word	0x08000a89
 8000a78:	08000a91 	.word	0x08000a91
 8000a7c:	08000a99 	.word	0x08000a99
	case 0:
		selectedPin = 1024;
 8000a80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a84:	83fb      	strh	r3, [r7, #30]
		break;
 8000a86:	e00b      	b.n	8000aa0 <WriteMem+0x5c>
	case 1:
		selectedPin = 4096;
 8000a88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a8c:	83fb      	strh	r3, [r7, #30]
		break;
 8000a8e:	e007      	b.n	8000aa0 <WriteMem+0x5c>
	case 2:
		selectedPin = 16384;
 8000a90:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a94:	83fb      	strh	r3, [r7, #30]
		break;
 8000a96:	e003      	b.n	8000aa0 <WriteMem+0x5c>
	case 3:
		selectedPin = 32768;
 8000a98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a9c:	83fb      	strh	r3, [r7, #30]
		break;
 8000a9e:	bf00      	nop
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET); //Set WRite ENable
		  HAL_SPI_Transmit(&hspi1, &wren, 1, 10);
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
	}*/

	uint8_t TxBuff[length];
 8000aa0:	89b9      	ldrh	r1, [r7, #12]
 8000aa2:	466b      	mov	r3, sp
 8000aa4:	461e      	mov	r6, r3
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	b28b      	uxth	r3, r1
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4698      	mov	r8, r3
 8000ab2:	4691      	mov	r9, r2
 8000ab4:	f04f 0200 	mov.w	r2, #0
 8000ab8:	f04f 0300 	mov.w	r3, #0
 8000abc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ac0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ac4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ac8:	b28b      	uxth	r3, r1
 8000aca:	2200      	movs	r2, #0
 8000acc:	461c      	mov	r4, r3
 8000ace:	4615      	mov	r5, r2
 8000ad0:	f04f 0200 	mov.w	r2, #0
 8000ad4:	f04f 0300 	mov.w	r3, #0
 8000ad8:	00eb      	lsls	r3, r5, #3
 8000ada:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ade:	00e2      	lsls	r2, r4, #3
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	3307      	adds	r3, #7
 8000ae4:	08db      	lsrs	r3, r3, #3
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	ebad 0d03 	sub.w	sp, sp, r3
 8000aec:	466b      	mov	r3, sp
 8000aee:	3300      	adds	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
	TxBuff[0] = 0x02;
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	2202      	movs	r2, #2
 8000af6:	701a      	strb	r2, [r3, #0]
	TxBuff[1] = (addr>>16)&0x0000FF;
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	0c1b      	lsrs	r3, r3, #16
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	705a      	strb	r2, [r3, #1]
	TxBuff[2] = (addr>>8)&0x0000FF;
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	709a      	strb	r2, [r3, #2]
	TxBuff[3] = (addr)&0x0000FF;                                                                   //we only need the first 24 bits (16Mb)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	70da      	strb	r2, [r3, #3]

	for(int i=4; i<length; i++){
 8000b14:	2304      	movs	r3, #4
 8000b16:	61bb      	str	r3, [r7, #24]
 8000b18:	e00c      	b.n	8000b34 <WriteMem+0xf0>
		TxBuff[i] = *(data+(i-4)); //Loop through all the data and put it into the Tx buffer.
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	3b04      	subs	r3, #4
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	7819      	ldrb	r1, [r3, #0]
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	4413      	add	r3, r2
 8000b2a:	460a      	mov	r2, r1
 8000b2c:	701a      	strb	r2, [r3, #0]
	for(int i=4; i<length; i++){
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	3301      	adds	r3, #1
 8000b32:	61bb      	str	r3, [r7, #24]
 8000b34:	89bb      	ldrh	r3, [r7, #12]
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	dbee      	blt.n	8000b1a <WriteMem+0xd6>
	}

	HAL_GPIO_WritePin(GPIOE, selectedPin, GPIO_PIN_RESET);
 8000b3c:	8bfb      	ldrh	r3, [r7, #30]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4619      	mov	r1, r3
 8000b42:	480a      	ldr	r0, [pc, #40]	@ (8000b6c <WriteMem+0x128>)
 8000b44:	f001 fce2 	bl	800250c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)TxBuff, length, 100);
 8000b48:	89ba      	ldrh	r2, [r7, #12]
 8000b4a:	2364      	movs	r3, #100	@ 0x64
 8000b4c:	6939      	ldr	r1, [r7, #16]
 8000b4e:	4808      	ldr	r0, [pc, #32]	@ (8000b70 <WriteMem+0x12c>)
 8000b50:	f004 fe0d 	bl	800576e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, selectedPin, GPIO_PIN_SET);
 8000b54:	8bfb      	ldrh	r3, [r7, #30]
 8000b56:	2201      	movs	r2, #1
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4804      	ldr	r0, [pc, #16]	@ (8000b6c <WriteMem+0x128>)
 8000b5c:	f001 fcd6 	bl	800250c <HAL_GPIO_WritePin>
 8000b60:	46b5      	mov	sp, r6
}
 8000b62:	bf00      	nop
 8000b64:	3724      	adds	r7, #36	@ 0x24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b6c:	48001000 	.word	0x48001000
 8000b70:	200001c0 	.word	0x200001c0

08000b74 <ReadMem>:

void ReadMem(uint8_t chip, uint32_t addr, uint16_t length, uint8_t* buffer){
 8000b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b78:	b091      	sub	sp, #68	@ 0x44
 8000b7a:	af02      	add	r7, sp, #8
 8000b7c:	6139      	str	r1, [r7, #16]
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	4603      	mov	r3, r0
 8000b82:	75fb      	strb	r3, [r7, #23]
 8000b84:	4613      	mov	r3, r2
 8000b86:	82bb      	strh	r3, [r7, #20]
	length += 4; //Account for the header
 8000b88:	8abb      	ldrh	r3, [r7, #20]
 8000b8a:	3304      	adds	r3, #4
 8000b8c:	82bb      	strh	r3, [r7, #20]

	uint16_t selectedPin = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	86fb      	strh	r3, [r7, #54]	@ 0x36
	switch(chip){
 8000b92:	7dfb      	ldrb	r3, [r7, #23]
 8000b94:	2b03      	cmp	r3, #3
 8000b96:	d81b      	bhi.n	8000bd0 <ReadMem+0x5c>
 8000b98:	a201      	add	r2, pc, #4	@ (adr r2, 8000ba0 <ReadMem+0x2c>)
 8000b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9e:	bf00      	nop
 8000ba0:	08000bb1 	.word	0x08000bb1
 8000ba4:	08000bb9 	.word	0x08000bb9
 8000ba8:	08000bc1 	.word	0x08000bc1
 8000bac:	08000bc9 	.word	0x08000bc9
	case 0:
		selectedPin = 1024;
 8000bb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bb4:	86fb      	strh	r3, [r7, #54]	@ 0x36
		break;
 8000bb6:	e00b      	b.n	8000bd0 <ReadMem+0x5c>
	case 1:
		selectedPin = 4096;
 8000bb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bbc:	86fb      	strh	r3, [r7, #54]	@ 0x36
		break;
 8000bbe:	e007      	b.n	8000bd0 <ReadMem+0x5c>
	case 2:
		selectedPin = 16384;
 8000bc0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000bc4:	86fb      	strh	r3, [r7, #54]	@ 0x36
		break;
 8000bc6:	e003      	b.n	8000bd0 <ReadMem+0x5c>
	case 3:
		selectedPin = 32768;
 8000bc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bcc:	86fb      	strh	r3, [r7, #54]	@ 0x36
		break;
 8000bce:	bf00      	nop
	}

	uint8_t TxBuff[length];
 8000bd0:	8ab9      	ldrh	r1, [r7, #20]
 8000bd2:	466b      	mov	r3, sp
 8000bd4:	461e      	mov	r6, r3
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000bdc:	b28b      	uxth	r3, r1
 8000bde:	2200      	movs	r2, #0
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	607a      	str	r2, [r7, #4]
 8000be4:	f04f 0200 	mov.w	r2, #0
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	00c3      	lsls	r3, r0, #3
 8000bf0:	6838      	ldr	r0, [r7, #0]
 8000bf2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000bf6:	6838      	ldr	r0, [r7, #0]
 8000bf8:	00c2      	lsls	r2, r0, #3
 8000bfa:	b28b      	uxth	r3, r1
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	469a      	mov	sl, r3
 8000c00:	4693      	mov	fp, r2
 8000c02:	f04f 0200 	mov.w	r2, #0
 8000c06:	f04f 0300 	mov.w	r3, #0
 8000c0a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000c0e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000c12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000c16:	460b      	mov	r3, r1
 8000c18:	3307      	adds	r3, #7
 8000c1a:	08db      	lsrs	r3, r3, #3
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	ebad 0d03 	sub.w	sp, sp, r3
 8000c22:	ab02      	add	r3, sp, #8
 8000c24:	3300      	adds	r3, #0
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
	TxBuff[0] = 0x03;
 8000c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	701a      	strb	r2, [r3, #0]
	TxBuff[1] = (addr>>16)&0x0000FF;
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	0c1b      	lsrs	r3, r3, #16
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c36:	705a      	strb	r2, [r3, #1]
	TxBuff[2] = (addr>>8)&0x0000FF;
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	0a1b      	lsrs	r3, r3, #8
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c40:	709a      	strb	r2, [r3, #2]
	TxBuff[3] = (addr)&0x0000FF;
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c48:	70da      	strb	r2, [r3, #3]
	for(int j = 4; j< length; j++){
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8000c4e:	e007      	b.n	8000c60 <ReadMem+0xec>
		TxBuff[j] = '\0';
 8000c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c54:	4413      	add	r3, r2
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]
	for(int j = 4; j< length; j++){
 8000c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8000c60:	8abb      	ldrh	r3, [r7, #20]
 8000c62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000c64:	429a      	cmp	r2, r3
 8000c66:	dbf3      	blt.n	8000c50 <ReadMem+0xdc>
	}
	uint8_t RxBuff[length];
 8000c68:	8ab9      	ldrh	r1, [r7, #20]
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	623b      	str	r3, [r7, #32]
 8000c70:	b28b      	uxth	r3, r1
 8000c72:	2200      	movs	r2, #0
 8000c74:	4698      	mov	r8, r3
 8000c76:	4691      	mov	r9, r2
 8000c78:	f04f 0200 	mov.w	r2, #0
 8000c7c:	f04f 0300 	mov.w	r3, #0
 8000c80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c8c:	b28b      	uxth	r3, r1
 8000c8e:	2200      	movs	r2, #0
 8000c90:	461c      	mov	r4, r3
 8000c92:	4615      	mov	r5, r2
 8000c94:	f04f 0200 	mov.w	r2, #0
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	00eb      	lsls	r3, r5, #3
 8000c9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ca2:	00e2      	lsls	r2, r4, #3
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	3307      	adds	r3, #7
 8000ca8:	08db      	lsrs	r3, r3, #3
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	ebad 0d03 	sub.w	sp, sp, r3
 8000cb0:	ab02      	add	r3, sp, #8
 8000cb2:	3300      	adds	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_WritePin(GPIOE, selectedPin, GPIO_PIN_RESET);
 8000cb6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000cb8:	2200      	movs	r2, #0
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4815      	ldr	r0, [pc, #84]	@ (8000d14 <ReadMem+0x1a0>)
 8000cbe:	f001 fc25 	bl	800250c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)TxBuff, (uint8_t *)RxBuff, length, length);
 8000cc2:	8abb      	ldrh	r3, [r7, #20]
 8000cc4:	8aba      	ldrh	r2, [r7, #20]
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	69fa      	ldr	r2, [r7, #28]
 8000ccc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000cce:	4812      	ldr	r0, [pc, #72]	@ (8000d18 <ReadMem+0x1a4>)
 8000cd0:	f004 fec2 	bl	8005a58 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOE, selectedPin, GPIO_PIN_SET);
 8000cd4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480e      	ldr	r0, [pc, #56]	@ (8000d14 <ReadMem+0x1a0>)
 8000cdc:	f001 fc16 	bl	800250c <HAL_GPIO_WritePin>

	for(int i=4; i<length; i++){
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ce4:	e00b      	b.n	8000cfe <ReadMem+0x18a>
		*(buffer+(i-4)) = RxBuff[i]; //Load all the received data into the proper location
 8000ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ce8:	3b04      	subs	r3, #4
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	4413      	add	r3, r2
 8000cee:	69f9      	ldr	r1, [r7, #28]
 8000cf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000cf2:	440a      	add	r2, r1
 8000cf4:	7812      	ldrb	r2, [r2, #0]
 8000cf6:	701a      	strb	r2, [r3, #0]
	for(int i=4; i<length; i++){
 8000cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cfe:	8abb      	ldrh	r3, [r7, #20]
 8000d00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d02:	429a      	cmp	r2, r3
 8000d04:	dbef      	blt.n	8000ce6 <ReadMem+0x172>
 8000d06:	46b5      	mov	sp, r6
	}

}
 8000d08:	bf00      	nop
 8000d0a:	373c      	adds	r7, #60	@ 0x3c
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d12:	bf00      	nop
 8000d14:	48001000 	.word	0x48001000
 8000d18:	200001c0 	.word	0x200001c0

08000d1c <MemTest>:



// this is the Memory test for 4Mb MR25H40MDF
void MemTest(int chip, uint32_t* fails, unsigned long* num_reads){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b090      	sub	sp, #64	@ 0x40
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]

    uint8_t zero = 0;                 //Maybe make a 6-deep array of ints to track the failures in each march element?   //failure is redundant
 8000d28:	2300      	movs	r3, #0
 8000d2a:	75bb      	strb	r3, [r7, #22]
    uint8_t one = 255;
 8000d2c:	23ff      	movs	r3, #255	@ 0xff
 8000d2e:	75fb      	strb	r3, [r7, #23]
    uint8_t readByte = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	757b      	strb	r3, [r7, #21]
    uint8_t writeByte = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	753b      	strb	r3, [r7, #20]

    currState = 0;
 8000d38:	4b9a      	ldr	r3, [pc, #616]	@ (8000fa4 <MemTest+0x288>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&hlpuart1,(uint8_t*)"currState 0\r\n",13,50);
 8000d3e:	2332      	movs	r3, #50	@ 0x32
 8000d40:	220d      	movs	r2, #13
 8000d42:	4999      	ldr	r1, [pc, #612]	@ (8000fa8 <MemTest+0x28c>)
 8000d44:	4899      	ldr	r0, [pc, #612]	@ (8000fac <MemTest+0x290>)
 8000d46:	f005 fa5b 	bl	8006200 <HAL_UART_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2180      	movs	r1, #128	@ 0x80
 8000d4e:	4898      	ldr	r0, [pc, #608]	@ (8000fb0 <MemTest+0x294>)
 8000d50:	f001 fbdc 	bl	800250c <HAL_GPIO_WritePin>
    //UP(w0);
    for(int x=0; x<524288; x++){ //Loop through each memory location
 8000d54:	2300      	movs	r3, #0
 8000d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d58:	e00a      	b.n	8000d70 <MemTest+0x54>
    	WriteMem(chip, x, 1, &zero); //Write a 0 at each address                                     // the final 0 is suspicious, it may cause error bc it should be a pointer
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	b2d8      	uxtb	r0, r3
 8000d5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000d60:	f107 0316 	add.w	r3, r7, #22
 8000d64:	2201      	movs	r2, #1
 8000d66:	f7ff fe6d 	bl	8000a44 <WriteMem>
    for(int x=0; x<524288; x++){ //Loop through each memory location
 8000d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d72:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8000d76:	dbf0      	blt.n	8000d5a <MemTest+0x3e>
    }

    currState = 1;
 8000d78:	4b8a      	ldr	r3, [pc, #552]	@ (8000fa4 <MemTest+0x288>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&hlpuart1,(uint8_t*)"currState 1\r\n",13,50);
 8000d7e:	2332      	movs	r3, #50	@ 0x32
 8000d80:	220d      	movs	r2, #13
 8000d82:	498c      	ldr	r1, [pc, #560]	@ (8000fb4 <MemTest+0x298>)
 8000d84:	4889      	ldr	r0, [pc, #548]	@ (8000fac <MemTest+0x290>)
 8000d86:	f005 fa3b 	bl	8006200 <HAL_UART_Transmit>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2180      	movs	r1, #128	@ 0x80
 8000d8e:	488a      	ldr	r0, [pc, #552]	@ (8000fb8 <MemTest+0x29c>)
 8000d90:	f001 fbbc 	bl	800250c <HAL_GPIO_WritePin>
    //UP(r0, w1);
    for(int y=0; y<524288; y++){ 		//Loop through each memory location
 8000d94:	2300      	movs	r3, #0
 8000d96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000d98:	e03d      	b.n	8000e16 <MemTest+0xfa>
    	for(int z=0; z<8; z++){ 		//Read 0, write 1 at each bit
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d9e:	e034      	b.n	8000e0a <MemTest+0xee>
    		ReadMem(chip, y, 1, &readByte);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	b2d8      	uxtb	r0, r3
 8000da4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000da6:	f107 0315 	add.w	r3, r7, #21
 8000daa:	2201      	movs	r2, #1
 8000dac:	f7ff fee2 	bl	8000b74 <ReadMem>

    		(*num_reads) ++;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	1c5a      	adds	r2, r3, #1
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	601a      	str	r2, [r3, #0]
    		writeByte = readByte;
 8000dba:	7d7b      	ldrb	r3, [r7, #21]
 8000dbc:	753b      	strb	r3, [r7, #20]
    		writeByte |= (0x01<<(7-z)); //Copy the byte, except we set the MSb to 1
 8000dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dc0:	f1c3 0307 	rsb	r3, r3, #7
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	b25a      	sxtb	r2, r3
 8000dcc:	7d3b      	ldrb	r3, [r7, #20]
 8000dce:	b25b      	sxtb	r3, r3
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	b25b      	sxtb	r3, r3
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	753b      	strb	r3, [r7, #20]
    		*fails += (readByte>>(7-z))&0x01; //Read the MSb and if it's not 0, increment failures
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	7d7b      	ldrb	r3, [r7, #21]
 8000dde:	4619      	mov	r1, r3
 8000de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	fa41 f303 	asr.w	r3, r1, r3
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	441a      	add	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	601a      	str	r2, [r3, #0]

        	WriteMem(chip, y, 1, &writeByte); //Read 0, write 1 at each bit
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	b2d8      	uxtb	r0, r3
 8000df8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f7ff fe20 	bl	8000a44 <WriteMem>
    	for(int z=0; z<8; z++){ 		//Read 0, write 1 at each bit
 8000e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e06:	3301      	adds	r3, #1
 8000e08:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e0c:	2b07      	cmp	r3, #7
 8000e0e:	ddc7      	ble.n	8000da0 <MemTest+0x84>
    for(int y=0; y<524288; y++){ 		//Loop through each memory location
 8000e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e12:	3301      	adds	r3, #1
 8000e14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e18:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8000e1c:	dbbd      	blt.n	8000d9a <MemTest+0x7e>
    	}
    }

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2180      	movs	r1, #128	@ 0x80
 8000e22:	4865      	ldr	r0, [pc, #404]	@ (8000fb8 <MemTest+0x29c>)
 8000e24:	f001 fb72 	bl	800250c <HAL_GPIO_WritePin>


    currState = 2;
 8000e28:	4b5e      	ldr	r3, [pc, #376]	@ (8000fa4 <MemTest+0x288>)
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&hlpuart1,(uint8_t*)"currState 2\r\n",13,50);
 8000e2e:	2332      	movs	r3, #50	@ 0x32
 8000e30:	220d      	movs	r2, #13
 8000e32:	4962      	ldr	r1, [pc, #392]	@ (8000fbc <MemTest+0x2a0>)
 8000e34:	485d      	ldr	r0, [pc, #372]	@ (8000fac <MemTest+0x290>)
 8000e36:	f005 f9e3 	bl	8006200 <HAL_UART_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e40:	485b      	ldr	r0, [pc, #364]	@ (8000fb0 <MemTest+0x294>)
 8000e42:	f001 fb63 	bl	800250c <HAL_GPIO_WritePin>
    //UP(r1, w0);
    for(int y=0; y<524288; y++){ 		//Loop through each memory location
 8000e46:	2300      	movs	r3, #0
 8000e48:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e4a:	e03f      	b.n	8000ecc <MemTest+0x1b0>
    	for(int z=0; z<8; z++){ 		//Read 1, write 0 at each bit
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e50:	e036      	b.n	8000ec0 <MemTest+0x1a4>
    		ReadMem(chip, y, 1, &readByte);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	b2d8      	uxtb	r0, r3
 8000e56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000e58:	f107 0315 	add.w	r3, r7, #21
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f7ff fe89 	bl	8000b74 <ReadMem>

    		(*num_reads) ++;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	601a      	str	r2, [r3, #0]

    		writeByte = readByte;
 8000e6c:	7d7b      	ldrb	r3, [r7, #21]
 8000e6e:	753b      	strb	r3, [r7, #20]
    		writeByte &= ~(0x01<<(7-z)); //Copy the byte, except we set the MSb to 0
 8000e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e72:	f1c3 0307 	rsb	r3, r3, #7
 8000e76:	2201      	movs	r2, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	b25b      	sxtb	r3, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	b25a      	sxtb	r2, r3
 8000e82:	7d3b      	ldrb	r3, [r7, #20]
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	4013      	ands	r3, r2
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	753b      	strb	r3, [r7, #20]
    		*fails += ((~readByte)>>(7-z))&0x01; //Read the MSb and if it's not 1, increment failures
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	7d7b      	ldrb	r3, [r7, #21]
 8000e94:	43d9      	mvns	r1, r3
 8000e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e98:	f1c3 0307 	rsb	r3, r3, #7
 8000e9c:	fa41 f303 	asr.w	r3, r1, r3
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	441a      	add	r2, r3
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	601a      	str	r2, [r3, #0]
        	WriteMem(chip, y, 1, &writeByte);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	b2d8      	uxtb	r0, r3
 8000eae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f7ff fdc5 	bl	8000a44 <WriteMem>
    	for(int z=0; z<8; z++){ 		//Read 1, write 0 at each bit
 8000eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ec2:	2b07      	cmp	r3, #7
 8000ec4:	ddc5      	ble.n	8000e52 <MemTest+0x136>
    for(int y=0; y<524288; y++){ 		//Loop through each memory location
 8000ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ec8:	3301      	adds	r3, #1
 8000eca:	633b      	str	r3, [r7, #48]	@ 0x30
 8000ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ece:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8000ed2:	dbbb      	blt.n	8000e4c <MemTest+0x130>

    	}
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000eda:	4835      	ldr	r0, [pc, #212]	@ (8000fb0 <MemTest+0x294>)
 8000edc:	f001 fb16 	bl	800250c <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2180      	movs	r1, #128	@ 0x80
 8000ee4:	4832      	ldr	r0, [pc, #200]	@ (8000fb0 <MemTest+0x294>)
 8000ee6:	f001 fb11 	bl	800250c <HAL_GPIO_WritePin>

    currState = 3;
 8000eea:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa4 <MemTest+0x288>)
 8000eec:	2203      	movs	r2, #3
 8000eee:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2180      	movs	r1, #128	@ 0x80
 8000ef4:	4830      	ldr	r0, [pc, #192]	@ (8000fb8 <MemTest+0x29c>)
 8000ef6:	f001 fb09 	bl	800250c <HAL_GPIO_WritePin>
    //DOWN(r0, w1);
    for(int y=524287; y>=0; y--){ 		//Loop through each memory location
 8000efa:	4b31      	ldr	r3, [pc, #196]	@ (8000fc0 <MemTest+0x2a4>)
 8000efc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000efe:	e039      	b.n	8000f74 <MemTest+0x258>
    	for(int z=0; z<8; z++){ 		//Read 0, write 1 at each bit
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f04:	e030      	b.n	8000f68 <MemTest+0x24c>
    		ReadMem(chip, y, 1, &readByte);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	b2d8      	uxtb	r0, r3
 8000f0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000f0c:	f107 0315 	add.w	r3, r7, #21
 8000f10:	2201      	movs	r2, #1
 8000f12:	f7ff fe2f 	bl	8000b74 <ReadMem>

    		(*num_reads) ++;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	601a      	str	r2, [r3, #0]

    		writeByte = readByte;
 8000f20:	7d7b      	ldrb	r3, [r7, #21]
 8000f22:	753b      	strb	r3, [r7, #20]
    		writeByte |= (0x01<<z); //Copy the byte, except we set the LSb to 1
 8000f24:	2201      	movs	r2, #1
 8000f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	b25a      	sxtb	r2, r3
 8000f2e:	7d3b      	ldrb	r3, [r7, #20]
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	4313      	orrs	r3, r2
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	753b      	strb	r3, [r7, #20]
    		*fails += (readByte>>z)&0x01; //Read the LSb and if it's not 0, increment failures
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	7d7b      	ldrb	r3, [r7, #21]
 8000f40:	4619      	mov	r1, r3
 8000f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f44:	fa41 f303 	asr.w	r3, r1, r3
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	441a      	add	r2, r3
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	601a      	str	r2, [r3, #0]
        	WriteMem(chip, y, 1, &writeByte);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	b2d8      	uxtb	r0, r3
 8000f56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f7ff fd71 	bl	8000a44 <WriteMem>
    	for(int z=0; z<8; z++){ 		//Read 0, write 1 at each bit
 8000f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f64:	3301      	adds	r3, #1
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f6a:	2b07      	cmp	r3, #7
 8000f6c:	ddcb      	ble.n	8000f06 <MemTest+0x1ea>
    for(int y=524287; y>=0; y--){ 		//Loop through each memory location
 8000f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f70:	3b01      	subs	r3, #1
 8000f72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	dac2      	bge.n	8000f00 <MemTest+0x1e4>
    	}
    }
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2180      	movs	r1, #128	@ 0x80
 8000f7e:	480e      	ldr	r0, [pc, #56]	@ (8000fb8 <MemTest+0x29c>)
 8000f80:	f001 fac4 	bl	800250c <HAL_GPIO_WritePin>

    currState = 4;
 8000f84:	4b07      	ldr	r3, [pc, #28]	@ (8000fa4 <MemTest+0x288>)
 8000f86:	2204      	movs	r2, #4
 8000f88:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f90:	4807      	ldr	r0, [pc, #28]	@ (8000fb0 <MemTest+0x294>)
 8000f92:	f001 fabb 	bl	800250c <HAL_GPIO_WritePin>
    //DOWN(r1, w0);
    for(int y=524287; y>=0; y--){ 		//Loop through each memory location
 8000f96:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <MemTest+0x2a4>)
 8000f98:	623b      	str	r3, [r7, #32]
 8000f9a:	e04c      	b.n	8001036 <MemTest+0x31a>
    	for(int z=0; z<8; z++){			//Read 1, write 0 at each bit
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e043      	b.n	800102a <MemTest+0x30e>
 8000fa2:	bf00      	nop
 8000fa4:	20000245 	.word	0x20000245
 8000fa8:	0800d050 	.word	0x0800d050
 8000fac:	200000b0 	.word	0x200000b0
 8000fb0:	48000400 	.word	0x48000400
 8000fb4:	0800d060 	.word	0x0800d060
 8000fb8:	48000800 	.word	0x48000800
 8000fbc:	0800d070 	.word	0x0800d070
 8000fc0:	0007ffff 	.word	0x0007ffff
    		ReadMem(chip, y, 1, &readByte);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	b2d8      	uxtb	r0, r3
 8000fc8:	6a39      	ldr	r1, [r7, #32]
 8000fca:	f107 0315 	add.w	r3, r7, #21
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f7ff fdd0 	bl	8000b74 <ReadMem>

    		(*num_reads) ++;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	601a      	str	r2, [r3, #0]

    		writeByte = readByte;
 8000fde:	7d7b      	ldrb	r3, [r7, #21]
 8000fe0:	753b      	strb	r3, [r7, #20]
    		writeByte &= ~(0x01<<z); //Copy the byte, except we set the LSb to 0
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	b25b      	sxtb	r3, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	b25a      	sxtb	r2, r3
 8000ff0:	7d3b      	ldrb	r3, [r7, #20]
 8000ff2:	b25b      	sxtb	r3, r3
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	753b      	strb	r3, [r7, #20]
    		*fails += ((~readByte)>>z)&0x01; //Read the LSb and if it's not 1, increment failures
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	7d7b      	ldrb	r3, [r7, #21]
 8001002:	43d9      	mvns	r1, r3
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	fa41 f303 	asr.w	r3, r1, r3
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	441a      	add	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	601a      	str	r2, [r3, #0]
        	WriteMem(chip, y, 1, &writeByte);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	b2d8      	uxtb	r0, r3
 8001018:	6a39      	ldr	r1, [r7, #32]
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	2201      	movs	r2, #1
 8001020:	f7ff fd10 	bl	8000a44 <WriteMem>
    	for(int z=0; z<8; z++){			//Read 1, write 0 at each bit
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	3301      	adds	r3, #1
 8001028:	61fb      	str	r3, [r7, #28]
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	2b07      	cmp	r3, #7
 800102e:	ddc9      	ble.n	8000fc4 <MemTest+0x2a8>
    for(int y=524287; y>=0; y--){ 		//Loop through each memory location
 8001030:	6a3b      	ldr	r3, [r7, #32]
 8001032:	3b01      	subs	r3, #1
 8001034:	623b      	str	r3, [r7, #32]
 8001036:	6a3b      	ldr	r3, [r7, #32]
 8001038:	2b00      	cmp	r3, #0
 800103a:	daaf      	bge.n	8000f9c <MemTest+0x280>
    	}
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001042:	4814      	ldr	r0, [pc, #80]	@ (8001094 <MemTest+0x378>)
 8001044:	f001 fa62 	bl	800250c <HAL_GPIO_WritePin>

    currState = 5;
 8001048:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <MemTest+0x37c>)
 800104a:	2205      	movs	r2, #5
 800104c:	701a      	strb	r2, [r3, #0]
    //DOWN(r0);
    for(int y=524287; y>=0; y--){ 		//Loop through each memory location
 800104e:	4b13      	ldr	r3, [pc, #76]	@ (800109c <MemTest+0x380>)
 8001050:	61bb      	str	r3, [r7, #24]
 8001052:	e017      	b.n	8001084 <MemTest+0x368>
    	ReadMem(chip, y, 1, &readByte);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	b2d8      	uxtb	r0, r3
 8001058:	69b9      	ldr	r1, [r7, #24]
 800105a:	f107 0315 	add.w	r3, r7, #21
 800105e:	2201      	movs	r2, #1
 8001060:	f7ff fd88 	bl	8000b74 <ReadMem>

    	(*num_reads)++;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	601a      	str	r2, [r3, #0]

    	if(readByte>0){
 800106e:	7d7b      	ldrb	r3, [r7, #21]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d004      	beq.n	800107e <MemTest+0x362>
    		(*fails)++;					//If any bytes are non-zero, increment failures
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	601a      	str	r2, [r3, #0]
    for(int y=524287; y>=0; y--){ 		//Loop through each memory location
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	3b01      	subs	r3, #1
 8001082:	61bb      	str	r3, [r7, #24]
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	2b00      	cmp	r3, #0
 8001088:	dae4      	bge.n	8001054 <MemTest+0x338>
    	}
    }

    return;
 800108a:	bf00      	nop
}
 800108c:	3740      	adds	r7, #64	@ 0x40
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	48000400 	.word	0x48000400
 8001098:	20000245 	.word	0x20000245
 800109c:	0007ffff 	.word	0x0007ffff

080010a0 <MemTest_16>:


// Memory test for memory with 16M memory (The remaining three MRAMs)
void MemTest_16(int chip, uint32_t* fails, unsigned long* num_reads){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b090      	sub	sp, #64	@ 0x40
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]

    uint8_t zero = 0;                 //Maybe make a 6-deep array of ints to track the failures in each march element?   //failure is redundant
 80010ac:	2300      	movs	r3, #0
 80010ae:	75fb      	strb	r3, [r7, #23]
    uint8_t readByte = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	75bb      	strb	r3, [r7, #22]
    uint8_t writeByte = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	757b      	strb	r3, [r7, #21]

    currState = 0;
 80010b8:	4b91      	ldr	r3, [pc, #580]	@ (8001300 <MemTest_16+0x260>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80010be:	2201      	movs	r2, #1
 80010c0:	2180      	movs	r1, #128	@ 0x80
 80010c2:	4890      	ldr	r0, [pc, #576]	@ (8001304 <MemTest_16+0x264>)
 80010c4:	f001 fa22 	bl	800250c <HAL_GPIO_WritePin>
    //UP(w0);
    for(int x=0; x<2097152; x++){ //Loop through each memory location
 80010c8:	2300      	movs	r3, #0
 80010ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80010cc:	e00a      	b.n	80010e4 <MemTest_16+0x44>
    	WriteMem(chip, x, 1, &zero); //Write a 0 at each address                                     // the final 0 is suspicious, it may cause error bc it should be a pointer
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	b2d8      	uxtb	r0, r3
 80010d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80010d4:	f107 0317 	add.w	r3, r7, #23
 80010d8:	2201      	movs	r2, #1
 80010da:	f7ff fcb3 	bl	8000a44 <WriteMem>
    for(int x=0; x<2097152; x++){ //Loop through each memory location
 80010de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010e0:	3301      	adds	r3, #1
 80010e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80010e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80010ea:	dbf0      	blt.n	80010ce <MemTest_16+0x2e>
    sprintf(data, "read value:\t\t%u\r\n", readByte);
    HAL_UART_Transmit(&hlpuart1,data,sizeof(data),100);*/



    currState = 1;
 80010ec:	4b84      	ldr	r3, [pc, #528]	@ (8001300 <MemTest_16+0x260>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	2180      	movs	r1, #128	@ 0x80
 80010f6:	4884      	ldr	r0, [pc, #528]	@ (8001308 <MemTest_16+0x268>)
 80010f8:	f001 fa08 	bl	800250c <HAL_GPIO_WritePin>
    //UP(r0, w1);
    for(int y=0; y<2097152; y++){ 		//Loop through each memory location
 80010fc:	2300      	movs	r3, #0
 80010fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001100:	e03d      	b.n	800117e <MemTest_16+0xde>
    	for(int z=0; z<8; z++){ 		//Read 0, write 1 at each bit
 8001102:	2300      	movs	r3, #0
 8001104:	637b      	str	r3, [r7, #52]	@ 0x34
 8001106:	e034      	b.n	8001172 <MemTest_16+0xd2>
    		ReadMem(chip, y, 1, &readByte);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	b2d8      	uxtb	r0, r3
 800110c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800110e:	f107 0316 	add.w	r3, r7, #22
 8001112:	2201      	movs	r2, #1
 8001114:	f7ff fd2e 	bl	8000b74 <ReadMem>
    		(*num_reads)++;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	1c5a      	adds	r2, r3, #1
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	601a      	str	r2, [r3, #0]
    		writeByte = readByte;
 8001122:	7dbb      	ldrb	r3, [r7, #22]
 8001124:	757b      	strb	r3, [r7, #21]
    		writeByte |= (0x01<<(7-z)); //Copy the byte, except we set the MSb to 1
 8001126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001128:	f1c3 0307 	rsb	r3, r3, #7
 800112c:	2201      	movs	r2, #1
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	b25a      	sxtb	r2, r3
 8001134:	7d7b      	ldrb	r3, [r7, #21]
 8001136:	b25b      	sxtb	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b25b      	sxtb	r3, r3
 800113c:	b2db      	uxtb	r3, r3
 800113e:	757b      	strb	r3, [r7, #21]
    		*fails += (readByte>>(7-z))&0x01; //Read the MSb and if it's not 0, increment failures
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	7dbb      	ldrb	r3, [r7, #22]
 8001146:	4619      	mov	r1, r3
 8001148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800114a:	f1c3 0307 	rsb	r3, r3, #7
 800114e:	fa41 f303 	asr.w	r3, r1, r3
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	441a      	add	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	601a      	str	r2, [r3, #0]
        	WriteMem(chip, y, 1, &writeByte); //Read 0, write 1 at each bit
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	b2d8      	uxtb	r0, r3
 8001160:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001162:	f107 0315 	add.w	r3, r7, #21
 8001166:	2201      	movs	r2, #1
 8001168:	f7ff fc6c 	bl	8000a44 <WriteMem>
    	for(int z=0; z<8; z++){ 		//Read 0, write 1 at each bit
 800116c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800116e:	3301      	adds	r3, #1
 8001170:	637b      	str	r3, [r7, #52]	@ 0x34
 8001172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001174:	2b07      	cmp	r3, #7
 8001176:	ddc7      	ble.n	8001108 <MemTest_16+0x68>
    for(int y=0; y<2097152; y++){ 		//Loop through each memory location
 8001178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800117a:	3301      	adds	r3, #1
 800117c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800117e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001180:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001184:	dbbd      	blt.n	8001102 <MemTest_16+0x62>
    	}
    }
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2180      	movs	r1, #128	@ 0x80
 800118a:	485f      	ldr	r0, [pc, #380]	@ (8001308 <MemTest_16+0x268>)
 800118c:	f001 f9be 	bl	800250c <HAL_GPIO_WritePin>


    currState = 2;
 8001190:	4b5b      	ldr	r3, [pc, #364]	@ (8001300 <MemTest_16+0x260>)
 8001192:	2202      	movs	r2, #2
 8001194:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001196:	2201      	movs	r2, #1
 8001198:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800119c:	4859      	ldr	r0, [pc, #356]	@ (8001304 <MemTest_16+0x264>)
 800119e:	f001 f9b5 	bl	800250c <HAL_GPIO_WritePin>
    //UP(r1, w0);
    for(int y=0; y<2097152; y++){ 		//Loop through each memory location
 80011a2:	2300      	movs	r3, #0
 80011a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80011a6:	e03f      	b.n	8001228 <MemTest_16+0x188>
    	for(int z=0; z<8; z++){ 		//Read 1, write 0 at each bit
 80011a8:	2300      	movs	r3, #0
 80011aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011ac:	e036      	b.n	800121c <MemTest_16+0x17c>
    		ReadMem(chip, y, 1, &readByte);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	b2d8      	uxtb	r0, r3
 80011b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80011b4:	f107 0316 	add.w	r3, r7, #22
 80011b8:	2201      	movs	r2, #1
 80011ba:	f7ff fcdb 	bl	8000b74 <ReadMem>
    		(*num_reads)++;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	601a      	str	r2, [r3, #0]
    		writeByte = readByte;
 80011c8:	7dbb      	ldrb	r3, [r7, #22]
 80011ca:	757b      	strb	r3, [r7, #21]
    		writeByte &= ~(0x01<<(7-z)); //Copy the byte, except we set the MSb to 0
 80011cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	2201      	movs	r2, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	b25a      	sxtb	r2, r3
 80011de:	7d7b      	ldrb	r3, [r7, #21]
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	4013      	ands	r3, r2
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	757b      	strb	r3, [r7, #21]
    		*fails += ((~readByte)>>(7-z))&0x01; //Read the MSb and if it's not 1, increment failures
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	7dbb      	ldrb	r3, [r7, #22]
 80011f0:	43d9      	mvns	r1, r3
 80011f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f4:	f1c3 0307 	rsb	r3, r3, #7
 80011f8:	fa41 f303 	asr.w	r3, r1, r3
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	441a      	add	r2, r3
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	601a      	str	r2, [r3, #0]
        	WriteMem(chip, y, 1, &writeByte);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	b2d8      	uxtb	r0, r3
 800120a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800120c:	f107 0315 	add.w	r3, r7, #21
 8001210:	2201      	movs	r2, #1
 8001212:	f7ff fc17 	bl	8000a44 <WriteMem>
    	for(int z=0; z<8; z++){ 		//Read 1, write 0 at each bit
 8001216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001218:	3301      	adds	r3, #1
 800121a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800121c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800121e:	2b07      	cmp	r3, #7
 8001220:	ddc5      	ble.n	80011ae <MemTest_16+0x10e>
    for(int y=0; y<2097152; y++){ 		//Loop through each memory location
 8001222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001224:	3301      	adds	r3, #1
 8001226:	633b      	str	r3, [r7, #48]	@ 0x30
 8001228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800122a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800122e:	dbbb      	blt.n	80011a8 <MemTest_16+0x108>
    	}
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001236:	4833      	ldr	r0, [pc, #204]	@ (8001304 <MemTest_16+0x264>)
 8001238:	f001 f968 	bl	800250c <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	2180      	movs	r1, #128	@ 0x80
 8001240:	4830      	ldr	r0, [pc, #192]	@ (8001304 <MemTest_16+0x264>)
 8001242:	f001 f963 	bl	800250c <HAL_GPIO_WritePin>

    currState = 3;
 8001246:	4b2e      	ldr	r3, [pc, #184]	@ (8001300 <MemTest_16+0x260>)
 8001248:	2203      	movs	r2, #3
 800124a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800124c:	2201      	movs	r2, #1
 800124e:	2180      	movs	r1, #128	@ 0x80
 8001250:	482d      	ldr	r0, [pc, #180]	@ (8001308 <MemTest_16+0x268>)
 8001252:	f001 f95b 	bl	800250c <HAL_GPIO_WritePin>
    //DOWN(r0, w1);
    for(int y=2097151; y>=0; y--){ 		//Loop through each memory location
 8001256:	4b2d      	ldr	r3, [pc, #180]	@ (800130c <MemTest_16+0x26c>)
 8001258:	62bb      	str	r3, [r7, #40]	@ 0x28
 800125a:	e039      	b.n	80012d0 <MemTest_16+0x230>
    	for(int z=0; z<8; z++){ 		//Read 0, write 1 at each bit
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001260:	e030      	b.n	80012c4 <MemTest_16+0x224>
    		ReadMem(chip, y, 1, &readByte);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	b2d8      	uxtb	r0, r3
 8001266:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001268:	f107 0316 	add.w	r3, r7, #22
 800126c:	2201      	movs	r2, #1
 800126e:	f7ff fc81 	bl	8000b74 <ReadMem>
    		(*num_reads)++;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	601a      	str	r2, [r3, #0]
    		writeByte = readByte;
 800127c:	7dbb      	ldrb	r3, [r7, #22]
 800127e:	757b      	strb	r3, [r7, #21]
    		writeByte |= (0x01<<z); //Copy the byte, except we set the LSb to 1
 8001280:	2201      	movs	r2, #1
 8001282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	b25a      	sxtb	r2, r3
 800128a:	7d7b      	ldrb	r3, [r7, #21]
 800128c:	b25b      	sxtb	r3, r3
 800128e:	4313      	orrs	r3, r2
 8001290:	b25b      	sxtb	r3, r3
 8001292:	b2db      	uxtb	r3, r3
 8001294:	757b      	strb	r3, [r7, #21]
    		*fails += (readByte>>z)&0x01; //Read the LSb and if it's not 0, increment failures
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	7dbb      	ldrb	r3, [r7, #22]
 800129c:	4619      	mov	r1, r3
 800129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a0:	fa41 f303 	asr.w	r3, r1, r3
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	441a      	add	r2, r3
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	601a      	str	r2, [r3, #0]
        	WriteMem(chip, y, 1, &writeByte);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	b2d8      	uxtb	r0, r3
 80012b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80012b4:	f107 0315 	add.w	r3, r7, #21
 80012b8:	2201      	movs	r2, #1
 80012ba:	f7ff fbc3 	bl	8000a44 <WriteMem>
    	for(int z=0; z<8; z++){ 		//Read 0, write 1 at each bit
 80012be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c0:	3301      	adds	r3, #1
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80012c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c6:	2b07      	cmp	r3, #7
 80012c8:	ddcb      	ble.n	8001262 <MemTest_16+0x1c2>
    for(int y=2097151; y>=0; y--){ 		//Loop through each memory location
 80012ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012cc:	3b01      	subs	r3, #1
 80012ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	dac2      	bge.n	800125c <MemTest_16+0x1bc>

    	}
    }
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2180      	movs	r1, #128	@ 0x80
 80012da:	480b      	ldr	r0, [pc, #44]	@ (8001308 <MemTest_16+0x268>)
 80012dc:	f001 f916 	bl	800250c <HAL_GPIO_WritePin>

    currState = 4;
 80012e0:	4b07      	ldr	r3, [pc, #28]	@ (8001300 <MemTest_16+0x260>)
 80012e2:	2204      	movs	r2, #4
 80012e4:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80012e6:	2201      	movs	r2, #1
 80012e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012ec:	4805      	ldr	r0, [pc, #20]	@ (8001304 <MemTest_16+0x264>)
 80012ee:	f001 f90d 	bl	800250c <HAL_GPIO_WritePin>
    //DOWN(r1, w0);
    for(int y=2097151; y>=0; y--){ 		//Loop through each memory location
 80012f2:	4b06      	ldr	r3, [pc, #24]	@ (800130c <MemTest_16+0x26c>)
 80012f4:	623b      	str	r3, [r7, #32]
 80012f6:	e044      	b.n	8001382 <MemTest_16+0x2e2>
    	for(int z=0; z<8; z++){			//Read 1, write 0 at each bit
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	e03b      	b.n	8001376 <MemTest_16+0x2d6>
 80012fe:	bf00      	nop
 8001300:	20000245 	.word	0x20000245
 8001304:	48000400 	.word	0x48000400
 8001308:	48000800 	.word	0x48000800
 800130c:	001fffff 	.word	0x001fffff
    		ReadMem(chip, y, 1, &readByte);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	b2d8      	uxtb	r0, r3
 8001314:	6a39      	ldr	r1, [r7, #32]
 8001316:	f107 0316 	add.w	r3, r7, #22
 800131a:	2201      	movs	r2, #1
 800131c:	f7ff fc2a 	bl	8000b74 <ReadMem>
    		(*num_reads)++;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	1c5a      	adds	r2, r3, #1
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	601a      	str	r2, [r3, #0]
    		writeByte = readByte;
 800132a:	7dbb      	ldrb	r3, [r7, #22]
 800132c:	757b      	strb	r3, [r7, #21]
    		writeByte &= ~(0x01<<z); //Copy the byte, except we set the LSb to 0
 800132e:	2201      	movs	r2, #1
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	b25b      	sxtb	r3, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	b25a      	sxtb	r2, r3
 800133c:	7d7b      	ldrb	r3, [r7, #21]
 800133e:	b25b      	sxtb	r3, r3
 8001340:	4013      	ands	r3, r2
 8001342:	b25b      	sxtb	r3, r3
 8001344:	b2db      	uxtb	r3, r3
 8001346:	757b      	strb	r3, [r7, #21]
    		*fails += ((~readByte)>>z)&0x01; //Read the LSb and if it's not 1, increment failures
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	7dbb      	ldrb	r3, [r7, #22]
 800134e:	43d9      	mvns	r1, r3
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	fa41 f303 	asr.w	r3, r1, r3
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	441a      	add	r2, r3
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	601a      	str	r2, [r3, #0]
        	WriteMem(chip, y, 1, &writeByte);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	b2d8      	uxtb	r0, r3
 8001364:	6a39      	ldr	r1, [r7, #32]
 8001366:	f107 0315 	add.w	r3, r7, #21
 800136a:	2201      	movs	r2, #1
 800136c:	f7ff fb6a 	bl	8000a44 <WriteMem>
    	for(int z=0; z<8; z++){			//Read 1, write 0 at each bit
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	3301      	adds	r3, #1
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	2b07      	cmp	r3, #7
 800137a:	ddc9      	ble.n	8001310 <MemTest_16+0x270>
    for(int y=2097151; y>=0; y--){ 		//Loop through each memory location
 800137c:	6a3b      	ldr	r3, [r7, #32]
 800137e:	3b01      	subs	r3, #1
 8001380:	623b      	str	r3, [r7, #32]
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	2b00      	cmp	r3, #0
 8001386:	dab7      	bge.n	80012f8 <MemTest_16+0x258>
    	}
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800138e:	4814      	ldr	r0, [pc, #80]	@ (80013e0 <MemTest_16+0x340>)
 8001390:	f001 f8bc 	bl	800250c <HAL_GPIO_WritePin>

    currState = 5;
 8001394:	4b13      	ldr	r3, [pc, #76]	@ (80013e4 <MemTest_16+0x344>)
 8001396:	2205      	movs	r2, #5
 8001398:	701a      	strb	r2, [r3, #0]
    //DOWN(r0);
    for(int y=2097151; y>=0; y--){ 		//Loop through each memory location
 800139a:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <MemTest_16+0x348>)
 800139c:	61bb      	str	r3, [r7, #24]
 800139e:	e017      	b.n	80013d0 <MemTest_16+0x330>
    	ReadMem(chip, y, 1, &readByte);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	b2d8      	uxtb	r0, r3
 80013a4:	69b9      	ldr	r1, [r7, #24]
 80013a6:	f107 0316 	add.w	r3, r7, #22
 80013aa:	2201      	movs	r2, #1
 80013ac:	f7ff fbe2 	bl	8000b74 <ReadMem>
    	(*num_reads)++;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	1c5a      	adds	r2, r3, #1
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	601a      	str	r2, [r3, #0]
    	if(readByte>0){
 80013ba:	7dbb      	ldrb	r3, [r7, #22]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d004      	beq.n	80013ca <MemTest_16+0x32a>
    		(*fails)++;					//If any bytes are non-zero, increment failures
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	1c5a      	adds	r2, r3, #1
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	601a      	str	r2, [r3, #0]
    for(int y=2097151; y>=0; y--){ 		//Loop through each memory location
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	61bb      	str	r3, [r7, #24]
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	dae4      	bge.n	80013a0 <MemTest_16+0x300>
    	}
    }

    return;
 80013d6:	bf00      	nop

}
 80013d8:	3740      	adds	r7, #64	@ 0x40
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	48000400 	.word	0x48000400
 80013e4:	20000245 	.word	0x20000245
 80013e8:	001fffff 	.word	0x001fffff

080013ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f2:	f000 fcd0 	bl	8001d96 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f6:	f000 f8e1 	bl	80015bc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013fa:	f000 f9dd 	bl	80017b8 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 80013fe:	f00a fd79 	bl	800bef4 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8001402:	f000 f96b 	bl	80016dc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001406:	f000 f999 	bl	800173c <MX_SPI1_Init>
  MX_LPUART1_UART_Init();
 800140a:	f000 f93b 	bl	8001684 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800140e:	4b57      	ldr	r3, [pc, #348]	@ (800156c <main+0x180>)
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	4a56      	ldr	r2, [pc, #344]	@ (800156c <main+0x180>)
 8001414:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001418:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800141a:	4b55      	ldr	r3, [pc, #340]	@ (8001570 <main+0x184>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a54      	ldr	r2, [pc, #336]	@ (8001570 <main+0x184>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT =0;
 8001426:	4b52      	ldr	r3, [pc, #328]	@ (8001570 <main+0x184>)
 8001428:	2200      	movs	r2, #0
 800142a:	605a      	str	r2, [r3, #4]



  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET); //Set WRite ENable
 800142c:	2200      	movs	r2, #0
 800142e:	f44f 4154 	mov.w	r1, #54272	@ 0xd400
 8001432:	4850      	ldr	r0, [pc, #320]	@ (8001574 <main+0x188>)
 8001434:	f001 f86a 	bl	800250c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &wren, 1, 10); // to enable write on the MRAM chip
 8001438:	230a      	movs	r3, #10
 800143a:	2201      	movs	r2, #1
 800143c:	494e      	ldr	r1, [pc, #312]	@ (8001578 <main+0x18c>)
 800143e:	484f      	ldr	r0, [pc, #316]	@ (800157c <main+0x190>)
 8001440:	f004 f995 	bl	800576e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8001444:	2201      	movs	r2, #1
 8001446:	f44f 4154 	mov.w	r1, #54272	@ 0xd400
 800144a:	484a      	ldr	r0, [pc, #296]	@ (8001574 <main+0x188>)
 800144c:	f001 f85e 	bl	800250c <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&hlpuart1, Rx, 1);
 8001450:	2201      	movs	r2, #1
 8001452:	494b      	ldr	r1, [pc, #300]	@ (8001580 <main+0x194>)
 8001454:	484b      	ldr	r0, [pc, #300]	@ (8001584 <main+0x198>)
 8001456:	f004 ff5d 	bl	8006314 <HAL_UART_Receive_IT>

  HAL_Delay(1); //short delay between transactions
 800145a:	2001      	movs	r0, #1
 800145c:	f000 fd10 	bl	8001e80 <HAL_Delay>

  //We have to configure the mode of "Avalanche AS1016A04/Avalanche AS1004A04" such that we get the back-to-back mode
  //Then we don't need wren every time we want to write
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8001466:	4843      	ldr	r0, [pc, #268]	@ (8001574 <main+0x188>)
 8001468:	f001 f850 	bl	800250c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, configure_code_1, 5, 20);
 800146c:	2314      	movs	r3, #20
 800146e:	2205      	movs	r2, #5
 8001470:	4945      	ldr	r1, [pc, #276]	@ (8001588 <main+0x19c>)
 8001472:	4842      	ldr	r0, [pc, #264]	@ (800157c <main+0x190>)
 8001474:	f004 f97b 	bl	800576e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_SET);
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 800147e:	483d      	ldr	r0, [pc, #244]	@ (8001574 <main+0x188>)
 8001480:	f001 f844 	bl	800250c <HAL_GPIO_WritePin>

  //we have to configure the mode of "NETSOL S3A1606VOM" such that we get the back-to-back mode
  //Then we don't need wren every time we want to write
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8001484:	2200      	movs	r2, #0
 8001486:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800148a:	483a      	ldr	r0, [pc, #232]	@ (8001574 <main+0x188>)
 800148c:	f001 f83e 	bl	800250c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, configure_code_2, 5, 20);
 8001490:	2314      	movs	r3, #20
 8001492:	2205      	movs	r2, #5
 8001494:	493d      	ldr	r1, [pc, #244]	@ (800158c <main+0x1a0>)
 8001496:	4839      	ldr	r0, [pc, #228]	@ (800157c <main+0x190>)
 8001498:	f004 f969 	bl	800576e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 800149c:	2201      	movs	r2, #1
 800149e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014a2:	4834      	ldr	r0, [pc, #208]	@ (8001574 <main+0x188>)
 80014a4:	f001 f832 	bl	800250c <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET); //Set WRite ENable
 80014a8:	2200      	movs	r2, #0
 80014aa:	f44f 4150 	mov.w	r1, #53248	@ 0xd000
 80014ae:	4831      	ldr	r0, [pc, #196]	@ (8001574 <main+0x188>)
 80014b0:	f001 f82c 	bl	800250c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &wren, 1, 10); // to enable write on the MRAM chip
 80014b4:	230a      	movs	r3, #10
 80014b6:	2201      	movs	r2, #1
 80014b8:	492f      	ldr	r1, [pc, #188]	@ (8001578 <main+0x18c>)
 80014ba:	4830      	ldr	r0, [pc, #192]	@ (800157c <main+0x190>)
 80014bc:	f004 f957 	bl	800576e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	f44f 4150 	mov.w	r1, #53248	@ 0xd000
 80014c6:	482b      	ldr	r0, [pc, #172]	@ (8001574 <main+0x188>)
 80014c8:	f001 f820 	bl	800250c <HAL_GPIO_WritePin>


  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\r\n", 2, 1000);//Get the interrupt running
 80014cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014d0:	2202      	movs	r2, #2
 80014d2:	492f      	ldr	r1, [pc, #188]	@ (8001590 <main+0x1a4>)
 80014d4:	482b      	ldr	r0, [pc, #172]	@ (8001584 <main+0x198>)
 80014d6:	f004 fe93 	bl	8006200 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */


  // check if the code is actually running

  currChip = 0;
 80014da:	4b2e      	ldr	r3, [pc, #184]	@ (8001594 <main+0x1a8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
  uint8_t writeByte = 211;
 80014e0:	23d3      	movs	r3, #211	@ 0xd3
 80014e2:	75bb      	strb	r3, [r7, #22]
  uint8_t readByte;
  uint8_t data[16];
  uint8_t fails=0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	75fb      	strb	r3, [r7, #23]

  WriteMem(0, 20001, 1, &writeByte); //Read 0, write 1 at each bit
 80014e8:	f107 0316 	add.w	r3, r7, #22
 80014ec:	2201      	movs	r2, #1
 80014ee:	f644 6121 	movw	r1, #20001	@ 0x4e21
 80014f2:	2000      	movs	r0, #0
 80014f4:	f7ff faa6 	bl	8000a44 <WriteMem>
  ReadMem(0, 20001, 1, &readByte);
 80014f8:	f107 0315 	add.w	r3, r7, #21
 80014fc:	2201      	movs	r2, #1
 80014fe:	f644 6121 	movw	r1, #20001	@ 0x4e21
 8001502:	2000      	movs	r0, #0
 8001504:	f7ff fb36 	bl	8000b74 <ReadMem>

  sprintf(data, "read value:\t\t%u\r\n", readByte);
 8001508:	7d7b      	ldrb	r3, [r7, #21]
 800150a:	461a      	mov	r2, r3
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	4922      	ldr	r1, [pc, #136]	@ (8001598 <main+0x1ac>)
 8001510:	4618      	mov	r0, r3
 8001512:	f00b f8d5 	bl	800c6c0 <siprintf>
  HAL_UART_Transmit(&hlpuart1,data,sizeof(data),20);
 8001516:	1d39      	adds	r1, r7, #4
 8001518:	2314      	movs	r3, #20
 800151a:	2210      	movs	r2, #16
 800151c:	4819      	ldr	r0, [pc, #100]	@ (8001584 <main+0x198>)
 800151e:	f004 fe6f 	bl	8006200 <HAL_UART_Transmit>


  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001522:	f00a fd0d 	bl	800bf40 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    currChip = 0;
 8001526:	4b1b      	ldr	r3, [pc, #108]	@ (8001594 <main+0x1a8>)
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
    MemTest(0, &numFailsMRAM0,&numTestsMRAM0);
 800152c:	4a1b      	ldr	r2, [pc, #108]	@ (800159c <main+0x1b0>)
 800152e:	491c      	ldr	r1, [pc, #112]	@ (80015a0 <main+0x1b4>)
 8001530:	2000      	movs	r0, #0
 8001532:	f7ff fbf3 	bl	8000d1c <MemTest>

    currChip = 1;
 8001536:	4b17      	ldr	r3, [pc, #92]	@ (8001594 <main+0x1a8>)
 8001538:	2201      	movs	r2, #1
 800153a:	701a      	strb	r2, [r3, #0]
    MemTest_16(1, &numFailsMRAM1, &numTestsMRAM1);
 800153c:	4a19      	ldr	r2, [pc, #100]	@ (80015a4 <main+0x1b8>)
 800153e:	491a      	ldr	r1, [pc, #104]	@ (80015a8 <main+0x1bc>)
 8001540:	2001      	movs	r0, #1
 8001542:	f7ff fdad 	bl	80010a0 <MemTest_16>

    currChip = 2;
 8001546:	4b13      	ldr	r3, [pc, #76]	@ (8001594 <main+0x1a8>)
 8001548:	2202      	movs	r2, #2
 800154a:	701a      	strb	r2, [r3, #0]
    MemTest(2, &numFailsMRAM2, &numTestsMRAM2);
 800154c:	4a17      	ldr	r2, [pc, #92]	@ (80015ac <main+0x1c0>)
 800154e:	4918      	ldr	r1, [pc, #96]	@ (80015b0 <main+0x1c4>)
 8001550:	2002      	movs	r0, #2
 8001552:	f7ff fbe3 	bl	8000d1c <MemTest>

    currChip = 3;
 8001556:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <main+0x1a8>)
 8001558:	2203      	movs	r2, #3
 800155a:	701a      	strb	r2, [r3, #0]
    MemTest_16(3, &numFailsMRAM3, &numTestsMRAM3);
 800155c:	4a15      	ldr	r2, [pc, #84]	@ (80015b4 <main+0x1c8>)
 800155e:	4916      	ldr	r1, [pc, #88]	@ (80015b8 <main+0x1cc>)
 8001560:	2003      	movs	r0, #3
 8001562:	f7ff fd9d 	bl	80010a0 <MemTest_16>
    MX_USB_HOST_Process();
 8001566:	bf00      	nop
 8001568:	e7db      	b.n	8001522 <main+0x136>
 800156a:	bf00      	nop
 800156c:	e000edf0 	.word	0xe000edf0
 8001570:	e0001000 	.word	0xe0001000
 8001574:	48001000 	.word	0x48001000
 8001578:	20000001 	.word	0x20000001
 800157c:	200001c0 	.word	0x200001c0
 8001580:	20000248 	.word	0x20000248
 8001584:	200000b0 	.word	0x200000b0
 8001588:	20000004 	.word	0x20000004
 800158c:	2000000c 	.word	0x2000000c
 8001590:	0800d080 	.word	0x0800d080
 8001594:	20000244 	.word	0x20000244
 8001598:	0800d084 	.word	0x0800d084
 800159c:	20000224 	.word	0x20000224
 80015a0:	20000234 	.word	0x20000234
 80015a4:	20000228 	.word	0x20000228
 80015a8:	20000238 	.word	0x20000238
 80015ac:	2000022c 	.word	0x2000022c
 80015b0:	2000023c 	.word	0x2000023c
 80015b4:	20000230 	.word	0x20000230
 80015b8:	20000240 	.word	0x20000240

080015bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b096      	sub	sp, #88	@ 0x58
 80015c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	2244      	movs	r2, #68	@ 0x44
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f00b f89a 	bl	800c704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d0:	463b      	mov	r3, r7
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80015e2:	f002 fc93 	bl	8003f0c <HAL_PWREx_ControlVoltageScaling>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015ec:	f000 f9d8 	bl	80019a0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015f0:	f002 fc6e 	bl	8003ed0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015f4:	4b22      	ldr	r3, [pc, #136]	@ (8001680 <SystemClock_Config+0xc4>)
 80015f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015fa:	4a21      	ldr	r2, [pc, #132]	@ (8001680 <SystemClock_Config+0xc4>)
 80015fc:	f023 0318 	bic.w	r3, r3, #24
 8001600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001604:	2314      	movs	r3, #20
 8001606:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001608:	2301      	movs	r3, #1
 800160a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800160c:	2301      	movs	r3, #1
 800160e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001614:	2360      	movs	r3, #96	@ 0x60
 8001616:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001618:	2302      	movs	r3, #2
 800161a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800161c:	2301      	movs	r3, #1
 800161e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001620:	2301      	movs	r3, #1
 8001622:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001624:	2328      	movs	r3, #40	@ 0x28
 8001626:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001628:	2302      	movs	r3, #2
 800162a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800162c:	2302      	movs	r3, #2
 800162e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001630:	2302      	movs	r3, #2
 8001632:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4618      	mov	r0, r3
 800163a:	f002 fcdd 	bl	8003ff8 <HAL_RCC_OscConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001644:	f000 f9ac 	bl	80019a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001648:	230f      	movs	r3, #15
 800164a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800164c:	2303      	movs	r3, #3
 800164e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001654:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001658:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800165a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800165e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001660:	463b      	mov	r3, r7
 8001662:	2104      	movs	r1, #4
 8001664:	4618      	mov	r0, r3
 8001666:	f003 f8e1 	bl	800482c <HAL_RCC_ClockConfig>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001670:	f000 f996 	bl	80019a0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001674:	f003 fdfa 	bl	800526c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001678:	bf00      	nop
 800167a:	3758      	adds	r7, #88	@ 0x58
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40021000 	.word	0x40021000

08001684 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001688:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <MX_LPUART1_UART_Init+0x50>)
 800168a:	4a13      	ldr	r2, [pc, #76]	@ (80016d8 <MX_LPUART1_UART_Init+0x54>)
 800168c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800168e:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <MX_LPUART1_UART_Init+0x50>)
 8001690:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001694:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001696:	4b0f      	ldr	r3, [pc, #60]	@ (80016d4 <MX_LPUART1_UART_Init+0x50>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800169c:	4b0d      	ldr	r3, [pc, #52]	@ (80016d4 <MX_LPUART1_UART_Init+0x50>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80016a2:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <MX_LPUART1_UART_Init+0x50>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80016a8:	4b0a      	ldr	r3, [pc, #40]	@ (80016d4 <MX_LPUART1_UART_Init+0x50>)
 80016aa:	220c      	movs	r2, #12
 80016ac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ae:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <MX_LPUART1_UART_Init+0x50>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b4:	4b07      	ldr	r3, [pc, #28]	@ (80016d4 <MX_LPUART1_UART_Init+0x50>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ba:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <MX_LPUART1_UART_Init+0x50>)
 80016bc:	2200      	movs	r2, #0
 80016be:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80016c0:	4804      	ldr	r0, [pc, #16]	@ (80016d4 <MX_LPUART1_UART_Init+0x50>)
 80016c2:	f004 fd4f 	bl	8006164 <HAL_UART_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80016cc:	f000 f968 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200000b0 	.word	0x200000b0
 80016d8:	40008000 	.word	0x40008000

080016dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016e0:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <MX_USART2_UART_Init+0x58>)
 80016e2:	4a15      	ldr	r2, [pc, #84]	@ (8001738 <MX_USART2_UART_Init+0x5c>)
 80016e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80016e6:	4b13      	ldr	r3, [pc, #76]	@ (8001734 <MX_USART2_UART_Init+0x58>)
 80016e8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80016ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <MX_USART2_UART_Init+0x58>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <MX_USART2_UART_Init+0x58>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001734 <MX_USART2_UART_Init+0x58>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001700:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <MX_USART2_UART_Init+0x58>)
 8001702:	220c      	movs	r2, #12
 8001704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001706:	4b0b      	ldr	r3, [pc, #44]	@ (8001734 <MX_USART2_UART_Init+0x58>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800170c:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <MX_USART2_UART_Init+0x58>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001712:	4b08      	ldr	r3, [pc, #32]	@ (8001734 <MX_USART2_UART_Init+0x58>)
 8001714:	2200      	movs	r2, #0
 8001716:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001718:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <MX_USART2_UART_Init+0x58>)
 800171a:	2200      	movs	r2, #0
 800171c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800171e:	4805      	ldr	r0, [pc, #20]	@ (8001734 <MX_USART2_UART_Init+0x58>)
 8001720:	f004 fd20 	bl	8006164 <HAL_UART_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800172a:	f000 f939 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000138 	.word	0x20000138
 8001738:	40004400 	.word	0x40004400

0800173c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001740:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <MX_SPI1_Init+0x74>)
 8001742:	4a1c      	ldr	r2, [pc, #112]	@ (80017b4 <MX_SPI1_Init+0x78>)
 8001744:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001746:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <MX_SPI1_Init+0x74>)
 8001748:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800174c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800174e:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <MX_SPI1_Init+0x74>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001754:	4b16      	ldr	r3, [pc, #88]	@ (80017b0 <MX_SPI1_Init+0x74>)
 8001756:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800175a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800175c:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <MX_SPI1_Init+0x74>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001762:	4b13      	ldr	r3, [pc, #76]	@ (80017b0 <MX_SPI1_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <MX_SPI1_Init+0x74>)
 800176a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800176e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001770:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <MX_SPI1_Init+0x74>)
 8001772:	2228      	movs	r2, #40	@ 0x28
 8001774:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001776:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <MX_SPI1_Init+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <MX_SPI1_Init+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <MX_SPI1_Init+0x74>)
 8001784:	2200      	movs	r2, #0
 8001786:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001788:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <MX_SPI1_Init+0x74>)
 800178a:	2207      	movs	r2, #7
 800178c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800178e:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <MX_SPI1_Init+0x74>)
 8001790:	2200      	movs	r2, #0
 8001792:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001794:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <MX_SPI1_Init+0x74>)
 8001796:	2200      	movs	r2, #0
 8001798:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <MX_SPI1_Init+0x74>)
 800179c:	f003 ff44 	bl	8005628 <HAL_SPI_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80017a6:	f000 f8fb 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200001c0 	.word	0x200001c0
 80017b4:	40013000 	.word	0x40013000

080017b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	@ 0x30
 80017bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]
  /*Configure GPIO pin Output Level*/
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET); //And this
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ce:	4b6f      	ldr	r3, [pc, #444]	@ (800198c <MX_GPIO_Init+0x1d4>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	4a6e      	ldr	r2, [pc, #440]	@ (800198c <MX_GPIO_Init+0x1d4>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017da:	4b6c      	ldr	r3, [pc, #432]	@ (800198c <MX_GPIO_Init+0x1d4>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	61bb      	str	r3, [r7, #24]
 80017e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e6:	4b69      	ldr	r3, [pc, #420]	@ (800198c <MX_GPIO_Init+0x1d4>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ea:	4a68      	ldr	r2, [pc, #416]	@ (800198c <MX_GPIO_Init+0x1d4>)
 80017ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017f2:	4b66      	ldr	r3, [pc, #408]	@ (800198c <MX_GPIO_Init+0x1d4>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	4b63      	ldr	r3, [pc, #396]	@ (800198c <MX_GPIO_Init+0x1d4>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001802:	4a62      	ldr	r2, [pc, #392]	@ (800198c <MX_GPIO_Init+0x1d4>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800180a:	4b60      	ldr	r3, [pc, #384]	@ (800198c <MX_GPIO_Init+0x1d4>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001816:	4b5d      	ldr	r3, [pc, #372]	@ (800198c <MX_GPIO_Init+0x1d4>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181a:	4a5c      	ldr	r2, [pc, #368]	@ (800198c <MX_GPIO_Init+0x1d4>)
 800181c:	f043 0310 	orr.w	r3, r3, #16
 8001820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001822:	4b5a      	ldr	r3, [pc, #360]	@ (800198c <MX_GPIO_Init+0x1d4>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182e:	4b57      	ldr	r3, [pc, #348]	@ (800198c <MX_GPIO_Init+0x1d4>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001832:	4a56      	ldr	r2, [pc, #344]	@ (800198c <MX_GPIO_Init+0x1d4>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800183a:	4b54      	ldr	r3, [pc, #336]	@ (800198c <MX_GPIO_Init+0x1d4>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001846:	4b51      	ldr	r3, [pc, #324]	@ (800198c <MX_GPIO_Init+0x1d4>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184a:	4a50      	ldr	r2, [pc, #320]	@ (800198c <MX_GPIO_Init+0x1d4>)
 800184c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001852:	4b4e      	ldr	r3, [pc, #312]	@ (800198c <MX_GPIO_Init+0x1d4>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800185e:	f002 fbbb 	bl	8003fd8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001862:	4b4a      	ldr	r3, [pc, #296]	@ (800198c <MX_GPIO_Init+0x1d4>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001866:	4a49      	ldr	r2, [pc, #292]	@ (800198c <MX_GPIO_Init+0x1d4>)
 8001868:	f043 0308 	orr.w	r3, r3, #8
 800186c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800186e:	4b47      	ldr	r3, [pc, #284]	@ (800198c <MX_GPIO_Init+0x1d4>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	f44f 4154 	mov.w	r1, #54272	@ 0xd400
 8001880:	4843      	ldr	r0, [pc, #268]	@ (8001990 <MX_GPIO_Init+0x1d8>)
 8001882:	f000 fe43 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 800188c:	4841      	ldr	r0, [pc, #260]	@ (8001994 <MX_GPIO_Init+0x1dc>)
 800188e:	f000 fe3d 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	f44f 5131 	mov.w	r1, #11328	@ 0x2c40
 8001898:	483f      	ldr	r0, [pc, #252]	@ (8001998 <MX_GPIO_Init+0x1e0>)
 800189a:	f000 fe37 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	483e      	ldr	r0, [pc, #248]	@ (800199c <MX_GPIO_Init+0x1e4>)
 80018a4:	f000 fe32 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	4619      	mov	r1, r3
 80018be:	4837      	ldr	r0, [pc, #220]	@ (800199c <MX_GPIO_Init+0x1e4>)
 80018c0:	f000 fc92 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE12 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80018c4:	f44f 4354 	mov.w	r3, #54272	@ 0xd400
 80018c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ca:	2301      	movs	r3, #1
 80018cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d2:	2300      	movs	r3, #0
 80018d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018d6:	f107 031c 	add.w	r3, r7, #28
 80018da:	4619      	mov	r1, r3
 80018dc:	482c      	ldr	r0, [pc, #176]	@ (8001990 <MX_GPIO_Init+0x1d8>)
 80018de:	f000 fc83 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80018e2:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80018e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	4619      	mov	r1, r3
 80018fa:	4826      	ldr	r0, [pc, #152]	@ (8001994 <MX_GPIO_Init+0x1dc>)
 80018fc:	f000 fc74 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 8001900:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8001904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	4619      	mov	r1, r3
 8001914:	4820      	ldr	r0, [pc, #128]	@ (8001998 <MX_GPIO_Init+0x1e0>)
 8001916:	f000 fc67 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 800191a:	f44f 5331 	mov.w	r3, #11328	@ 0x2c40
 800191e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001920:	2301      	movs	r3, #1
 8001922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	4619      	mov	r1, r3
 8001932:	4819      	ldr	r0, [pc, #100]	@ (8001998 <MX_GPIO_Init+0x1e0>)
 8001934:	f000 fc58 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001938:	2380      	movs	r3, #128	@ 0x80
 800193a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193c:	2301      	movs	r3, #1
 800193e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	4619      	mov	r1, r3
 800194e:	4813      	ldr	r0, [pc, #76]	@ (800199c <MX_GPIO_Init+0x1e4>)
 8001950:	f000 fc4a 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001954:	2320      	movs	r3, #32
 8001956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001964:	2307      	movs	r3, #7
 8001966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	4619      	mov	r1, r3
 800196e:	4809      	ldr	r0, [pc, #36]	@ (8001994 <MX_GPIO_Init+0x1dc>)
 8001970:	f000 fc3a 	bl	80021e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001974:	2200      	movs	r2, #0
 8001976:	2100      	movs	r1, #0
 8001978:	2028      	movs	r0, #40	@ 0x28
 800197a:	f000 fb80 	bl	800207e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800197e:	2028      	movs	r0, #40	@ 0x28
 8001980:	f000 fb99 	bl	80020b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001984:	bf00      	nop
 8001986:	3730      	adds	r7, #48	@ 0x30
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40021000 	.word	0x40021000
 8001990:	48001000 	.word	0x48001000
 8001994:	48000400 	.word	0x48000400
 8001998:	48001800 	.word	0x48001800
 800199c:	48000800 	.word	0x48000800

080019a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a4:	b672      	cpsid	i
}
 80019a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <Error_Handler+0x8>

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	4b0f      	ldr	r3, [pc, #60]	@ (80019f0 <HAL_MspInit+0x44>)
 80019b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019b6:	4a0e      	ldr	r2, [pc, #56]	@ (80019f0 <HAL_MspInit+0x44>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80019be:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <HAL_MspInit+0x44>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <HAL_MspInit+0x44>)
 80019cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ce:	4a08      	ldr	r2, [pc, #32]	@ (80019f0 <HAL_MspInit+0x44>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80019d6:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <HAL_MspInit+0x44>)
 80019d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000

080019f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b0ae      	sub	sp, #184	@ 0xb8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a0c:	f107 0318 	add.w	r3, r7, #24
 8001a10:	228c      	movs	r2, #140	@ 0x8c
 8001a12:	2100      	movs	r1, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f00a fe75 	bl	800c704 <memset>
  if(huart->Instance==LPUART1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a4b      	ldr	r2, [pc, #300]	@ (8001b4c <HAL_UART_MspInit+0x158>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d146      	bne.n	8001ab2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a24:	2320      	movs	r3, #32
 8001a26:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a2c:	f107 0318 	add.w	r3, r7, #24
 8001a30:	4618      	mov	r0, r3
 8001a32:	f003 f91f 	bl	8004c74 <HAL_RCCEx_PeriphCLKConfig>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a3c:	f7ff ffb0 	bl	80019a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a40:	4b43      	ldr	r3, [pc, #268]	@ (8001b50 <HAL_UART_MspInit+0x15c>)
 8001a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a44:	4a42      	ldr	r2, [pc, #264]	@ (8001b50 <HAL_UART_MspInit+0x15c>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001a4c:	4b40      	ldr	r3, [pc, #256]	@ (8001b50 <HAL_UART_MspInit+0x15c>)
 8001a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a58:	4b3d      	ldr	r3, [pc, #244]	@ (8001b50 <HAL_UART_MspInit+0x15c>)
 8001a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a5c:	4a3c      	ldr	r2, [pc, #240]	@ (8001b50 <HAL_UART_MspInit+0x15c>)
 8001a5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a64:	4b3a      	ldr	r3, [pc, #232]	@ (8001b50 <HAL_UART_MspInit+0x15c>)
 8001a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001a70:	f002 fab2 	bl	8003fd8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|GPIO_PIN_8;
 8001a74:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a8e:	2308      	movs	r3, #8
 8001a90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a94:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a98:	4619      	mov	r1, r3
 8001a9a:	482e      	ldr	r0, [pc, #184]	@ (8001b54 <HAL_UART_MspInit+0x160>)
 8001a9c:	f000 fba4 	bl	80021e8 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	2046      	movs	r0, #70	@ 0x46
 8001aa6:	f000 faea 	bl	800207e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001aaa:	2046      	movs	r0, #70	@ 0x46
 8001aac:	f000 fb03 	bl	80020b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ab0:	e047      	b.n	8001b42 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a28      	ldr	r2, [pc, #160]	@ (8001b58 <HAL_UART_MspInit+0x164>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d142      	bne.n	8001b42 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001abc:	2302      	movs	r3, #2
 8001abe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac4:	f107 0318 	add.w	r3, r7, #24
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f003 f8d3 	bl	8004c74 <HAL_RCCEx_PeriphCLKConfig>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8001ad4:	f7ff ff64 	bl	80019a0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b50 <HAL_UART_MspInit+0x15c>)
 8001ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001adc:	4a1c      	ldr	r2, [pc, #112]	@ (8001b50 <HAL_UART_MspInit+0x15c>)
 8001ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ae2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b50 <HAL_UART_MspInit+0x15c>)
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af0:	4b17      	ldr	r3, [pc, #92]	@ (8001b50 <HAL_UART_MspInit+0x15c>)
 8001af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af4:	4a16      	ldr	r2, [pc, #88]	@ (8001b50 <HAL_UART_MspInit+0x15c>)
 8001af6:	f043 0308 	orr.w	r3, r3, #8
 8001afa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001afc:	4b14      	ldr	r3, [pc, #80]	@ (8001b50 <HAL_UART_MspInit+0x15c>)
 8001afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001b08:	2360      	movs	r3, #96	@ 0x60
 8001b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b20:	2307      	movs	r3, #7
 8001b22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b26:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	480b      	ldr	r0, [pc, #44]	@ (8001b5c <HAL_UART_MspInit+0x168>)
 8001b2e:	f000 fb5b 	bl	80021e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	2026      	movs	r0, #38	@ 0x26
 8001b38:	f000 faa1 	bl	800207e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b3c:	2026      	movs	r0, #38	@ 0x26
 8001b3e:	f000 faba 	bl	80020b6 <HAL_NVIC_EnableIRQ>
}
 8001b42:	bf00      	nop
 8001b44:	37b8      	adds	r7, #184	@ 0xb8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40008000 	.word	0x40008000
 8001b50:	40021000 	.word	0x40021000
 8001b54:	48001800 	.word	0x48001800
 8001b58:	40004400 	.word	0x40004400
 8001b5c:	48000c00 	.word	0x48000c00

08001b60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	@ 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a20      	ldr	r2, [pc, #128]	@ (8001c00 <HAL_SPI_MspInit+0xa0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d139      	bne.n	8001bf6 <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b82:	4b20      	ldr	r3, [pc, #128]	@ (8001c04 <HAL_SPI_MspInit+0xa4>)
 8001b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b86:	4a1f      	ldr	r2, [pc, #124]	@ (8001c04 <HAL_SPI_MspInit+0xa4>)
 8001b88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c04 <HAL_SPI_MspInit+0xa4>)
 8001b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c04 <HAL_SPI_MspInit+0xa4>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9e:	4a19      	ldr	r2, [pc, #100]	@ (8001c04 <HAL_SPI_MspInit+0xa4>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba6:	4b17      	ldr	r3, [pc, #92]	@ (8001c04 <HAL_SPI_MspInit+0xa4>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001bb2:	23a0      	movs	r3, #160	@ 0xa0
 8001bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bc2:	2305      	movs	r3, #5
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bd0:	f000 fb0a 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bd4:	2340      	movs	r3, #64	@ 0x40
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001be4:	2305      	movs	r3, #5
 8001be6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bf2:	f000 faf9 	bl	80021e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001bf6:	bf00      	nop
 8001bf8:	3728      	adds	r7, #40	@ 0x28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40013000 	.word	0x40013000
 8001c04:	40021000 	.word	0x40021000

08001c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <NMI_Handler+0x4>

08001c10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <HardFault_Handler+0x4>

08001c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <MemManage_Handler+0x4>

08001c20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c24:	bf00      	nop
 8001c26:	e7fd      	b.n	8001c24 <BusFault_Handler+0x4>

08001c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c2c:	bf00      	nop
 8001c2e:	e7fd      	b.n	8001c2c <UsageFault_Handler+0x4>

08001c30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c5e:	f000 f8ef 	bl	8001e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c6c:	4802      	ldr	r0, [pc, #8]	@ (8001c78 <USART2_IRQHandler+0x10>)
 8001c6e:	f004 fb9d 	bl	80063ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000138 	.word	0x20000138

08001c7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001c80:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001c84:	f000 fc5a 	bl	800253c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001c90:	4802      	ldr	r0, [pc, #8]	@ (8001c9c <OTG_FS_IRQHandler+0x10>)
 8001c92:	f000 ff0b 	bl	8002aac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000700 	.word	0x20000700

08001ca0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001ca4:	4802      	ldr	r0, [pc, #8]	@ (8001cb0 <LPUART1_IRQHandler+0x10>)
 8001ca6:	f004 fb81 	bl	80063ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200000b0 	.word	0x200000b0

08001cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cbc:	4a14      	ldr	r2, [pc, #80]	@ (8001d10 <_sbrk+0x5c>)
 8001cbe:	4b15      	ldr	r3, [pc, #84]	@ (8001d14 <_sbrk+0x60>)
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc8:	4b13      	ldr	r3, [pc, #76]	@ (8001d18 <_sbrk+0x64>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d102      	bne.n	8001cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd0:	4b11      	ldr	r3, [pc, #68]	@ (8001d18 <_sbrk+0x64>)
 8001cd2:	4a12      	ldr	r2, [pc, #72]	@ (8001d1c <_sbrk+0x68>)
 8001cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cd6:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <_sbrk+0x64>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d207      	bcs.n	8001cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce4:	f00a fd26 	bl	800c734 <__errno>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	220c      	movs	r2, #12
 8001cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cee:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf2:	e009      	b.n	8001d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf4:	4b08      	ldr	r3, [pc, #32]	@ (8001d18 <_sbrk+0x64>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cfa:	4b07      	ldr	r3, [pc, #28]	@ (8001d18 <_sbrk+0x64>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	4a05      	ldr	r2, [pc, #20]	@ (8001d18 <_sbrk+0x64>)
 8001d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d06:	68fb      	ldr	r3, [r7, #12]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20040000 	.word	0x20040000
 8001d14:	00000400 	.word	0x00000400
 8001d18:	2000024c 	.word	0x2000024c
 8001d1c:	20000b90 	.word	0x20000b90

08001d20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d24:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <SystemInit+0x20>)
 8001d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d2a:	4a05      	ldr	r2, [pc, #20]	@ (8001d40 <SystemInit+0x20>)
 8001d2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d48:	f7ff ffea 	bl	8001d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d4c:	480c      	ldr	r0, [pc, #48]	@ (8001d80 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d4e:	490d      	ldr	r1, [pc, #52]	@ (8001d84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d50:	4a0d      	ldr	r2, [pc, #52]	@ (8001d88 <LoopForever+0xe>)
  movs r3, #0
 8001d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d54:	e002      	b.n	8001d5c <LoopCopyDataInit>

08001d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d5a:	3304      	adds	r3, #4

08001d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d60:	d3f9      	bcc.n	8001d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d62:	4a0a      	ldr	r2, [pc, #40]	@ (8001d8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d64:	4c0a      	ldr	r4, [pc, #40]	@ (8001d90 <LoopForever+0x16>)
  movs r3, #0
 8001d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d68:	e001      	b.n	8001d6e <LoopFillZerobss>

08001d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d6c:	3204      	adds	r2, #4

08001d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d70:	d3fb      	bcc.n	8001d6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d72:	f00a fce5 	bl	800c740 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d76:	f7ff fb39 	bl	80013ec <main>

08001d7a <LoopForever>:

LoopForever:
    b LoopForever
 8001d7a:	e7fe      	b.n	8001d7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d7c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d84:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001d88:	0800d12c 	.word	0x0800d12c
  ldr r2, =_sbss
 8001d8c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001d90:	20000b8c 	.word	0x20000b8c

08001d94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d94:	e7fe      	b.n	8001d94 <ADC1_2_IRQHandler>

08001d96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da0:	2003      	movs	r0, #3
 8001da2:	f000 f961 	bl	8002068 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001da6:	2000      	movs	r0, #0
 8001da8:	f000 f80e 	bl	8001dc8 <HAL_InitTick>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d002      	beq.n	8001db8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	71fb      	strb	r3, [r7, #7]
 8001db6:	e001      	b.n	8001dbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001db8:	f7ff fdf8 	bl	80019ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001dd4:	4b17      	ldr	r3, [pc, #92]	@ (8001e34 <HAL_InitTick+0x6c>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d023      	beq.n	8001e24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ddc:	4b16      	ldr	r3, [pc, #88]	@ (8001e38 <HAL_InitTick+0x70>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4b14      	ldr	r3, [pc, #80]	@ (8001e34 <HAL_InitTick+0x6c>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	4619      	mov	r1, r3
 8001de6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 f96d 	bl	80020d2 <HAL_SYSTICK_Config>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10f      	bne.n	8001e1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b0f      	cmp	r3, #15
 8001e02:	d809      	bhi.n	8001e18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e04:	2200      	movs	r2, #0
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	f04f 30ff 	mov.w	r0, #4294967295
 8001e0c:	f000 f937 	bl	800207e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e10:	4a0a      	ldr	r2, [pc, #40]	@ (8001e3c <HAL_InitTick+0x74>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	e007      	b.n	8001e28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	73fb      	strb	r3, [r7, #15]
 8001e1c:	e004      	b.n	8001e28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	73fb      	strb	r3, [r7, #15]
 8001e22:	e001      	b.n	8001e28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000020 	.word	0x20000020
 8001e38:	20000018 	.word	0x20000018
 8001e3c:	2000001c 	.word	0x2000001c

08001e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e44:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <HAL_IncTick+0x20>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <HAL_IncTick+0x24>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4413      	add	r3, r2
 8001e50:	4a04      	ldr	r2, [pc, #16]	@ (8001e64 <HAL_IncTick+0x24>)
 8001e52:	6013      	str	r3, [r2, #0]
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000020 	.word	0x20000020
 8001e64:	20000250 	.word	0x20000250

08001e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	@ (8001e7c <HAL_GetTick+0x14>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000250 	.word	0x20000250

08001e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e88:	f7ff ffee 	bl	8001e68 <HAL_GetTick>
 8001e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e98:	d005      	beq.n	8001ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec4 <HAL_Delay+0x44>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ea6:	bf00      	nop
 8001ea8:	f7ff ffde 	bl	8001e68 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d8f7      	bhi.n	8001ea8 <HAL_Delay+0x28>
  {
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000020 	.word	0x20000020

08001ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efa:	4a04      	ldr	r2, [pc, #16]	@ (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	60d3      	str	r3, [r2, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f14:	4b04      	ldr	r3, [pc, #16]	@ (8001f28 <__NVIC_GetPriorityGrouping+0x18>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	f003 0307 	and.w	r3, r3, #7
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	db0b      	blt.n	8001f56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	f003 021f 	and.w	r2, r3, #31
 8001f44:	4907      	ldr	r1, [pc, #28]	@ (8001f64 <__NVIC_EnableIRQ+0x38>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000e100 	.word	0xe000e100

08001f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	db0a      	blt.n	8001f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	490c      	ldr	r1, [pc, #48]	@ (8001fb4 <__NVIC_SetPriority+0x4c>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f90:	e00a      	b.n	8001fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4908      	ldr	r1, [pc, #32]	@ (8001fb8 <__NVIC_SetPriority+0x50>)
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	761a      	strb	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000e100 	.word	0xe000e100
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	@ 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f1c3 0307 	rsb	r3, r3, #7
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf28      	it	cs
 8001fda:	2304      	movcs	r3, #4
 8001fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d902      	bls.n	8001fec <NVIC_EncodePriority+0x30>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3b03      	subs	r3, #3
 8001fea:	e000      	b.n	8001fee <NVIC_EncodePriority+0x32>
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	43d9      	mvns	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	4313      	orrs	r3, r2
         );
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	@ 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3b01      	subs	r3, #1
 8002030:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002034:	d301      	bcc.n	800203a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002036:	2301      	movs	r3, #1
 8002038:	e00f      	b.n	800205a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800203a:	4a0a      	ldr	r2, [pc, #40]	@ (8002064 <SysTick_Config+0x40>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3b01      	subs	r3, #1
 8002040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002042:	210f      	movs	r1, #15
 8002044:	f04f 30ff 	mov.w	r0, #4294967295
 8002048:	f7ff ff8e 	bl	8001f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800204c:	4b05      	ldr	r3, [pc, #20]	@ (8002064 <SysTick_Config+0x40>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002052:	4b04      	ldr	r3, [pc, #16]	@ (8002064 <SysTick_Config+0x40>)
 8002054:	2207      	movs	r2, #7
 8002056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	e000e010 	.word	0xe000e010

08002068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ff29 	bl	8001ec8 <__NVIC_SetPriorityGrouping>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002090:	f7ff ff3e 	bl	8001f10 <__NVIC_GetPriorityGrouping>
 8002094:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	6978      	ldr	r0, [r7, #20]
 800209c:	f7ff ff8e 	bl	8001fbc <NVIC_EncodePriority>
 80020a0:	4602      	mov	r2, r0
 80020a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff5d 	bl	8001f68 <__NVIC_SetPriority>
}
 80020ae:	bf00      	nop
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff31 	bl	8001f2c <__NVIC_EnableIRQ>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff ffa2 	bl	8002024 <SysTick_Config>
 80020e0:	4603      	mov	r3, r0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b085      	sub	sp, #20
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d008      	beq.n	8002114 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2204      	movs	r2, #4
 8002106:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e022      	b.n	800215a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 020e 	bic.w	r2, r2, #14
 8002122:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002138:	f003 021c 	and.w	r2, r3, #28
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002140:	2101      	movs	r1, #1
 8002142:	fa01 f202 	lsl.w	r2, r1, r2
 8002146:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002158:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800215a:	4618      	mov	r0, r3
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b084      	sub	sp, #16
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d005      	beq.n	800218a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2204      	movs	r2, #4
 8002182:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
 8002188:	e029      	b.n	80021de <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 020e 	bic.w	r2, r2, #14
 8002198:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0201 	bic.w	r2, r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ae:	f003 021c 	and.w	r2, r3, #28
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	2101      	movs	r1, #1
 80021b8:	fa01 f202 	lsl.w	r2, r1, r2
 80021bc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	4798      	blx	r3
    }
  }
  return status;
 80021de:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f6:	e166      	b.n	80024c6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	2101      	movs	r1, #1
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	fa01 f303 	lsl.w	r3, r1, r3
 8002204:	4013      	ands	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 8158 	beq.w	80024c0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	2b01      	cmp	r3, #1
 800221a:	d005      	beq.n	8002228 <HAL_GPIO_Init+0x40>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d130      	bne.n	800228a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	2203      	movs	r2, #3
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800225e:	2201      	movs	r2, #1
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	091b      	lsrs	r3, r3, #4
 8002274:	f003 0201 	and.w	r2, r3, #1
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	2b03      	cmp	r3, #3
 8002294:	d017      	beq.n	80022c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	2203      	movs	r2, #3
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4013      	ands	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d123      	bne.n	800231a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	08da      	lsrs	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3208      	adds	r2, #8
 80022da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	220f      	movs	r2, #15
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4013      	ands	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	08da      	lsrs	r2, r3, #3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3208      	adds	r2, #8
 8002314:	6939      	ldr	r1, [r7, #16]
 8002316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	2203      	movs	r2, #3
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0203 	and.w	r2, r3, #3
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 80b2 	beq.w	80024c0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235c:	4b61      	ldr	r3, [pc, #388]	@ (80024e4 <HAL_GPIO_Init+0x2fc>)
 800235e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002360:	4a60      	ldr	r2, [pc, #384]	@ (80024e4 <HAL_GPIO_Init+0x2fc>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6613      	str	r3, [r2, #96]	@ 0x60
 8002368:	4b5e      	ldr	r3, [pc, #376]	@ (80024e4 <HAL_GPIO_Init+0x2fc>)
 800236a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002374:	4a5c      	ldr	r2, [pc, #368]	@ (80024e8 <HAL_GPIO_Init+0x300>)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	089b      	lsrs	r3, r3, #2
 800237a:	3302      	adds	r3, #2
 800237c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002380:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	220f      	movs	r2, #15
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4013      	ands	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800239e:	d02b      	beq.n	80023f8 <HAL_GPIO_Init+0x210>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a52      	ldr	r2, [pc, #328]	@ (80024ec <HAL_GPIO_Init+0x304>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d025      	beq.n	80023f4 <HAL_GPIO_Init+0x20c>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a51      	ldr	r2, [pc, #324]	@ (80024f0 <HAL_GPIO_Init+0x308>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d01f      	beq.n	80023f0 <HAL_GPIO_Init+0x208>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a50      	ldr	r2, [pc, #320]	@ (80024f4 <HAL_GPIO_Init+0x30c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d019      	beq.n	80023ec <HAL_GPIO_Init+0x204>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a4f      	ldr	r2, [pc, #316]	@ (80024f8 <HAL_GPIO_Init+0x310>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d013      	beq.n	80023e8 <HAL_GPIO_Init+0x200>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a4e      	ldr	r2, [pc, #312]	@ (80024fc <HAL_GPIO_Init+0x314>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d00d      	beq.n	80023e4 <HAL_GPIO_Init+0x1fc>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a4d      	ldr	r2, [pc, #308]	@ (8002500 <HAL_GPIO_Init+0x318>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d007      	beq.n	80023e0 <HAL_GPIO_Init+0x1f8>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a4c      	ldr	r2, [pc, #304]	@ (8002504 <HAL_GPIO_Init+0x31c>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d101      	bne.n	80023dc <HAL_GPIO_Init+0x1f4>
 80023d8:	2307      	movs	r3, #7
 80023da:	e00e      	b.n	80023fa <HAL_GPIO_Init+0x212>
 80023dc:	2308      	movs	r3, #8
 80023de:	e00c      	b.n	80023fa <HAL_GPIO_Init+0x212>
 80023e0:	2306      	movs	r3, #6
 80023e2:	e00a      	b.n	80023fa <HAL_GPIO_Init+0x212>
 80023e4:	2305      	movs	r3, #5
 80023e6:	e008      	b.n	80023fa <HAL_GPIO_Init+0x212>
 80023e8:	2304      	movs	r3, #4
 80023ea:	e006      	b.n	80023fa <HAL_GPIO_Init+0x212>
 80023ec:	2303      	movs	r3, #3
 80023ee:	e004      	b.n	80023fa <HAL_GPIO_Init+0x212>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e002      	b.n	80023fa <HAL_GPIO_Init+0x212>
 80023f4:	2301      	movs	r3, #1
 80023f6:	e000      	b.n	80023fa <HAL_GPIO_Init+0x212>
 80023f8:	2300      	movs	r3, #0
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	f002 0203 	and.w	r2, r2, #3
 8002400:	0092      	lsls	r2, r2, #2
 8002402:	4093      	lsls	r3, r2
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800240a:	4937      	ldr	r1, [pc, #220]	@ (80024e8 <HAL_GPIO_Init+0x300>)
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	089b      	lsrs	r3, r3, #2
 8002410:	3302      	adds	r3, #2
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002418:	4b3b      	ldr	r3, [pc, #236]	@ (8002508 <HAL_GPIO_Init+0x320>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	43db      	mvns	r3, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4313      	orrs	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800243c:	4a32      	ldr	r2, [pc, #200]	@ (8002508 <HAL_GPIO_Init+0x320>)
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002442:	4b31      	ldr	r3, [pc, #196]	@ (8002508 <HAL_GPIO_Init+0x320>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	43db      	mvns	r3, r3
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4013      	ands	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002466:	4a28      	ldr	r2, [pc, #160]	@ (8002508 <HAL_GPIO_Init+0x320>)
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800246c:	4b26      	ldr	r3, [pc, #152]	@ (8002508 <HAL_GPIO_Init+0x320>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	43db      	mvns	r3, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002490:	4a1d      	ldr	r2, [pc, #116]	@ (8002508 <HAL_GPIO_Init+0x320>)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002496:	4b1c      	ldr	r3, [pc, #112]	@ (8002508 <HAL_GPIO_Init+0x320>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	43db      	mvns	r3, r3
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4013      	ands	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024ba:	4a13      	ldr	r2, [pc, #76]	@ (8002508 <HAL_GPIO_Init+0x320>)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	3301      	adds	r3, #1
 80024c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f47f ae91 	bne.w	80021f8 <HAL_GPIO_Init+0x10>
  }
}
 80024d6:	bf00      	nop
 80024d8:	bf00      	nop
 80024da:	371c      	adds	r7, #28
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40010000 	.word	0x40010000
 80024ec:	48000400 	.word	0x48000400
 80024f0:	48000800 	.word	0x48000800
 80024f4:	48000c00 	.word	0x48000c00
 80024f8:	48001000 	.word	0x48001000
 80024fc:	48001400 	.word	0x48001400
 8002500:	48001800 	.word	0x48001800
 8002504:	48001c00 	.word	0x48001c00
 8002508:	40010400 	.word	0x40010400

0800250c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
 8002518:	4613      	mov	r3, r2
 800251a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800251c:	787b      	ldrb	r3, [r7, #1]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002528:	e002      	b.n	8002530 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800252a:	887a      	ldrh	r2, [r7, #2]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002546:	4b08      	ldr	r3, [pc, #32]	@ (8002568 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	88fb      	ldrh	r3, [r7, #6]
 800254c:	4013      	ands	r3, r2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d006      	beq.n	8002560 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002552:	4a05      	ldr	r2, [pc, #20]	@ (8002568 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002554:	88fb      	ldrh	r3, [r7, #6]
 8002556:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002558:	88fb      	ldrh	r3, [r7, #6]
 800255a:	4618      	mov	r0, r3
 800255c:	f000 f806 	bl	800256c <HAL_GPIO_EXTI_Callback>
  }
}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40010400 	.word	0x40010400

0800256c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002582:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002584:	b08f      	sub	sp, #60	@ 0x3c
 8002586:	af0a      	add	r7, sp, #40	@ 0x28
 8002588:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e054      	b.n	800263e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 3339 	ldrb.w	r3, [r3, #825]	@ 0x339
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f009 fcfe 	bl	800bfb0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2203      	movs	r2, #3
 80025b8:	f883 2339 	strb.w	r2, [r3, #825]	@ 0x339

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d102      	bne.n	80025ce <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f005 f9cb 	bl	800796e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	603b      	str	r3, [r7, #0]
 80025de:	687e      	ldr	r6, [r7, #4]
 80025e0:	466d      	mov	r5, sp
 80025e2:	f106 0410 	add.w	r4, r6, #16
 80025e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80025f6:	1d33      	adds	r3, r6, #4
 80025f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025fa:	6838      	ldr	r0, [r7, #0]
 80025fc:	f005 f97a 	bl	80078f4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2101      	movs	r1, #1
 8002606:	4618      	mov	r0, r3
 8002608:	f005 f9c2 	bl	8007990 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	603b      	str	r3, [r7, #0]
 8002612:	687e      	ldr	r6, [r7, #4]
 8002614:	466d      	mov	r5, sp
 8002616:	f106 0410 	add.w	r4, r6, #16
 800261a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800261c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800261e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002622:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002626:	e885 0003 	stmia.w	r5, {r0, r1}
 800262a:	1d33      	adds	r3, r6, #4
 800262c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800262e:	6838      	ldr	r0, [r7, #0]
 8002630:	f005 fb66 	bl	8007d00 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2339 	strb.w	r2, [r3, #825]	@ 0x339

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002646 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002646:	b590      	push	{r4, r7, lr}
 8002648:	b089      	sub	sp, #36	@ 0x24
 800264a:	af04      	add	r7, sp, #16
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	4608      	mov	r0, r1
 8002650:	4611      	mov	r1, r2
 8002652:	461a      	mov	r2, r3
 8002654:	4603      	mov	r3, r0
 8002656:	70fb      	strb	r3, [r7, #3]
 8002658:	460b      	mov	r3, r1
 800265a:	70bb      	strb	r3, [r7, #2]
 800265c:	4613      	mov	r3, r2
 800265e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HCcharMps = mps;
 8002660:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002662:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hhcd);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_HCD_HC_Init+0x2c>
 800266e:	2302      	movs	r3, #2
 8002670:	e087      	b.n	8002782 <HAL_HCD_HC_Init+0x13c>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338
  hhcd->hc[ch_num].do_ping = 0U;
 800267a:	78fa      	ldrb	r2, [r7, #3]
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4413      	add	r3, r2
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	440b      	add	r3, r1
 8002688:	333d      	adds	r3, #61	@ 0x3d
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800268e:	78fa      	ldrb	r2, [r7, #3]
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	4413      	add	r3, r2
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	440b      	add	r3, r1
 800269c:	3338      	adds	r3, #56	@ 0x38
 800269e:	787a      	ldrb	r2, [r7, #1]
 80026a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80026a2:	78fa      	ldrb	r2, [r7, #3]
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	4413      	add	r3, r2
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	440b      	add	r3, r1
 80026b0:	3339      	adds	r3, #57	@ 0x39
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80026b6:	78fa      	ldrb	r2, [r7, #3]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	440b      	add	r3, r1
 80026c4:	3340      	adds	r3, #64	@ 0x40
 80026c6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80026ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	78bb      	ldrb	r3, [r7, #2]
 80026d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026d4:	b2d8      	uxtb	r0, r3
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4413      	add	r3, r2
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	440b      	add	r3, r1
 80026e2:	333a      	adds	r3, #58	@ 0x3a
 80026e4:	4602      	mov	r2, r0
 80026e6:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	4619      	mov	r1, r3
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 fb6b 	bl	8002dc8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80026f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	da0a      	bge.n	8002710 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4413      	add	r3, r2
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	440b      	add	r3, r1
 8002708:	333b      	adds	r3, #59	@ 0x3b
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
 800270e:	e009      	b.n	8002724 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4413      	add	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	440b      	add	r3, r1
 800271e:	333b      	adds	r3, #59	@ 0x3b
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4413      	add	r3, r2
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	440b      	add	r3, r1
 8002732:	333c      	adds	r3, #60	@ 0x3c
 8002734:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002738:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800273a:	78fa      	ldrb	r2, [r7, #3]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	b298      	uxth	r0, r3
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4413      	add	r3, r2
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	440b      	add	r3, r1
 800274c:	3342      	adds	r3, #66	@ 0x42
 800274e:	4602      	mov	r2, r0
 8002750:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	b29b      	uxth	r3, r3
 800275a:	787c      	ldrb	r4, [r7, #1]
 800275c:	78ba      	ldrb	r2, [r7, #2]
 800275e:	78f9      	ldrb	r1, [r7, #3]
 8002760:	9302      	str	r3, [sp, #8]
 8002762:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002766:	9301      	str	r3, [sp, #4]
 8002768:	f897 3020 	ldrb.w	r3, [r7, #32]
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	4623      	mov	r3, r4
 8002770:	f005 fc10 	bl	8007f94 <USB_HC_Init>
 8002774:	4603      	mov	r3, r0
 8002776:	72fb      	strb	r3, [r7, #11]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338

  return status;
 8002780:	7afb      	ldrb	r3, [r7, #11]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	bd90      	pop	{r4, r7, pc}

0800278a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_HCD_HC_Halt+0x1e>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e00f      	b.n	80027c8 <HAL_HCD_HC_Halt+0x3e>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	78fa      	ldrb	r2, [r7, #3]
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f005 fe00 	bl	80083be <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338

  return status;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	4608      	mov	r0, r1
 80027da:	4611      	mov	r1, r2
 80027dc:	461a      	mov	r2, r3
 80027de:	4603      	mov	r3, r0
 80027e0:	70fb      	strb	r3, [r7, #3]
 80027e2:	460b      	mov	r3, r1
 80027e4:	70bb      	strb	r3, [r7, #2]
 80027e6:	4613      	mov	r3, r2
 80027e8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	440b      	add	r3, r1
 80027f8:	333b      	adds	r3, #59	@ 0x3b
 80027fa:	78ba      	ldrb	r2, [r7, #2]
 80027fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80027fe:	78fa      	ldrb	r2, [r7, #3]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	440b      	add	r3, r1
 800280c:	3340      	adds	r3, #64	@ 0x40
 800280e:	787a      	ldrb	r2, [r7, #1]
 8002810:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002812:	7c3b      	ldrb	r3, [r7, #16]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d114      	bne.n	8002842 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002818:	78fa      	ldrb	r2, [r7, #3]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	4413      	add	r3, r2
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	440b      	add	r3, r1
 8002826:	3344      	adds	r3, #68	@ 0x44
 8002828:	2203      	movs	r2, #3
 800282a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	4413      	add	r3, r2
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	440b      	add	r3, r1
 800283a:	333d      	adds	r3, #61	@ 0x3d
 800283c:	7f3a      	ldrb	r2, [r7, #28]
 800283e:	701a      	strb	r2, [r3, #0]
 8002840:	e009      	b.n	8002856 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4413      	add	r3, r2
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	440b      	add	r3, r1
 8002850:	3344      	adds	r3, #68	@ 0x44
 8002852:	2202      	movs	r2, #2
 8002854:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002856:	787b      	ldrb	r3, [r7, #1]
 8002858:	2b03      	cmp	r3, #3
 800285a:	f200 80d6 	bhi.w	8002a0a <HAL_HCD_HC_SubmitRequest+0x23a>
 800285e:	a201      	add	r2, pc, #4	@ (adr r2, 8002864 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002864:	08002875 	.word	0x08002875
 8002868:	080029f5 	.word	0x080029f5
 800286c:	080028e1 	.word	0x080028e1
 8002870:	0800296b 	.word	0x0800296b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002874:	7c3b      	ldrb	r3, [r7, #16]
 8002876:	2b01      	cmp	r3, #1
 8002878:	f040 80c9 	bne.w	8002a0e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (direction == 0U)
 800287c:	78bb      	ldrb	r3, [r7, #2]
 800287e:	2b00      	cmp	r3, #0
 8002880:	f040 80c5 	bne.w	8002a0e <HAL_HCD_HC_SubmitRequest+0x23e>
        {
          if (length == 0U)
 8002884:	8b3b      	ldrh	r3, [r7, #24]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <HAL_HCD_HC_SubmitRequest+0xce>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800288a:	78fa      	ldrb	r2, [r7, #3]
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	440b      	add	r3, r1
 8002898:	3359      	adds	r3, #89	@ 0x59
 800289a:	2201      	movs	r2, #1
 800289c:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800289e:	78fa      	ldrb	r2, [r7, #3]
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	4413      	add	r3, r2
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	440b      	add	r3, r1
 80028ac:	3359      	adds	r3, #89	@ 0x59
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10a      	bne.n	80028ca <HAL_HCD_HC_SubmitRequest+0xfa>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	440b      	add	r3, r1
 80028c2:	3344      	adds	r3, #68	@ 0x44
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
            /* Put the PID 1 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
          }
        }
      }
      break;
 80028c8:	e0a1      	b.n	8002a0e <HAL_HCD_HC_SubmitRequest+0x23e>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	440b      	add	r3, r1
 80028d8:	3344      	adds	r3, #68	@ 0x44
 80028da:	2202      	movs	r2, #2
 80028dc:	701a      	strb	r2, [r3, #0]
      break;
 80028de:	e096      	b.n	8002a0e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80028e0:	78bb      	ldrb	r3, [r7, #2]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d120      	bne.n	8002928 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	440b      	add	r3, r1
 80028f4:	3359      	adds	r3, #89	@ 0x59
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028fc:	78fa      	ldrb	r2, [r7, #3]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	4413      	add	r3, r2
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	440b      	add	r3, r1
 800290a:	3344      	adds	r3, #68	@ 0x44
 800290c:	2200      	movs	r2, #0
 800290e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002910:	e07e      	b.n	8002a10 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002912:	78fa      	ldrb	r2, [r7, #3]
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	4413      	add	r3, r2
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	440b      	add	r3, r1
 8002920:	3344      	adds	r3, #68	@ 0x44
 8002922:	2202      	movs	r2, #2
 8002924:	701a      	strb	r2, [r3, #0]
      break;
 8002926:	e073      	b.n	8002a10 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002928:	78fa      	ldrb	r2, [r7, #3]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	4413      	add	r3, r2
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	440b      	add	r3, r1
 8002936:	3358      	adds	r3, #88	@ 0x58
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10a      	bne.n	8002954 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800293e:	78fa      	ldrb	r2, [r7, #3]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	440b      	add	r3, r1
 800294c:	3344      	adds	r3, #68	@ 0x44
 800294e:	2200      	movs	r2, #0
 8002950:	701a      	strb	r2, [r3, #0]
      break;
 8002952:	e05d      	b.n	8002a10 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002954:	78fa      	ldrb	r2, [r7, #3]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4413      	add	r3, r2
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	440b      	add	r3, r1
 8002962:	3344      	adds	r3, #68	@ 0x44
 8002964:	2202      	movs	r2, #2
 8002966:	701a      	strb	r2, [r3, #0]
      break;
 8002968:	e052      	b.n	8002a10 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800296a:	78bb      	ldrb	r3, [r7, #2]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d120      	bne.n	80029b2 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002970:	78fa      	ldrb	r2, [r7, #3]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4413      	add	r3, r2
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	440b      	add	r3, r1
 800297e:	3359      	adds	r3, #89	@ 0x59
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10a      	bne.n	800299c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002986:	78fa      	ldrb	r2, [r7, #3]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4413      	add	r3, r2
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	440b      	add	r3, r1
 8002994:	3344      	adds	r3, #68	@ 0x44
 8002996:	2200      	movs	r2, #0
 8002998:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800299a:	e039      	b.n	8002a10 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800299c:	78fa      	ldrb	r2, [r7, #3]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	4413      	add	r3, r2
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	440b      	add	r3, r1
 80029aa:	3344      	adds	r3, #68	@ 0x44
 80029ac:	2202      	movs	r2, #2
 80029ae:	701a      	strb	r2, [r3, #0]
      break;
 80029b0:	e02e      	b.n	8002a10 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80029b2:	78fa      	ldrb	r2, [r7, #3]
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	4413      	add	r3, r2
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	440b      	add	r3, r1
 80029c0:	3358      	adds	r3, #88	@ 0x58
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10a      	bne.n	80029de <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	440b      	add	r3, r1
 80029d6:	3344      	adds	r3, #68	@ 0x44
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
      break;
 80029dc:	e018      	b.n	8002a10 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4413      	add	r3, r2
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	440b      	add	r3, r1
 80029ec:	3344      	adds	r3, #68	@ 0x44
 80029ee:	2202      	movs	r2, #2
 80029f0:	701a      	strb	r2, [r3, #0]
      break;
 80029f2:	e00d      	b.n	8002a10 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029f4:	78fa      	ldrb	r2, [r7, #3]
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	4413      	add	r3, r2
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	440b      	add	r3, r1
 8002a02:	3344      	adds	r3, #68	@ 0x44
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
      break;
 8002a08:	e002      	b.n	8002a10 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002a0a:	bf00      	nop
 8002a0c:	e000      	b.n	8002a10 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002a0e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002a10:	78fa      	ldrb	r2, [r7, #3]
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4413      	add	r3, r2
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	440b      	add	r3, r1
 8002a1e:	3348      	adds	r3, #72	@ 0x48
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002a24:	78fa      	ldrb	r2, [r7, #3]
 8002a26:	8b39      	ldrh	r1, [r7, #24]
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4413      	add	r3, r2
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	4403      	add	r3, r0
 8002a34:	3350      	adds	r3, #80	@ 0x50
 8002a36:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002a38:	78fa      	ldrb	r2, [r7, #3]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	440b      	add	r3, r1
 8002a46:	3364      	adds	r3, #100	@ 0x64
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002a4c:	78fa      	ldrb	r2, [r7, #3]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	4413      	add	r3, r2
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	440b      	add	r3, r1
 8002a5a:	3354      	adds	r3, #84	@ 0x54
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a60:	78fa      	ldrb	r2, [r7, #3]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	440b      	add	r3, r1
 8002a6e:	3339      	adds	r3, #57	@ 0x39
 8002a70:	78fa      	ldrb	r2, [r7, #3]
 8002a72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	4413      	add	r3, r2
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	440b      	add	r3, r1
 8002a82:	3365      	adds	r3, #101	@ 0x65
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4413      	add	r3, r2
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	3338      	adds	r3, #56	@ 0x38
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f005 fb85 	bl	80081ac <USB_HC_StartXfer>
 8002aa2:	4603      	mov	r3, r0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f005 f8da 	bl	8007c7c <USB_GetMode>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	f040 80fa 	bne.w	8002cc4 <HAL_HCD_IRQHandler+0x218>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f005 f89d 	bl	8007c14 <USB_ReadInterrupts>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 80f0 	beq.w	8002cc2 <HAL_HCD_IRQHandler+0x216>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f005 f894 	bl	8007c14 <USB_ReadInterrupts>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002af2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002af6:	d104      	bne.n	8002b02 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002b00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f005 f884 	bl	8007c14 <USB_ReadInterrupts>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b16:	d104      	bne.n	8002b22 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002b20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f005 f874 	bl	8007c14 <USB_ReadInterrupts>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b36:	d104      	bne.n	8002b42 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f005 f864 	bl	8007c14 <USB_ReadInterrupts>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d103      	bne.n	8002b5e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f005 f856 	bl	8007c14 <USB_ReadInterrupts>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b72:	d120      	bne.n	8002bb6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002b7c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d113      	bne.n	8002bb6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002b8e:	2110      	movs	r1, #16
 8002b90:	6938      	ldr	r0, [r7, #16]
 8002b92:	f004 ff49 	bl	8007a28 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002b96:	6938      	ldr	r0, [r7, #16]
 8002b98:	f004 ff7a 	bl	8007a90 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d105      	bne.n	8002bb0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2101      	movs	r1, #1
 8002baa:	4618      	mov	r0, r3
 8002bac:	f005 f92a 	bl	8007e04 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f009 faab 	bl	800c10c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f005 f82a 	bl	8007c14 <USB_ReadInterrupts>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bca:	d102      	bne.n	8002bd2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f001 f90c 	bl	8003dea <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f005 f81c 	bl	8007c14 <USB_ReadInterrupts>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d106      	bne.n	8002bf4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f009 fa74 	bl	800c0d4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2208      	movs	r2, #8
 8002bf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f005 f80b 	bl	8007c14 <USB_ReadInterrupts>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c08:	d138      	bne.n	8002c7c <HAL_HCD_IRQHandler+0x1d0>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f005 fbc4 	bl	800839c <USB_HC_ReadInterrupt>
 8002c14:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	e025      	b.n	8002c68 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d018      	beq.n	8002c62 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c46:	d106      	bne.n	8002c56 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f8db 	bl	8002e0a <HCD_HC_IN_IRQHandler>
 8002c54:	e005      	b.n	8002c62 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fd0f 	bl	8003680 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	3301      	adds	r3, #1
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d3d4      	bcc.n	8002c1c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f004 ffc7 	bl	8007c14 <USB_ReadInterrupts>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	2b10      	cmp	r3, #16
 8002c8e:	d101      	bne.n	8002c94 <HAL_HCD_IRQHandler+0x1e8>
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <HAL_HCD_IRQHandler+0x1ea>
 8002c94:	2300      	movs	r3, #0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d014      	beq.n	8002cc4 <HAL_HCD_IRQHandler+0x218>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699a      	ldr	r2, [r3, #24]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0210 	bic.w	r2, r2, #16
 8002ca8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 ffbe 	bl	8003c2c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699a      	ldr	r2, [r3, #24]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0210 	orr.w	r2, r2, #16
 8002cbe:	619a      	str	r2, [r3, #24]
 8002cc0:	e000      	b.n	8002cc4 <HAL_HCD_IRQHandler+0x218>
      return;
 8002cc2:	bf00      	nop
    }
  }
}
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_HCD_Start+0x16>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e013      	b.n	8002d08 <HAL_HCD_Start+0x3e>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2101      	movs	r1, #1
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f005 f8ef 	bl	8007ed2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f004 fe27 	bl	800794c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_HCD_Stop+0x16>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e00d      	b.n	8002d42 <HAL_HCD_Stop+0x32>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338
  (void)USB_StopHost(hhcd->Instance);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f005 fc63 	bl	80085fe <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f005 f891 	bl	8007e7e <USB_ResetPort>
 8002d5c:	4603      	mov	r3, r0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002d72:	78fa      	ldrb	r2, [r7, #3]
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	4413      	add	r3, r2
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	440b      	add	r3, r1
 8002d80:	3364      	adds	r3, #100	@ 0x64
 8002d82:	781b      	ldrb	r3, [r3, #0]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f005 f8e8 	bl	8007f72 <USB_GetCurrentFrame>
 8002da2:	4603      	mov	r3, r0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f005 f8c3 	bl	8007f44 <USB_GetHostSpeed>
 8002dbe:	4603      	mov	r3, r0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4413      	add	r3, r2
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	440b      	add	r3, r1
 8002de2:	333f      	adds	r3, #63	@ 0x3f
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	440b      	add	r3, r1
 8002df6:	333e      	adds	r3, #62	@ 0x3e
 8002df8:	2200      	movs	r2, #0
 8002dfa:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b086      	sub	sp, #24
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	460b      	mov	r3, r1
 8002e14:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	78fa      	ldrb	r2, [r7, #3]
 8002e26:	4611      	mov	r1, r2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f004 ff06 	bl	8007c3a <USB_ReadChInterrupts>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d11a      	bne.n	8002e6e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e44:	461a      	mov	r2, r3
 8002e46:	2304      	movs	r3, #4
 8002e48:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002e4a:	78fa      	ldrb	r2, [r7, #3]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	4413      	add	r3, r2
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	440b      	add	r3, r1
 8002e58:	3365      	adds	r3, #101	@ 0x65
 8002e5a:	2207      	movs	r2, #7
 8002e5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	4611      	mov	r1, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f005 faa9 	bl	80083be <USB_HC_Halt>
 8002e6c:	e09e      	b.n	8002fac <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	78fa      	ldrb	r2, [r7, #3]
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f004 fedf 	bl	8007c3a <USB_ReadChInterrupts>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e86:	d11b      	bne.n	8002ec0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e94:	461a      	mov	r2, r3
 8002e96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002e9c:	78fa      	ldrb	r2, [r7, #3]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	4413      	add	r3, r2
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	440b      	add	r3, r1
 8002eaa:	3365      	adds	r3, #101	@ 0x65
 8002eac:	2208      	movs	r2, #8
 8002eae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f005 fa80 	bl	80083be <USB_HC_Halt>
 8002ebe:	e075      	b.n	8002fac <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	78fa      	ldrb	r2, [r7, #3]
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f004 feb6 	bl	8007c3a <USB_ReadChInterrupts>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d11a      	bne.n	8002f0e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002ed8:	78fb      	ldrb	r3, [r7, #3]
 8002eda:	015a      	lsls	r2, r3, #5
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4413      	add	r3, r2
 8002ee0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002eea:	78fa      	ldrb	r2, [r7, #3]
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	4413      	add	r3, r2
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	440b      	add	r3, r1
 8002ef8:	3365      	adds	r3, #101	@ 0x65
 8002efa:	2206      	movs	r2, #6
 8002efc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f005 fa59 	bl	80083be <USB_HC_Halt>
 8002f0c:	e04e      	b.n	8002fac <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f004 fe8f 	bl	8007c3a <USB_ReadChInterrupts>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f26:	d11b      	bne.n	8002f60 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002f28:	78fb      	ldrb	r3, [r7, #3]
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f34:	461a      	mov	r2, r3
 8002f36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4413      	add	r3, r2
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	440b      	add	r3, r1
 8002f4a:	3365      	adds	r3, #101	@ 0x65
 8002f4c:	2209      	movs	r2, #9
 8002f4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	78fa      	ldrb	r2, [r7, #3]
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f005 fa30 	bl	80083be <USB_HC_Halt>
 8002f5e:	e025      	b.n	8002fac <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	4611      	mov	r1, r2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f004 fe66 	bl	8007c3a <USB_ReadChInterrupts>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f74:	2b80      	cmp	r3, #128	@ 0x80
 8002f76:	d119      	bne.n	8002fac <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f84:	461a      	mov	r2, r3
 8002f86:	2380      	movs	r3, #128	@ 0x80
 8002f88:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	4413      	add	r3, r2
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	440b      	add	r3, r1
 8002f98:	3365      	adds	r3, #101	@ 0x65
 8002f9a:	2207      	movs	r2, #7
 8002f9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f005 fa09 	bl	80083be <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f004 fe40 	bl	8007c3a <USB_ReadChInterrupts>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fc4:	d111      	bne.n	8002fea <HCD_HC_IN_IRQHandler+0x1e0>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	4611      	mov	r1, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f005 f9f5 	bl	80083be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	015a      	lsls	r2, r3, #5
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fe6:	6093      	str	r3, [r2, #8]
 8002fe8:	e347      	b.n	800367a <HCD_HC_IN_IRQHandler+0x870>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f004 fe21 	bl	8007c3a <USB_ReadChInterrupts>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	f040 80d8 	bne.w	80031b4 <HCD_HC_IN_IRQHandler+0x3aa>
  {
    hhcd->hc[chnum].state = HC_XFRC;
 8003004:	78fa      	ldrb	r2, [r7, #3]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	4413      	add	r3, r2
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	440b      	add	r3, r1
 8003012:	3365      	adds	r3, #101	@ 0x65
 8003014:	2201      	movs	r2, #1
 8003016:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	4413      	add	r3, r2
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	440b      	add	r3, r1
 8003026:	3360      	adds	r3, #96	@ 0x60
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4413      	add	r3, r2
 8003034:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003038:	461a      	mov	r2, r3
 800303a:	2301      	movs	r3, #1
 800303c:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	4413      	add	r3, r2
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	440b      	add	r3, r1
 800304c:	3340      	adds	r3, #64	@ 0x40
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <HCD_HC_IN_IRQHandler+0x260>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	4413      	add	r3, r2
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	440b      	add	r3, r1
 8003062:	3340      	adds	r3, #64	@ 0x40
 8003064:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003066:	2b02      	cmp	r3, #2
 8003068:	d110      	bne.n	800308c <HCD_HC_IN_IRQHandler+0x282>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	4611      	mov	r1, r2
 8003072:	4618      	mov	r0, r3
 8003074:	f005 f9a3 	bl	80083be <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4413      	add	r3, r2
 8003080:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003084:	461a      	mov	r2, r3
 8003086:	2310      	movs	r3, #16
 8003088:	6093      	str	r3, [r2, #8]
 800308a:	e03d      	b.n	8003108 <HCD_HC_IN_IRQHandler+0x2fe>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800308c:	78fa      	ldrb	r2, [r7, #3]
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4413      	add	r3, r2
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	440b      	add	r3, r1
 800309a:	3340      	adds	r3, #64	@ 0x40
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d00a      	beq.n	80030b8 <HCD_HC_IN_IRQHandler+0x2ae>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80030a2:	78fa      	ldrb	r2, [r7, #3]
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	440b      	add	r3, r1
 80030b0:	3340      	adds	r3, #64	@ 0x40
 80030b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d127      	bne.n	8003108 <HCD_HC_IN_IRQHandler+0x2fe>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	0151      	lsls	r1, r2, #5
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	440a      	add	r2, r1
 80030ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030d2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80030d6:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80030d8:	78fa      	ldrb	r2, [r7, #3]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	4413      	add	r3, r2
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	440b      	add	r3, r1
 80030e6:	3364      	adds	r3, #100	@ 0x64
 80030e8:	2201      	movs	r2, #1
 80030ea:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80030ec:	78fa      	ldrb	r2, [r7, #3]
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	440b      	add	r3, r1
 80030fa:	3364      	adds	r3, #100	@ 0x64
 80030fc:	781a      	ldrb	r2, [r3, #0]
 80030fe:	78fb      	ldrb	r3, [r7, #3]
 8003100:	4619      	mov	r1, r3
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f009 f810 	bl	800c128 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d13a      	bne.n	8003186 <HCD_HC_IN_IRQHandler+0x37c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003110:	78fa      	ldrb	r2, [r7, #3]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4413      	add	r3, r2
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	440b      	add	r3, r1
 800311e:	3354      	adds	r3, #84	@ 0x54
 8003120:	6819      	ldr	r1, [r3, #0]
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4413      	add	r3, r2
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	4403      	add	r3, r0
 8003130:	3342      	adds	r3, #66	@ 0x42
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	440b      	add	r3, r1
 8003136:	1e59      	subs	r1, r3, #1
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	4413      	add	r3, r2
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	4403      	add	r3, r0
 8003146:	3342      	adds	r3, #66	@ 0x42
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	fbb1 f3f3 	udiv	r3, r1, r3
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 8291 	beq.w	800367a <HCD_HC_IN_IRQHandler+0x870>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	4413      	add	r3, r2
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	440b      	add	r3, r1
 8003166:	3358      	adds	r3, #88	@ 0x58
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	f083 0301 	eor.w	r3, r3, #1
 8003170:	b2d8      	uxtb	r0, r3
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	4413      	add	r3, r2
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	440b      	add	r3, r1
 800317e:	3358      	adds	r3, #88	@ 0x58
 8003180:	4602      	mov	r2, r0
 8003182:	701a      	strb	r2, [r3, #0]
 8003184:	e279      	b.n	800367a <HCD_HC_IN_IRQHandler+0x870>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	4413      	add	r3, r2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	440b      	add	r3, r1
 8003194:	3358      	adds	r3, #88	@ 0x58
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	78fa      	ldrb	r2, [r7, #3]
 800319a:	f083 0301 	eor.w	r3, r3, #1
 800319e:	b2d8      	uxtb	r0, r3
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	440b      	add	r3, r1
 80031ac:	3358      	adds	r3, #88	@ 0x58
 80031ae:	4602      	mov	r2, r0
 80031b0:	701a      	strb	r2, [r3, #0]
 80031b2:	e262      	b.n	800367a <HCD_HC_IN_IRQHandler+0x870>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	4611      	mov	r1, r2
 80031bc:	4618      	mov	r0, r3
 80031be:	f004 fd3c 	bl	8007c3a <USB_ReadChInterrupts>
 80031c2:	4603      	mov	r3, r0
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	d109      	bne.n	80031e0 <HCD_HC_IN_IRQHandler+0x3d6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031d8:	461a      	mov	r2, r3
 80031da:	2320      	movs	r3, #32
 80031dc:	6093      	str	r3, [r2, #8]
 80031de:	e24c      	b.n	800367a <HCD_HC_IN_IRQHandler+0x870>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	4611      	mov	r1, r2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f004 fd26 	bl	8007c3a <USB_ReadChInterrupts>
 80031ee:	4603      	mov	r3, r0
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	f040 81a0 	bne.w	800353a <HCD_HC_IN_IRQHandler+0x730>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4413      	add	r3, r2
 8003202:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003206:	461a      	mov	r2, r3
 8003208:	2302      	movs	r3, #2
 800320a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800320c:	78fa      	ldrb	r2, [r7, #3]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	4413      	add	r3, r2
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	440b      	add	r3, r1
 800321a:	3365      	adds	r3, #101	@ 0x65
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d114      	bne.n	800324c <HCD_HC_IN_IRQHandler+0x442>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003222:	78fa      	ldrb	r2, [r7, #3]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4413      	add	r3, r2
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	440b      	add	r3, r1
 8003230:	3365      	adds	r3, #101	@ 0x65
 8003232:	2202      	movs	r2, #2
 8003234:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	4413      	add	r3, r2
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	440b      	add	r3, r1
 8003244:	3364      	adds	r3, #100	@ 0x64
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]
 800324a:	e167      	b.n	800351c <HCD_HC_IN_IRQHandler+0x712>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800324c:	78fa      	ldrb	r2, [r7, #3]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	4413      	add	r3, r2
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	440b      	add	r3, r1
 800325a:	3365      	adds	r3, #101	@ 0x65
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b06      	cmp	r3, #6
 8003260:	d114      	bne.n	800328c <HCD_HC_IN_IRQHandler+0x482>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4413      	add	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	440b      	add	r3, r1
 8003270:	3365      	adds	r3, #101	@ 0x65
 8003272:	2202      	movs	r2, #2
 8003274:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	4413      	add	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	440b      	add	r3, r1
 8003284:	3364      	adds	r3, #100	@ 0x64
 8003286:	2205      	movs	r2, #5
 8003288:	701a      	strb	r2, [r3, #0]
 800328a:	e147      	b.n	800351c <HCD_HC_IN_IRQHandler+0x712>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800328c:	78fa      	ldrb	r2, [r7, #3]
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	4413      	add	r3, r2
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	440b      	add	r3, r1
 800329a:	3365      	adds	r3, #101	@ 0x65
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b07      	cmp	r3, #7
 80032a0:	d00a      	beq.n	80032b8 <HCD_HC_IN_IRQHandler+0x4ae>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4413      	add	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	440b      	add	r3, r1
 80032b0:	3365      	adds	r3, #101	@ 0x65
 80032b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80032b4:	2b09      	cmp	r3, #9
 80032b6:	d176      	bne.n	80033a6 <HCD_HC_IN_IRQHandler+0x59c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	4413      	add	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	440b      	add	r3, r1
 80032c6:	3365      	adds	r3, #101	@ 0x65
 80032c8:	2202      	movs	r2, #2
 80032ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	4413      	add	r3, r2
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	440b      	add	r3, r1
 80032da:	3360      	adds	r3, #96	@ 0x60
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	1c59      	adds	r1, r3, #1
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4413      	add	r3, r2
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	4403      	add	r3, r0
 80032ec:	3360      	adds	r3, #96	@ 0x60
 80032ee:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032f0:	78fa      	ldrb	r2, [r7, #3]
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	4413      	add	r3, r2
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	440b      	add	r3, r1
 80032fe:	3360      	adds	r3, #96	@ 0x60
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d914      	bls.n	8003330 <HCD_HC_IN_IRQHandler+0x526>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	4413      	add	r3, r2
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	440b      	add	r3, r1
 8003314:	3360      	adds	r3, #96	@ 0x60
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4413      	add	r3, r2
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	440b      	add	r3, r1
 8003328:	3364      	adds	r3, #100	@ 0x64
 800332a:	2204      	movs	r2, #4
 800332c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800332e:	e0f4      	b.n	800351a <HCD_HC_IN_IRQHandler+0x710>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003330:	78fa      	ldrb	r2, [r7, #3]
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4413      	add	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	440b      	add	r3, r1
 800333e:	3364      	adds	r3, #100	@ 0x64
 8003340:	2202      	movs	r2, #2
 8003342:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003344:	78fa      	ldrb	r2, [r7, #3]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	440b      	add	r3, r1
 8003352:	3340      	adds	r3, #64	@ 0x40
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00b      	beq.n	8003372 <HCD_HC_IN_IRQHandler+0x568>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	4413      	add	r3, r2
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	440b      	add	r3, r1
 8003368:	3340      	adds	r3, #64	@ 0x40
 800336a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800336c:	2b02      	cmp	r3, #2
 800336e:	f040 80d4 	bne.w	800351a <HCD_HC_IN_IRQHandler+0x710>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003372:	78fb      	ldrb	r3, [r7, #3]
 8003374:	015a      	lsls	r2, r3, #5
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4413      	add	r3, r2
 800337a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003388:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003390:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003392:	78fb      	ldrb	r3, [r7, #3]
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4413      	add	r3, r2
 800339a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800339e:	461a      	mov	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033a4:	e0b9      	b.n	800351a <HCD_HC_IN_IRQHandler+0x710>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80033a6:	78fa      	ldrb	r2, [r7, #3]
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	440b      	add	r3, r1
 80033b4:	3365      	adds	r3, #101	@ 0x65
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b05      	cmp	r3, #5
 80033ba:	d10a      	bne.n	80033d2 <HCD_HC_IN_IRQHandler+0x5c8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033bc:	78fa      	ldrb	r2, [r7, #3]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	4413      	add	r3, r2
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	440b      	add	r3, r1
 80033ca:	3365      	adds	r3, #101	@ 0x65
 80033cc:	2202      	movs	r2, #2
 80033ce:	701a      	strb	r2, [r3, #0]
 80033d0:	e0a4      	b.n	800351c <HCD_HC_IN_IRQHandler+0x712>
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	4413      	add	r3, r2
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	440b      	add	r3, r1
 80033e0:	3365      	adds	r3, #101	@ 0x65
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d10a      	bne.n	80033fe <HCD_HC_IN_IRQHandler+0x5f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	4413      	add	r3, r2
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	440b      	add	r3, r1
 80033f6:	3365      	adds	r3, #101	@ 0x65
 80033f8:	2202      	movs	r2, #2
 80033fa:	701a      	strb	r2, [r3, #0]
 80033fc:	e08e      	b.n	800351c <HCD_HC_IN_IRQHandler+0x712>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80033fe:	78fa      	ldrb	r2, [r7, #3]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	4413      	add	r3, r2
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	440b      	add	r3, r1
 800340c:	3365      	adds	r3, #101	@ 0x65
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b04      	cmp	r3, #4
 8003412:	d143      	bne.n	800349c <HCD_HC_IN_IRQHandler+0x692>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003414:	78fa      	ldrb	r2, [r7, #3]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4413      	add	r3, r2
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	440b      	add	r3, r1
 8003422:	3365      	adds	r3, #101	@ 0x65
 8003424:	2202      	movs	r2, #2
 8003426:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	4413      	add	r3, r2
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	440b      	add	r3, r1
 8003436:	3364      	adds	r3, #100	@ 0x64
 8003438:	2202      	movs	r2, #2
 800343a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	4413      	add	r3, r2
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	440b      	add	r3, r1
 800344a:	3340      	adds	r3, #64	@ 0x40
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <HCD_HC_IN_IRQHandler+0x65e>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4413      	add	r3, r2
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	440b      	add	r3, r1
 8003460:	3340      	adds	r3, #64	@ 0x40
 8003462:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003464:	2b02      	cmp	r3, #2
 8003466:	d159      	bne.n	800351c <HCD_HC_IN_IRQHandler+0x712>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4413      	add	r3, r2
 8003470:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800347e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003486:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4413      	add	r3, r2
 8003490:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003494:	461a      	mov	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	e03f      	b.n	800351c <HCD_HC_IN_IRQHandler+0x712>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800349c:	78fa      	ldrb	r2, [r7, #3]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	4413      	add	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	440b      	add	r3, r1
 80034aa:	3365      	adds	r3, #101	@ 0x65
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d126      	bne.n	8003500 <HCD_HC_IN_IRQHandler+0x6f6>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034b2:	78fa      	ldrb	r2, [r7, #3]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	4413      	add	r3, r2
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	440b      	add	r3, r1
 80034c0:	3365      	adds	r3, #101	@ 0x65
 80034c2:	2202      	movs	r2, #2
 80034c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	4413      	add	r3, r2
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	440b      	add	r3, r1
 80034d4:	3360      	adds	r3, #96	@ 0x60
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	1c59      	adds	r1, r3, #1
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	4413      	add	r3, r2
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	4403      	add	r3, r0
 80034e6:	3360      	adds	r3, #96	@ 0x60
 80034e8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	4413      	add	r3, r2
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	440b      	add	r3, r1
 80034f8:	3364      	adds	r3, #100	@ 0x64
 80034fa:	2204      	movs	r2, #4
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e00d      	b.n	800351c <HCD_HC_IN_IRQHandler+0x712>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	4413      	add	r3, r2
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	440b      	add	r3, r1
 800350e:	3365      	adds	r3, #101	@ 0x65
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b02      	cmp	r3, #2
 8003514:	f000 80b0 	beq.w	8003678 <HCD_HC_IN_IRQHandler+0x86e>
 8003518:	e000      	b.n	800351c <HCD_HC_IN_IRQHandler+0x712>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800351a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800351c:	78fa      	ldrb	r2, [r7, #3]
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	4413      	add	r3, r2
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	440b      	add	r3, r1
 800352a:	3364      	adds	r3, #100	@ 0x64
 800352c:	781a      	ldrb	r2, [r3, #0]
 800352e:	78fb      	ldrb	r3, [r7, #3]
 8003530:	4619      	mov	r1, r3
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f008 fdf8 	bl	800c128 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003538:	e09f      	b.n	800367a <HCD_HC_IN_IRQHandler+0x870>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	78fa      	ldrb	r2, [r7, #3]
 8003540:	4611      	mov	r1, r2
 8003542:	4618      	mov	r0, r3
 8003544:	f004 fb79 	bl	8007c3a <USB_ReadChInterrupts>
 8003548:	4603      	mov	r3, r0
 800354a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800354e:	2b40      	cmp	r3, #64	@ 0x40
 8003550:	d124      	bne.n	800359c <HCD_HC_IN_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4413      	add	r3, r2
 800355a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800355e:	461a      	mov	r2, r3
 8003560:	2340      	movs	r3, #64	@ 0x40
 8003562:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003564:	78fa      	ldrb	r2, [r7, #3]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4413      	add	r3, r2
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	440b      	add	r3, r1
 8003572:	3365      	adds	r3, #101	@ 0x65
 8003574:	2205      	movs	r2, #5
 8003576:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	4413      	add	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	440b      	add	r3, r1
 8003586:	3360      	adds	r3, #96	@ 0x60
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	78fa      	ldrb	r2, [r7, #3]
 8003592:	4611      	mov	r1, r2
 8003594:	4618      	mov	r0, r3
 8003596:	f004 ff12 	bl	80083be <USB_HC_Halt>
 800359a:	e06e      	b.n	800367a <HCD_HC_IN_IRQHandler+0x870>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	78fa      	ldrb	r2, [r7, #3]
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f004 fb48 	bl	8007c3a <USB_ReadChInterrupts>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	2b10      	cmp	r3, #16
 80035b2:	d162      	bne.n	800367a <HCD_HC_IN_IRQHandler+0x870>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80035b4:	78fa      	ldrb	r2, [r7, #3]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	4413      	add	r3, r2
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	440b      	add	r3, r1
 80035c2:	3340      	adds	r3, #64	@ 0x40
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	d11b      	bne.n	8003602 <HCD_HC_IN_IRQHandler+0x7f8>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80035ca:	78fa      	ldrb	r2, [r7, #3]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	4413      	add	r3, r2
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	440b      	add	r3, r1
 80035d8:	3360      	adds	r3, #96	@ 0x60
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80035de:	78fa      	ldrb	r2, [r7, #3]
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	4413      	add	r3, r2
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	440b      	add	r3, r1
 80035ec:	3365      	adds	r3, #101	@ 0x65
 80035ee:	2204      	movs	r2, #4
 80035f0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	78fa      	ldrb	r2, [r7, #3]
 80035f8:	4611      	mov	r1, r2
 80035fa:	4618      	mov	r0, r3
 80035fc:	f004 fedf 	bl	80083be <USB_HC_Halt>
 8003600:	e030      	b.n	8003664 <HCD_HC_IN_IRQHandler+0x85a>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003602:	78fa      	ldrb	r2, [r7, #3]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4413      	add	r3, r2
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	440b      	add	r3, r1
 8003610:	3340      	adds	r3, #64	@ 0x40
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <HCD_HC_IN_IRQHandler+0x824>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	4413      	add	r3, r2
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	440b      	add	r3, r1
 8003626:	3340      	adds	r3, #64	@ 0x40
 8003628:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800362a:	2b02      	cmp	r3, #2
 800362c:	d11a      	bne.n	8003664 <HCD_HC_IN_IRQHandler+0x85a>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	4413      	add	r3, r2
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	440b      	add	r3, r1
 800363c:	3360      	adds	r3, #96	@ 0x60
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	4413      	add	r3, r2
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	440b      	add	r3, r1
 8003650:	3365      	adds	r3, #101	@ 0x65
 8003652:	2204      	movs	r2, #4
 8003654:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	4611      	mov	r1, r2
 800365e:	4618      	mov	r0, r3
 8003660:	f004 fead 	bl	80083be <USB_HC_Halt>
    else
    {
      /* ... */
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4413      	add	r3, r2
 800366c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003670:	461a      	mov	r2, r3
 8003672:	2310      	movs	r3, #16
 8003674:	6093      	str	r3, [r2, #8]
 8003676:	e000      	b.n	800367a <HCD_HC_IN_IRQHandler+0x870>
        return;
 8003678:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	78fa      	ldrb	r2, [r7, #3]
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f004 facb 	bl	8007c3a <USB_ReadChInterrupts>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d11a      	bne.n	80036e4 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ba:	461a      	mov	r2, r3
 80036bc:	2304      	movs	r3, #4
 80036be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80036c0:	78fa      	ldrb	r2, [r7, #3]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	4413      	add	r3, r2
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	440b      	add	r3, r1
 80036ce:	3365      	adds	r3, #101	@ 0x65
 80036d0:	2207      	movs	r2, #7
 80036d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	78fa      	ldrb	r2, [r7, #3]
 80036da:	4611      	mov	r1, r2
 80036dc:	4618      	mov	r0, r3
 80036de:	f004 fe6e 	bl	80083be <USB_HC_Halt>
 80036e2:	e2a0      	b.n	8003c26 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	78fa      	ldrb	r2, [r7, #3]
 80036ea:	4611      	mov	r1, r2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f004 faa4 	bl	8007c3a <USB_ReadChInterrupts>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d109      	bne.n	8003710 <HCD_HC_OUT_IRQHandler+0x90>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	4413      	add	r3, r2
 8003704:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003708:	461a      	mov	r2, r3
 800370a:	2320      	movs	r3, #32
 800370c:	6093      	str	r3, [r2, #8]
 800370e:	e28a      	b.n	8003c26 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	78fa      	ldrb	r2, [r7, #3]
 8003716:	4611      	mov	r1, r2
 8003718:	4618      	mov	r0, r3
 800371a:	f004 fa8e 	bl	8007c3a <USB_ReadChInterrupts>
 800371e:	4603      	mov	r3, r0
 8003720:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003724:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003728:	d111      	bne.n	800374e <HCD_HC_OUT_IRQHandler+0xce>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	4413      	add	r3, r2
 8003732:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003736:	461a      	mov	r2, r3
 8003738:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800373c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	78fa      	ldrb	r2, [r7, #3]
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f004 fe39 	bl	80083be <USB_HC_Halt>
 800374c:	e26b      	b.n	8003c26 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	78fa      	ldrb	r2, [r7, #3]
 8003754:	4611      	mov	r1, r2
 8003756:	4618      	mov	r0, r3
 8003758:	f004 fa6f 	bl	8007c3a <USB_ReadChInterrupts>
 800375c:	4603      	mov	r3, r0
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b01      	cmp	r3, #1
 8003764:	d124      	bne.n	80037b0 <HCD_HC_OUT_IRQHandler+0x130>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003766:	78fa      	ldrb	r2, [r7, #3]
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	4413      	add	r3, r2
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	440b      	add	r3, r1
 8003774:	3360      	adds	r3, #96	@ 0x60
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800377a:	78fb      	ldrb	r3, [r7, #3]
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4413      	add	r3, r2
 8003782:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003786:	461a      	mov	r2, r3
 8003788:	2301      	movs	r3, #1
 800378a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	4413      	add	r3, r2
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	440b      	add	r3, r1
 800379a:	3365      	adds	r3, #101	@ 0x65
 800379c:	2201      	movs	r2, #1
 800379e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	4611      	mov	r1, r2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f004 fe08 	bl	80083be <USB_HC_Halt>
 80037ae:	e23a      	b.n	8003c26 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	78fa      	ldrb	r2, [r7, #3]
 80037b6:	4611      	mov	r1, r2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f004 fa3e 	bl	8007c3a <USB_ReadChInterrupts>
 80037be:	4603      	mov	r3, r0
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d11a      	bne.n	80037fe <HCD_HC_OUT_IRQHandler+0x17e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037d4:	461a      	mov	r2, r3
 80037d6:	2308      	movs	r3, #8
 80037d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80037da:	78fa      	ldrb	r2, [r7, #3]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	4413      	add	r3, r2
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	440b      	add	r3, r1
 80037e8:	3365      	adds	r3, #101	@ 0x65
 80037ea:	2206      	movs	r2, #6
 80037ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	78fa      	ldrb	r2, [r7, #3]
 80037f4:	4611      	mov	r1, r2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f004 fde1 	bl	80083be <USB_HC_Halt>
 80037fc:	e213      	b.n	8003c26 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	4611      	mov	r1, r2
 8003806:	4618      	mov	r0, r3
 8003808:	f004 fa17 	bl	8007c3a <USB_ReadChInterrupts>
 800380c:	4603      	mov	r3, r0
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b10      	cmp	r3, #16
 8003814:	d124      	bne.n	8003860 <HCD_HC_OUT_IRQHandler+0x1e0>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003816:	78fa      	ldrb	r2, [r7, #3]
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	4613      	mov	r3, r2
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	4413      	add	r3, r2
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	440b      	add	r3, r1
 8003824:	3360      	adds	r3, #96	@ 0x60
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800382a:	78fa      	ldrb	r2, [r7, #3]
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	440b      	add	r3, r1
 8003838:	3365      	adds	r3, #101	@ 0x65
 800383a:	2204      	movs	r2, #4
 800383c:	701a      	strb	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	78fa      	ldrb	r2, [r7, #3]
 8003844:	4611      	mov	r1, r2
 8003846:	4618      	mov	r0, r3
 8003848:	f004 fdb9 	bl	80083be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4413      	add	r3, r2
 8003854:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003858:	461a      	mov	r2, r3
 800385a:	2310      	movs	r3, #16
 800385c:	6093      	str	r3, [r2, #8]
 800385e:	e1e2      	b.n	8003c26 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	4611      	mov	r1, r2
 8003868:	4618      	mov	r0, r3
 800386a:	f004 f9e6 	bl	8007c3a <USB_ReadChInterrupts>
 800386e:	4603      	mov	r3, r0
 8003870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003874:	2b80      	cmp	r3, #128	@ 0x80
 8003876:	d11a      	bne.n	80038ae <HCD_HC_OUT_IRQHandler+0x22e>
  {
    hhcd->hc[chnum].state = HC_XACTERR;
 8003878:	78fa      	ldrb	r2, [r7, #3]
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	4413      	add	r3, r2
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	440b      	add	r3, r1
 8003886:	3365      	adds	r3, #101	@ 0x65
 8003888:	2207      	movs	r2, #7
 800388a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	78fa      	ldrb	r2, [r7, #3]
 8003892:	4611      	mov	r1, r2
 8003894:	4618      	mov	r0, r3
 8003896:	f004 fd92 	bl	80083be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800389a:	78fb      	ldrb	r3, [r7, #3]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038a6:	461a      	mov	r2, r3
 80038a8:	2380      	movs	r3, #128	@ 0x80
 80038aa:	6093      	str	r3, [r2, #8]
 80038ac:	e1bb      	b.n	8003c26 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	78fa      	ldrb	r2, [r7, #3]
 80038b4:	4611      	mov	r1, r2
 80038b6:	4618      	mov	r0, r3
 80038b8:	f004 f9bf 	bl	8007c3a <USB_ReadChInterrupts>
 80038bc:	4603      	mov	r3, r0
 80038be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c6:	d11b      	bne.n	8003900 <HCD_HC_OUT_IRQHandler+0x280>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	4413      	add	r3, r2
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	440b      	add	r3, r1
 80038d6:	3365      	adds	r3, #101	@ 0x65
 80038d8:	2209      	movs	r2, #9
 80038da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	4611      	mov	r1, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f004 fd6a 	bl	80083be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80038ea:	78fb      	ldrb	r3, [r7, #3]
 80038ec:	015a      	lsls	r2, r3, #5
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4413      	add	r3, r2
 80038f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038f6:	461a      	mov	r2, r3
 80038f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038fc:	6093      	str	r3, [r2, #8]
 80038fe:	e192      	b.n	8003c26 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	78fa      	ldrb	r2, [r7, #3]
 8003906:	4611      	mov	r1, r2
 8003908:	4618      	mov	r0, r3
 800390a:	f004 f996 	bl	8007c3a <USB_ReadChInterrupts>
 800390e:	4603      	mov	r3, r0
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b02      	cmp	r3, #2
 8003916:	f040 8183 	bne.w	8003c20 <HCD_HC_OUT_IRQHandler+0x5a0>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800391a:	78fb      	ldrb	r3, [r7, #3]
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4413      	add	r3, r2
 8003922:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003926:	461a      	mov	r2, r3
 8003928:	2302      	movs	r3, #2
 800392a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800392c:	78fa      	ldrb	r2, [r7, #3]
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	4613      	mov	r3, r2
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	4413      	add	r3, r2
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	440b      	add	r3, r1
 800393a:	3365      	adds	r3, #101	@ 0x65
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b01      	cmp	r3, #1
 8003940:	f040 8093 	bne.w	8003a6a <HCD_HC_OUT_IRQHandler+0x3ea>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003944:	78fa      	ldrb	r2, [r7, #3]
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	4613      	mov	r3, r2
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	4413      	add	r3, r2
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	440b      	add	r3, r1
 8003952:	3365      	adds	r3, #101	@ 0x65
 8003954:	2202      	movs	r2, #2
 8003956:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	4413      	add	r3, r2
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	440b      	add	r3, r1
 8003966:	3364      	adds	r3, #100	@ 0x64
 8003968:	2201      	movs	r2, #1
 800396a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800396c:	78fa      	ldrb	r2, [r7, #3]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	4413      	add	r3, r2
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	440b      	add	r3, r1
 800397a:	3340      	adds	r3, #64	@ 0x40
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d00b      	beq.n	800399a <HCD_HC_OUT_IRQHandler+0x31a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003982:	78fa      	ldrb	r2, [r7, #3]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	4413      	add	r3, r2
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	440b      	add	r3, r1
 8003990:	3340      	adds	r3, #64	@ 0x40
 8003992:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003994:	2b03      	cmp	r3, #3
 8003996:	f040 8134 	bne.w	8003c02 <HCD_HC_OUT_IRQHandler+0x582>
      {
        if (hhcd->Init.dma_enable == 0U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d115      	bne.n	80039ce <HCD_HC_OUT_IRQHandler+0x34e>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80039a2:	78fa      	ldrb	r2, [r7, #3]
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	4413      	add	r3, r2
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	440b      	add	r3, r1
 80039b0:	3359      	adds	r3, #89	@ 0x59
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	78fa      	ldrb	r2, [r7, #3]
 80039b6:	f083 0301 	eor.w	r3, r3, #1
 80039ba:	b2d8      	uxtb	r0, r3
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4613      	mov	r3, r2
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	4413      	add	r3, r2
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	440b      	add	r3, r1
 80039c8:	3359      	adds	r3, #89	@ 0x59
 80039ca:	4602      	mov	r2, r0
 80039cc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	f040 8115 	bne.w	8003c02 <HCD_HC_OUT_IRQHandler+0x582>
 80039d8:	78fa      	ldrb	r2, [r7, #3]
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	4413      	add	r3, r2
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	440b      	add	r3, r1
 80039e6:	3350      	adds	r3, #80	@ 0x50
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 8109 	beq.w	8003c02 <HCD_HC_OUT_IRQHandler+0x582>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80039f0:	78fa      	ldrb	r2, [r7, #3]
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	4413      	add	r3, r2
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	440b      	add	r3, r1
 80039fe:	3350      	adds	r3, #80	@ 0x50
 8003a00:	6819      	ldr	r1, [r3, #0]
 8003a02:	78fa      	ldrb	r2, [r7, #3]
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4613      	mov	r3, r2
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	4413      	add	r3, r2
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	4403      	add	r3, r0
 8003a10:	3342      	adds	r3, #66	@ 0x42
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	440b      	add	r3, r1
 8003a16:	1e59      	subs	r1, r3, #1
 8003a18:	78fa      	ldrb	r2, [r7, #3]
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	4413      	add	r3, r2
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	4403      	add	r3, r0
 8003a26:	3342      	adds	r3, #66	@ 0x42
 8003a28:	881b      	ldrh	r3, [r3, #0]
 8003a2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a2e:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 80e3 	beq.w	8003c02 <HCD_HC_OUT_IRQHandler+0x582>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	4413      	add	r3, r2
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	440b      	add	r3, r1
 8003a4a:	3359      	adds	r3, #89	@ 0x59
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	f083 0301 	eor.w	r3, r3, #1
 8003a54:	b2d8      	uxtb	r0, r3
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	4413      	add	r3, r2
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	440b      	add	r3, r1
 8003a62:	3359      	adds	r3, #89	@ 0x59
 8003a64:	4602      	mov	r2, r0
 8003a66:	701a      	strb	r2, [r3, #0]
 8003a68:	e0cb      	b.n	8003c02 <HCD_HC_OUT_IRQHandler+0x582>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003a6a:	78fa      	ldrb	r2, [r7, #3]
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	4413      	add	r3, r2
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	440b      	add	r3, r1
 8003a78:	3365      	adds	r3, #101	@ 0x65
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d10a      	bne.n	8003a96 <HCD_HC_OUT_IRQHandler+0x416>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a80:	78fa      	ldrb	r2, [r7, #3]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	4413      	add	r3, r2
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	440b      	add	r3, r1
 8003a8e:	3365      	adds	r3, #101	@ 0x65
 8003a90:	2202      	movs	r2, #2
 8003a92:	701a      	strb	r2, [r3, #0]
 8003a94:	e0b5      	b.n	8003c02 <HCD_HC_OUT_IRQHandler+0x582>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	4413      	add	r3, r2
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	440b      	add	r3, r1
 8003aa4:	3365      	adds	r3, #101	@ 0x65
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d114      	bne.n	8003ad6 <HCD_HC_OUT_IRQHandler+0x456>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003aac:	78fa      	ldrb	r2, [r7, #3]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	4413      	add	r3, r2
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	440b      	add	r3, r1
 8003aba:	3365      	adds	r3, #101	@ 0x65
 8003abc:	2202      	movs	r2, #2
 8003abe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ac0:	78fa      	ldrb	r2, [r7, #3]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	4413      	add	r3, r2
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	440b      	add	r3, r1
 8003ace:	3364      	adds	r3, #100	@ 0x64
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	701a      	strb	r2, [r3, #0]
 8003ad4:	e095      	b.n	8003c02 <HCD_HC_OUT_IRQHandler+0x582>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003ad6:	78fa      	ldrb	r2, [r7, #3]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	4413      	add	r3, r2
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	440b      	add	r3, r1
 8003ae4:	3365      	adds	r3, #101	@ 0x65
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b06      	cmp	r3, #6
 8003aea:	d114      	bne.n	8003b16 <HCD_HC_OUT_IRQHandler+0x496>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003aec:	78fa      	ldrb	r2, [r7, #3]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	4413      	add	r3, r2
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	440b      	add	r3, r1
 8003afa:	3365      	adds	r3, #101	@ 0x65
 8003afc:	2202      	movs	r2, #2
 8003afe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003b00:	78fa      	ldrb	r2, [r7, #3]
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	4413      	add	r3, r2
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	440b      	add	r3, r1
 8003b0e:	3364      	adds	r3, #100	@ 0x64
 8003b10:	2205      	movs	r2, #5
 8003b12:	701a      	strb	r2, [r3, #0]
 8003b14:	e075      	b.n	8003c02 <HCD_HC_OUT_IRQHandler+0x582>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003b16:	78fa      	ldrb	r2, [r7, #3]
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	4413      	add	r3, r2
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	440b      	add	r3, r1
 8003b24:	3365      	adds	r3, #101	@ 0x65
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b07      	cmp	r3, #7
 8003b2a:	d00a      	beq.n	8003b42 <HCD_HC_OUT_IRQHandler+0x4c2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003b2c:	78fa      	ldrb	r2, [r7, #3]
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	4613      	mov	r3, r2
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	4413      	add	r3, r2
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	440b      	add	r3, r1
 8003b3a:	3365      	adds	r3, #101	@ 0x65
 8003b3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003b3e:	2b09      	cmp	r3, #9
 8003b40:	d170      	bne.n	8003c24 <HCD_HC_OUT_IRQHandler+0x5a4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b42:	78fa      	ldrb	r2, [r7, #3]
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	4613      	mov	r3, r2
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	4413      	add	r3, r2
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	440b      	add	r3, r1
 8003b50:	3365      	adds	r3, #101	@ 0x65
 8003b52:	2202      	movs	r2, #2
 8003b54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003b56:	78fa      	ldrb	r2, [r7, #3]
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	4413      	add	r3, r2
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	440b      	add	r3, r1
 8003b64:	3360      	adds	r3, #96	@ 0x60
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	1c59      	adds	r1, r3, #1
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	4413      	add	r3, r2
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	4403      	add	r3, r0
 8003b76:	3360      	adds	r3, #96	@ 0x60
 8003b78:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b7a:	78fa      	ldrb	r2, [r7, #3]
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	4413      	add	r3, r2
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	440b      	add	r3, r1
 8003b88:	3360      	adds	r3, #96	@ 0x60
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d914      	bls.n	8003bba <HCD_HC_OUT_IRQHandler+0x53a>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b90:	78fa      	ldrb	r2, [r7, #3]
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	4613      	mov	r3, r2
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	4413      	add	r3, r2
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	440b      	add	r3, r1
 8003b9e:	3360      	adds	r3, #96	@ 0x60
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ba4:	78fa      	ldrb	r2, [r7, #3]
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	4413      	add	r3, r2
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	440b      	add	r3, r1
 8003bb2:	3364      	adds	r3, #100	@ 0x64
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003bb8:	e022      	b.n	8003c00 <HCD_HC_OUT_IRQHandler+0x580>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003bba:	78fa      	ldrb	r2, [r7, #3]
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	4413      	add	r3, r2
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	440b      	add	r3, r1
 8003bc8:	3364      	adds	r3, #100	@ 0x64
 8003bca:	2202      	movs	r2, #2
 8003bcc:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003bce:	78fb      	ldrb	r3, [r7, #3]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003be4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bec:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003bee:	78fb      	ldrb	r3, [r7, #3]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c00:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003c02:	78fa      	ldrb	r2, [r7, #3]
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	4413      	add	r3, r2
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	440b      	add	r3, r1
 8003c10:	3364      	adds	r3, #100	@ 0x64
 8003c12:	781a      	ldrb	r2, [r3, #0]
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	4619      	mov	r1, r3
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f008 fa85 	bl	800c128 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c1e:	e002      	b.n	8003c26 <HCD_HC_OUT_IRQHandler+0x5a6>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003c20:	bf00      	nop
 8003c22:	e000      	b.n	8003c26 <HCD_HC_OUT_IRQHandler+0x5a6>
      return;
 8003c24:	bf00      	nop
  }
}
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08a      	sub	sp, #40	@ 0x28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	0c5b      	lsrs	r3, r3, #17
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	091b      	lsrs	r3, r3, #4
 8003c5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c60:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d004      	beq.n	8003c72 <HCD_RXQLVL_IRQHandler+0x46>
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2b05      	cmp	r3, #5
 8003c6c:	f000 80b6 	beq.w	8003ddc <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003c70:	e0b7      	b.n	8003de2 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 80b3 	beq.w	8003de0 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	4413      	add	r3, r2
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	440b      	add	r3, r1
 8003c88:	3348      	adds	r3, #72	@ 0x48
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80a7 	beq.w	8003de0 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4613      	mov	r3, r2
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	4413      	add	r3, r2
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	440b      	add	r3, r1
 8003ca0:	3354      	adds	r3, #84	@ 0x54
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	18d1      	adds	r1, r2, r3
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4613      	mov	r3, r2
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	4413      	add	r3, r2
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	4403      	add	r3, r0
 8003cb6:	3350      	adds	r3, #80	@ 0x50
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4299      	cmp	r1, r3
 8003cbc:	f200 8083 	bhi.w	8003dc6 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	4413      	add	r3, r2
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	440b      	add	r3, r1
 8003cd2:	3348      	adds	r3, #72	@ 0x48
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	b292      	uxth	r2, r2
 8003cda:	4619      	mov	r1, r3
 8003cdc:	f003 ff42 	bl	8007b64 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	4413      	add	r3, r2
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	440b      	add	r3, r1
 8003cee:	3348      	adds	r3, #72	@ 0x48
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	18d1      	adds	r1, r2, r3
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	4413      	add	r3, r2
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	4403      	add	r3, r0
 8003d04:	3348      	adds	r3, #72	@ 0x48
 8003d06:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	4413      	add	r3, r2
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	440b      	add	r3, r1
 8003d16:	3354      	adds	r3, #84	@ 0x54
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	18d1      	adds	r1, r2, r3
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4613      	mov	r3, r2
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	4413      	add	r3, r2
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	4403      	add	r3, r0
 8003d2c:	3354      	adds	r3, #84	@ 0x54
 8003d2e:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	0cdb      	lsrs	r3, r3, #19
 8003d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d44:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	4413      	add	r3, r2
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	440b      	add	r3, r1
 8003d54:	3342      	adds	r3, #66	@ 0x42
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d13f      	bne.n	8003de0 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d03c      	beq.n	8003de0 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d7c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d84:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	015a      	lsls	r2, r3, #5
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d92:	461a      	mov	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	4413      	add	r3, r2
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	440b      	add	r3, r1
 8003da6:	3358      	adds	r3, #88	@ 0x58
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	f083 0301 	eor.w	r3, r3, #1
 8003dae:	b2d8      	uxtb	r0, r3
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	4613      	mov	r3, r2
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	4413      	add	r3, r2
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	440b      	add	r3, r1
 8003dbe:	3358      	adds	r3, #88	@ 0x58
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	701a      	strb	r2, [r3, #0]
      break;
 8003dc4:	e00c      	b.n	8003de0 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	4413      	add	r3, r2
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	440b      	add	r3, r1
 8003dd4:	3364      	adds	r3, #100	@ 0x64
 8003dd6:	2204      	movs	r2, #4
 8003dd8:	701a      	strb	r2, [r3, #0]
      break;
 8003dda:	e001      	b.n	8003de0 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003ddc:	bf00      	nop
 8003dde:	e000      	b.n	8003de2 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003de0:	bf00      	nop
  }
}
 8003de2:	bf00      	nop
 8003de4:	3728      	adds	r7, #40	@ 0x28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b086      	sub	sp, #24
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003e16:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d10b      	bne.n	8003e3a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d102      	bne.n	8003e32 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f008 f95f 	bl	800c0f0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f043 0302 	orr.w	r3, r3, #2
 8003e38:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d132      	bne.n	8003eaa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f043 0308 	orr.w	r3, r3, #8
 8003e4a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d126      	bne.n	8003ea4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d113      	bne.n	8003e86 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003e64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e68:	d106      	bne.n	8003e78 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2102      	movs	r1, #2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f003 ffc7 	bl	8007e04 <USB_InitFSLSPClkSel>
 8003e76:	e011      	b.n	8003e9c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f003 ffc0 	bl	8007e04 <USB_InitFSLSPClkSel>
 8003e84:	e00a      	b.n	8003e9c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d106      	bne.n	8003e9c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e94:	461a      	mov	r2, r3
 8003e96:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003e9a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f008 f951 	bl	800c144 <HAL_HCD_PortEnabled_Callback>
 8003ea2:	e002      	b.n	8003eaa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f008 f95b 	bl	800c160 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d103      	bne.n	8003ebc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	f043 0320 	orr.w	r3, r3, #32
 8003eba:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	6013      	str	r3, [r2, #0]
}
 8003ec8:	bf00      	nop
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ed4:	4b05      	ldr	r3, [pc, #20]	@ (8003eec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a04      	ldr	r2, [pc, #16]	@ (8003eec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003eda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ede:	6013      	str	r3, [r2, #0]
}
 8003ee0:	bf00      	nop
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	40007000 	.word	0x40007000

08003ef0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ef4:	4b04      	ldr	r3, [pc, #16]	@ (8003f08 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40007000 	.word	0x40007000

08003f0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f1a:	d130      	bne.n	8003f7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f1c:	4b23      	ldr	r3, [pc, #140]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f28:	d038      	beq.n	8003f9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f2a:	4b20      	ldr	r3, [pc, #128]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f32:	4a1e      	ldr	r2, [pc, #120]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f34:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2232      	movs	r2, #50	@ 0x32
 8003f40:	fb02 f303 	mul.w	r3, r2, r3
 8003f44:	4a1b      	ldr	r2, [pc, #108]	@ (8003fb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	0c9b      	lsrs	r3, r3, #18
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f50:	e002      	b.n	8003f58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f58:	4b14      	ldr	r3, [pc, #80]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f64:	d102      	bne.n	8003f6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f2      	bne.n	8003f52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f78:	d110      	bne.n	8003f9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e00f      	b.n	8003f9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f8a:	d007      	beq.n	8003f9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f8c:	4b07      	ldr	r3, [pc, #28]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f94:	4a05      	ldr	r2, [pc, #20]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40007000 	.word	0x40007000
 8003fb0:	20000018 	.word	0x20000018
 8003fb4:	431bde83 	.word	0x431bde83

08003fb8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003fbc:	4b05      	ldr	r3, [pc, #20]	@ (8003fd4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	4a04      	ldr	r2, [pc, #16]	@ (8003fd4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003fc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fc6:	6053      	str	r3, [r2, #4]
}
 8003fc8:	bf00      	nop
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40007000 	.word	0x40007000

08003fd8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003fdc:	4b05      	ldr	r3, [pc, #20]	@ (8003ff4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	4a04      	ldr	r2, [pc, #16]	@ (8003ff4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003fe2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fe6:	6053      	str	r3, [r2, #4]
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40007000 	.word	0x40007000

08003ff8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d102      	bne.n	800400c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	f000 bc08 	b.w	800481c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800400c:	4b96      	ldr	r3, [pc, #600]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 030c 	and.w	r3, r3, #12
 8004014:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004016:	4b94      	ldr	r3, [pc, #592]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80e4 	beq.w	80041f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <HAL_RCC_OscConfig+0x4c>
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b0c      	cmp	r3, #12
 8004038:	f040 808b 	bne.w	8004152 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2b01      	cmp	r3, #1
 8004040:	f040 8087 	bne.w	8004152 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004044:	4b88      	ldr	r3, [pc, #544]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_RCC_OscConfig+0x64>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e3df      	b.n	800481c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1a      	ldr	r2, [r3, #32]
 8004060:	4b81      	ldr	r3, [pc, #516]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d004      	beq.n	8004076 <HAL_RCC_OscConfig+0x7e>
 800406c:	4b7e      	ldr	r3, [pc, #504]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004074:	e005      	b.n	8004082 <HAL_RCC_OscConfig+0x8a>
 8004076:	4b7c      	ldr	r3, [pc, #496]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004078:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800407c:	091b      	lsrs	r3, r3, #4
 800407e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004082:	4293      	cmp	r3, r2
 8004084:	d223      	bcs.n	80040ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fd92 	bl	8004bb4 <RCC_SetFlashLatencyFromMSIRange>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e3c0      	b.n	800481c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800409a:	4b73      	ldr	r3, [pc, #460]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a72      	ldr	r2, [pc, #456]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80040a0:	f043 0308 	orr.w	r3, r3, #8
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	4b70      	ldr	r3, [pc, #448]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	496d      	ldr	r1, [pc, #436]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040b8:	4b6b      	ldr	r3, [pc, #428]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	021b      	lsls	r3, r3, #8
 80040c6:	4968      	ldr	r1, [pc, #416]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	604b      	str	r3, [r1, #4]
 80040cc:	e025      	b.n	800411a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040ce:	4b66      	ldr	r3, [pc, #408]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a65      	ldr	r2, [pc, #404]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80040d4:	f043 0308 	orr.w	r3, r3, #8
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	4b63      	ldr	r3, [pc, #396]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	4960      	ldr	r1, [pc, #384]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040ec:	4b5e      	ldr	r3, [pc, #376]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	021b      	lsls	r3, r3, #8
 80040fa:	495b      	ldr	r1, [pc, #364]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d109      	bne.n	800411a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fd52 	bl	8004bb4 <RCC_SetFlashLatencyFromMSIRange>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e380      	b.n	800481c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800411a:	f000 fc87 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 800411e:	4602      	mov	r2, r0
 8004120:	4b51      	ldr	r3, [pc, #324]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	091b      	lsrs	r3, r3, #4
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	4950      	ldr	r1, [pc, #320]	@ (800426c <HAL_RCC_OscConfig+0x274>)
 800412c:	5ccb      	ldrb	r3, [r1, r3]
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	fa22 f303 	lsr.w	r3, r2, r3
 8004136:	4a4e      	ldr	r2, [pc, #312]	@ (8004270 <HAL_RCC_OscConfig+0x278>)
 8004138:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800413a:	4b4e      	ldr	r3, [pc, #312]	@ (8004274 <HAL_RCC_OscConfig+0x27c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7fd fe42 	bl	8001dc8 <HAL_InitTick>
 8004144:	4603      	mov	r3, r0
 8004146:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d052      	beq.n	80041f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	e364      	b.n	800481c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d032      	beq.n	80041c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800415a:	4b43      	ldr	r3, [pc, #268]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a42      	ldr	r2, [pc, #264]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004160:	f043 0301 	orr.w	r3, r3, #1
 8004164:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004166:	f7fd fe7f 	bl	8001e68 <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800416e:	f7fd fe7b 	bl	8001e68 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e34d      	b.n	800481c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004180:	4b39      	ldr	r3, [pc, #228]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0f0      	beq.n	800416e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800418c:	4b36      	ldr	r3, [pc, #216]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a35      	ldr	r2, [pc, #212]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004192:	f043 0308 	orr.w	r3, r3, #8
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	4b33      	ldr	r3, [pc, #204]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	4930      	ldr	r1, [pc, #192]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	021b      	lsls	r3, r3, #8
 80041b8:	492b      	ldr	r1, [pc, #172]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	604b      	str	r3, [r1, #4]
 80041be:	e01a      	b.n	80041f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041c0:	4b29      	ldr	r3, [pc, #164]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a28      	ldr	r2, [pc, #160]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80041c6:	f023 0301 	bic.w	r3, r3, #1
 80041ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041cc:	f7fd fe4c 	bl	8001e68 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041d4:	f7fd fe48 	bl	8001e68 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e31a      	b.n	800481c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041e6:	4b20      	ldr	r3, [pc, #128]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0x1dc>
 80041f2:	e000      	b.n	80041f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d073      	beq.n	80042ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	2b08      	cmp	r3, #8
 8004206:	d005      	beq.n	8004214 <HAL_RCC_OscConfig+0x21c>
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	2b0c      	cmp	r3, #12
 800420c:	d10e      	bne.n	800422c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2b03      	cmp	r3, #3
 8004212:	d10b      	bne.n	800422c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004214:	4b14      	ldr	r3, [pc, #80]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d063      	beq.n	80042e8 <HAL_RCC_OscConfig+0x2f0>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d15f      	bne.n	80042e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e2f7      	b.n	800481c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004234:	d106      	bne.n	8004244 <HAL_RCC_OscConfig+0x24c>
 8004236:	4b0c      	ldr	r3, [pc, #48]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a0b      	ldr	r2, [pc, #44]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 800423c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	e025      	b.n	8004290 <HAL_RCC_OscConfig+0x298>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800424c:	d114      	bne.n	8004278 <HAL_RCC_OscConfig+0x280>
 800424e:	4b06      	ldr	r3, [pc, #24]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a05      	ldr	r2, [pc, #20]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	4b03      	ldr	r3, [pc, #12]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a02      	ldr	r2, [pc, #8]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	e013      	b.n	8004290 <HAL_RCC_OscConfig+0x298>
 8004268:	40021000 	.word	0x40021000
 800426c:	0800d0a0 	.word	0x0800d0a0
 8004270:	20000018 	.word	0x20000018
 8004274:	2000001c 	.word	0x2000001c
 8004278:	4ba0      	ldr	r3, [pc, #640]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a9f      	ldr	r2, [pc, #636]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 800427e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	4b9d      	ldr	r3, [pc, #628]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a9c      	ldr	r2, [pc, #624]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 800428a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800428e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d013      	beq.n	80042c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004298:	f7fd fde6 	bl	8001e68 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a0:	f7fd fde2 	bl	8001e68 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b64      	cmp	r3, #100	@ 0x64
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e2b4      	b.n	800481c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042b2:	4b92      	ldr	r3, [pc, #584]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x2a8>
 80042be:	e014      	b.n	80042ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c0:	f7fd fdd2 	bl	8001e68 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c8:	f7fd fdce 	bl	8001e68 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	@ 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e2a0      	b.n	800481c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042da:	4b88      	ldr	r3, [pc, #544]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0x2d0>
 80042e6:	e000      	b.n	80042ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d060      	beq.n	80043b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_OscConfig+0x310>
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	2b0c      	cmp	r3, #12
 8004300:	d119      	bne.n	8004336 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d116      	bne.n	8004336 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004308:	4b7c      	ldr	r3, [pc, #496]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <HAL_RCC_OscConfig+0x328>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e27d      	b.n	800481c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004320:	4b76      	ldr	r3, [pc, #472]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	061b      	lsls	r3, r3, #24
 800432e:	4973      	ldr	r1, [pc, #460]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004330:	4313      	orrs	r3, r2
 8004332:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004334:	e040      	b.n	80043b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d023      	beq.n	8004386 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800433e:	4b6f      	ldr	r3, [pc, #444]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a6e      	ldr	r2, [pc, #440]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434a:	f7fd fd8d 	bl	8001e68 <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004352:	f7fd fd89 	bl	8001e68 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e25b      	b.n	800481c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004364:	4b65      	ldr	r3, [pc, #404]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0f0      	beq.n	8004352 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004370:	4b62      	ldr	r3, [pc, #392]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	061b      	lsls	r3, r3, #24
 800437e:	495f      	ldr	r1, [pc, #380]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004380:	4313      	orrs	r3, r2
 8004382:	604b      	str	r3, [r1, #4]
 8004384:	e018      	b.n	80043b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004386:	4b5d      	ldr	r3, [pc, #372]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a5c      	ldr	r2, [pc, #368]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 800438c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004392:	f7fd fd69 	bl	8001e68 <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800439a:	f7fd fd65 	bl	8001e68 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e237      	b.n	800481c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043ac:	4b53      	ldr	r3, [pc, #332]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1f0      	bne.n	800439a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d03c      	beq.n	800443e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d01c      	beq.n	8004406 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043cc:	4b4b      	ldr	r3, [pc, #300]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 80043ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043d2:	4a4a      	ldr	r2, [pc, #296]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 80043d4:	f043 0301 	orr.w	r3, r3, #1
 80043d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043dc:	f7fd fd44 	bl	8001e68 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e4:	f7fd fd40 	bl	8001e68 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e212      	b.n	800481c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043f6:	4b41      	ldr	r3, [pc, #260]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 80043f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0ef      	beq.n	80043e4 <HAL_RCC_OscConfig+0x3ec>
 8004404:	e01b      	b.n	800443e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004406:	4b3d      	ldr	r3, [pc, #244]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004408:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800440c:	4a3b      	ldr	r2, [pc, #236]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 800440e:	f023 0301 	bic.w	r3, r3, #1
 8004412:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004416:	f7fd fd27 	bl	8001e68 <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800441e:	f7fd fd23 	bl	8001e68 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e1f5      	b.n	800481c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004430:	4b32      	ldr	r3, [pc, #200]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004432:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1ef      	bne.n	800441e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 80a6 	beq.w	8004598 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800444c:	2300      	movs	r3, #0
 800444e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004450:	4b2a      	ldr	r3, [pc, #168]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10d      	bne.n	8004478 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800445c:	4b27      	ldr	r3, [pc, #156]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 800445e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004460:	4a26      	ldr	r2, [pc, #152]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004462:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004466:	6593      	str	r3, [r2, #88]	@ 0x58
 8004468:	4b24      	ldr	r3, [pc, #144]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 800446a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800446c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004470:	60bb      	str	r3, [r7, #8]
 8004472:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004474:	2301      	movs	r3, #1
 8004476:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004478:	4b21      	ldr	r3, [pc, #132]	@ (8004500 <HAL_RCC_OscConfig+0x508>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004480:	2b00      	cmp	r3, #0
 8004482:	d118      	bne.n	80044b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004484:	4b1e      	ldr	r3, [pc, #120]	@ (8004500 <HAL_RCC_OscConfig+0x508>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a1d      	ldr	r2, [pc, #116]	@ (8004500 <HAL_RCC_OscConfig+0x508>)
 800448a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800448e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004490:	f7fd fcea 	bl	8001e68 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004498:	f7fd fce6 	bl	8001e68 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e1b8      	b.n	800481c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044aa:	4b15      	ldr	r3, [pc, #84]	@ (8004500 <HAL_RCC_OscConfig+0x508>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0f0      	beq.n	8004498 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d108      	bne.n	80044d0 <HAL_RCC_OscConfig+0x4d8>
 80044be:	4b0f      	ldr	r3, [pc, #60]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 80044c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c4:	4a0d      	ldr	r2, [pc, #52]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044ce:	e029      	b.n	8004524 <HAL_RCC_OscConfig+0x52c>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2b05      	cmp	r3, #5
 80044d6:	d115      	bne.n	8004504 <HAL_RCC_OscConfig+0x50c>
 80044d8:	4b08      	ldr	r3, [pc, #32]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044de:	4a07      	ldr	r2, [pc, #28]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 80044e0:	f043 0304 	orr.w	r3, r3, #4
 80044e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044e8:	4b04      	ldr	r3, [pc, #16]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 80044ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ee:	4a03      	ldr	r2, [pc, #12]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 80044f0:	f043 0301 	orr.w	r3, r3, #1
 80044f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044f8:	e014      	b.n	8004524 <HAL_RCC_OscConfig+0x52c>
 80044fa:	bf00      	nop
 80044fc:	40021000 	.word	0x40021000
 8004500:	40007000 	.word	0x40007000
 8004504:	4b9d      	ldr	r3, [pc, #628]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800450a:	4a9c      	ldr	r2, [pc, #624]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004514:	4b99      	ldr	r3, [pc, #612]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800451a:	4a98      	ldr	r2, [pc, #608]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 800451c:	f023 0304 	bic.w	r3, r3, #4
 8004520:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d016      	beq.n	800455a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452c:	f7fd fc9c 	bl	8001e68 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004532:	e00a      	b.n	800454a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004534:	f7fd fc98 	bl	8001e68 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e168      	b.n	800481c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800454a:	4b8c      	ldr	r3, [pc, #560]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 800454c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0ed      	beq.n	8004534 <HAL_RCC_OscConfig+0x53c>
 8004558:	e015      	b.n	8004586 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455a:	f7fd fc85 	bl	8001e68 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004560:	e00a      	b.n	8004578 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004562:	f7fd fc81 	bl	8001e68 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004570:	4293      	cmp	r3, r2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e151      	b.n	800481c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004578:	4b80      	ldr	r3, [pc, #512]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 800457a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1ed      	bne.n	8004562 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004586:	7ffb      	ldrb	r3, [r7, #31]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d105      	bne.n	8004598 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800458c:	4b7b      	ldr	r3, [pc, #492]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 800458e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004590:	4a7a      	ldr	r2, [pc, #488]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 8004592:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004596:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0320 	and.w	r3, r3, #32
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d03c      	beq.n	800461e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d01c      	beq.n	80045e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045ac:	4b73      	ldr	r3, [pc, #460]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 80045ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045b2:	4a72      	ldr	r2, [pc, #456]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 80045b4:	f043 0301 	orr.w	r3, r3, #1
 80045b8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045bc:	f7fd fc54 	bl	8001e68 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045c4:	f7fd fc50 	bl	8001e68 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e122      	b.n	800481c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045d6:	4b69      	ldr	r3, [pc, #420]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 80045d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0ef      	beq.n	80045c4 <HAL_RCC_OscConfig+0x5cc>
 80045e4:	e01b      	b.n	800461e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045e6:	4b65      	ldr	r3, [pc, #404]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 80045e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045ec:	4a63      	ldr	r2, [pc, #396]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 80045ee:	f023 0301 	bic.w	r3, r3, #1
 80045f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f6:	f7fd fc37 	bl	8001e68 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045fe:	f7fd fc33 	bl	8001e68 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e105      	b.n	800481c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004610:	4b5a      	ldr	r3, [pc, #360]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 8004612:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1ef      	bne.n	80045fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80f9 	beq.w	800481a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462c:	2b02      	cmp	r3, #2
 800462e:	f040 80cf 	bne.w	80047d0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004632:	4b52      	ldr	r3, [pc, #328]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f003 0203 	and.w	r2, r3, #3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004642:	429a      	cmp	r2, r3
 8004644:	d12c      	bne.n	80046a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004650:	3b01      	subs	r3, #1
 8004652:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004654:	429a      	cmp	r2, r3
 8004656:	d123      	bne.n	80046a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004662:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004664:	429a      	cmp	r2, r3
 8004666:	d11b      	bne.n	80046a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004672:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d113      	bne.n	80046a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004682:	085b      	lsrs	r3, r3, #1
 8004684:	3b01      	subs	r3, #1
 8004686:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004688:	429a      	cmp	r2, r3
 800468a:	d109      	bne.n	80046a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004696:	085b      	lsrs	r3, r3, #1
 8004698:	3b01      	subs	r3, #1
 800469a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800469c:	429a      	cmp	r2, r3
 800469e:	d071      	beq.n	8004784 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	2b0c      	cmp	r3, #12
 80046a4:	d068      	beq.n	8004778 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046a6:	4b35      	ldr	r3, [pc, #212]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d105      	bne.n	80046be <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80046b2:	4b32      	ldr	r3, [pc, #200]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e0ac      	b.n	800481c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046c2:	4b2e      	ldr	r3, [pc, #184]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a2d      	ldr	r2, [pc, #180]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 80046c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046ce:	f7fd fbcb 	bl	8001e68 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d6:	f7fd fbc7 	bl	8001e68 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e099      	b.n	800481c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e8:	4b24      	ldr	r3, [pc, #144]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1f0      	bne.n	80046d6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046f4:	4b21      	ldr	r3, [pc, #132]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	4b21      	ldr	r3, [pc, #132]	@ (8004780 <HAL_RCC_OscConfig+0x788>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004704:	3a01      	subs	r2, #1
 8004706:	0112      	lsls	r2, r2, #4
 8004708:	4311      	orrs	r1, r2
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800470e:	0212      	lsls	r2, r2, #8
 8004710:	4311      	orrs	r1, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004716:	0852      	lsrs	r2, r2, #1
 8004718:	3a01      	subs	r2, #1
 800471a:	0552      	lsls	r2, r2, #21
 800471c:	4311      	orrs	r1, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004722:	0852      	lsrs	r2, r2, #1
 8004724:	3a01      	subs	r2, #1
 8004726:	0652      	lsls	r2, r2, #25
 8004728:	4311      	orrs	r1, r2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800472e:	06d2      	lsls	r2, r2, #27
 8004730:	430a      	orrs	r2, r1
 8004732:	4912      	ldr	r1, [pc, #72]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 8004734:	4313      	orrs	r3, r2
 8004736:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004738:	4b10      	ldr	r3, [pc, #64]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a0f      	ldr	r2, [pc, #60]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 800473e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004742:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004744:	4b0d      	ldr	r3, [pc, #52]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	4a0c      	ldr	r2, [pc, #48]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 800474a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800474e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004750:	f7fd fb8a 	bl	8001e68 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004758:	f7fd fb86 	bl	8001e68 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e058      	b.n	800481c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800476a:	4b04      	ldr	r3, [pc, #16]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0f0      	beq.n	8004758 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004776:	e050      	b.n	800481a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e04f      	b.n	800481c <HAL_RCC_OscConfig+0x824>
 800477c:	40021000 	.word	0x40021000
 8004780:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004784:	4b27      	ldr	r3, [pc, #156]	@ (8004824 <HAL_RCC_OscConfig+0x82c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d144      	bne.n	800481a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004790:	4b24      	ldr	r3, [pc, #144]	@ (8004824 <HAL_RCC_OscConfig+0x82c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a23      	ldr	r2, [pc, #140]	@ (8004824 <HAL_RCC_OscConfig+0x82c>)
 8004796:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800479a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800479c:	4b21      	ldr	r3, [pc, #132]	@ (8004824 <HAL_RCC_OscConfig+0x82c>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	4a20      	ldr	r2, [pc, #128]	@ (8004824 <HAL_RCC_OscConfig+0x82c>)
 80047a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047a8:	f7fd fb5e 	bl	8001e68 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b0:	f7fd fb5a 	bl	8001e68 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e02c      	b.n	800481c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047c2:	4b18      	ldr	r3, [pc, #96]	@ (8004824 <HAL_RCC_OscConfig+0x82c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0x7b8>
 80047ce:	e024      	b.n	800481a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b0c      	cmp	r3, #12
 80047d4:	d01f      	beq.n	8004816 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d6:	4b13      	ldr	r3, [pc, #76]	@ (8004824 <HAL_RCC_OscConfig+0x82c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a12      	ldr	r2, [pc, #72]	@ (8004824 <HAL_RCC_OscConfig+0x82c>)
 80047dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e2:	f7fd fb41 	bl	8001e68 <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ea:	f7fd fb3d 	bl	8001e68 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e00f      	b.n	800481c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047fc:	4b09      	ldr	r3, [pc, #36]	@ (8004824 <HAL_RCC_OscConfig+0x82c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1f0      	bne.n	80047ea <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004808:	4b06      	ldr	r3, [pc, #24]	@ (8004824 <HAL_RCC_OscConfig+0x82c>)
 800480a:	68da      	ldr	r2, [r3, #12]
 800480c:	4905      	ldr	r1, [pc, #20]	@ (8004824 <HAL_RCC_OscConfig+0x82c>)
 800480e:	4b06      	ldr	r3, [pc, #24]	@ (8004828 <HAL_RCC_OscConfig+0x830>)
 8004810:	4013      	ands	r3, r2
 8004812:	60cb      	str	r3, [r1, #12]
 8004814:	e001      	b.n	800481a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3720      	adds	r7, #32
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40021000 	.word	0x40021000
 8004828:	feeefffc 	.word	0xfeeefffc

0800482c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0e7      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004840:	4b75      	ldr	r3, [pc, #468]	@ (8004a18 <HAL_RCC_ClockConfig+0x1ec>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d910      	bls.n	8004870 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484e:	4b72      	ldr	r3, [pc, #456]	@ (8004a18 <HAL_RCC_ClockConfig+0x1ec>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f023 0207 	bic.w	r2, r3, #7
 8004856:	4970      	ldr	r1, [pc, #448]	@ (8004a18 <HAL_RCC_ClockConfig+0x1ec>)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	4313      	orrs	r3, r2
 800485c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800485e:	4b6e      	ldr	r3, [pc, #440]	@ (8004a18 <HAL_RCC_ClockConfig+0x1ec>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d001      	beq.n	8004870 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e0cf      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d010      	beq.n	800489e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	4b66      	ldr	r3, [pc, #408]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004888:	429a      	cmp	r2, r3
 800488a:	d908      	bls.n	800489e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800488c:	4b63      	ldr	r3, [pc, #396]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	4960      	ldr	r1, [pc, #384]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 800489a:	4313      	orrs	r3, r2
 800489c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d04c      	beq.n	8004944 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	d107      	bne.n	80048c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048b2:	4b5a      	ldr	r3, [pc, #360]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d121      	bne.n	8004902 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e0a6      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d107      	bne.n	80048da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ca:	4b54      	ldr	r3, [pc, #336]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d115      	bne.n	8004902 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e09a      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d107      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048e2:	4b4e      	ldr	r3, [pc, #312]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d109      	bne.n	8004902 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e08e      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048f2:	4b4a      	ldr	r3, [pc, #296]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e086      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004902:	4b46      	ldr	r3, [pc, #280]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f023 0203 	bic.w	r2, r3, #3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	4943      	ldr	r1, [pc, #268]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 8004910:	4313      	orrs	r3, r2
 8004912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004914:	f7fd faa8 	bl	8001e68 <HAL_GetTick>
 8004918:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491a:	e00a      	b.n	8004932 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800491c:	f7fd faa4 	bl	8001e68 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e06e      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004932:	4b3a      	ldr	r3, [pc, #232]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 020c 	and.w	r2, r3, #12
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	429a      	cmp	r2, r3
 8004942:	d1eb      	bne.n	800491c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d010      	beq.n	8004972 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	4b31      	ldr	r3, [pc, #196]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800495c:	429a      	cmp	r2, r3
 800495e:	d208      	bcs.n	8004972 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004960:	4b2e      	ldr	r3, [pc, #184]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	492b      	ldr	r1, [pc, #172]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 800496e:	4313      	orrs	r3, r2
 8004970:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004972:	4b29      	ldr	r3, [pc, #164]	@ (8004a18 <HAL_RCC_ClockConfig+0x1ec>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	d210      	bcs.n	80049a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004980:	4b25      	ldr	r3, [pc, #148]	@ (8004a18 <HAL_RCC_ClockConfig+0x1ec>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f023 0207 	bic.w	r2, r3, #7
 8004988:	4923      	ldr	r1, [pc, #140]	@ (8004a18 <HAL_RCC_ClockConfig+0x1ec>)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	4313      	orrs	r3, r2
 800498e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004990:	4b21      	ldr	r3, [pc, #132]	@ (8004a18 <HAL_RCC_ClockConfig+0x1ec>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d001      	beq.n	80049a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e036      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d008      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049ae:	4b1b      	ldr	r3, [pc, #108]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	4918      	ldr	r1, [pc, #96]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d009      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049cc:	4b13      	ldr	r3, [pc, #76]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	4910      	ldr	r1, [pc, #64]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049e0:	f000 f824 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 80049e4:	4602      	mov	r2, r0
 80049e6:	4b0d      	ldr	r3, [pc, #52]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	091b      	lsrs	r3, r3, #4
 80049ec:	f003 030f 	and.w	r3, r3, #15
 80049f0:	490b      	ldr	r1, [pc, #44]	@ (8004a20 <HAL_RCC_ClockConfig+0x1f4>)
 80049f2:	5ccb      	ldrb	r3, [r1, r3]
 80049f4:	f003 031f 	and.w	r3, r3, #31
 80049f8:	fa22 f303 	lsr.w	r3, r2, r3
 80049fc:	4a09      	ldr	r2, [pc, #36]	@ (8004a24 <HAL_RCC_ClockConfig+0x1f8>)
 80049fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a00:	4b09      	ldr	r3, [pc, #36]	@ (8004a28 <HAL_RCC_ClockConfig+0x1fc>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fd f9df 	bl	8001dc8 <HAL_InitTick>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a0e:	7afb      	ldrb	r3, [r7, #11]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40022000 	.word	0x40022000
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	0800d0a0 	.word	0x0800d0a0
 8004a24:	20000018 	.word	0x20000018
 8004a28:	2000001c 	.word	0x2000001c

08004a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b089      	sub	sp, #36	@ 0x24
 8004a30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	61fb      	str	r3, [r7, #28]
 8004a36:	2300      	movs	r3, #0
 8004a38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a3a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
 8004a42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a44:	4b3b      	ldr	r3, [pc, #236]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_RCC_GetSysClockFreq+0x34>
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	2b0c      	cmp	r3, #12
 8004a58:	d121      	bne.n	8004a9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d11e      	bne.n	8004a9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a60:	4b34      	ldr	r3, [pc, #208]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0308 	and.w	r3, r3, #8
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d107      	bne.n	8004a7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a6c:	4b31      	ldr	r3, [pc, #196]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	61fb      	str	r3, [r7, #28]
 8004a7a:	e005      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a7c:	4b2d      	ldr	r3, [pc, #180]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	091b      	lsrs	r3, r3, #4
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a88:	4a2b      	ldr	r2, [pc, #172]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10d      	bne.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a9c:	e00a      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d102      	bne.n	8004aaa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004aa4:	4b25      	ldr	r3, [pc, #148]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x110>)
 8004aa6:	61bb      	str	r3, [r7, #24]
 8004aa8:	e004      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d101      	bne.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ab0:	4b23      	ldr	r3, [pc, #140]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ab2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	2b0c      	cmp	r3, #12
 8004ab8:	d134      	bne.n	8004b24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004aba:	4b1e      	ldr	r3, [pc, #120]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d003      	beq.n	8004ad2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d003      	beq.n	8004ad8 <HAL_RCC_GetSysClockFreq+0xac>
 8004ad0:	e005      	b.n	8004ade <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x110>)
 8004ad4:	617b      	str	r3, [r7, #20]
      break;
 8004ad6:	e005      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ad8:	4b19      	ldr	r3, [pc, #100]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ada:	617b      	str	r3, [r7, #20]
      break;
 8004adc:	e002      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	617b      	str	r3, [r7, #20]
      break;
 8004ae2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ae4:	4b13      	ldr	r3, [pc, #76]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	3301      	adds	r3, #1
 8004af0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004af2:	4b10      	ldr	r3, [pc, #64]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	0a1b      	lsrs	r3, r3, #8
 8004af8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	fb03 f202 	mul.w	r2, r3, r2
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	0e5b      	lsrs	r3, r3, #25
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	3301      	adds	r3, #1
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b24:	69bb      	ldr	r3, [r7, #24]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3724      	adds	r7, #36	@ 0x24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	40021000 	.word	0x40021000
 8004b38:	0800d0b8 	.word	0x0800d0b8
 8004b3c:	00f42400 	.word	0x00f42400
 8004b40:	003d0900 	.word	0x003d0900

08004b44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b48:	4b03      	ldr	r3, [pc, #12]	@ (8004b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	20000018 	.word	0x20000018

08004b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b60:	f7ff fff0 	bl	8004b44 <HAL_RCC_GetHCLKFreq>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b06      	ldr	r3, [pc, #24]	@ (8004b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	0a1b      	lsrs	r3, r3, #8
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	4904      	ldr	r1, [pc, #16]	@ (8004b84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b72:	5ccb      	ldrb	r3, [r1, r3]
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40021000 	.word	0x40021000
 8004b84:	0800d0b0 	.word	0x0800d0b0

08004b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b8c:	f7ff ffda 	bl	8004b44 <HAL_RCC_GetHCLKFreq>
 8004b90:	4602      	mov	r2, r0
 8004b92:	4b06      	ldr	r3, [pc, #24]	@ (8004bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	0adb      	lsrs	r3, r3, #11
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	4904      	ldr	r1, [pc, #16]	@ (8004bb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ba0:	f003 031f 	and.w	r3, r3, #31
 8004ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	0800d0b0 	.word	0x0800d0b0

08004bb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004bc0:	4b2a      	ldr	r3, [pc, #168]	@ (8004c6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004bcc:	f7ff f990 	bl	8003ef0 <HAL_PWREx_GetVoltageRange>
 8004bd0:	6178      	str	r0, [r7, #20]
 8004bd2:	e014      	b.n	8004bfe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bd4:	4b25      	ldr	r3, [pc, #148]	@ (8004c6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd8:	4a24      	ldr	r2, [pc, #144]	@ (8004c6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bde:	6593      	str	r3, [r2, #88]	@ 0x58
 8004be0:	4b22      	ldr	r3, [pc, #136]	@ (8004c6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004bec:	f7ff f980 	bl	8003ef0 <HAL_PWREx_GetVoltageRange>
 8004bf0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8004c6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8004c6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bf8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bfc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c04:	d10b      	bne.n	8004c1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b80      	cmp	r3, #128	@ 0x80
 8004c0a:	d919      	bls.n	8004c40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004c10:	d902      	bls.n	8004c18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c12:	2302      	movs	r3, #2
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	e013      	b.n	8004c40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c18:	2301      	movs	r3, #1
 8004c1a:	613b      	str	r3, [r7, #16]
 8004c1c:	e010      	b.n	8004c40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b80      	cmp	r3, #128	@ 0x80
 8004c22:	d902      	bls.n	8004c2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c24:	2303      	movs	r3, #3
 8004c26:	613b      	str	r3, [r7, #16]
 8004c28:	e00a      	b.n	8004c40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b80      	cmp	r3, #128	@ 0x80
 8004c2e:	d102      	bne.n	8004c36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c30:	2302      	movs	r3, #2
 8004c32:	613b      	str	r3, [r7, #16]
 8004c34:	e004      	b.n	8004c40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b70      	cmp	r3, #112	@ 0x70
 8004c3a:	d101      	bne.n	8004c40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c40:	4b0b      	ldr	r3, [pc, #44]	@ (8004c70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f023 0207 	bic.w	r2, r3, #7
 8004c48:	4909      	ldr	r1, [pc, #36]	@ (8004c70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c50:	4b07      	ldr	r3, [pc, #28]	@ (8004c70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d001      	beq.n	8004c62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	40022000 	.word	0x40022000

08004c74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c80:	2300      	movs	r3, #0
 8004c82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d041      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c94:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004c98:	d02a      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004c9a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004c9e:	d824      	bhi.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ca0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ca4:	d008      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004ca6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004caa:	d81e      	bhi.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004cb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cb4:	d010      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004cb6:	e018      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004cb8:	4b86      	ldr	r3, [pc, #536]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4a85      	ldr	r2, [pc, #532]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cc2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cc4:	e015      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	2100      	movs	r1, #0
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fadd 	bl	800528c <RCCEx_PLLSAI1_Config>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cd6:	e00c      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3320      	adds	r3, #32
 8004cdc:	2100      	movs	r1, #0
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fbc6 	bl	8005470 <RCCEx_PLLSAI2_Config>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ce8:	e003      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	74fb      	strb	r3, [r7, #19]
      break;
 8004cee:	e000      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cf2:	7cfb      	ldrb	r3, [r7, #19]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10b      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cf8:	4b76      	ldr	r3, [pc, #472]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d06:	4973      	ldr	r1, [pc, #460]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004d0e:	e001      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d10:	7cfb      	ldrb	r3, [r7, #19]
 8004d12:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d041      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d24:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d28:	d02a      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004d2a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d2e:	d824      	bhi.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d34:	d008      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d3a:	d81e      	bhi.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00a      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004d40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d44:	d010      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d46:	e018      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d48:	4b62      	ldr	r3, [pc, #392]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	4a61      	ldr	r2, [pc, #388]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d52:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d54:	e015      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 fa95 	bl	800528c <RCCEx_PLLSAI1_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d66:	e00c      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3320      	adds	r3, #32
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fb7e 	bl	8005470 <RCCEx_PLLSAI2_Config>
 8004d74:	4603      	mov	r3, r0
 8004d76:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d78:	e003      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	74fb      	strb	r3, [r7, #19]
      break;
 8004d7e:	e000      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004d80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d82:	7cfb      	ldrb	r3, [r7, #19]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10b      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d88:	4b52      	ldr	r3, [pc, #328]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d96:	494f      	ldr	r1, [pc, #316]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004d9e:	e001      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da0:	7cfb      	ldrb	r3, [r7, #19]
 8004da2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 80a0 	beq.w	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004db2:	2300      	movs	r3, #0
 8004db4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004db6:	4b47      	ldr	r3, [pc, #284]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00d      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dcc:	4b41      	ldr	r3, [pc, #260]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd0:	4a40      	ldr	r2, [pc, #256]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dd8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ddc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004de0:	60bb      	str	r3, [r7, #8]
 8004de2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004de4:	2301      	movs	r3, #1
 8004de6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004de8:	4b3b      	ldr	r3, [pc, #236]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a3a      	ldr	r2, [pc, #232]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004df2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004df4:	f7fd f838 	bl	8001e68 <HAL_GetTick>
 8004df8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dfa:	e009      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dfc:	f7fd f834 	bl	8001e68 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d902      	bls.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	74fb      	strb	r3, [r7, #19]
        break;
 8004e0e:	e005      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e10:	4b31      	ldr	r3, [pc, #196]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0ef      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004e1c:	7cfb      	ldrb	r3, [r7, #19]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d15c      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e22:	4b2c      	ldr	r3, [pc, #176]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d01f      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d019      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e40:	4b24      	ldr	r3, [pc, #144]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e4c:	4b21      	ldr	r3, [pc, #132]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e52:	4a20      	ldr	r2, [pc, #128]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e62:	4a1c      	ldr	r2, [pc, #112]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e6c:	4a19      	ldr	r2, [pc, #100]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d016      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7e:	f7fc fff3 	bl	8001e68 <HAL_GetTick>
 8004e82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e84:	e00b      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e86:	f7fc ffef 	bl	8001e68 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d902      	bls.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	74fb      	strb	r3, [r7, #19]
            break;
 8004e9c:	e006      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0ec      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004eac:	7cfb      	ldrb	r3, [r7, #19]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10c      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eb2:	4b08      	ldr	r3, [pc, #32]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec2:	4904      	ldr	r1, [pc, #16]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004eca:	e009      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ecc:	7cfb      	ldrb	r3, [r7, #19]
 8004ece:	74bb      	strb	r3, [r7, #18]
 8004ed0:	e006      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004ed2:	bf00      	nop
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004edc:	7cfb      	ldrb	r3, [r7, #19]
 8004ede:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ee0:	7c7b      	ldrb	r3, [r7, #17]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d105      	bne.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee6:	4ba6      	ldr	r3, [pc, #664]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eea:	4aa5      	ldr	r2, [pc, #660]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004eec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ef0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004efe:	4ba0      	ldr	r3, [pc, #640]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f04:	f023 0203 	bic.w	r2, r3, #3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0c:	499c      	ldr	r1, [pc, #624]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f20:	4b97      	ldr	r3, [pc, #604]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f26:	f023 020c 	bic.w	r2, r3, #12
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2e:	4994      	ldr	r1, [pc, #592]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f42:	4b8f      	ldr	r3, [pc, #572]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f48:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f50:	498b      	ldr	r1, [pc, #556]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00a      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f64:	4b86      	ldr	r3, [pc, #536]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f6a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f72:	4983      	ldr	r1, [pc, #524]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0310 	and.w	r3, r3, #16
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f86:	4b7e      	ldr	r3, [pc, #504]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f94:	497a      	ldr	r1, [pc, #488]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fa8:	4b75      	ldr	r3, [pc, #468]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fb6:	4972      	ldr	r1, [pc, #456]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fca:	4b6d      	ldr	r3, [pc, #436]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fd8:	4969      	ldr	r1, [pc, #420]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fec:	4b64      	ldr	r3, [pc, #400]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ffa:	4961      	ldr	r1, [pc, #388]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800500e:	4b5c      	ldr	r3, [pc, #368]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005014:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800501c:	4958      	ldr	r1, [pc, #352]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005030:	4b53      	ldr	r3, [pc, #332]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005036:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800503e:	4950      	ldr	r1, [pc, #320]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005040:	4313      	orrs	r3, r2
 8005042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005052:	4b4b      	ldr	r3, [pc, #300]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005058:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005060:	4947      	ldr	r1, [pc, #284]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005074:	4b42      	ldr	r3, [pc, #264]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005076:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800507a:	f023 0203 	bic.w	r2, r3, #3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005082:	493f      	ldr	r1, [pc, #252]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005084:	4313      	orrs	r3, r2
 8005086:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d028      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005096:	4b3a      	ldr	r3, [pc, #232]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a4:	4936      	ldr	r1, [pc, #216]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050b4:	d106      	bne.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050b6:	4b32      	ldr	r3, [pc, #200]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	4a31      	ldr	r2, [pc, #196]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050c0:	60d3      	str	r3, [r2, #12]
 80050c2:	e011      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050cc:	d10c      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3304      	adds	r3, #4
 80050d2:	2101      	movs	r1, #1
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 f8d9 	bl	800528c <RCCEx_PLLSAI1_Config>
 80050da:	4603      	mov	r3, r0
 80050dc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80050de:	7cfb      	ldrb	r3, [r7, #19]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80050e4:	7cfb      	ldrb	r3, [r7, #19]
 80050e6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d028      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050f4:	4b22      	ldr	r3, [pc, #136]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005102:	491f      	ldr	r1, [pc, #124]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800510e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005112:	d106      	bne.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005114:	4b1a      	ldr	r3, [pc, #104]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	4a19      	ldr	r2, [pc, #100]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800511a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800511e:	60d3      	str	r3, [r2, #12]
 8005120:	e011      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005126:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800512a:	d10c      	bne.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3304      	adds	r3, #4
 8005130:	2101      	movs	r1, #1
 8005132:	4618      	mov	r0, r3
 8005134:	f000 f8aa 	bl	800528c <RCCEx_PLLSAI1_Config>
 8005138:	4603      	mov	r3, r0
 800513a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800513c:	7cfb      	ldrb	r3, [r7, #19]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8005142:	7cfb      	ldrb	r3, [r7, #19]
 8005144:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d02a      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005152:	4b0b      	ldr	r3, [pc, #44]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005158:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005160:	4907      	ldr	r1, [pc, #28]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005162:	4313      	orrs	r3, r2
 8005164:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800516c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005170:	d108      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005172:	4b03      	ldr	r3, [pc, #12]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	4a02      	ldr	r2, [pc, #8]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005178:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800517c:	60d3      	str	r3, [r2, #12]
 800517e:	e013      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005180:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005188:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800518c:	d10c      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	3304      	adds	r3, #4
 8005192:	2101      	movs	r1, #1
 8005194:	4618      	mov	r0, r3
 8005196:	f000 f879 	bl	800528c <RCCEx_PLLSAI1_Config>
 800519a:	4603      	mov	r3, r0
 800519c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800519e:	7cfb      	ldrb	r3, [r7, #19]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80051a4:	7cfb      	ldrb	r3, [r7, #19]
 80051a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d02f      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051b4:	4b2c      	ldr	r3, [pc, #176]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80051b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051c2:	4929      	ldr	r1, [pc, #164]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051d2:	d10d      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3304      	adds	r3, #4
 80051d8:	2102      	movs	r1, #2
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 f856 	bl	800528c <RCCEx_PLLSAI1_Config>
 80051e0:	4603      	mov	r3, r0
 80051e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051e4:	7cfb      	ldrb	r3, [r7, #19]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d014      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80051ea:	7cfb      	ldrb	r3, [r7, #19]
 80051ec:	74bb      	strb	r3, [r7, #18]
 80051ee:	e011      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051f8:	d10c      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	3320      	adds	r3, #32
 80051fe:	2102      	movs	r1, #2
 8005200:	4618      	mov	r0, r3
 8005202:	f000 f935 	bl	8005470 <RCCEx_PLLSAI2_Config>
 8005206:	4603      	mov	r3, r0
 8005208:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800520a:	7cfb      	ldrb	r3, [r7, #19]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005210:	7cfb      	ldrb	r3, [r7, #19]
 8005212:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00b      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005220:	4b11      	ldr	r3, [pc, #68]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005226:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005230:	490d      	ldr	r1, [pc, #52]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005232:	4313      	orrs	r3, r2
 8005234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00b      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005244:	4b08      	ldr	r3, [pc, #32]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005254:	4904      	ldr	r1, [pc, #16]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800525c:	7cbb      	ldrb	r3, [r7, #18]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	40021000 	.word	0x40021000

0800526c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005270:	4b05      	ldr	r3, [pc, #20]	@ (8005288 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a04      	ldr	r2, [pc, #16]	@ (8005288 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005276:	f043 0304 	orr.w	r3, r3, #4
 800527a:	6013      	str	r3, [r2, #0]
}
 800527c:	bf00      	nop
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	40021000 	.word	0x40021000

0800528c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800529a:	4b74      	ldr	r3, [pc, #464]	@ (800546c <RCCEx_PLLSAI1_Config+0x1e0>)
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d018      	beq.n	80052d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80052a6:	4b71      	ldr	r3, [pc, #452]	@ (800546c <RCCEx_PLLSAI1_Config+0x1e0>)
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f003 0203 	and.w	r2, r3, #3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d10d      	bne.n	80052d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
       ||
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d009      	beq.n	80052d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80052be:	4b6b      	ldr	r3, [pc, #428]	@ (800546c <RCCEx_PLLSAI1_Config+0x1e0>)
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	091b      	lsrs	r3, r3, #4
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
       ||
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d047      	beq.n	8005362 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	73fb      	strb	r3, [r7, #15]
 80052d6:	e044      	b.n	8005362 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d018      	beq.n	8005312 <RCCEx_PLLSAI1_Config+0x86>
 80052e0:	2b03      	cmp	r3, #3
 80052e2:	d825      	bhi.n	8005330 <RCCEx_PLLSAI1_Config+0xa4>
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d002      	beq.n	80052ee <RCCEx_PLLSAI1_Config+0x62>
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d009      	beq.n	8005300 <RCCEx_PLLSAI1_Config+0x74>
 80052ec:	e020      	b.n	8005330 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052ee:	4b5f      	ldr	r3, [pc, #380]	@ (800546c <RCCEx_PLLSAI1_Config+0x1e0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d11d      	bne.n	8005336 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052fe:	e01a      	b.n	8005336 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005300:	4b5a      	ldr	r3, [pc, #360]	@ (800546c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005308:	2b00      	cmp	r3, #0
 800530a:	d116      	bne.n	800533a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005310:	e013      	b.n	800533a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005312:	4b56      	ldr	r3, [pc, #344]	@ (800546c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10f      	bne.n	800533e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800531e:	4b53      	ldr	r3, [pc, #332]	@ (800546c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d109      	bne.n	800533e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800532e:	e006      	b.n	800533e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	73fb      	strb	r3, [r7, #15]
      break;
 8005334:	e004      	b.n	8005340 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005336:	bf00      	nop
 8005338:	e002      	b.n	8005340 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800533a:	bf00      	nop
 800533c:	e000      	b.n	8005340 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800533e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005340:	7bfb      	ldrb	r3, [r7, #15]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10d      	bne.n	8005362 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005346:	4b49      	ldr	r3, [pc, #292]	@ (800546c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6819      	ldr	r1, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	3b01      	subs	r3, #1
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	430b      	orrs	r3, r1
 800535c:	4943      	ldr	r1, [pc, #268]	@ (800546c <RCCEx_PLLSAI1_Config+0x1e0>)
 800535e:	4313      	orrs	r3, r2
 8005360:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005362:	7bfb      	ldrb	r3, [r7, #15]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d17c      	bne.n	8005462 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005368:	4b40      	ldr	r3, [pc, #256]	@ (800546c <RCCEx_PLLSAI1_Config+0x1e0>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a3f      	ldr	r2, [pc, #252]	@ (800546c <RCCEx_PLLSAI1_Config+0x1e0>)
 800536e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005372:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005374:	f7fc fd78 	bl	8001e68 <HAL_GetTick>
 8005378:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800537a:	e009      	b.n	8005390 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800537c:	f7fc fd74 	bl	8001e68 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b02      	cmp	r3, #2
 8005388:	d902      	bls.n	8005390 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	73fb      	strb	r3, [r7, #15]
        break;
 800538e:	e005      	b.n	800539c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005390:	4b36      	ldr	r3, [pc, #216]	@ (800546c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1ef      	bne.n	800537c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800539c:	7bfb      	ldrb	r3, [r7, #15]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d15f      	bne.n	8005462 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d110      	bne.n	80053ca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053a8:	4b30      	ldr	r3, [pc, #192]	@ (800546c <RCCEx_PLLSAI1_Config+0x1e0>)
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80053b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	6892      	ldr	r2, [r2, #8]
 80053b8:	0211      	lsls	r1, r2, #8
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	68d2      	ldr	r2, [r2, #12]
 80053be:	06d2      	lsls	r2, r2, #27
 80053c0:	430a      	orrs	r2, r1
 80053c2:	492a      	ldr	r1, [pc, #168]	@ (800546c <RCCEx_PLLSAI1_Config+0x1e0>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	610b      	str	r3, [r1, #16]
 80053c8:	e027      	b.n	800541a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d112      	bne.n	80053f6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053d0:	4b26      	ldr	r3, [pc, #152]	@ (800546c <RCCEx_PLLSAI1_Config+0x1e0>)
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80053d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6892      	ldr	r2, [r2, #8]
 80053e0:	0211      	lsls	r1, r2, #8
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6912      	ldr	r2, [r2, #16]
 80053e6:	0852      	lsrs	r2, r2, #1
 80053e8:	3a01      	subs	r2, #1
 80053ea:	0552      	lsls	r2, r2, #21
 80053ec:	430a      	orrs	r2, r1
 80053ee:	491f      	ldr	r1, [pc, #124]	@ (800546c <RCCEx_PLLSAI1_Config+0x1e0>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	610b      	str	r3, [r1, #16]
 80053f4:	e011      	b.n	800541a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053f6:	4b1d      	ldr	r3, [pc, #116]	@ (800546c <RCCEx_PLLSAI1_Config+0x1e0>)
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80053fe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6892      	ldr	r2, [r2, #8]
 8005406:	0211      	lsls	r1, r2, #8
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6952      	ldr	r2, [r2, #20]
 800540c:	0852      	lsrs	r2, r2, #1
 800540e:	3a01      	subs	r2, #1
 8005410:	0652      	lsls	r2, r2, #25
 8005412:	430a      	orrs	r2, r1
 8005414:	4915      	ldr	r1, [pc, #84]	@ (800546c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005416:	4313      	orrs	r3, r2
 8005418:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800541a:	4b14      	ldr	r3, [pc, #80]	@ (800546c <RCCEx_PLLSAI1_Config+0x1e0>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a13      	ldr	r2, [pc, #76]	@ (800546c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005420:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005424:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005426:	f7fc fd1f 	bl	8001e68 <HAL_GetTick>
 800542a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800542c:	e009      	b.n	8005442 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800542e:	f7fc fd1b 	bl	8001e68 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d902      	bls.n	8005442 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	73fb      	strb	r3, [r7, #15]
          break;
 8005440:	e005      	b.n	800544e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005442:	4b0a      	ldr	r3, [pc, #40]	@ (800546c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0ef      	beq.n	800542e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800544e:	7bfb      	ldrb	r3, [r7, #15]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d106      	bne.n	8005462 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005454:	4b05      	ldr	r3, [pc, #20]	@ (800546c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	4903      	ldr	r1, [pc, #12]	@ (800546c <RCCEx_PLLSAI1_Config+0x1e0>)
 800545e:	4313      	orrs	r3, r2
 8005460:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005462:	7bfb      	ldrb	r3, [r7, #15]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40021000 	.word	0x40021000

08005470 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800547e:	4b69      	ldr	r3, [pc, #420]	@ (8005624 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d018      	beq.n	80054bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800548a:	4b66      	ldr	r3, [pc, #408]	@ (8005624 <RCCEx_PLLSAI2_Config+0x1b4>)
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f003 0203 	and.w	r2, r3, #3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d10d      	bne.n	80054b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
       ||
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d009      	beq.n	80054b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80054a2:	4b60      	ldr	r3, [pc, #384]	@ (8005624 <RCCEx_PLLSAI2_Config+0x1b4>)
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	091b      	lsrs	r3, r3, #4
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
       ||
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d047      	beq.n	8005546 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	73fb      	strb	r3, [r7, #15]
 80054ba:	e044      	b.n	8005546 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b03      	cmp	r3, #3
 80054c2:	d018      	beq.n	80054f6 <RCCEx_PLLSAI2_Config+0x86>
 80054c4:	2b03      	cmp	r3, #3
 80054c6:	d825      	bhi.n	8005514 <RCCEx_PLLSAI2_Config+0xa4>
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d002      	beq.n	80054d2 <RCCEx_PLLSAI2_Config+0x62>
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d009      	beq.n	80054e4 <RCCEx_PLLSAI2_Config+0x74>
 80054d0:	e020      	b.n	8005514 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054d2:	4b54      	ldr	r3, [pc, #336]	@ (8005624 <RCCEx_PLLSAI2_Config+0x1b4>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d11d      	bne.n	800551a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054e2:	e01a      	b.n	800551a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054e4:	4b4f      	ldr	r3, [pc, #316]	@ (8005624 <RCCEx_PLLSAI2_Config+0x1b4>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d116      	bne.n	800551e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054f4:	e013      	b.n	800551e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054f6:	4b4b      	ldr	r3, [pc, #300]	@ (8005624 <RCCEx_PLLSAI2_Config+0x1b4>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10f      	bne.n	8005522 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005502:	4b48      	ldr	r3, [pc, #288]	@ (8005624 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d109      	bne.n	8005522 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005512:	e006      	b.n	8005522 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	73fb      	strb	r3, [r7, #15]
      break;
 8005518:	e004      	b.n	8005524 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800551a:	bf00      	nop
 800551c:	e002      	b.n	8005524 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800551e:	bf00      	nop
 8005520:	e000      	b.n	8005524 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005522:	bf00      	nop
    }

    if(status == HAL_OK)
 8005524:	7bfb      	ldrb	r3, [r7, #15]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10d      	bne.n	8005546 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800552a:	4b3e      	ldr	r3, [pc, #248]	@ (8005624 <RCCEx_PLLSAI2_Config+0x1b4>)
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6819      	ldr	r1, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	3b01      	subs	r3, #1
 800553c:	011b      	lsls	r3, r3, #4
 800553e:	430b      	orrs	r3, r1
 8005540:	4938      	ldr	r1, [pc, #224]	@ (8005624 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005542:	4313      	orrs	r3, r2
 8005544:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005546:	7bfb      	ldrb	r3, [r7, #15]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d166      	bne.n	800561a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800554c:	4b35      	ldr	r3, [pc, #212]	@ (8005624 <RCCEx_PLLSAI2_Config+0x1b4>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a34      	ldr	r2, [pc, #208]	@ (8005624 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005552:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005558:	f7fc fc86 	bl	8001e68 <HAL_GetTick>
 800555c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800555e:	e009      	b.n	8005574 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005560:	f7fc fc82 	bl	8001e68 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d902      	bls.n	8005574 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	73fb      	strb	r3, [r7, #15]
        break;
 8005572:	e005      	b.n	8005580 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005574:	4b2b      	ldr	r3, [pc, #172]	@ (8005624 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1ef      	bne.n	8005560 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005580:	7bfb      	ldrb	r3, [r7, #15]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d149      	bne.n	800561a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d110      	bne.n	80055ae <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800558c:	4b25      	ldr	r3, [pc, #148]	@ (8005624 <RCCEx_PLLSAI2_Config+0x1b4>)
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005594:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6892      	ldr	r2, [r2, #8]
 800559c:	0211      	lsls	r1, r2, #8
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	68d2      	ldr	r2, [r2, #12]
 80055a2:	06d2      	lsls	r2, r2, #27
 80055a4:	430a      	orrs	r2, r1
 80055a6:	491f      	ldr	r1, [pc, #124]	@ (8005624 <RCCEx_PLLSAI2_Config+0x1b4>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	614b      	str	r3, [r1, #20]
 80055ac:	e011      	b.n	80055d2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005624 <RCCEx_PLLSAI2_Config+0x1b4>)
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80055b6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6892      	ldr	r2, [r2, #8]
 80055be:	0211      	lsls	r1, r2, #8
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6912      	ldr	r2, [r2, #16]
 80055c4:	0852      	lsrs	r2, r2, #1
 80055c6:	3a01      	subs	r2, #1
 80055c8:	0652      	lsls	r2, r2, #25
 80055ca:	430a      	orrs	r2, r1
 80055cc:	4915      	ldr	r1, [pc, #84]	@ (8005624 <RCCEx_PLLSAI2_Config+0x1b4>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80055d2:	4b14      	ldr	r3, [pc, #80]	@ (8005624 <RCCEx_PLLSAI2_Config+0x1b4>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a13      	ldr	r2, [pc, #76]	@ (8005624 <RCCEx_PLLSAI2_Config+0x1b4>)
 80055d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055dc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055de:	f7fc fc43 	bl	8001e68 <HAL_GetTick>
 80055e2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055e4:	e009      	b.n	80055fa <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055e6:	f7fc fc3f 	bl	8001e68 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d902      	bls.n	80055fa <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	73fb      	strb	r3, [r7, #15]
          break;
 80055f8:	e005      	b.n	8005606 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005624 <RCCEx_PLLSAI2_Config+0x1b4>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0ef      	beq.n	80055e6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8005606:	7bfb      	ldrb	r3, [r7, #15]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d106      	bne.n	800561a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800560c:	4b05      	ldr	r3, [pc, #20]	@ (8005624 <RCCEx_PLLSAI2_Config+0x1b4>)
 800560e:	695a      	ldr	r2, [r3, #20]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	4903      	ldr	r1, [pc, #12]	@ (8005624 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005616:	4313      	orrs	r3, r2
 8005618:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800561a:	7bfb      	ldrb	r3, [r7, #15]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	40021000 	.word	0x40021000

08005628 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e095      	b.n	8005766 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563e:	2b00      	cmp	r3, #0
 8005640:	d108      	bne.n	8005654 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800564a:	d009      	beq.n	8005660 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	61da      	str	r2, [r3, #28]
 8005652:	e005      	b.n	8005660 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d106      	bne.n	8005680 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7fc fa70 	bl	8001b60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005696:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056a0:	d902      	bls.n	80056a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	e002      	b.n	80056ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80056a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80056ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80056b6:	d007      	beq.n	80056c8 <HAL_SPI_Init+0xa0>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056c0:	d002      	beq.n	80056c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	431a      	orrs	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	431a      	orrs	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056f6:	431a      	orrs	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005700:	431a      	orrs	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800570a:	ea42 0103 	orr.w	r1, r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005712:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	0c1b      	lsrs	r3, r3, #16
 8005724:	f003 0204 	and.w	r2, r3, #4
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572c:	f003 0310 	and.w	r3, r3, #16
 8005730:	431a      	orrs	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005736:	f003 0308 	and.w	r3, r3, #8
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005744:	ea42 0103 	orr.w	r1, r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b088      	sub	sp, #32
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	603b      	str	r3, [r7, #0]
 800577a:	4613      	mov	r3, r2
 800577c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_SPI_Transmit+0x22>
 800578c:	2302      	movs	r3, #2
 800578e:	e15f      	b.n	8005a50 <HAL_SPI_Transmit+0x2e2>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005798:	f7fc fb66 	bl	8001e68 <HAL_GetTick>
 800579c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800579e:	88fb      	ldrh	r3, [r7, #6]
 80057a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d002      	beq.n	80057b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80057ae:	2302      	movs	r3, #2
 80057b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057b2:	e148      	b.n	8005a46 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <HAL_SPI_Transmit+0x52>
 80057ba:	88fb      	ldrh	r3, [r7, #6]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d102      	bne.n	80057c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057c4:	e13f      	b.n	8005a46 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2203      	movs	r2, #3
 80057ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	88fa      	ldrh	r2, [r7, #6]
 80057de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	88fa      	ldrh	r2, [r7, #6]
 80057e4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005810:	d10f      	bne.n	8005832 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005820:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005830:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800583c:	2b40      	cmp	r3, #64	@ 0x40
 800583e:	d007      	beq.n	8005850 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800584e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005858:	d94f      	bls.n	80058fa <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <HAL_SPI_Transmit+0xfa>
 8005862:	8afb      	ldrh	r3, [r7, #22]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d142      	bne.n	80058ee <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800586c:	881a      	ldrh	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005878:	1c9a      	adds	r2, r3, #2
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005882:	b29b      	uxth	r3, r3
 8005884:	3b01      	subs	r3, #1
 8005886:	b29a      	uxth	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800588c:	e02f      	b.n	80058ee <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b02      	cmp	r3, #2
 800589a:	d112      	bne.n	80058c2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a0:	881a      	ldrh	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ac:	1c9a      	adds	r2, r3, #2
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80058c0:	e015      	b.n	80058ee <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058c2:	f7fc fad1 	bl	8001e68 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d803      	bhi.n	80058da <HAL_SPI_Transmit+0x16c>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d8:	d102      	bne.n	80058e0 <HAL_SPI_Transmit+0x172>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d106      	bne.n	80058ee <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80058ec:	e0ab      	b.n	8005a46 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1ca      	bne.n	800588e <HAL_SPI_Transmit+0x120>
 80058f8:	e080      	b.n	80059fc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <HAL_SPI_Transmit+0x19a>
 8005902:	8afb      	ldrh	r3, [r7, #22]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d174      	bne.n	80059f2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800590c:	b29b      	uxth	r3, r3
 800590e:	2b01      	cmp	r3, #1
 8005910:	d912      	bls.n	8005938 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005916:	881a      	ldrh	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005922:	1c9a      	adds	r2, r3, #2
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800592c:	b29b      	uxth	r3, r3
 800592e:	3b02      	subs	r3, #2
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005936:	e05c      	b.n	80059f2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	330c      	adds	r3, #12
 8005942:	7812      	ldrb	r2, [r2, #0]
 8005944:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005954:	b29b      	uxth	r3, r3
 8005956:	3b01      	subs	r3, #1
 8005958:	b29a      	uxth	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800595e:	e048      	b.n	80059f2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b02      	cmp	r3, #2
 800596c:	d12b      	bne.n	80059c6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005972:	b29b      	uxth	r3, r3
 8005974:	2b01      	cmp	r3, #1
 8005976:	d912      	bls.n	800599e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597c:	881a      	ldrh	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005988:	1c9a      	adds	r2, r3, #2
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005992:	b29b      	uxth	r3, r3
 8005994:	3b02      	subs	r3, #2
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800599c:	e029      	b.n	80059f2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	330c      	adds	r3, #12
 80059a8:	7812      	ldrb	r2, [r2, #0]
 80059aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80059c4:	e015      	b.n	80059f2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059c6:	f7fc fa4f 	bl	8001e68 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d803      	bhi.n	80059de <HAL_SPI_Transmit+0x270>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059dc:	d102      	bne.n	80059e4 <HAL_SPI_Transmit+0x276>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d106      	bne.n	80059f2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80059f0:	e029      	b.n	8005a46 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1b1      	bne.n	8005960 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	6839      	ldr	r1, [r7, #0]
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 fb69 	bl	80060d8 <SPI_EndRxTxTransaction>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10a      	bne.n	8005a30 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	613b      	str	r3, [r7, #16]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	613b      	str	r3, [r7, #16]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	613b      	str	r3, [r7, #16]
 8005a2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	77fb      	strb	r3, [r7, #31]
 8005a3c:	e003      	b.n	8005a46 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005a4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3720      	adds	r7, #32
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08a      	sub	sp, #40	@ 0x28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
 8005a64:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a66:	2301      	movs	r3, #1
 8005a68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <HAL_SPI_TransmitReceive+0x26>
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e20a      	b.n	8005e94 <HAL_SPI_TransmitReceive+0x43c>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a86:	f7fc f9ef 	bl	8001e68 <HAL_GetTick>
 8005a8a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a92:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005a9a:	887b      	ldrh	r3, [r7, #2]
 8005a9c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005a9e:	887b      	ldrh	r3, [r7, #2]
 8005aa0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005aa2:	7efb      	ldrb	r3, [r7, #27]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d00e      	beq.n	8005ac6 <HAL_SPI_TransmitReceive+0x6e>
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005aae:	d106      	bne.n	8005abe <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d102      	bne.n	8005abe <HAL_SPI_TransmitReceive+0x66>
 8005ab8:	7efb      	ldrb	r3, [r7, #27]
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d003      	beq.n	8005ac6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005abe:	2302      	movs	r3, #2
 8005ac0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005ac4:	e1e0      	b.n	8005e88 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <HAL_SPI_TransmitReceive+0x80>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d002      	beq.n	8005ad8 <HAL_SPI_TransmitReceive+0x80>
 8005ad2:	887b      	ldrh	r3, [r7, #2]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d103      	bne.n	8005ae0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005ade:	e1d3      	b.n	8005e88 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d003      	beq.n	8005af4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2205      	movs	r2, #5
 8005af0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	887a      	ldrh	r2, [r7, #2]
 8005b04:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	887a      	ldrh	r2, [r7, #2]
 8005b0c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	887a      	ldrh	r2, [r7, #2]
 8005b1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	887a      	ldrh	r2, [r7, #2]
 8005b20:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b36:	d802      	bhi.n	8005b3e <HAL_SPI_TransmitReceive+0xe6>
 8005b38:	8a3b      	ldrh	r3, [r7, #16]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d908      	bls.n	8005b50 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005b4c:	605a      	str	r2, [r3, #4]
 8005b4e:	e007      	b.n	8005b60 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005b5e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b6a:	2b40      	cmp	r3, #64	@ 0x40
 8005b6c:	d007      	beq.n	8005b7e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b86:	f240 8081 	bls.w	8005c8c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d002      	beq.n	8005b98 <HAL_SPI_TransmitReceive+0x140>
 8005b92:	8a7b      	ldrh	r3, [r7, #18]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d16d      	bne.n	8005c74 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9c:	881a      	ldrh	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba8:	1c9a      	adds	r2, r3, #2
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bbc:	e05a      	b.n	8005c74 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d11b      	bne.n	8005c04 <HAL_SPI_TransmitReceive+0x1ac>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d016      	beq.n	8005c04 <HAL_SPI_TransmitReceive+0x1ac>
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d113      	bne.n	8005c04 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be0:	881a      	ldrh	r2, [r3, #0]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bec:	1c9a      	adds	r2, r3, #2
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d11c      	bne.n	8005c4c <HAL_SPI_TransmitReceive+0x1f4>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d016      	beq.n	8005c4c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68da      	ldr	r2, [r3, #12]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c28:	b292      	uxth	r2, r2
 8005c2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c30:	1c9a      	adds	r2, r3, #2
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c4c:	f7fc f90c 	bl	8001e68 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d80b      	bhi.n	8005c74 <HAL_SPI_TransmitReceive+0x21c>
 8005c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c62:	d007      	beq.n	8005c74 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005c72:	e109      	b.n	8005e88 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d19f      	bne.n	8005bbe <HAL_SPI_TransmitReceive+0x166>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d199      	bne.n	8005bbe <HAL_SPI_TransmitReceive+0x166>
 8005c8a:	e0e3      	b.n	8005e54 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <HAL_SPI_TransmitReceive+0x244>
 8005c94:	8a7b      	ldrh	r3, [r7, #18]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	f040 80cf 	bne.w	8005e3a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d912      	bls.n	8005ccc <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005caa:	881a      	ldrh	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb6:	1c9a      	adds	r2, r3, #2
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b02      	subs	r3, #2
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cca:	e0b6      	b.n	8005e3a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	330c      	adds	r3, #12
 8005cd6:	7812      	ldrb	r2, [r2, #0]
 8005cd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	3b01      	subs	r3, #1
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cf2:	e0a2      	b.n	8005e3a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d134      	bne.n	8005d6c <HAL_SPI_TransmitReceive+0x314>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d02f      	beq.n	8005d6c <HAL_SPI_TransmitReceive+0x314>
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d12c      	bne.n	8005d6c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d912      	bls.n	8005d42 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d20:	881a      	ldrh	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2c:	1c9a      	adds	r2, r3, #2
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	3b02      	subs	r3, #2
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d40:	e012      	b.n	8005d68 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	330c      	adds	r3, #12
 8005d4c:	7812      	ldrb	r2, [r2, #0]
 8005d4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	3b01      	subs	r3, #1
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d148      	bne.n	8005e0c <HAL_SPI_TransmitReceive+0x3b4>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d042      	beq.n	8005e0c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d923      	bls.n	8005dda <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9c:	b292      	uxth	r2, r2
 8005d9e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da4:	1c9a      	adds	r2, r3, #2
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	3b02      	subs	r3, #2
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d81f      	bhi.n	8005e08 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005dd6:	605a      	str	r2, [r3, #4]
 8005dd8:	e016      	b.n	8005e08 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f103 020c 	add.w	r2, r3, #12
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de6:	7812      	ldrb	r2, [r2, #0]
 8005de8:	b2d2      	uxtb	r2, r2
 8005dea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e0c:	f7fc f82c 	bl	8001e68 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d803      	bhi.n	8005e24 <HAL_SPI_TransmitReceive+0x3cc>
 8005e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e22:	d102      	bne.n	8005e2a <HAL_SPI_TransmitReceive+0x3d2>
 8005e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d107      	bne.n	8005e3a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005e38:	e026      	b.n	8005e88 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f47f af57 	bne.w	8005cf4 <HAL_SPI_TransmitReceive+0x29c>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f47f af50 	bne.w	8005cf4 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e54:	69fa      	ldr	r2, [r7, #28]
 8005e56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 f93d 	bl	80060d8 <SPI_EndRxTxTransaction>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d005      	beq.n	8005e70 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e7e:	e003      	b.n	8005e88 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005e90:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3728      	adds	r7, #40	@ 0x28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005eac:	f7fb ffdc 	bl	8001e68 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb4:	1a9b      	subs	r3, r3, r2
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	4413      	add	r3, r2
 8005eba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ebc:	f7fb ffd4 	bl	8001e68 <HAL_GetTick>
 8005ec0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ec2:	4b39      	ldr	r3, [pc, #228]	@ (8005fa8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	015b      	lsls	r3, r3, #5
 8005ec8:	0d1b      	lsrs	r3, r3, #20
 8005eca:	69fa      	ldr	r2, [r7, #28]
 8005ecc:	fb02 f303 	mul.w	r3, r2, r3
 8005ed0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ed2:	e054      	b.n	8005f7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eda:	d050      	beq.n	8005f7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005edc:	f7fb ffc4 	bl	8001e68 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	69fa      	ldr	r2, [r7, #28]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d902      	bls.n	8005ef2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d13d      	bne.n	8005f6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005f00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f0a:	d111      	bne.n	8005f30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f14:	d004      	beq.n	8005f20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f1e:	d107      	bne.n	8005f30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f38:	d10f      	bne.n	8005f5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e017      	b.n	8005f9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	4013      	ands	r3, r2
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	bf0c      	ite	eq
 8005f8e:	2301      	moveq	r3, #1
 8005f90:	2300      	movne	r3, #0
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	461a      	mov	r2, r3
 8005f96:	79fb      	ldrb	r3, [r7, #7]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d19b      	bne.n	8005ed4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3720      	adds	r7, #32
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20000018 	.word	0x20000018

08005fac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08a      	sub	sp, #40	@ 0x28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005fbe:	f7fb ff53 	bl	8001e68 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc6:	1a9b      	subs	r3, r3, r2
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	4413      	add	r3, r2
 8005fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005fce:	f7fb ff4b 	bl	8001e68 <HAL_GetTick>
 8005fd2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	330c      	adds	r3, #12
 8005fda:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005fdc:	4b3d      	ldr	r3, [pc, #244]	@ (80060d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	00da      	lsls	r2, r3, #3
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	0d1b      	lsrs	r3, r3, #20
 8005fec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fee:	fb02 f303 	mul.w	r3, r2, r3
 8005ff2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005ff4:	e060      	b.n	80060b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005ffc:	d107      	bne.n	800600e <SPI_WaitFifoStateUntilTimeout+0x62>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d104      	bne.n	800600e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	b2db      	uxtb	r3, r3
 800600a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800600c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006014:	d050      	beq.n	80060b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006016:	f7fb ff27 	bl	8001e68 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006022:	429a      	cmp	r2, r3
 8006024:	d902      	bls.n	800602c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006028:	2b00      	cmp	r3, #0
 800602a:	d13d      	bne.n	80060a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800603a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006044:	d111      	bne.n	800606a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800604e:	d004      	beq.n	800605a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006058:	d107      	bne.n	800606a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006068:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800606e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006072:	d10f      	bne.n	8006094 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006092:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e010      	b.n	80060ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689a      	ldr	r2, [r3, #8]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	4013      	ands	r3, r2
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d196      	bne.n	8005ff6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3728      	adds	r7, #40	@ 0x28
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20000018 	.word	0x20000018

080060d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af02      	add	r7, sp, #8
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f7ff ff5b 	bl	8005fac <SPI_WaitFifoStateUntilTimeout>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d007      	beq.n	800610c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006100:	f043 0220 	orr.w	r2, r3, #32
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e027      	b.n	800615c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2200      	movs	r2, #0
 8006114:	2180      	movs	r1, #128	@ 0x80
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f7ff fec0 	bl	8005e9c <SPI_WaitFlagStateUntilTimeout>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d007      	beq.n	8006132 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006126:	f043 0220 	orr.w	r2, r3, #32
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e014      	b.n	800615c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2200      	movs	r2, #0
 800613a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f7ff ff34 	bl	8005fac <SPI_WaitFifoStateUntilTimeout>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d007      	beq.n	800615a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800614e:	f043 0220 	orr.w	r2, r3, #32
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e000      	b.n	800615c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e040      	b.n	80061f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d106      	bne.n	800618c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7fb fc34 	bl	80019f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2224      	movs	r2, #36	@ 0x24
 8006190:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0201 	bic.w	r2, r2, #1
 80061a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fec0 	bl	8006f30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fc05 	bl	80069c0 <UART_SetConfig>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e01b      	b.n	80061f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80061ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689a      	ldr	r2, [r3, #8]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80061de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f042 0201 	orr.w	r2, r2, #1
 80061ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 ff3f 	bl	8007074 <UART_CheckIdleState>
 80061f6:	4603      	mov	r3, r0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b08a      	sub	sp, #40	@ 0x28
 8006204:	af02      	add	r7, sp, #8
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	603b      	str	r3, [r7, #0]
 800620c:	4613      	mov	r3, r2
 800620e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006214:	2b20      	cmp	r3, #32
 8006216:	d177      	bne.n	8006308 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <HAL_UART_Transmit+0x24>
 800621e:	88fb      	ldrh	r3, [r7, #6]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e070      	b.n	800630a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2221      	movs	r2, #33	@ 0x21
 8006234:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006236:	f7fb fe17 	bl	8001e68 <HAL_GetTick>
 800623a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	88fa      	ldrh	r2, [r7, #6]
 8006240:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	88fa      	ldrh	r2, [r7, #6]
 8006248:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006254:	d108      	bne.n	8006268 <HAL_UART_Transmit+0x68>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d104      	bne.n	8006268 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800625e:	2300      	movs	r3, #0
 8006260:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	61bb      	str	r3, [r7, #24]
 8006266:	e003      	b.n	8006270 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800626c:	2300      	movs	r3, #0
 800626e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006270:	e02f      	b.n	80062d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	2200      	movs	r2, #0
 800627a:	2180      	movs	r1, #128	@ 0x80
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 ffa1 	bl	80071c4 <UART_WaitOnFlagUntilTimeout>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d004      	beq.n	8006292 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2220      	movs	r2, #32
 800628c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e03b      	b.n	800630a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10b      	bne.n	80062b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	881a      	ldrh	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062a4:	b292      	uxth	r2, r2
 80062a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	3302      	adds	r3, #2
 80062ac:	61bb      	str	r3, [r7, #24]
 80062ae:	e007      	b.n	80062c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	781a      	ldrb	r2, [r3, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	3301      	adds	r3, #1
 80062be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	3b01      	subs	r3, #1
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1c9      	bne.n	8006272 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2200      	movs	r2, #0
 80062e6:	2140      	movs	r1, #64	@ 0x40
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 ff6b 	bl	80071c4 <UART_WaitOnFlagUntilTimeout>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d004      	beq.n	80062fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2220      	movs	r2, #32
 80062f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e005      	b.n	800630a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2220      	movs	r2, #32
 8006302:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006304:	2300      	movs	r3, #0
 8006306:	e000      	b.n	800630a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006308:	2302      	movs	r3, #2
  }
}
 800630a:	4618      	mov	r0, r3
 800630c:	3720      	adds	r7, #32
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
	...

08006314 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08a      	sub	sp, #40	@ 0x28
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	4613      	mov	r3, r2
 8006320:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006328:	2b20      	cmp	r3, #32
 800632a:	d137      	bne.n	800639c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <HAL_UART_Receive_IT+0x24>
 8006332:	88fb      	ldrh	r3, [r7, #6]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e030      	b.n	800639e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a18      	ldr	r2, [pc, #96]	@ (80063a8 <HAL_UART_Receive_IT+0x94>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d01f      	beq.n	800638c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d018      	beq.n	800638c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	e853 3f00 	ldrex	r3, [r3]
 8006366:	613b      	str	r3, [r7, #16]
   return(result);
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800636e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	461a      	mov	r2, r3
 8006376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006378:	623b      	str	r3, [r7, #32]
 800637a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637c:	69f9      	ldr	r1, [r7, #28]
 800637e:	6a3a      	ldr	r2, [r7, #32]
 8006380:	e841 2300 	strex	r3, r2, [r1]
 8006384:	61bb      	str	r3, [r7, #24]
   return(result);
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1e6      	bne.n	800635a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800638c:	88fb      	ldrh	r3, [r7, #6]
 800638e:	461a      	mov	r2, r3
 8006390:	68b9      	ldr	r1, [r7, #8]
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 ff7e 	bl	8007294 <UART_Start_Receive_IT>
 8006398:	4603      	mov	r3, r0
 800639a:	e000      	b.n	800639e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800639c:	2302      	movs	r3, #2
  }
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3728      	adds	r7, #40	@ 0x28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	40008000 	.word	0x40008000

080063ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b0ba      	sub	sp, #232	@ 0xe8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	69db      	ldr	r3, [r3, #28]
 80063ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80063d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80063d6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80063da:	4013      	ands	r3, r2
 80063dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80063e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d115      	bne.n	8006414 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80063e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00f      	beq.n	8006414 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063f8:	f003 0320 	and.w	r3, r3, #32
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d009      	beq.n	8006414 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 82ae 	beq.w	8006966 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	4798      	blx	r3
      }
      return;
 8006412:	e2a8      	b.n	8006966 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006414:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 8117 	beq.w	800664c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800641e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d106      	bne.n	8006438 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800642a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800642e:	4b85      	ldr	r3, [pc, #532]	@ (8006644 <HAL_UART_IRQHandler+0x298>)
 8006430:	4013      	ands	r3, r2
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 810a 	beq.w	800664c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b00      	cmp	r3, #0
 8006442:	d011      	beq.n	8006468 <HAL_UART_IRQHandler+0xbc>
 8006444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00b      	beq.n	8006468 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2201      	movs	r2, #1
 8006456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800645e:	f043 0201 	orr.w	r2, r3, #1
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d011      	beq.n	8006498 <HAL_UART_IRQHandler+0xec>
 8006474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00b      	beq.n	8006498 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2202      	movs	r2, #2
 8006486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800648e:	f043 0204 	orr.w	r2, r3, #4
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d011      	beq.n	80064c8 <HAL_UART_IRQHandler+0x11c>
 80064a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00b      	beq.n	80064c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2204      	movs	r2, #4
 80064b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064be:	f043 0202 	orr.w	r2, r3, #2
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80064c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064cc:	f003 0308 	and.w	r3, r3, #8
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d017      	beq.n	8006504 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064d8:	f003 0320 	and.w	r3, r3, #32
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d105      	bne.n	80064ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80064e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00b      	beq.n	8006504 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2208      	movs	r2, #8
 80064f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064fa:	f043 0208 	orr.w	r2, r3, #8
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006508:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800650c:	2b00      	cmp	r3, #0
 800650e:	d012      	beq.n	8006536 <HAL_UART_IRQHandler+0x18a>
 8006510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006514:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00c      	beq.n	8006536 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800652c:	f043 0220 	orr.w	r2, r3, #32
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 8214 	beq.w	800696a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00d      	beq.n	800656a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800654e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d007      	beq.n	800656a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006570:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800657e:	2b40      	cmp	r3, #64	@ 0x40
 8006580:	d005      	beq.n	800658e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006586:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800658a:	2b00      	cmp	r3, #0
 800658c:	d04f      	beq.n	800662e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 ff46 	bl	8007420 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800659e:	2b40      	cmp	r3, #64	@ 0x40
 80065a0:	d141      	bne.n	8006626 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3308      	adds	r3, #8
 80065a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80065b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80065bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3308      	adds	r3, #8
 80065ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80065ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80065d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80065da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80065e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1d9      	bne.n	80065a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d013      	beq.n	800661e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065fa:	4a13      	ldr	r2, [pc, #76]	@ (8006648 <HAL_UART_IRQHandler+0x29c>)
 80065fc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006602:	4618      	mov	r0, r3
 8006604:	f7fb fdaf 	bl	8002166 <HAL_DMA_Abort_IT>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d017      	beq.n	800663e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006618:	4610      	mov	r0, r2
 800661a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800661c:	e00f      	b.n	800663e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f9b8 	bl	8006994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006624:	e00b      	b.n	800663e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f9b4 	bl	8006994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800662c:	e007      	b.n	800663e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f9b0 	bl	8006994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800663c:	e195      	b.n	800696a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800663e:	bf00      	nop
    return;
 8006640:	e193      	b.n	800696a <HAL_UART_IRQHandler+0x5be>
 8006642:	bf00      	nop
 8006644:	04000120 	.word	0x04000120
 8006648:	080074e9 	.word	0x080074e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006650:	2b01      	cmp	r3, #1
 8006652:	f040 814e 	bne.w	80068f2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800665a:	f003 0310 	and.w	r3, r3, #16
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 8147 	beq.w	80068f2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006668:	f003 0310 	and.w	r3, r3, #16
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 8140 	beq.w	80068f2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2210      	movs	r2, #16
 8006678:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006684:	2b40      	cmp	r3, #64	@ 0x40
 8006686:	f040 80b8 	bne.w	80067fa <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006696:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 8167 	beq.w	800696e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80066a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066aa:	429a      	cmp	r2, r3
 80066ac:	f080 815f 	bcs.w	800696e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0320 	and.w	r3, r3, #32
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f040 8086 	bne.w	80067d8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80066e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80066e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	461a      	mov	r2, r3
 80066f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80066f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80066fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006702:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006706:	e841 2300 	strex	r3, r2, [r1]
 800670a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800670e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1da      	bne.n	80066cc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3308      	adds	r3, #8
 800671c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006720:	e853 3f00 	ldrex	r3, [r3]
 8006724:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006726:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006728:	f023 0301 	bic.w	r3, r3, #1
 800672c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3308      	adds	r3, #8
 8006736:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800673a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800673e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006742:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006746:	e841 2300 	strex	r3, r2, [r1]
 800674a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800674c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1e1      	bne.n	8006716 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3308      	adds	r3, #8
 8006758:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800675c:	e853 3f00 	ldrex	r3, [r3]
 8006760:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006762:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006764:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006768:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3308      	adds	r3, #8
 8006772:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006776:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006778:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800677c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800677e:	e841 2300 	strex	r3, r2, [r1]
 8006782:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006784:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1e3      	bne.n	8006752 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2220      	movs	r2, #32
 800678e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067a0:	e853 3f00 	ldrex	r3, [r3]
 80067a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80067a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067a8:	f023 0310 	bic.w	r3, r3, #16
 80067ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	461a      	mov	r2, r3
 80067b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80067c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1e4      	bne.n	8006798 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fb fc89 	bl	80020ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	4619      	mov	r1, r3
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f8d8 	bl	80069a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067f8:	e0b9      	b.n	800696e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006806:	b29b      	uxth	r3, r3
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006814:	b29b      	uxth	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	f000 80ab 	beq.w	8006972 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800681c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 80a6 	beq.w	8006972 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800682e:	e853 3f00 	ldrex	r3, [r3]
 8006832:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006836:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800683a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006848:	647b      	str	r3, [r7, #68]	@ 0x44
 800684a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800684e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006850:	e841 2300 	strex	r3, r2, [r1]
 8006854:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1e4      	bne.n	8006826 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3308      	adds	r3, #8
 8006862:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006866:	e853 3f00 	ldrex	r3, [r3]
 800686a:	623b      	str	r3, [r7, #32]
   return(result);
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	f023 0301 	bic.w	r3, r3, #1
 8006872:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3308      	adds	r3, #8
 800687c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006880:	633a      	str	r2, [r7, #48]	@ 0x30
 8006882:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006884:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006888:	e841 2300 	strex	r3, r2, [r1]
 800688c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800688e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1e3      	bne.n	800685c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2220      	movs	r2, #32
 8006898:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f023 0310 	bic.w	r3, r3, #16
 80068bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	461a      	mov	r2, r3
 80068c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80068ca:	61fb      	str	r3, [r7, #28]
 80068cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ce:	69b9      	ldr	r1, [r7, #24]
 80068d0:	69fa      	ldr	r2, [r7, #28]
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	617b      	str	r3, [r7, #20]
   return(result);
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e4      	bne.n	80068a8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2202      	movs	r2, #2
 80068e2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068e8:	4619      	mov	r1, r3
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f85c 	bl	80069a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068f0:	e03f      	b.n	8006972 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80068f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00e      	beq.n	800691c <HAL_UART_IRQHandler+0x570>
 80068fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d008      	beq.n	800691c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006912:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 ffe3 	bl	80078e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800691a:	e02d      	b.n	8006978 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800691c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00e      	beq.n	8006946 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800692c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006930:	2b00      	cmp	r3, #0
 8006932:	d008      	beq.n	8006946 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006938:	2b00      	cmp	r3, #0
 800693a:	d01c      	beq.n	8006976 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	4798      	blx	r3
    }
    return;
 8006944:	e017      	b.n	8006976 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800694a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800694e:	2b00      	cmp	r3, #0
 8006950:	d012      	beq.n	8006978 <HAL_UART_IRQHandler+0x5cc>
 8006952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00c      	beq.n	8006978 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fdd8 	bl	8007514 <UART_EndTransmit_IT>
    return;
 8006964:	e008      	b.n	8006978 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006966:	bf00      	nop
 8006968:	e006      	b.n	8006978 <HAL_UART_IRQHandler+0x5cc>
    return;
 800696a:	bf00      	nop
 800696c:	e004      	b.n	8006978 <HAL_UART_IRQHandler+0x5cc>
      return;
 800696e:	bf00      	nop
 8006970:	e002      	b.n	8006978 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006972:	bf00      	nop
 8006974:	e000      	b.n	8006978 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006976:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006978:	37e8      	adds	r7, #232	@ 0xe8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop

08006980 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	460b      	mov	r3, r1
 80069b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069c4:	b08a      	sub	sp, #40	@ 0x28
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	431a      	orrs	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	431a      	orrs	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	69db      	ldr	r3, [r3, #28]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	4ba4      	ldr	r3, [pc, #656]	@ (8006c80 <UART_SetConfig+0x2c0>)
 80069f0:	4013      	ands	r3, r2
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	6812      	ldr	r2, [r2, #0]
 80069f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069f8:	430b      	orrs	r3, r1
 80069fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a99      	ldr	r2, [pc, #612]	@ (8006c84 <UART_SetConfig+0x2c4>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d004      	beq.n	8006a2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a90      	ldr	r2, [pc, #576]	@ (8006c88 <UART_SetConfig+0x2c8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d126      	bne.n	8006a98 <UART_SetConfig+0xd8>
 8006a4a:	4b90      	ldr	r3, [pc, #576]	@ (8006c8c <UART_SetConfig+0x2cc>)
 8006a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a50:	f003 0303 	and.w	r3, r3, #3
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	d81b      	bhi.n	8006a90 <UART_SetConfig+0xd0>
 8006a58:	a201      	add	r2, pc, #4	@ (adr r2, 8006a60 <UART_SetConfig+0xa0>)
 8006a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5e:	bf00      	nop
 8006a60:	08006a71 	.word	0x08006a71
 8006a64:	08006a81 	.word	0x08006a81
 8006a68:	08006a79 	.word	0x08006a79
 8006a6c:	08006a89 	.word	0x08006a89
 8006a70:	2301      	movs	r3, #1
 8006a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a76:	e116      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006a78:	2302      	movs	r3, #2
 8006a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a7e:	e112      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006a80:	2304      	movs	r3, #4
 8006a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a86:	e10e      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006a88:	2308      	movs	r3, #8
 8006a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a8e:	e10a      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006a90:	2310      	movs	r3, #16
 8006a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a96:	e106      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a7c      	ldr	r2, [pc, #496]	@ (8006c90 <UART_SetConfig+0x2d0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d138      	bne.n	8006b14 <UART_SetConfig+0x154>
 8006aa2:	4b7a      	ldr	r3, [pc, #488]	@ (8006c8c <UART_SetConfig+0x2cc>)
 8006aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aa8:	f003 030c 	and.w	r3, r3, #12
 8006aac:	2b0c      	cmp	r3, #12
 8006aae:	d82d      	bhi.n	8006b0c <UART_SetConfig+0x14c>
 8006ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ab8 <UART_SetConfig+0xf8>)
 8006ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab6:	bf00      	nop
 8006ab8:	08006aed 	.word	0x08006aed
 8006abc:	08006b0d 	.word	0x08006b0d
 8006ac0:	08006b0d 	.word	0x08006b0d
 8006ac4:	08006b0d 	.word	0x08006b0d
 8006ac8:	08006afd 	.word	0x08006afd
 8006acc:	08006b0d 	.word	0x08006b0d
 8006ad0:	08006b0d 	.word	0x08006b0d
 8006ad4:	08006b0d 	.word	0x08006b0d
 8006ad8:	08006af5 	.word	0x08006af5
 8006adc:	08006b0d 	.word	0x08006b0d
 8006ae0:	08006b0d 	.word	0x08006b0d
 8006ae4:	08006b0d 	.word	0x08006b0d
 8006ae8:	08006b05 	.word	0x08006b05
 8006aec:	2300      	movs	r3, #0
 8006aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006af2:	e0d8      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006af4:	2302      	movs	r3, #2
 8006af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006afa:	e0d4      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006afc:	2304      	movs	r3, #4
 8006afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b02:	e0d0      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006b04:	2308      	movs	r3, #8
 8006b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b0a:	e0cc      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006b0c:	2310      	movs	r3, #16
 8006b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b12:	e0c8      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a5e      	ldr	r2, [pc, #376]	@ (8006c94 <UART_SetConfig+0x2d4>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d125      	bne.n	8006b6a <UART_SetConfig+0x1aa>
 8006b1e:	4b5b      	ldr	r3, [pc, #364]	@ (8006c8c <UART_SetConfig+0x2cc>)
 8006b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006b28:	2b30      	cmp	r3, #48	@ 0x30
 8006b2a:	d016      	beq.n	8006b5a <UART_SetConfig+0x19a>
 8006b2c:	2b30      	cmp	r3, #48	@ 0x30
 8006b2e:	d818      	bhi.n	8006b62 <UART_SetConfig+0x1a2>
 8006b30:	2b20      	cmp	r3, #32
 8006b32:	d00a      	beq.n	8006b4a <UART_SetConfig+0x18a>
 8006b34:	2b20      	cmp	r3, #32
 8006b36:	d814      	bhi.n	8006b62 <UART_SetConfig+0x1a2>
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <UART_SetConfig+0x182>
 8006b3c:	2b10      	cmp	r3, #16
 8006b3e:	d008      	beq.n	8006b52 <UART_SetConfig+0x192>
 8006b40:	e00f      	b.n	8006b62 <UART_SetConfig+0x1a2>
 8006b42:	2300      	movs	r3, #0
 8006b44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b48:	e0ad      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b50:	e0a9      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006b52:	2304      	movs	r3, #4
 8006b54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b58:	e0a5      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006b5a:	2308      	movs	r3, #8
 8006b5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b60:	e0a1      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006b62:	2310      	movs	r3, #16
 8006b64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b68:	e09d      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a4a      	ldr	r2, [pc, #296]	@ (8006c98 <UART_SetConfig+0x2d8>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d125      	bne.n	8006bc0 <UART_SetConfig+0x200>
 8006b74:	4b45      	ldr	r3, [pc, #276]	@ (8006c8c <UART_SetConfig+0x2cc>)
 8006b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b80:	d016      	beq.n	8006bb0 <UART_SetConfig+0x1f0>
 8006b82:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b84:	d818      	bhi.n	8006bb8 <UART_SetConfig+0x1f8>
 8006b86:	2b80      	cmp	r3, #128	@ 0x80
 8006b88:	d00a      	beq.n	8006ba0 <UART_SetConfig+0x1e0>
 8006b8a:	2b80      	cmp	r3, #128	@ 0x80
 8006b8c:	d814      	bhi.n	8006bb8 <UART_SetConfig+0x1f8>
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <UART_SetConfig+0x1d8>
 8006b92:	2b40      	cmp	r3, #64	@ 0x40
 8006b94:	d008      	beq.n	8006ba8 <UART_SetConfig+0x1e8>
 8006b96:	e00f      	b.n	8006bb8 <UART_SetConfig+0x1f8>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b9e:	e082      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ba6:	e07e      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006ba8:	2304      	movs	r3, #4
 8006baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bae:	e07a      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006bb0:	2308      	movs	r3, #8
 8006bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bb6:	e076      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006bb8:	2310      	movs	r3, #16
 8006bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bbe:	e072      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a35      	ldr	r2, [pc, #212]	@ (8006c9c <UART_SetConfig+0x2dc>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d12a      	bne.n	8006c20 <UART_SetConfig+0x260>
 8006bca:	4b30      	ldr	r3, [pc, #192]	@ (8006c8c <UART_SetConfig+0x2cc>)
 8006bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bd8:	d01a      	beq.n	8006c10 <UART_SetConfig+0x250>
 8006bda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bde:	d81b      	bhi.n	8006c18 <UART_SetConfig+0x258>
 8006be0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006be4:	d00c      	beq.n	8006c00 <UART_SetConfig+0x240>
 8006be6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bea:	d815      	bhi.n	8006c18 <UART_SetConfig+0x258>
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d003      	beq.n	8006bf8 <UART_SetConfig+0x238>
 8006bf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bf4:	d008      	beq.n	8006c08 <UART_SetConfig+0x248>
 8006bf6:	e00f      	b.n	8006c18 <UART_SetConfig+0x258>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bfe:	e052      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006c00:	2302      	movs	r3, #2
 8006c02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c06:	e04e      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006c08:	2304      	movs	r3, #4
 8006c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c0e:	e04a      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006c10:	2308      	movs	r3, #8
 8006c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c16:	e046      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006c18:	2310      	movs	r3, #16
 8006c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c1e:	e042      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a17      	ldr	r2, [pc, #92]	@ (8006c84 <UART_SetConfig+0x2c4>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d13a      	bne.n	8006ca0 <UART_SetConfig+0x2e0>
 8006c2a:	4b18      	ldr	r3, [pc, #96]	@ (8006c8c <UART_SetConfig+0x2cc>)
 8006c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c38:	d01a      	beq.n	8006c70 <UART_SetConfig+0x2b0>
 8006c3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c3e:	d81b      	bhi.n	8006c78 <UART_SetConfig+0x2b8>
 8006c40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c44:	d00c      	beq.n	8006c60 <UART_SetConfig+0x2a0>
 8006c46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c4a:	d815      	bhi.n	8006c78 <UART_SetConfig+0x2b8>
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <UART_SetConfig+0x298>
 8006c50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c54:	d008      	beq.n	8006c68 <UART_SetConfig+0x2a8>
 8006c56:	e00f      	b.n	8006c78 <UART_SetConfig+0x2b8>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c5e:	e022      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006c60:	2302      	movs	r3, #2
 8006c62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c66:	e01e      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006c68:	2304      	movs	r3, #4
 8006c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c6e:	e01a      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006c70:	2308      	movs	r3, #8
 8006c72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c76:	e016      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006c78:	2310      	movs	r3, #16
 8006c7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c7e:	e012      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006c80:	efff69f3 	.word	0xefff69f3
 8006c84:	40008000 	.word	0x40008000
 8006c88:	40013800 	.word	0x40013800
 8006c8c:	40021000 	.word	0x40021000
 8006c90:	40004400 	.word	0x40004400
 8006c94:	40004800 	.word	0x40004800
 8006c98:	40004c00 	.word	0x40004c00
 8006c9c:	40005000 	.word	0x40005000
 8006ca0:	2310      	movs	r3, #16
 8006ca2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a9f      	ldr	r2, [pc, #636]	@ (8006f28 <UART_SetConfig+0x568>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d17a      	bne.n	8006da6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cb0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006cb4:	2b08      	cmp	r3, #8
 8006cb6:	d824      	bhi.n	8006d02 <UART_SetConfig+0x342>
 8006cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc0 <UART_SetConfig+0x300>)
 8006cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbe:	bf00      	nop
 8006cc0:	08006ce5 	.word	0x08006ce5
 8006cc4:	08006d03 	.word	0x08006d03
 8006cc8:	08006ced 	.word	0x08006ced
 8006ccc:	08006d03 	.word	0x08006d03
 8006cd0:	08006cf3 	.word	0x08006cf3
 8006cd4:	08006d03 	.word	0x08006d03
 8006cd8:	08006d03 	.word	0x08006d03
 8006cdc:	08006d03 	.word	0x08006d03
 8006ce0:	08006cfb 	.word	0x08006cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ce4:	f7fd ff3a 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 8006ce8:	61f8      	str	r0, [r7, #28]
        break;
 8006cea:	e010      	b.n	8006d0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cec:	4b8f      	ldr	r3, [pc, #572]	@ (8006f2c <UART_SetConfig+0x56c>)
 8006cee:	61fb      	str	r3, [r7, #28]
        break;
 8006cf0:	e00d      	b.n	8006d0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cf2:	f7fd fe9b 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 8006cf6:	61f8      	str	r0, [r7, #28]
        break;
 8006cf8:	e009      	b.n	8006d0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cfe:	61fb      	str	r3, [r7, #28]
        break;
 8006d00:	e005      	b.n	8006d0e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006d0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 80fb 	beq.w	8006f0c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	4413      	add	r3, r2
 8006d20:	69fa      	ldr	r2, [r7, #28]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d305      	bcc.n	8006d32 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d2c:	69fa      	ldr	r2, [r7, #28]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d903      	bls.n	8006d3a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006d38:	e0e8      	b.n	8006f0c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	461c      	mov	r4, r3
 8006d40:	4615      	mov	r5, r2
 8006d42:	f04f 0200 	mov.w	r2, #0
 8006d46:	f04f 0300 	mov.w	r3, #0
 8006d4a:	022b      	lsls	r3, r5, #8
 8006d4c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006d50:	0222      	lsls	r2, r4, #8
 8006d52:	68f9      	ldr	r1, [r7, #12]
 8006d54:	6849      	ldr	r1, [r1, #4]
 8006d56:	0849      	lsrs	r1, r1, #1
 8006d58:	2000      	movs	r0, #0
 8006d5a:	4688      	mov	r8, r1
 8006d5c:	4681      	mov	r9, r0
 8006d5e:	eb12 0a08 	adds.w	sl, r2, r8
 8006d62:	eb43 0b09 	adc.w	fp, r3, r9
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	603b      	str	r3, [r7, #0]
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d74:	4650      	mov	r0, sl
 8006d76:	4659      	mov	r1, fp
 8006d78:	f7f9 fa92 	bl	80002a0 <__aeabi_uldivmod>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4613      	mov	r3, r2
 8006d82:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d8a:	d308      	bcc.n	8006d9e <UART_SetConfig+0x3de>
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d92:	d204      	bcs.n	8006d9e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	69ba      	ldr	r2, [r7, #24]
 8006d9a:	60da      	str	r2, [r3, #12]
 8006d9c:	e0b6      	b.n	8006f0c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006da4:	e0b2      	b.n	8006f0c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dae:	d15e      	bne.n	8006e6e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006db0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006db4:	2b08      	cmp	r3, #8
 8006db6:	d828      	bhi.n	8006e0a <UART_SetConfig+0x44a>
 8006db8:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc0 <UART_SetConfig+0x400>)
 8006dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbe:	bf00      	nop
 8006dc0:	08006de5 	.word	0x08006de5
 8006dc4:	08006ded 	.word	0x08006ded
 8006dc8:	08006df5 	.word	0x08006df5
 8006dcc:	08006e0b 	.word	0x08006e0b
 8006dd0:	08006dfb 	.word	0x08006dfb
 8006dd4:	08006e0b 	.word	0x08006e0b
 8006dd8:	08006e0b 	.word	0x08006e0b
 8006ddc:	08006e0b 	.word	0x08006e0b
 8006de0:	08006e03 	.word	0x08006e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006de4:	f7fd feba 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 8006de8:	61f8      	str	r0, [r7, #28]
        break;
 8006dea:	e014      	b.n	8006e16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dec:	f7fd fecc 	bl	8004b88 <HAL_RCC_GetPCLK2Freq>
 8006df0:	61f8      	str	r0, [r7, #28]
        break;
 8006df2:	e010      	b.n	8006e16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006df4:	4b4d      	ldr	r3, [pc, #308]	@ (8006f2c <UART_SetConfig+0x56c>)
 8006df6:	61fb      	str	r3, [r7, #28]
        break;
 8006df8:	e00d      	b.n	8006e16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dfa:	f7fd fe17 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 8006dfe:	61f8      	str	r0, [r7, #28]
        break;
 8006e00:	e009      	b.n	8006e16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e06:	61fb      	str	r3, [r7, #28]
        break;
 8006e08:	e005      	b.n	8006e16 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006e14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d077      	beq.n	8006f0c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	005a      	lsls	r2, r3, #1
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	085b      	lsrs	r3, r3, #1
 8006e26:	441a      	add	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e30:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	2b0f      	cmp	r3, #15
 8006e36:	d916      	bls.n	8006e66 <UART_SetConfig+0x4a6>
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e3e:	d212      	bcs.n	8006e66 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	f023 030f 	bic.w	r3, r3, #15
 8006e48:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	085b      	lsrs	r3, r3, #1
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	f003 0307 	and.w	r3, r3, #7
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	8afb      	ldrh	r3, [r7, #22]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	8afa      	ldrh	r2, [r7, #22]
 8006e62:	60da      	str	r2, [r3, #12]
 8006e64:	e052      	b.n	8006f0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006e6c:	e04e      	b.n	8006f0c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e6e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006e72:	2b08      	cmp	r3, #8
 8006e74:	d827      	bhi.n	8006ec6 <UART_SetConfig+0x506>
 8006e76:	a201      	add	r2, pc, #4	@ (adr r2, 8006e7c <UART_SetConfig+0x4bc>)
 8006e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7c:	08006ea1 	.word	0x08006ea1
 8006e80:	08006ea9 	.word	0x08006ea9
 8006e84:	08006eb1 	.word	0x08006eb1
 8006e88:	08006ec7 	.word	0x08006ec7
 8006e8c:	08006eb7 	.word	0x08006eb7
 8006e90:	08006ec7 	.word	0x08006ec7
 8006e94:	08006ec7 	.word	0x08006ec7
 8006e98:	08006ec7 	.word	0x08006ec7
 8006e9c:	08006ebf 	.word	0x08006ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ea0:	f7fd fe5c 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 8006ea4:	61f8      	str	r0, [r7, #28]
        break;
 8006ea6:	e014      	b.n	8006ed2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ea8:	f7fd fe6e 	bl	8004b88 <HAL_RCC_GetPCLK2Freq>
 8006eac:	61f8      	str	r0, [r7, #28]
        break;
 8006eae:	e010      	b.n	8006ed2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8006f2c <UART_SetConfig+0x56c>)
 8006eb2:	61fb      	str	r3, [r7, #28]
        break;
 8006eb4:	e00d      	b.n	8006ed2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eb6:	f7fd fdb9 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 8006eba:	61f8      	str	r0, [r7, #28]
        break;
 8006ebc:	e009      	b.n	8006ed2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ec2:	61fb      	str	r3, [r7, #28]
        break;
 8006ec4:	e005      	b.n	8006ed2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ed0:	bf00      	nop
    }

    if (pclk != 0U)
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d019      	beq.n	8006f0c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	085a      	lsrs	r2, r3, #1
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	441a      	add	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	2b0f      	cmp	r3, #15
 8006ef0:	d909      	bls.n	8006f06 <UART_SetConfig+0x546>
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ef8:	d205      	bcs.n	8006f06 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	60da      	str	r2, [r3, #12]
 8006f04:	e002      	b.n	8006f0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006f18:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3728      	adds	r7, #40	@ 0x28
 8006f20:	46bd      	mov	sp, r7
 8006f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f26:	bf00      	nop
 8006f28:	40008000 	.word	0x40008000
 8006f2c:	00f42400 	.word	0x00f42400

08006f30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f3c:	f003 0308 	and.w	r3, r3, #8
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00a      	beq.n	8006f5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f80:	f003 0302 	and.w	r3, r3, #2
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00a      	beq.n	8006f9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa2:	f003 0304 	and.w	r3, r3, #4
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00a      	beq.n	8006fc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc4:	f003 0310 	and.w	r3, r3, #16
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00a      	beq.n	8006fe2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe6:	f003 0320 	and.w	r3, r3, #32
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00a      	beq.n	8007004 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	430a      	orrs	r2, r1
 8007002:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800700c:	2b00      	cmp	r3, #0
 800700e:	d01a      	beq.n	8007046 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800702a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800702e:	d10a      	bne.n	8007046 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	430a      	orrs	r2, r1
 8007044:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800704a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00a      	beq.n	8007068 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	605a      	str	r2, [r3, #4]
  }
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b098      	sub	sp, #96	@ 0x60
 8007078:	af02      	add	r7, sp, #8
 800707a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007084:	f7fa fef0 	bl	8001e68 <HAL_GetTick>
 8007088:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0308 	and.w	r3, r3, #8
 8007094:	2b08      	cmp	r3, #8
 8007096:	d12e      	bne.n	80070f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007098:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070a0:	2200      	movs	r2, #0
 80070a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f88c 	bl	80071c4 <UART_WaitOnFlagUntilTimeout>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d021      	beq.n	80070f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ba:	e853 3f00 	ldrex	r3, [r3]
 80070be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80070c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	461a      	mov	r2, r3
 80070ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80070d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070d8:	e841 2300 	strex	r3, r2, [r1]
 80070dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e6      	bne.n	80070b2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2220      	movs	r2, #32
 80070e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e062      	b.n	80071bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b04      	cmp	r3, #4
 8007102:	d149      	bne.n	8007198 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007104:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800710c:	2200      	movs	r2, #0
 800710e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f856 	bl	80071c4 <UART_WaitOnFlagUntilTimeout>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d03c      	beq.n	8007198 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007126:	e853 3f00 	ldrex	r3, [r3]
 800712a:	623b      	str	r3, [r7, #32]
   return(result);
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007132:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	461a      	mov	r2, r3
 800713a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800713c:	633b      	str	r3, [r7, #48]	@ 0x30
 800713e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007140:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007142:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007144:	e841 2300 	strex	r3, r2, [r1]
 8007148:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800714a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1e6      	bne.n	800711e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3308      	adds	r3, #8
 8007156:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	e853 3f00 	ldrex	r3, [r3]
 800715e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0301 	bic.w	r3, r3, #1
 8007166:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3308      	adds	r3, #8
 800716e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007170:	61fa      	str	r2, [r7, #28]
 8007172:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007174:	69b9      	ldr	r1, [r7, #24]
 8007176:	69fa      	ldr	r2, [r7, #28]
 8007178:	e841 2300 	strex	r3, r2, [r1]
 800717c:	617b      	str	r3, [r7, #20]
   return(result);
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e5      	bne.n	8007150 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2220      	movs	r2, #32
 8007188:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	e011      	b.n	80071bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2220      	movs	r2, #32
 800719c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2220      	movs	r2, #32
 80071a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3758      	adds	r7, #88	@ 0x58
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	603b      	str	r3, [r7, #0]
 80071d0:	4613      	mov	r3, r2
 80071d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071d4:	e049      	b.n	800726a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071dc:	d045      	beq.n	800726a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071de:	f7fa fe43 	bl	8001e68 <HAL_GetTick>
 80071e2:	4602      	mov	r2, r0
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d302      	bcc.n	80071f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e048      	b.n	800728a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0304 	and.w	r3, r3, #4
 8007202:	2b00      	cmp	r3, #0
 8007204:	d031      	beq.n	800726a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	f003 0308 	and.w	r3, r3, #8
 8007210:	2b08      	cmp	r3, #8
 8007212:	d110      	bne.n	8007236 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2208      	movs	r2, #8
 800721a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 f8ff 	bl	8007420 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2208      	movs	r2, #8
 8007226:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e029      	b.n	800728a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	69db      	ldr	r3, [r3, #28]
 800723c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007244:	d111      	bne.n	800726a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800724e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 f8e5 	bl	8007420 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2220      	movs	r2, #32
 800725a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e00f      	b.n	800728a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	69da      	ldr	r2, [r3, #28]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	4013      	ands	r3, r2
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	429a      	cmp	r2, r3
 8007278:	bf0c      	ite	eq
 800727a:	2301      	moveq	r3, #1
 800727c:	2300      	movne	r3, #0
 800727e:	b2db      	uxtb	r3, r3
 8007280:	461a      	mov	r2, r3
 8007282:	79fb      	ldrb	r3, [r7, #7]
 8007284:	429a      	cmp	r2, r3
 8007286:	d0a6      	beq.n	80071d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
	...

08007294 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007294:	b480      	push	{r7}
 8007296:	b097      	sub	sp, #92	@ 0x5c
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	4613      	mov	r3, r2
 80072a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	88fa      	ldrh	r2, [r7, #6]
 80072ac:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	88fa      	ldrh	r2, [r7, #6]
 80072b4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072c6:	d10e      	bne.n	80072e6 <UART_Start_Receive_IT+0x52>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d105      	bne.n	80072dc <UART_Start_Receive_IT+0x48>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80072d6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80072da:	e02d      	b.n	8007338 <UART_Start_Receive_IT+0xa4>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	22ff      	movs	r2, #255	@ 0xff
 80072e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80072e4:	e028      	b.n	8007338 <UART_Start_Receive_IT+0xa4>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10d      	bne.n	800730a <UART_Start_Receive_IT+0x76>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d104      	bne.n	8007300 <UART_Start_Receive_IT+0x6c>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	22ff      	movs	r2, #255	@ 0xff
 80072fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80072fe:	e01b      	b.n	8007338 <UART_Start_Receive_IT+0xa4>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	227f      	movs	r2, #127	@ 0x7f
 8007304:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007308:	e016      	b.n	8007338 <UART_Start_Receive_IT+0xa4>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007312:	d10d      	bne.n	8007330 <UART_Start_Receive_IT+0x9c>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d104      	bne.n	8007326 <UART_Start_Receive_IT+0x92>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	227f      	movs	r2, #127	@ 0x7f
 8007320:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007324:	e008      	b.n	8007338 <UART_Start_Receive_IT+0xa4>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	223f      	movs	r2, #63	@ 0x3f
 800732a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800732e:	e003      	b.n	8007338 <UART_Start_Receive_IT+0xa4>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2222      	movs	r2, #34	@ 0x22
 8007344:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3308      	adds	r3, #8
 800734e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007352:	e853 3f00 	ldrex	r3, [r3]
 8007356:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735a:	f043 0301 	orr.w	r3, r3, #1
 800735e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3308      	adds	r3, #8
 8007366:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007368:	64ba      	str	r2, [r7, #72]	@ 0x48
 800736a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800736e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007370:	e841 2300 	strex	r3, r2, [r1]
 8007374:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1e5      	bne.n	8007348 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007384:	d107      	bne.n	8007396 <UART_Start_Receive_IT+0x102>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d103      	bne.n	8007396 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	4a21      	ldr	r2, [pc, #132]	@ (8007418 <UART_Start_Receive_IT+0x184>)
 8007392:	669a      	str	r2, [r3, #104]	@ 0x68
 8007394:	e002      	b.n	800739c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	4a20      	ldr	r2, [pc, #128]	@ (800741c <UART_Start_Receive_IT+0x188>)
 800739a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d019      	beq.n	80073d8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ac:	e853 3f00 	ldrex	r3, [r3]
 80073b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80073b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	461a      	mov	r2, r3
 80073c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073ca:	e841 2300 	strex	r3, r2, [r1]
 80073ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80073d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e6      	bne.n	80073a4 <UART_Start_Receive_IT+0x110>
 80073d6:	e018      	b.n	800740a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	e853 3f00 	ldrex	r3, [r3]
 80073e4:	613b      	str	r3, [r7, #16]
   return(result);
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	f043 0320 	orr.w	r3, r3, #32
 80073ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	461a      	mov	r2, r3
 80073f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073f6:	623b      	str	r3, [r7, #32]
 80073f8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fa:	69f9      	ldr	r1, [r7, #28]
 80073fc:	6a3a      	ldr	r2, [r7, #32]
 80073fe:	e841 2300 	strex	r3, r2, [r1]
 8007402:	61bb      	str	r3, [r7, #24]
   return(result);
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1e6      	bne.n	80073d8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	375c      	adds	r7, #92	@ 0x5c
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	08007725 	.word	0x08007725
 800741c:	08007569 	.word	0x08007569

08007420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007420:	b480      	push	{r7}
 8007422:	b095      	sub	sp, #84	@ 0x54
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007430:	e853 3f00 	ldrex	r3, [r3]
 8007434:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007438:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800743c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007446:	643b      	str	r3, [r7, #64]	@ 0x40
 8007448:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800744c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800744e:	e841 2300 	strex	r3, r2, [r1]
 8007452:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1e6      	bne.n	8007428 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3308      	adds	r3, #8
 8007460:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	e853 3f00 	ldrex	r3, [r3]
 8007468:	61fb      	str	r3, [r7, #28]
   return(result);
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	f023 0301 	bic.w	r3, r3, #1
 8007470:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3308      	adds	r3, #8
 8007478:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800747a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800747c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007480:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007482:	e841 2300 	strex	r3, r2, [r1]
 8007486:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1e5      	bne.n	800745a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007492:	2b01      	cmp	r3, #1
 8007494:	d118      	bne.n	80074c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	e853 3f00 	ldrex	r3, [r3]
 80074a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f023 0310 	bic.w	r3, r3, #16
 80074aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	461a      	mov	r2, r3
 80074b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074b4:	61bb      	str	r3, [r7, #24]
 80074b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b8:	6979      	ldr	r1, [r7, #20]
 80074ba:	69ba      	ldr	r2, [r7, #24]
 80074bc:	e841 2300 	strex	r3, r2, [r1]
 80074c0:	613b      	str	r3, [r7, #16]
   return(result);
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1e6      	bne.n	8007496 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2220      	movs	r2, #32
 80074cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80074dc:	bf00      	nop
 80074de:	3754      	adds	r7, #84	@ 0x54
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f7ff fa44 	bl	8006994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800750c:	bf00      	nop
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b088      	sub	sp, #32
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	e853 3f00 	ldrex	r3, [r3]
 8007528:	60bb      	str	r3, [r7, #8]
   return(result);
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007530:	61fb      	str	r3, [r7, #28]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	461a      	mov	r2, r3
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	61bb      	str	r3, [r7, #24]
 800753c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753e:	6979      	ldr	r1, [r7, #20]
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	e841 2300 	strex	r3, r2, [r1]
 8007546:	613b      	str	r3, [r7, #16]
   return(result);
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1e6      	bne.n	800751c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2220      	movs	r2, #32
 8007552:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7ff fa10 	bl	8006980 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007560:	bf00      	nop
 8007562:	3720      	adds	r7, #32
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b09c      	sub	sp, #112	@ 0x70
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007576:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007580:	2b22      	cmp	r3, #34	@ 0x22
 8007582:	f040 80be 	bne.w	8007702 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800758c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007590:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007594:	b2d9      	uxtb	r1, r3
 8007596:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800759a:	b2da      	uxtb	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075a0:	400a      	ands	r2, r1
 80075a2:	b2d2      	uxtb	r2, r2
 80075a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	3b01      	subs	r3, #1
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f040 80a3 	bne.w	8007716 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075d8:	e853 3f00 	ldrex	r3, [r3]
 80075dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80075de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80075f6:	e841 2300 	strex	r3, r2, [r1]
 80075fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80075fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1e6      	bne.n	80075d0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	3308      	adds	r3, #8
 8007608:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800760c:	e853 3f00 	ldrex	r3, [r3]
 8007610:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007614:	f023 0301 	bic.w	r3, r3, #1
 8007618:	667b      	str	r3, [r7, #100]	@ 0x64
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3308      	adds	r3, #8
 8007620:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007622:	647a      	str	r2, [r7, #68]	@ 0x44
 8007624:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007626:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007628:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800762a:	e841 2300 	strex	r3, r2, [r1]
 800762e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1e5      	bne.n	8007602 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2220      	movs	r2, #32
 800763a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a34      	ldr	r2, [pc, #208]	@ (8007720 <UART_RxISR_8BIT+0x1b8>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d01f      	beq.n	8007694 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d018      	beq.n	8007694 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766a:	e853 3f00 	ldrex	r3, [r3]
 800766e:	623b      	str	r3, [r7, #32]
   return(result);
 8007670:	6a3b      	ldr	r3, [r7, #32]
 8007672:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007676:	663b      	str	r3, [r7, #96]	@ 0x60
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	461a      	mov	r2, r3
 800767e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007680:	633b      	str	r3, [r7, #48]	@ 0x30
 8007682:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007684:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007688:	e841 2300 	strex	r3, r2, [r1]
 800768c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800768e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1e6      	bne.n	8007662 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007698:	2b01      	cmp	r3, #1
 800769a:	d12e      	bne.n	80076fa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	e853 3f00 	ldrex	r3, [r3]
 80076ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f023 0310 	bic.w	r3, r3, #16
 80076b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	461a      	mov	r2, r3
 80076be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076c0:	61fb      	str	r3, [r7, #28]
 80076c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c4:	69b9      	ldr	r1, [r7, #24]
 80076c6:	69fa      	ldr	r2, [r7, #28]
 80076c8:	e841 2300 	strex	r3, r2, [r1]
 80076cc:	617b      	str	r3, [r7, #20]
   return(result);
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1e6      	bne.n	80076a2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	f003 0310 	and.w	r3, r3, #16
 80076de:	2b10      	cmp	r3, #16
 80076e0:	d103      	bne.n	80076ea <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2210      	movs	r2, #16
 80076e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7ff f958 	bl	80069a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076f8:	e00d      	b.n	8007716 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f7f8 ff82 	bl	8000604 <HAL_UART_RxCpltCallback>
}
 8007700:	e009      	b.n	8007716 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	8b1b      	ldrh	r3, [r3, #24]
 8007708:	b29a      	uxth	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f042 0208 	orr.w	r2, r2, #8
 8007712:	b292      	uxth	r2, r2
 8007714:	831a      	strh	r2, [r3, #24]
}
 8007716:	bf00      	nop
 8007718:	3770      	adds	r7, #112	@ 0x70
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	40008000 	.word	0x40008000

08007724 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b09c      	sub	sp, #112	@ 0x70
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007732:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800773c:	2b22      	cmp	r3, #34	@ 0x22
 800773e:	f040 80be 	bne.w	80078be <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007748:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007750:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007752:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007756:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800775a:	4013      	ands	r3, r2
 800775c:	b29a      	uxth	r2, r3
 800775e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007760:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007766:	1c9a      	adds	r2, r3, #2
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007772:	b29b      	uxth	r3, r3
 8007774:	3b01      	subs	r3, #1
 8007776:	b29a      	uxth	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007784:	b29b      	uxth	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	f040 80a3 	bne.w	80078d2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007794:	e853 3f00 	ldrex	r3, [r3]
 8007798:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800779a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800779c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80077ac:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80077b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80077b2:	e841 2300 	strex	r3, r2, [r1]
 80077b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80077b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1e6      	bne.n	800778c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3308      	adds	r3, #8
 80077c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077c8:	e853 3f00 	ldrex	r3, [r3]
 80077cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d0:	f023 0301 	bic.w	r3, r3, #1
 80077d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3308      	adds	r3, #8
 80077dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80077de:	643a      	str	r2, [r7, #64]	@ 0x40
 80077e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077e6:	e841 2300 	strex	r3, r2, [r1]
 80077ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1e5      	bne.n	80077be <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2220      	movs	r2, #32
 80077f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a34      	ldr	r2, [pc, #208]	@ (80078dc <UART_RxISR_16BIT+0x1b8>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d01f      	beq.n	8007850 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d018      	beq.n	8007850 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007824:	6a3b      	ldr	r3, [r7, #32]
 8007826:	e853 3f00 	ldrex	r3, [r3]
 800782a:	61fb      	str	r3, [r7, #28]
   return(result);
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007832:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800783c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800783e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007840:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007842:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007844:	e841 2300 	strex	r3, r2, [r1]
 8007848:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800784a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1e6      	bne.n	800781e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007854:	2b01      	cmp	r3, #1
 8007856:	d12e      	bne.n	80078b6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	e853 3f00 	ldrex	r3, [r3]
 800786a:	60bb      	str	r3, [r7, #8]
   return(result);
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	f023 0310 	bic.w	r3, r3, #16
 8007872:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	461a      	mov	r2, r3
 800787a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800787c:	61bb      	str	r3, [r7, #24]
 800787e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007880:	6979      	ldr	r1, [r7, #20]
 8007882:	69ba      	ldr	r2, [r7, #24]
 8007884:	e841 2300 	strex	r3, r2, [r1]
 8007888:	613b      	str	r3, [r7, #16]
   return(result);
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1e6      	bne.n	800785e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	f003 0310 	and.w	r3, r3, #16
 800789a:	2b10      	cmp	r3, #16
 800789c:	d103      	bne.n	80078a6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2210      	movs	r2, #16
 80078a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80078ac:	4619      	mov	r1, r3
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7ff f87a 	bl	80069a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078b4:	e00d      	b.n	80078d2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7f8 fea4 	bl	8000604 <HAL_UART_RxCpltCallback>
}
 80078bc:	e009      	b.n	80078d2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	8b1b      	ldrh	r3, [r3, #24]
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0208 	orr.w	r2, r2, #8
 80078ce:	b292      	uxth	r2, r2
 80078d0:	831a      	strh	r2, [r3, #24]
}
 80078d2:	bf00      	nop
 80078d4:	3770      	adds	r7, #112	@ 0x70
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	40008000 	.word	0x40008000

080078e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078f4:	b084      	sub	sp, #16
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b084      	sub	sp, #16
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	f107 001c 	add.w	r0, r7, #28
 8007902:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f9c0 	bl	8007c98 <USB_CoreReset>
 8007918:	4603      	mov	r3, r0
 800791a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800791c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800791e:	2b00      	cmp	r3, #0
 8007920:	d106      	bne.n	8007930 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007926:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	639a      	str	r2, [r3, #56]	@ 0x38
 800792e:	e005      	b.n	800793c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007934:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 800793c:	7bfb      	ldrb	r3, [r7, #15]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007948:	b004      	add	sp, #16
 800794a:	4770      	bx	lr

0800794c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f043 0201 	orr.w	r2, r3, #1
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	370c      	adds	r7, #12
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800796e:	b480      	push	{r7}
 8007970:	b083      	sub	sp, #12
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f023 0201 	bic.w	r2, r3, #1
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	460b      	mov	r3, r1
 800799a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800799c:	2300      	movs	r3, #0
 800799e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80079ac:	78fb      	ldrb	r3, [r7, #3]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d115      	bne.n	80079de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80079be:	2001      	movs	r0, #1
 80079c0:	f7fa fa5e 	bl	8001e80 <HAL_Delay>
      ms++;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	3301      	adds	r3, #1
 80079c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f956 	bl	8007c7c <USB_GetMode>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d01e      	beq.n	8007a14 <USB_SetCurrentMode+0x84>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2b31      	cmp	r3, #49	@ 0x31
 80079da:	d9f0      	bls.n	80079be <USB_SetCurrentMode+0x2e>
 80079dc:	e01a      	b.n	8007a14 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80079de:	78fb      	ldrb	r3, [r7, #3]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d115      	bne.n	8007a10 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80079f0:	2001      	movs	r0, #1
 80079f2:	f7fa fa45 	bl	8001e80 <HAL_Delay>
      ms++;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	3301      	adds	r3, #1
 80079fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f93d 	bl	8007c7c <USB_GetMode>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d005      	beq.n	8007a14 <USB_SetCurrentMode+0x84>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2b31      	cmp	r3, #49	@ 0x31
 8007a0c:	d9f0      	bls.n	80079f0 <USB_SetCurrentMode+0x60>
 8007a0e:	e001      	b.n	8007a14 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e005      	b.n	8007a20 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2b32      	cmp	r3, #50	@ 0x32
 8007a18:	d101      	bne.n	8007a1e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e000      	b.n	8007a20 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4a13      	ldr	r2, [pc, #76]	@ (8007a8c <USB_FlushTxFifo+0x64>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d901      	bls.n	8007a48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e01b      	b.n	8007a80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	daf2      	bge.n	8007a36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a50:	2300      	movs	r3, #0
 8007a52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	019b      	lsls	r3, r3, #6
 8007a58:	f043 0220 	orr.w	r2, r3, #32
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	3301      	adds	r3, #1
 8007a64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	4a08      	ldr	r2, [pc, #32]	@ (8007a8c <USB_FlushTxFifo+0x64>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d901      	bls.n	8007a72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e006      	b.n	8007a80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	f003 0320 	and.w	r3, r3, #32
 8007a7a:	2b20      	cmp	r3, #32
 8007a7c:	d0f0      	beq.n	8007a60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	00030d40 	.word	0x00030d40

08007a90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	4a11      	ldr	r2, [pc, #68]	@ (8007aec <USB_FlushRxFifo+0x5c>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d901      	bls.n	8007aae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e018      	b.n	8007ae0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	daf2      	bge.n	8007a9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2210      	movs	r2, #16
 8007abe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	4a08      	ldr	r2, [pc, #32]	@ (8007aec <USB_FlushRxFifo+0x5c>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d901      	bls.n	8007ad2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e006      	b.n	8007ae0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	f003 0310 	and.w	r3, r3, #16
 8007ada:	2b10      	cmp	r3, #16
 8007adc:	d0f0      	beq.n	8007ac0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3714      	adds	r7, #20
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	00030d40 	.word	0x00030d40

08007af0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b089      	sub	sp, #36	@ 0x24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	4611      	mov	r1, r2
 8007afc:	461a      	mov	r2, r3
 8007afe:	460b      	mov	r3, r1
 8007b00:	71fb      	strb	r3, [r7, #7]
 8007b02:	4613      	mov	r3, r2
 8007b04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8007b0e:	88bb      	ldrh	r3, [r7, #4]
 8007b10:	3303      	adds	r3, #3
 8007b12:	089b      	lsrs	r3, r3, #2
 8007b14:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8007b16:	2300      	movs	r3, #0
 8007b18:	61bb      	str	r3, [r7, #24]
 8007b1a:	e018      	b.n	8007b4e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b1c:	79fb      	ldrb	r3, [r7, #7]
 8007b1e:	031a      	lsls	r2, r3, #12
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b28:	461a      	mov	r2, r3
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	3301      	adds	r3, #1
 8007b34:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	3301      	adds	r3, #1
 8007b46:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	61bb      	str	r3, [r7, #24]
 8007b4e:	69ba      	ldr	r2, [r7, #24]
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d3e2      	bcc.n	8007b1c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3724      	adds	r7, #36	@ 0x24
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b08b      	sub	sp, #44	@ 0x2c
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b7a:	88fb      	ldrh	r3, [r7, #6]
 8007b7c:	089b      	lsrs	r3, r3, #2
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007b82:	88fb      	ldrh	r3, [r7, #6]
 8007b84:	f003 0303 	and.w	r3, r3, #3
 8007b88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	623b      	str	r3, [r7, #32]
 8007b8e:	e014      	b.n	8007bba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007baa:	3301      	adds	r3, #1
 8007bac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	623b      	str	r3, [r7, #32]
 8007bba:	6a3a      	ldr	r2, [r7, #32]
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d3e6      	bcc.n	8007b90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007bc2:	8bfb      	ldrh	r3, [r7, #30]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d01e      	beq.n	8007c06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	f107 0310 	add.w	r3, r7, #16
 8007bd8:	6812      	ldr	r2, [r2, #0]
 8007bda:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	6a3b      	ldr	r3, [r7, #32]
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	00db      	lsls	r3, r3, #3
 8007be4:	fa22 f303 	lsr.w	r3, r2, r3
 8007be8:	b2da      	uxtb	r2, r3
 8007bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bec:	701a      	strb	r2, [r3, #0]
      i++;
 8007bee:	6a3b      	ldr	r3, [r7, #32]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	623b      	str	r3, [r7, #32]
      pDest++;
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007bfa:	8bfb      	ldrh	r3, [r7, #30]
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007c00:	8bfb      	ldrh	r3, [r7, #30]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1ea      	bne.n	8007bdc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	372c      	adds	r7, #44	@ 0x2c
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	4013      	ands	r3, r2
 8007c2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3714      	adds	r7, #20
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b085      	sub	sp, #20
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	460b      	mov	r3, r1
 8007c44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007c4a:	78fb      	ldrb	r3, [r7, #3]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007c5a:	78fb      	ldrb	r3, [r7, #3]
 8007c5c:	015a      	lsls	r2, r3, #5
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	4413      	add	r3, r2
 8007c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	68ba      	ldr	r2, [r7, #8]
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c6e:	68bb      	ldr	r3, [r7, #8]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	f003 0301 	and.w	r3, r3, #1
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	4a13      	ldr	r2, [pc, #76]	@ (8007cfc <USB_CoreReset+0x64>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d901      	bls.n	8007cb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e01b      	b.n	8007cee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	daf2      	bge.n	8007ca4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	f043 0201 	orr.w	r2, r3, #1
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	4a09      	ldr	r2, [pc, #36]	@ (8007cfc <USB_CoreReset+0x64>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d901      	bls.n	8007ce0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e006      	b.n	8007cee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	f003 0301 	and.w	r3, r3, #1
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d0f0      	beq.n	8007cce <USB_CoreReset+0x36>

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	00030d40 	.word	0x00030d40

08007d00 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d00:	b084      	sub	sp, #16
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b086      	sub	sp, #24
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007d0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007d20:	461a      	mov	r2, r3
 8007d22:	2300      	movs	r3, #0
 8007d24:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d2a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d36:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007d4c:	f023 0304 	bic.w	r3, r3, #4
 8007d50:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d52:	2110      	movs	r1, #16
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7ff fe67 	bl	8007a28 <USB_FlushTxFifo>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7ff fe93 	bl	8007a90 <USB_FlushRxFifo>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007d74:	2300      	movs	r3, #0
 8007d76:	613b      	str	r3, [r7, #16]
 8007d78:	e015      	b.n	8007da6 <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	015a      	lsls	r2, r3, #5
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	4413      	add	r3, r2
 8007d82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d86:	461a      	mov	r2, r3
 8007d88:	f04f 33ff 	mov.w	r3, #4294967295
 8007d8c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	015a      	lsls	r2, r3, #5
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	4413      	add	r3, r2
 8007d96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	3301      	adds	r3, #1
 8007da4:	613b      	str	r3, [r7, #16]
 8007da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d3e5      	bcc.n	8007d7a <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dba:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2280      	movs	r2, #128	@ 0x80
 8007dc0:	625a      	str	r2, [r3, #36]	@ 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8007df8 <USB_HostInit+0xf8>)
 8007dc6:	629a      	str	r2, [r3, #40]	@ 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a0c      	ldr	r2, [pc, #48]	@ (8007dfc <USB_HostInit+0xfc>)
 8007dcc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	699b      	ldr	r3, [r3, #24]
 8007dd4:	f043 0210 	orr.w	r2, r3, #16
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	699a      	ldr	r2, [r3, #24]
 8007de0:	4b07      	ldr	r3, [pc, #28]	@ (8007e00 <USB_HostInit+0x100>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007df4:	b004      	add	sp, #16
 8007df6:	4770      	bx	lr
 8007df8:	00600080 	.word	0x00600080
 8007dfc:	004000e0 	.word	0x004000e0
 8007e00:	a3200008 	.word	0xa3200008

08007e04 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007e22:	f023 0303 	bic.w	r3, r3, #3
 8007e26:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	78fb      	ldrb	r3, [r7, #3]
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	68f9      	ldr	r1, [r7, #12]
 8007e38:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007e40:	78fb      	ldrb	r3, [r7, #3]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d107      	bne.n	8007e56 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007e52:	6053      	str	r3, [r2, #4]
 8007e54:	e00c      	b.n	8007e70 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007e56:	78fb      	ldrb	r3, [r7, #3]
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d107      	bne.n	8007e6c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e62:	461a      	mov	r2, r3
 8007e64:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007e68:	6053      	str	r3, [r2, #4]
 8007e6a:	e001      	b.n	8007e70 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e000      	b.n	8007e72 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b084      	sub	sp, #16
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007e9e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007ea8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007eac:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007eae:	2064      	movs	r0, #100	@ 0x64
 8007eb0:	f7f9 ffe6 	bl	8001e80 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007ebc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ec0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007ec2:	200a      	movs	r0, #10
 8007ec4:	f7f9 ffdc 	bl	8001e80 <HAL_Delay>

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b085      	sub	sp, #20
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
 8007eda:	460b      	mov	r3, r1
 8007edc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007ef6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d109      	bne.n	8007f16 <USB_DriveVbus+0x44>
 8007f02:	78fb      	ldrb	r3, [r7, #3]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d106      	bne.n	8007f16 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007f10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007f14:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f20:	d109      	bne.n	8007f36 <USB_DriveVbus+0x64>
 8007f22:	78fb      	ldrb	r3, [r7, #3]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d106      	bne.n	8007f36 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007f30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f34:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007f50:	2300      	movs	r3, #0
 8007f52:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	0c5b      	lsrs	r3, r3, #17
 8007f62:	f003 0303 	and.w	r3, r3, #3
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3714      	adds	r7, #20
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b085      	sub	sp, #20
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	b29b      	uxth	r3, r3
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b088      	sub	sp, #32
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	4608      	mov	r0, r1
 8007f9e:	4611      	mov	r1, r2
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	70fb      	strb	r3, [r7, #3]
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	70bb      	strb	r3, [r7, #2]
 8007faa:	4613      	mov	r3, r2
 8007fac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007fb6:	78fb      	ldrb	r3, [r7, #3]
 8007fb8:	015a      	lsls	r2, r3, #5
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fc8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007fca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007fce:	2b03      	cmp	r3, #3
 8007fd0:	d867      	bhi.n	80080a2 <USB_HC_Init+0x10e>
 8007fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fd8 <USB_HC_Init+0x44>)
 8007fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd8:	08007fe9 	.word	0x08007fe9
 8007fdc:	08008065 	.word	0x08008065
 8007fe0:	08007fe9 	.word	0x08007fe9
 8007fe4:	08008027 	.word	0x08008027
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007fe8:	78fb      	ldrb	r3, [r7, #3]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007ffa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007ffc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008000:	2b00      	cmp	r3, #0
 8008002:	da51      	bge.n	80080a8 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008004:	78fb      	ldrb	r3, [r7, #3]
 8008006:	015a      	lsls	r2, r3, #5
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	4413      	add	r3, r2
 800800c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	78fa      	ldrb	r2, [r7, #3]
 8008014:	0151      	lsls	r1, r2, #5
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	440a      	add	r2, r1
 800801a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800801e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008022:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008024:	e040      	b.n	80080a8 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008026:	78fb      	ldrb	r3, [r7, #3]
 8008028:	015a      	lsls	r2, r3, #5
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	4413      	add	r3, r2
 800802e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008032:	461a      	mov	r2, r3
 8008034:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008038:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800803a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800803e:	2b00      	cmp	r3, #0
 8008040:	da34      	bge.n	80080ac <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008042:	78fb      	ldrb	r3, [r7, #3]
 8008044:	015a      	lsls	r2, r3, #5
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	4413      	add	r3, r2
 800804a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	78fa      	ldrb	r2, [r7, #3]
 8008052:	0151      	lsls	r1, r2, #5
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	440a      	add	r2, r1
 8008058:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800805c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008060:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008062:	e023      	b.n	80080ac <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008064:	78fb      	ldrb	r3, [r7, #3]
 8008066:	015a      	lsls	r2, r3, #5
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	4413      	add	r3, r2
 800806c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008070:	461a      	mov	r2, r3
 8008072:	f240 2325 	movw	r3, #549	@ 0x225
 8008076:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008078:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800807c:	2b00      	cmp	r3, #0
 800807e:	da17      	bge.n	80080b0 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008080:	78fb      	ldrb	r3, [r7, #3]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	4413      	add	r3, r2
 8008088:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	78fa      	ldrb	r2, [r7, #3]
 8008090:	0151      	lsls	r1, r2, #5
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	440a      	add	r2, r1
 8008096:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800809a:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800809e:	60d3      	str	r3, [r2, #12]
      }
      break;
 80080a0:	e006      	b.n	80080b0 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	77fb      	strb	r3, [r7, #31]
      break;
 80080a6:	e004      	b.n	80080b2 <USB_HC_Init+0x11e>
      break;
 80080a8:	bf00      	nop
 80080aa:	e002      	b.n	80080b2 <USB_HC_Init+0x11e>
      break;
 80080ac:	bf00      	nop
 80080ae:	e000      	b.n	80080b2 <USB_HC_Init+0x11e>
      break;
 80080b0:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80080b2:	78fb      	ldrb	r3, [r7, #3]
 80080b4:	015a      	lsls	r2, r3, #5
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	78fa      	ldrb	r2, [r7, #3]
 80080c2:	0151      	lsls	r1, r2, #5
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	440a      	add	r2, r1
 80080c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080cc:	f043 0302 	orr.w	r3, r3, #2
 80080d0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080d8:	699a      	ldr	r2, [r3, #24]
 80080da:	78fb      	ldrb	r3, [r7, #3]
 80080dc:	f003 030f 	and.w	r3, r3, #15
 80080e0:	2101      	movs	r1, #1
 80080e2:	fa01 f303 	lsl.w	r3, r1, r3
 80080e6:	6939      	ldr	r1, [r7, #16]
 80080e8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80080ec:	4313      	orrs	r3, r2
 80080ee:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80080fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008100:	2b00      	cmp	r3, #0
 8008102:	da03      	bge.n	800810c <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008104:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008108:	61bb      	str	r3, [r7, #24]
 800810a:	e001      	b.n	8008110 <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 800810c:	2300      	movs	r3, #0
 800810e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f7ff ff17 	bl	8007f44 <USB_GetHostSpeed>
 8008116:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008118:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800811c:	2b02      	cmp	r3, #2
 800811e:	d106      	bne.n	800812e <USB_HC_Init+0x19a>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2b02      	cmp	r3, #2
 8008124:	d003      	beq.n	800812e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008126:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800812a:	617b      	str	r3, [r7, #20]
 800812c:	e001      	b.n	8008132 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800812e:	2300      	movs	r3, #0
 8008130:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008132:	787b      	ldrb	r3, [r7, #1]
 8008134:	059b      	lsls	r3, r3, #22
 8008136:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800813a:	78bb      	ldrb	r3, [r7, #2]
 800813c:	02db      	lsls	r3, r3, #11
 800813e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008142:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008144:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008148:	049b      	lsls	r3, r3, #18
 800814a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800814e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8008150:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008152:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008156:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	431a      	orrs	r2, r3
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008160:	78fa      	ldrb	r2, [r7, #3]
 8008162:	0151      	lsls	r1, r2, #5
 8008164:	693a      	ldr	r2, [r7, #16]
 8008166:	440a      	add	r2, r1
 8008168:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800816c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008170:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008172:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008176:	2b03      	cmp	r3, #3
 8008178:	d003      	beq.n	8008182 <USB_HC_Init+0x1ee>
 800817a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800817e:	2b01      	cmp	r3, #1
 8008180:	d10f      	bne.n	80081a2 <USB_HC_Init+0x20e>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008182:	78fb      	ldrb	r3, [r7, #3]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	4413      	add	r3, r2
 800818a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	78fa      	ldrb	r2, [r7, #3]
 8008192:	0151      	lsls	r1, r2, #5
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	440a      	add	r2, r1
 8008198:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800819c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80081a0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80081a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3720      	adds	r7, #32
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b088      	sub	sp, #32
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	785b      	ldrb	r3, [r3, #1]
 80081be:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80081c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80081c4:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d018      	beq.n	8008200 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	8952      	ldrh	r2, [r2, #10]
 80081d6:	4413      	add	r3, r2
 80081d8:	3b01      	subs	r3, #1
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	8952      	ldrh	r2, [r2, #10]
 80081de:	fbb3 f3f2 	udiv	r3, r3, r2
 80081e2:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 80081e4:	8bfa      	ldrh	r2, [r7, #30]
 80081e6:	8a7b      	ldrh	r3, [r7, #18]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d90b      	bls.n	8008204 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 80081ec:	8a7b      	ldrh	r3, [r7, #18]
 80081ee:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80081f0:	8bfb      	ldrh	r3, [r7, #30]
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	8952      	ldrh	r2, [r2, #10]
 80081f6:	fb03 f202 	mul.w	r2, r3, r2
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	615a      	str	r2, [r3, #20]
 80081fe:	e001      	b.n	8008204 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8008200:	2301      	movs	r3, #1
 8008202:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	78db      	ldrb	r3, [r3, #3]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d007      	beq.n	800821c <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800820c:	8bfb      	ldrh	r3, [r7, #30]
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	8952      	ldrh	r2, [r2, #10]
 8008212:	fb03 f202 	mul.w	r2, r3, r2
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	615a      	str	r2, [r3, #20]
 800821a:	e003      	b.n	8008224 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	699a      	ldr	r2, [r3, #24]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	615a      	str	r2, [r3, #20]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800822c:	8bfb      	ldrh	r3, [r7, #30]
 800822e:	04d9      	lsls	r1, r3, #19
 8008230:	4b59      	ldr	r3, [pc, #356]	@ (8008398 <USB_HC_StartXfer+0x1ec>)
 8008232:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008234:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	7b1b      	ldrb	r3, [r3, #12]
 800823a:	075b      	lsls	r3, r3, #29
 800823c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008240:	6979      	ldr	r1, [r7, #20]
 8008242:	0148      	lsls	r0, r1, #5
 8008244:	69b9      	ldr	r1, [r7, #24]
 8008246:	4401      	add	r1, r0
 8008248:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800824c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800824e:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	f003 0301 	and.w	r3, r3, #1
 800825c:	2b00      	cmp	r3, #0
 800825e:	bf0c      	ite	eq
 8008260:	2301      	moveq	r3, #1
 8008262:	2300      	movne	r3, #0
 8008264:	b2db      	uxtb	r3, r3
 8008266:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	015a      	lsls	r2, r3, #5
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	4413      	add	r3, r2
 8008270:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	0151      	lsls	r1, r2, #5
 800827a:	69ba      	ldr	r2, [r7, #24]
 800827c:	440a      	add	r2, r1
 800827e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008282:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008286:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	4413      	add	r3, r2
 8008290:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	7c7b      	ldrb	r3, [r7, #17]
 8008298:	075b      	lsls	r3, r3, #29
 800829a:	6979      	ldr	r1, [r7, #20]
 800829c:	0148      	lsls	r0, r1, #5
 800829e:	69b9      	ldr	r1, [r7, #24]
 80082a0:	4401      	add	r1, r0
 80082a2:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80082a6:	4313      	orrs	r3, r2
 80082a8:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	015a      	lsls	r2, r3, #5
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	4413      	add	r3, r2
 80082b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80082c0:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	78db      	ldrb	r3, [r3, #3]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d004      	beq.n	80082d4 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082d0:	60bb      	str	r3, [r7, #8]
 80082d2:	e003      	b.n	80082dc <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80082da:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80082e2:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	015a      	lsls	r2, r3, #5
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	4413      	add	r3, r2
 80082ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082f0:	461a      	mov	r2, r3
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	78db      	ldrb	r3, [r3, #3]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d147      	bne.n	800838e <USB_HC_StartXfer+0x1e2>
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d043      	beq.n	800838e <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	7a1b      	ldrb	r3, [r3, #8]
 800830a:	2b03      	cmp	r3, #3
 800830c:	d830      	bhi.n	8008370 <USB_HC_StartXfer+0x1c4>
 800830e:	a201      	add	r2, pc, #4	@ (adr r2, 8008314 <USB_HC_StartXfer+0x168>)
 8008310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008314:	08008325 	.word	0x08008325
 8008318:	08008349 	.word	0x08008349
 800831c:	08008325 	.word	0x08008325
 8008320:	08008349 	.word	0x08008349
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	3303      	adds	r3, #3
 800832a:	089b      	lsrs	r3, r3, #2
 800832c:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800832e:	89fa      	ldrh	r2, [r7, #14]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008334:	b29b      	uxth	r3, r3
 8008336:	429a      	cmp	r2, r3
 8008338:	d91c      	bls.n	8008374 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	f043 0220 	orr.w	r2, r3, #32
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	619a      	str	r2, [r3, #24]
        }
        break;
 8008346:	e015      	b.n	8008374 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	3303      	adds	r3, #3
 800834e:	089b      	lsrs	r3, r3, #2
 8008350:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008352:	89fa      	ldrh	r2, [r7, #14]
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800835a:	691b      	ldr	r3, [r3, #16]
 800835c:	b29b      	uxth	r3, r3
 800835e:	429a      	cmp	r2, r3
 8008360:	d90a      	bls.n	8008378 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	619a      	str	r2, [r3, #24]
        }
        break;
 800836e:	e003      	b.n	8008378 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8008370:	bf00      	nop
 8008372:	e002      	b.n	800837a <USB_HC_StartXfer+0x1ce>
        break;
 8008374:	bf00      	nop
 8008376:	e000      	b.n	800837a <USB_HC_StartXfer+0x1ce>
        break;
 8008378:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	6919      	ldr	r1, [r3, #16]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	785a      	ldrb	r2, [r3, #1]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	b29b      	uxth	r3, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7ff fbb1 	bl	8007af0 <USB_WritePacket>
  }

  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3720      	adds	r7, #32
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	1ff80000 	.word	0x1ff80000

0800839c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	b29b      	uxth	r3, r3
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3714      	adds	r7, #20
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80083be:	b480      	push	{r7}
 80083c0:	b089      	sub	sp, #36	@ 0x24
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	460b      	mov	r3, r1
 80083c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80083ce:	78fb      	ldrb	r3, [r7, #3]
 80083d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80083d2:	2300      	movs	r3, #0
 80083d4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	015a      	lsls	r2, r3, #5
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	4413      	add	r3, r2
 80083de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	0c9b      	lsrs	r3, r3, #18
 80083e6:	f003 0303 	and.w	r3, r3, #3
 80083ea:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	015a      	lsls	r2, r3, #5
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	4413      	add	r3, r2
 80083f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	0fdb      	lsrs	r3, r3, #31
 80083fc:	f003 0301 	and.w	r3, r3, #1
 8008400:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	015a      	lsls	r2, r3, #5
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	4413      	add	r3, r2
 800840a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	0fdb      	lsrs	r3, r3, #31
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	f003 0320 	and.w	r3, r3, #32
 8008420:	2b20      	cmp	r3, #32
 8008422:	d10d      	bne.n	8008440 <USB_HC_Halt+0x82>
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10a      	bne.n	8008440 <USB_HC_Halt+0x82>
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d005      	beq.n	800843c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d002      	beq.n	800843c <USB_HC_Halt+0x7e>
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2b03      	cmp	r3, #3
 800843a:	d101      	bne.n	8008440 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	e0d8      	b.n	80085f2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d002      	beq.n	800844c <USB_HC_Halt+0x8e>
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	2b02      	cmp	r3, #2
 800844a:	d173      	bne.n	8008534 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	4413      	add	r3, r2
 8008454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	69ba      	ldr	r2, [r7, #24]
 800845c:	0151      	lsls	r1, r2, #5
 800845e:	69fa      	ldr	r2, [r7, #28]
 8008460:	440a      	add	r2, r1
 8008462:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008466:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800846a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f003 0320 	and.w	r3, r3, #32
 8008474:	2b00      	cmp	r3, #0
 8008476:	d14a      	bne.n	800850e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800847c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d133      	bne.n	80084ec <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	4413      	add	r3, r2
 800848c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	69ba      	ldr	r2, [r7, #24]
 8008494:	0151      	lsls	r1, r2, #5
 8008496:	69fa      	ldr	r2, [r7, #28]
 8008498:	440a      	add	r2, r1
 800849a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800849e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80084a2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	015a      	lsls	r2, r3, #5
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	4413      	add	r3, r2
 80084ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	69ba      	ldr	r2, [r7, #24]
 80084b4:	0151      	lsls	r1, r2, #5
 80084b6:	69fa      	ldr	r2, [r7, #28]
 80084b8:	440a      	add	r2, r1
 80084ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084c2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	3301      	adds	r3, #1
 80084c8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80084d0:	d82e      	bhi.n	8008530 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	015a      	lsls	r2, r3, #5
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	4413      	add	r3, r2
 80084da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084e8:	d0ec      	beq.n	80084c4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80084ea:	e081      	b.n	80085f0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	015a      	lsls	r2, r3, #5
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	4413      	add	r3, r2
 80084f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	69ba      	ldr	r2, [r7, #24]
 80084fc:	0151      	lsls	r1, r2, #5
 80084fe:	69fa      	ldr	r2, [r7, #28]
 8008500:	440a      	add	r2, r1
 8008502:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008506:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800850a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800850c:	e070      	b.n	80085f0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	4413      	add	r3, r2
 8008516:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	69ba      	ldr	r2, [r7, #24]
 800851e:	0151      	lsls	r1, r2, #5
 8008520:	69fa      	ldr	r2, [r7, #28]
 8008522:	440a      	add	r2, r1
 8008524:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008528:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800852c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800852e:	e05f      	b.n	80085f0 <USB_HC_Halt+0x232>
            break;
 8008530:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008532:	e05d      	b.n	80085f0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	4413      	add	r3, r2
 800853c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	69ba      	ldr	r2, [r7, #24]
 8008544:	0151      	lsls	r1, r2, #5
 8008546:	69fa      	ldr	r2, [r7, #28]
 8008548:	440a      	add	r2, r1
 800854a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800854e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008552:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008560:	2b00      	cmp	r3, #0
 8008562:	d133      	bne.n	80085cc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	4413      	add	r3, r2
 800856c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	69ba      	ldr	r2, [r7, #24]
 8008574:	0151      	lsls	r1, r2, #5
 8008576:	69fa      	ldr	r2, [r7, #28]
 8008578:	440a      	add	r2, r1
 800857a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800857e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008582:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	015a      	lsls	r2, r3, #5
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	4413      	add	r3, r2
 800858c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	69ba      	ldr	r2, [r7, #24]
 8008594:	0151      	lsls	r1, r2, #5
 8008596:	69fa      	ldr	r2, [r7, #28]
 8008598:	440a      	add	r2, r1
 800859a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800859e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80085a2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	3301      	adds	r3, #1
 80085a8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80085b0:	d81d      	bhi.n	80085ee <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	015a      	lsls	r2, r3, #5
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	4413      	add	r3, r2
 80085ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085c8:	d0ec      	beq.n	80085a4 <USB_HC_Halt+0x1e6>
 80085ca:	e011      	b.n	80085f0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	015a      	lsls	r2, r3, #5
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	4413      	add	r3, r2
 80085d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	69ba      	ldr	r2, [r7, #24]
 80085dc:	0151      	lsls	r1, r2, #5
 80085de:	69fa      	ldr	r2, [r7, #28]
 80085e0:	440a      	add	r2, r1
 80085e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80085ea:	6013      	str	r3, [r2, #0]
 80085ec:	e000      	b.n	80085f0 <USB_HC_Halt+0x232>
          break;
 80085ee:	bf00      	nop
    }
  }

  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3724      	adds	r7, #36	@ 0x24
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b088      	sub	sp, #32
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800860e:	2300      	movs	r3, #0
 8008610:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7ff f9ab 	bl	800796e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008618:	2110      	movs	r1, #16
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f7ff fa04 	bl	8007a28 <USB_FlushTxFifo>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7ff fa30 	bl	8007a90 <USB_FlushRxFifo>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800863a:	2300      	movs	r3, #0
 800863c:	61bb      	str	r3, [r7, #24]
 800863e:	e01f      	b.n	8008680 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	015a      	lsls	r2, r3, #5
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	4413      	add	r3, r2
 8008648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008656:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800865e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008666:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	015a      	lsls	r2, r3, #5
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	4413      	add	r3, r2
 8008670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008674:	461a      	mov	r2, r3
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	3301      	adds	r3, #1
 800867e:	61bb      	str	r3, [r7, #24]
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	2b0f      	cmp	r3, #15
 8008684:	d9dc      	bls.n	8008640 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008686:	2300      	movs	r3, #0
 8008688:	61bb      	str	r3, [r7, #24]
 800868a:	e034      	b.n	80086f6 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	015a      	lsls	r2, r3, #5
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	4413      	add	r3, r2
 8008694:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80086a2:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80086aa:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80086b2:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	015a      	lsls	r2, r3, #5
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	4413      	add	r3, r2
 80086bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086c0:	461a      	mov	r2, r3
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	3301      	adds	r3, #1
 80086ca:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80086d2:	d80c      	bhi.n	80086ee <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	015a      	lsls	r2, r3, #5
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	4413      	add	r3, r2
 80086dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086ea:	d0ec      	beq.n	80086c6 <USB_StopHost+0xc8>
 80086ec:	e000      	b.n	80086f0 <USB_StopHost+0xf2>
        break;
 80086ee:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	3301      	adds	r3, #1
 80086f4:	61bb      	str	r3, [r7, #24]
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	2b0f      	cmp	r3, #15
 80086fa:	d9c7      	bls.n	800868c <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008702:	461a      	mov	r2, r3
 8008704:	f04f 33ff 	mov.w	r3, #4294967295
 8008708:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f04f 32ff 	mov.w	r2, #4294967295
 8008710:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7ff f91a 	bl	800794c <USB_EnableGlobalInt>

  return ret;
 8008718:	7ffb      	ldrb	r3, [r7, #31]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3720      	adds	r7, #32
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <USBH_AUDIO_InterfaceInit>:
  *         The function init the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008722:	b590      	push	{r4, r7, lr}
 8008724:	b08b      	sub	sp, #44	@ 0x2c
 8008726:	af04      	add	r7, sp, #16
 8008728:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef out_status, in_status;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  uint8_t  interface, index;
  uint16_t ep_size_out = 0U;
 800872a:	2300      	movs	r3, #0
 800872c:	82bb      	strh	r3, [r7, #20]
  uint16_t ep_size_in = 0U;
 800872e:	2300      	movs	r3, #0
 8008730:	827b      	strh	r3, [r7, #18]

  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 8008732:	2300      	movs	r3, #0
 8008734:	2201      	movs	r2, #1
 8008736:	2101      	movs	r1, #1
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f001 ffb6 	bl	800a6aa <USBH_FindInterface>
 800873e:	4603      	mov	r3, r0
 8008740:	747b      	strb	r3, [r7, #17]

  if (interface == 0xFFU) /* Not Valid Interface */
 8008742:	7c7b      	ldrb	r3, [r7, #17]
 8008744:	2bff      	cmp	r3, #255	@ 0xff
 8008746:	d101      	bne.n	800874c <USBH_AUDIO_InterfaceInit+0x2a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008748:	2302      	movs	r3, #2
 800874a:	e1a5      	b.n	8008a98 <USBH_AUDIO_InterfaceInit+0x376>
  }

  phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc(sizeof(AUDIO_HandleTypeDef));
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 444c 	ldr.w	r4, [r3, #1100]	@ 0x44c
 8008752:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 8008756:	f003 fef5 	bl	800c544 <malloc>
 800875a:	4603      	mov	r3, r0
 800875c:	61e3      	str	r3, [r4, #28]
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008764:	69db      	ldr	r3, [r3, #28]
 8008766:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle == NULL)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d101      	bne.n	8008772 <USBH_AUDIO_InterfaceInit+0x50>
  {
    USBH_DbgLog("Cannot allocate memory for AUDIO Handle");
    return USBH_FAIL;
 800876e:	2302      	movs	r3, #2
 8008770:	e192      	b.n	8008a98 <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* Initialize audio handler */
  (void)USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 8008772:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8008776:	2100      	movs	r1, #0
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f003 ffc3 	bl	800c704 <memset>

  /* 1st Step:  Find Audio Interfaces */
  out_status = USBH_AUDIO_FindAudioStreamingIN(phost);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 fc0f 	bl	8008fa2 <USBH_AUDIO_FindAudioStreamingIN>
 8008784:	4603      	mov	r3, r0
 8008786:	72fb      	strb	r3, [r7, #11]

  in_status = USBH_AUDIO_FindAudioStreamingOUT(phost);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fcc9 	bl	8009120 <USBH_AUDIO_FindAudioStreamingOUT>
 800878e:	4603      	mov	r3, r0
 8008790:	72bb      	strb	r3, [r7, #10]

  if ((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 8008792:	7afb      	ldrb	r3, [r7, #11]
 8008794:	2b02      	cmp	r3, #2
 8008796:	d104      	bne.n	80087a2 <USBH_AUDIO_InterfaceInit+0x80>
 8008798:	7abb      	ldrb	r3, [r7, #10]
 800879a:	2b02      	cmp	r3, #2
 800879c:	d101      	bne.n	80087a2 <USBH_AUDIO_InterfaceInit+0x80>
  {
    USBH_DbgLog("%s class configuration not supported.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800879e:	2302      	movs	r3, #2
 80087a0:	e17a      	b.n	8008a98 <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* 2nd Step:  Select Audio Streaming Interfaces with largest endpoint size : default behavior */
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 80087a2:	2300      	movs	r3, #0
 80087a4:	75fb      	strb	r3, [r7, #23]
 80087a6:	e0c6      	b.n	8008936 <USBH_AUDIO_InterfaceInit+0x214>
  {
    if (AUDIO_Handle->stream_out[index].valid == 1U)
 80087a8:	7dfa      	ldrb	r2, [r7, #23]
 80087aa:	68f9      	ldr	r1, [r7, #12]
 80087ac:	4613      	mov	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	005b      	lsls	r3, r3, #1
 80087b4:	440b      	add	r3, r1
 80087b6:	333e      	adds	r3, #62	@ 0x3e
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d156      	bne.n	800886c <USBH_AUDIO_InterfaceInit+0x14a>
    {
      if (ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 80087be:	7dfa      	ldrb	r2, [r7, #23]
 80087c0:	68f9      	ldr	r1, [r7, #12]
 80087c2:	4613      	mov	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	005b      	lsls	r3, r3, #1
 80087ca:	440b      	add	r3, r1
 80087cc:	333a      	adds	r3, #58	@ 0x3a
 80087ce:	881b      	ldrh	r3, [r3, #0]
 80087d0:	8aba      	ldrh	r2, [r7, #20]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d24a      	bcs.n	800886c <USBH_AUDIO_InterfaceInit+0x14a>
      {
        ep_size_out = AUDIO_Handle->stream_out[index].EpSize;
 80087d6:	7dfa      	ldrb	r2, [r7, #23]
 80087d8:	68f9      	ldr	r1, [r7, #12]
 80087da:	4613      	mov	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	005b      	lsls	r3, r3, #1
 80087e2:	440b      	add	r3, r1
 80087e4:	333a      	adds	r3, #58	@ 0x3a
 80087e6:	881b      	ldrh	r3, [r3, #0]
 80087e8:	82bb      	strh	r3, [r7, #20]
        AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 80087ea:	7dfa      	ldrb	r2, [r7, #23]
 80087ec:	68f9      	ldr	r1, [r7, #12]
 80087ee:	4613      	mov	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	005b      	lsls	r3, r3, #1
 80087f6:	440b      	add	r3, r1
 80087f8:	333d      	adds	r3, #61	@ 0x3d
 80087fa:	781a      	ldrb	r2, [r3, #0]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
        AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;
 8008802:	7dfa      	ldrb	r2, [r7, #23]
 8008804:	68f9      	ldr	r1, [r7, #12]
 8008806:	4613      	mov	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	005b      	lsls	r3, r3, #1
 800880e:	440b      	add	r3, r1
 8008810:	333c      	adds	r3, #60	@ 0x3c
 8008812:	781a      	ldrb	r2, [r3, #0]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
        AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 800881a:	7dfa      	ldrb	r2, [r7, #23]
 800881c:	68f9      	ldr	r1, [r7, #12]
 800881e:	4613      	mov	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	4413      	add	r3, r2
 8008824:	005b      	lsls	r3, r3, #1
 8008826:	440b      	add	r3, r1
 8008828:	3338      	adds	r3, #56	@ 0x38
 800882a:	781a      	ldrb	r2, [r3, #0]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
        AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize;
 8008832:	7dfa      	ldrb	r2, [r7, #23]
 8008834:	68f9      	ldr	r1, [r7, #12]
 8008836:	4613      	mov	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4413      	add	r3, r2
 800883c:	005b      	lsls	r3, r3, #1
 800883e:	440b      	add	r3, r1
 8008840:	333a      	adds	r3, #58	@ 0x3a
 8008842:	881a      	ldrh	r2, [r3, #0]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f8a3 20f6 	strh.w	r2, [r3, #246]	@ 0xf6
        AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 800884a:	7dfa      	ldrb	r2, [r7, #23]
 800884c:	68f9      	ldr	r1, [r7, #12]
 800884e:	4613      	mov	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4413      	add	r3, r2
 8008854:	005b      	lsls	r3, r3, #1
 8008856:	440b      	add	r3, r1
 8008858:	3340      	adds	r3, #64	@ 0x40
 800885a:	881b      	ldrh	r3, [r3, #0]
 800885c:	b2da      	uxtb	r2, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f883 20fc 	strb.w	r2, [r3, #252]	@ 0xfc
        AUDIO_Handle->headphone.supported = 1U;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 20fa 	strb.w	r2, [r3, #250]	@ 0xfa
      }
    }

    if (AUDIO_Handle->stream_in[index].valid == 1U)
 800886c:	7dfa      	ldrb	r2, [r7, #23]
 800886e:	68f9      	ldr	r1, [r7, #12]
 8008870:	4613      	mov	r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	4413      	add	r3, r2
 8008876:	005b      	lsls	r3, r3, #1
 8008878:	440b      	add	r3, r1
 800887a:	330c      	adds	r3, #12
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d156      	bne.n	8008930 <USBH_AUDIO_InterfaceInit+0x20e>
    {
      if (ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 8008882:	7dfa      	ldrb	r2, [r7, #23]
 8008884:	68f9      	ldr	r1, [r7, #12]
 8008886:	4613      	mov	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	005b      	lsls	r3, r3, #1
 800888e:	440b      	add	r3, r1
 8008890:	3308      	adds	r3, #8
 8008892:	881b      	ldrh	r3, [r3, #0]
 8008894:	8a7a      	ldrh	r2, [r7, #18]
 8008896:	429a      	cmp	r2, r3
 8008898:	d24a      	bcs.n	8008930 <USBH_AUDIO_InterfaceInit+0x20e>
      {
        ep_size_in = AUDIO_Handle->stream_in[index].EpSize;
 800889a:	7dfa      	ldrb	r2, [r7, #23]
 800889c:	68f9      	ldr	r1, [r7, #12]
 800889e:	4613      	mov	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	005b      	lsls	r3, r3, #1
 80088a6:	440b      	add	r3, r1
 80088a8:	3308      	adds	r3, #8
 80088aa:	881b      	ldrh	r3, [r3, #0]
 80088ac:	827b      	strh	r3, [r7, #18]
        AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 80088ae:	7dfa      	ldrb	r2, [r7, #23]
 80088b0:	68f9      	ldr	r1, [r7, #12]
 80088b2:	4613      	mov	r3, r2
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	4413      	add	r3, r2
 80088b8:	005b      	lsls	r3, r3, #1
 80088ba:	440b      	add	r3, r1
 80088bc:	330b      	adds	r3, #11
 80088be:	781a      	ldrb	r2, [r3, #0]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f883 2140 	strb.w	r2, [r3, #320]	@ 0x140
        AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;
 80088c6:	7dfa      	ldrb	r2, [r7, #23]
 80088c8:	68f9      	ldr	r1, [r7, #12]
 80088ca:	4613      	mov	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4413      	add	r3, r2
 80088d0:	005b      	lsls	r3, r3, #1
 80088d2:	440b      	add	r3, r1
 80088d4:	330a      	adds	r3, #10
 80088d6:	781a      	ldrb	r2, [r3, #0]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f883 2141 	strb.w	r2, [r3, #321]	@ 0x141
        AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 80088de:	7dfa      	ldrb	r2, [r7, #23]
 80088e0:	68f9      	ldr	r1, [r7, #12]
 80088e2:	4613      	mov	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	4413      	add	r3, r2
 80088e8:	005b      	lsls	r3, r3, #1
 80088ea:	440b      	add	r3, r1
 80088ec:	3306      	adds	r3, #6
 80088ee:	781a      	ldrb	r2, [r3, #0]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
        AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 80088f6:	7dfa      	ldrb	r2, [r7, #23]
 80088f8:	68f9      	ldr	r1, [r7, #12]
 80088fa:	4613      	mov	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	4413      	add	r3, r2
 8008900:	005b      	lsls	r3, r3, #1
 8008902:	440b      	add	r3, r1
 8008904:	3308      	adds	r3, #8
 8008906:	881a      	ldrh	r2, [r3, #0]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f8a3 213e 	strh.w	r2, [r3, #318]	@ 0x13e
        AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 800890e:	7dfa      	ldrb	r2, [r7, #23]
 8008910:	68f9      	ldr	r1, [r7, #12]
 8008912:	4613      	mov	r3, r2
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	4413      	add	r3, r2
 8008918:	005b      	lsls	r3, r3, #1
 800891a:	440b      	add	r3, r1
 800891c:	3340      	adds	r3, #64	@ 0x40
 800891e:	881b      	ldrh	r3, [r3, #0]
 8008920:	b2da      	uxtb	r2, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
        AUDIO_Handle->microphone.supported = 1U;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2201      	movs	r2, #1
 800892c:	f883 2142 	strb.w	r2, [r3, #322]	@ 0x142
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8008930:	7dfb      	ldrb	r3, [r7, #23]
 8008932:	3301      	adds	r3, #1
 8008934:	75fb      	strb	r3, [r7, #23]
 8008936:	7dfb      	ldrb	r3, [r7, #23]
 8008938:	2b04      	cmp	r3, #4
 800893a:	f67f af35 	bls.w	80087a8 <USBH_AUDIO_InterfaceInit+0x86>
      }
    }
  }

  if (USBH_AUDIO_FindHIDControl(phost) == USBH_OK)
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fcad 	bl	800929e <USBH_AUDIO_FindHIDControl>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d103      	bne.n	8008952 <USBH_AUDIO_InterfaceInit+0x230>
  {
    AUDIO_Handle->control.supported = 1U;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
  }

  /* 3rd Step:  Find and Parse Audio interfaces */
  (void)USBH_AUDIO_ParseCSDescriptors(phost);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fd25 	bl	80093a2 <USBH_AUDIO_ParseCSDescriptors>


  /* 4th Step:  Open the Audio streaming pipes*/
  if (AUDIO_Handle->headphone.supported == 1U)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 800895e:	2b01      	cmp	r3, #1
 8008960:	d12e      	bne.n	80089c0 <USBH_AUDIO_InterfaceInit+0x29e>
  {
    (void)USBH_AUDIO_BuildHeadphonePath(phost);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 ff60 	bl	8009828 <USBH_AUDIO_BuildHeadphonePath>

    AUDIO_Handle->headphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f003 fa57 	bl	800be24 <USBH_AllocPipe>
 8008976:	4603      	mov	r3, r0
 8008978:	461a      	mov	r2, r3
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f883 20fb 	strb.w	r2, [r3, #251]	@ 0xfb

    /* Open pipe for IN endpoint */
    (void)USBH_OpenPipe(phost,
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f893 10fb 	ldrb.w	r1, [r3, #251]	@ 0xfb
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f893 00f4 	ldrb.w	r0, [r3, #244]	@ 0xf4
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	@ 0xf6
 800899e:	9202      	str	r2, [sp, #8]
 80089a0:	2201      	movs	r2, #1
 80089a2:	9201      	str	r2, [sp, #4]
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	4623      	mov	r3, r4
 80089a8:	4602      	mov	r2, r0
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f003 fa0b 	bl	800bdc6 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_ISOC,
                        AUDIO_Handle->headphone.EpSize);

    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->headphone.Pipe, 0U);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 80089b6:	2200      	movs	r2, #0
 80089b8:	4619      	mov	r1, r3
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f003 fd3b 	bl	800c436 <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d12e      	bne.n	8008a28 <USBH_AUDIO_InterfaceInit+0x306>
  {
    (void)USBH_AUDIO_BuildMicrophonePath(phost);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fea4 	bl	8009718 <USBH_AUDIO_BuildMicrophonePath>
    AUDIO_Handle->microphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 80089d6:	4619      	mov	r1, r3
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f003 fa23 	bl	800be24 <USBH_AllocPipe>
 80089de:	4603      	mov	r3, r0
 80089e0:	461a      	mov	r2, r3
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f883 2143 	strb.w	r2, [r3, #323]	@ 0x143

    /* Open pipe for IN endpoint */
    (void)USBH_OpenPipe(phost,
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f893 1143 	ldrb.w	r1, [r3, #323]	@ 0x143
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f893 013c 	ldrb.w	r0, [r3, #316]	@ 0x13c
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	f8b2 213e 	ldrh.w	r2, [r2, #318]	@ 0x13e
 8008a06:	9202      	str	r2, [sp, #8]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	9201      	str	r2, [sp, #4]
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	4623      	mov	r3, r4
 8008a10:	4602      	mov	r2, r0
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f003 f9d7 	bl	800bdc6 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_ISOC,
                        AUDIO_Handle->microphone.EpSize);

    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->microphone.Pipe, 0U);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 8008a1e:	2200      	movs	r2, #0
 8008a20:	4619      	mov	r1, r3
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f003 fd07 	bl	800c436 <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->control.supported == 1U)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d12b      	bne.n	8008a8a <USBH_AUDIO_InterfaceInit+0x368>
  {
    AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 8008a38:	4619      	mov	r1, r3
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f003 f9f2 	bl	800be24 <USBH_AllocPipe>
 8008a40:	4603      	mov	r3, r0
 8008a42:	461a      	mov	r2, r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f883 218a 	strb.w	r2, [r3, #394]	@ 0x18a

    /* Open pipe for IN endpoint */
    (void)USBH_OpenPipe(phost,
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f893 118a 	ldrb.w	r1, [r3, #394]	@ 0x18a
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f893 0184 	ldrb.w	r0, [r3, #388]	@ 0x184
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	f8b2 2186 	ldrh.w	r2, [r2, #390]	@ 0x186
 8008a68:	9202      	str	r2, [sp, #8]
 8008a6a:	2203      	movs	r2, #3
 8008a6c:	9201      	str	r2, [sp, #4]
 8008a6e:	9300      	str	r3, [sp, #0]
 8008a70:	4623      	mov	r3, r4
 8008a72:	4602      	mov	r2, r0
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f003 f9a6 	bl	800bdc6 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_INTR,
                        AUDIO_Handle->control.EpSize);

    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->control.Pipe, 0U);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8008a80:	2200      	movs	r2, #0
 8008a82:	4619      	mov	r1, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f003 fcd6 	bl	800c436 <USBH_LL_SetToggle>

  }

  AUDIO_Handle->req_state = AUDIO_REQ_INIT;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	701a      	strb	r2, [r3, #0]
  AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2201      	movs	r2, #1
 8008a94:	70da      	strb	r2, [r3, #3]

  return USBH_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	371c      	adds	r7, #28
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd90      	pop	{r4, r7, pc}

08008aa0 <USBH_AUDIO_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle->microphone.Pipe != 0x00U)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d011      	beq.n	8008ae0 <USBH_AUDIO_InterfaceDeInit+0x40>
  {
    (void)USBH_ClosePipe(phost, AUDIO_Handle->microphone.Pipe);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f003 f99d 	bl	800be04 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, AUDIO_Handle->microphone.Pipe);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f003 f9c8 	bl	800be68 <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0U;     /* Reset the pipe as Free */
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 2143 	strb.w	r2, [r3, #323]	@ 0x143
  }

  if (AUDIO_Handle->headphone.Pipe != 0x00U)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d011      	beq.n	8008b0e <USBH_AUDIO_InterfaceDeInit+0x6e>
  {
    (void)USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 8008af0:	4619      	mov	r1, r3
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f003 f986 	bl	800be04 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f003 f9b1 	bl	800be68 <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0U;     /* Reset the pipe as Free */
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 20fb 	strb.w	r2, [r3, #251]	@ 0xfb
  }

  if (AUDIO_Handle->control.Pipe != 0x00U)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d011      	beq.n	8008b3c <USBH_AUDIO_InterfaceDeInit+0x9c>
  {
    (void)USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8008b1e:	4619      	mov	r1, r3
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f003 f96f 	bl	800be04 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost,  AUDIO_Handle->control.Pipe);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f003 f99a 	bl	800be68 <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0U;     /* Reset the pipe as Free */
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 218a 	strb.w	r2, [r3, #394]	@ 0x18a
  }

  if ((phost->pActiveClass->pData) != 0U)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008b42:	69db      	ldr	r3, [r3, #28]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d00b      	beq.n	8008b60 <USBH_AUDIO_InterfaceDeInit+0xc0>
  {
    USBH_free(phost->pActiveClass->pData);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008b4e:	69db      	ldr	r3, [r3, #28]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f003 fcff 	bl	800c554 <free>
    phost->pActiveClass->pData = 0U;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	61da      	str	r2, [r3, #28]
  }
  return USBH_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
	...

08008b6c <USBH_AUDIO_ClassRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b086      	sub	sp, #24
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008b7a:	69db      	ldr	r3, [r3, #28]
 8008b7c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8008b82:	2301      	movs	r3, #1
 8008b84:	73fb      	strb	r3, [r7, #15]

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->req_state)
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	2b06      	cmp	r3, #6
 8008b8e:	f200 80be 	bhi.w	8008d0e <USBH_AUDIO_ClassRequest+0x1a2>
 8008b92:	a201      	add	r2, pc, #4	@ (adr r2, 8008b98 <USBH_AUDIO_ClassRequest+0x2c>)
 8008b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b98:	08008bb5 	.word	0x08008bb5
 8008b9c:	08008cf7 	.word	0x08008cf7
 8008ba0:	08008bb5 	.word	0x08008bb5
 8008ba4:	08008bf7 	.word	0x08008bf7
 8008ba8:	08008c6f 	.word	0x08008c6f
 8008bac:	08008cb3 	.word	0x08008cb3
 8008bb0:	08008c5b 	.word	0x08008c5b
  {
    case AUDIO_REQ_INIT:
    case AUDIO_REQ_SET_DEFAULT_IN_INTERFACE:
      if (AUDIO_Handle->microphone.supported == 1U)
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d117      	bne.n	8008bee <USBH_AUDIO_ClassRequest+0x82>
      {
        req_status = USBH_SetInterface(phost,
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	f893 3140 	ldrb.w	r3, [r3, #320]	@ 0x140
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f002 fb57 	bl	800b27c <USBH_SetInterface>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->microphone.interface,
                                       0U);

        if (req_status == USBH_OK)
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d103      	bne.n	8008be0 <USBH_AUDIO_ClassRequest+0x74>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	2204      	movs	r2, #4
 8008bdc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008bde:	e098      	b.n	8008d12 <USBH_AUDIO_ClassRequest+0x1a6>
        else if (req_status == USBH_NOT_SUPPORTED)
 8008be0:	7bfb      	ldrb	r3, [r7, #15]
 8008be2:	2b03      	cmp	r3, #3
 8008be4:	f040 8095 	bne.w	8008d12 <USBH_AUDIO_ClassRequest+0x1a6>
          status = USBH_FAIL;
 8008be8:	2302      	movs	r3, #2
 8008bea:	75fb      	strb	r3, [r7, #23]
      break;
 8008bec:	e091      	b.n	8008d12 <USBH_AUDIO_ClassRequest+0x1a6>
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	2204      	movs	r2, #4
 8008bf2:	701a      	strb	r2, [r3, #0]
      break;
 8008bf4:	e08d      	b.n	8008d12 <USBH_AUDIO_ClassRequest+0x1a6>

    case AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE:
      if (AUDIO_Handle->headphone.supported == 1U)
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d125      	bne.n	8008c4c <USBH_AUDIO_ClassRequest+0xe0>
      {
        req_status = USBH_SetInterface(phost,
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 8008c06:	2200      	movs	r2, #0
 8008c08:	4619      	mov	r1, r3
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f002 fb36 	bl	800b27c <USBH_SetInterface>
 8008c10:	4603      	mov	r3, r0
 8008c12:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->headphone.interface,
                                       0U);

        if (req_status == USBH_OK)
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d112      	bne.n	8008c40 <USBH_AUDIO_ClassRequest+0xd4>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	2207      	movs	r2, #7
 8008c1e:	701a      	strb	r2, [r3, #0]
          AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	2206      	movs	r2, #6
 8008c24:	705a      	strb	r2, [r3, #1]

          AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
          AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008c3e:	e06a      	b.n	8008d16 <USBH_AUDIO_ClassRequest+0x1aa>
        else if (req_status == USBH_NOT_SUPPORTED)
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
 8008c42:	2b03      	cmp	r3, #3
 8008c44:	d167      	bne.n	8008d16 <USBH_AUDIO_ClassRequest+0x1aa>
          status = USBH_FAIL;
 8008c46:	2302      	movs	r3, #2
 8008c48:	75fb      	strb	r3, [r7, #23]
      break;
 8008c4a:	e064      	b.n	8008d16 <USBH_AUDIO_ClassRequest+0x1aa>
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	2207      	movs	r2, #7
 8008c50:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	2206      	movs	r2, #6
 8008c56:	705a      	strb	r2, [r3, #1]
      break;
 8008c58:	e05d      	b.n	8008d16 <USBH_AUDIO_ClassRequest+0x1aa>

    case AUDIO_REQ_CS_REQUESTS:
      if (USBH_AUDIO_HandleCSRequest(phost) == USBH_OK)
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f938 	bl	8008ed0 <USBH_AUDIO_HandleCSRequest>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d159      	bne.n	8008d1a <USBH_AUDIO_ClassRequest+0x1ae>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	2205      	movs	r2, #5
 8008c6a:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008c6c:	e055      	b.n	8008d1a <USBH_AUDIO_ClassRequest+0x1ae>

    case AUDIO_REQ_SET_IN_INTERFACE:
      if (AUDIO_Handle->microphone.supported == 1U)
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d118      	bne.n	8008caa <USBH_AUDIO_ClassRequest+0x13e>
      {
        req_status = USBH_SetInterface(phost,
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	f893 1140 	ldrb.w	r1, [r3, #320]	@ 0x140
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	f893 3141 	ldrb.w	r3, [r3, #321]	@ 0x141
 8008c84:	461a      	mov	r2, r3
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f002 faf8 	bl	800b27c <USBH_SetInterface>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->microphone.interface,
                                       AUDIO_Handle->microphone.AltSettings);

        if (req_status == USBH_OK)
 8008c90:	7bfb      	ldrb	r3, [r7, #15]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d103      	bne.n	8008c9e <USBH_AUDIO_ClassRequest+0x132>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	2206      	movs	r2, #6
 8008c9a:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008c9c:	e03f      	b.n	8008d1e <USBH_AUDIO_ClassRequest+0x1b2>
        else if (req_status == USBH_NOT_SUPPORTED)
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	d13c      	bne.n	8008d1e <USBH_AUDIO_ClassRequest+0x1b2>
          status = USBH_FAIL;
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ca8:	e039      	b.n	8008d1e <USBH_AUDIO_ClassRequest+0x1b2>
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	2206      	movs	r2, #6
 8008cae:	701a      	strb	r2, [r3, #0]
      break;
 8008cb0:	e035      	b.n	8008d1e <USBH_AUDIO_ClassRequest+0x1b2>
    case AUDIO_REQ_SET_OUT_INTERFACE:
      if (AUDIO_Handle->headphone.supported == 1U)
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d118      	bne.n	8008cee <USBH_AUDIO_ClassRequest+0x182>
      {
        req_status = USBH_SetInterface(phost,
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	f893 10f8 	ldrb.w	r1, [r3, #248]	@ 0xf8
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8008cc8:	461a      	mov	r2, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f002 fad6 	bl	800b27c <USBH_SetInterface>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->headphone.interface,
                                       AUDIO_Handle->headphone.AltSettings);

        if (req_status == USBH_OK)
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d103      	bne.n	8008ce2 <USBH_AUDIO_ClassRequest+0x176>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	2202      	movs	r2, #2
 8008cde:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008ce0:	e01f      	b.n	8008d22 <USBH_AUDIO_ClassRequest+0x1b6>
        else if (req_status == USBH_NOT_SUPPORTED)
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
 8008ce4:	2b03      	cmp	r3, #3
 8008ce6:	d11c      	bne.n	8008d22 <USBH_AUDIO_ClassRequest+0x1b6>
          status = USBH_FAIL;
 8008ce8:	2302      	movs	r3, #2
 8008cea:	75fb      	strb	r3, [r7, #23]
      break;
 8008cec:	e019      	b.n	8008d22 <USBH_AUDIO_ClassRequest+0x1b6>
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	2202      	movs	r2, #2
 8008cf2:	701a      	strb	r2, [r3, #0]
      break;
 8008cf4:	e015      	b.n	8008d22 <USBH_AUDIO_ClassRequest+0x1b6>
    case AUDIO_REQ_IDLE:
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 8008d02:	2102      	movs	r1, #2
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	4798      	blx	r3
      status  = USBH_OK;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d0c:	e00a      	b.n	8008d24 <USBH_AUDIO_ClassRequest+0x1b8>

    default:
      break;
 8008d0e:	bf00      	nop
 8008d10:	e008      	b.n	8008d24 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 8008d12:	bf00      	nop
 8008d14:	e006      	b.n	8008d24 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 8008d16:	bf00      	nop
 8008d18:	e004      	b.n	8008d24 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 8008d1a:	bf00      	nop
 8008d1c:	e002      	b.n	8008d24 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 8008d1e:	bf00      	nop
 8008d20:	e000      	b.n	8008d24 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 8008d22:	bf00      	nop
  }
  return status;
 8008d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3718      	adds	r7, #24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop

08008d30 <USBH_AUDIO_CSRequest>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_CSRequest(USBH_HandleTypeDef *phost,
                                               uint8_t feature, uint8_t channel)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b088      	sub	sp, #32
 8008d34:	af02      	add	r7, sp, #8
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	460b      	mov	r3, r1
 8008d3a:	70fb      	strb	r3, [r7, #3]
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	70bb      	strb	r3, [r7, #2]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008d46:	69db      	ldr	r3, [r3, #28]
 8008d48:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	73fb      	strb	r3, [r7, #15]
  uint16_t VolumeCtl, ResolutionCtl;

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->cs_req_state)
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	785b      	ldrb	r3, [r3, #1]
 8008d56:	3b04      	subs	r3, #4
 8008d58:	2b04      	cmp	r3, #4
 8008d5a:	f200 80aa 	bhi.w	8008eb2 <USBH_AUDIO_CSRequest+0x182>
 8008d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d64 <USBH_AUDIO_CSRequest+0x34>)
 8008d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d64:	08008dc1 	.word	0x08008dc1
 8008d68:	08008e07 	.word	0x08008e07
 8008d6c:	08008d79 	.word	0x08008d79
 8008d70:	08008e67 	.word	0x08008e67
 8008d74:	08008ead 	.word	0x08008ead
  {
    case AUDIO_REQ_GET_VOLUME:
      req_status = USBH_AC_GetCur(phost,
 8008d78:	78fa      	ldrb	r2, [r7, #3]
 8008d7a:	2302      	movs	r3, #2
 8008d7c:	9301      	str	r3, [sp, #4]
 8008d7e:	78bb      	ldrb	r3, [r7, #2]
 8008d80:	9300      	str	r3, [sp, #0]
 8008d82:	2302      	movs	r3, #2
 8008d84:	2106      	movs	r1, #6
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fe8a 	bl	8009aa0 <USBH_AC_GetCur>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	f000 808f 	beq.w	8008eb6 <USBH_AUDIO_CSRequest+0x186>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	2204      	movs	r2, #4
 8008d9c:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8008daa:	3302      	adds	r3, #2
 8008dac:	881b      	ldrh	r3, [r3, #0]
 8008dae:	021b      	lsls	r3, r3, #8
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	4313      	orrs	r3, r2
 8008db4:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volume = (uint32_t)VolumeCtl;
 8008db6:	897a      	ldrh	r2, [r7, #10]
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
      }
      break;
 8008dbe:	e07a      	b.n	8008eb6 <USBH_AUDIO_CSRequest+0x186>

    case AUDIO_REQ_GET_MIN_VOLUME:
      req_status = USBH_AC_GetMin(phost,
 8008dc0:	78fa      	ldrb	r2, [r7, #3]
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	9301      	str	r3, [sp, #4]
 8008dc6:	78bb      	ldrb	r3, [r7, #2]
 8008dc8:	9300      	str	r3, [sp, #0]
 8008dca:	2302      	movs	r3, #2
 8008dcc:	2106      	movs	r1, #6
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f001 f82b 	bl	8009e2a <USBH_AC_GetMin>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8008dd8:	7bfb      	ldrb	r3, [r7, #15]
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d06d      	beq.n	8008eba <USBH_AUDIO_CSRequest+0x18a>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	2205      	movs	r2, #5
 8008de2:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8008df0:	3302      	adds	r3, #2
 8008df2:	881b      	ldrh	r3, [r3, #0]
 8008df4:	021b      	lsls	r3, r3, #8
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMin = (uint32_t)VolumeCtl;
 8008dfc:	897a      	ldrh	r2, [r7, #10]
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
      }
      break;
 8008e04:	e059      	b.n	8008eba <USBH_AUDIO_CSRequest+0x18a>

    case AUDIO_REQ_GET_MAX_VOLUME:
      req_status = USBH_AC_GetMax(phost,
 8008e06:	78fa      	ldrb	r2, [r7, #3]
 8008e08:	2302      	movs	r3, #2
 8008e0a:	9301      	str	r3, [sp, #4]
 8008e0c:	78bb      	ldrb	r3, [r7, #2]
 8008e0e:	9300      	str	r3, [sp, #0]
 8008e10:	2302      	movs	r3, #2
 8008e12:	2106      	movs	r1, #6
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 feda 	bl	8009bce <USBH_AC_GetMax>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d04c      	beq.n	8008ebe <USBH_AUDIO_CSRequest+0x18e>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	2207      	movs	r2, #7
 8008e28:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8008e36:	3302      	adds	r3, #2
 8008e38:	881b      	ldrh	r3, [r3, #0]
 8008e3a:	021b      	lsls	r3, r3, #8
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 8008e42:	897a      	ldrh	r2, [r7, #10]
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d231      	bcs.n	8008ebe <USBH_AUDIO_CSRequest+0x18e>
        {
          AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00U;
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8008e60:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        }
      }
      break;
 8008e64:	e02b      	b.n	8008ebe <USBH_AUDIO_CSRequest+0x18e>

    case AUDIO_REQ_GET_RESOLUTION:
      req_status = USBH_AC_GetRes(phost,
 8008e66:	78fa      	ldrb	r2, [r7, #3]
 8008e68:	2302      	movs	r3, #2
 8008e6a:	9301      	str	r3, [sp, #4]
 8008e6c:	78bb      	ldrb	r3, [r7, #2]
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	2302      	movs	r3, #2
 8008e72:	2106      	movs	r1, #6
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 ff41 	bl	8009cfc <USBH_AC_GetRes>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);                /* length   */
      if (req_status != USBH_BUSY)
 8008e7e:	7bfb      	ldrb	r3, [r7, #15]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d01e      	beq.n	8008ec2 <USBH_AUDIO_CSRequest+0x192>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	2208      	movs	r2, #8
 8008e88:	705a      	strb	r2, [r3, #1]
        ResolutionCtl = LE16(&AUDIO_Handle->mem[0]);
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8008e96:	3302      	adds	r3, #2
 8008e98:	881b      	ldrh	r3, [r3, #0]
 8008e9a:	021b      	lsls	r3, r3, #8
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	81bb      	strh	r3, [r7, #12]
        AUDIO_Handle->headphone.attribute.resolution = (uint32_t)ResolutionCtl;
 8008ea2:	89ba      	ldrh	r2, [r7, #12]
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
      }
      break;
 8008eaa:	e00a      	b.n	8008ec2 <USBH_AUDIO_CSRequest+0x192>


    case AUDIO_REQ_CS_IDLE:
      status = USBH_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	75fb      	strb	r3, [r7, #23]
      break;
 8008eb0:	e008      	b.n	8008ec4 <USBH_AUDIO_CSRequest+0x194>

    default:
      break;
 8008eb2:	bf00      	nop
 8008eb4:	e006      	b.n	8008ec4 <USBH_AUDIO_CSRequest+0x194>
      break;
 8008eb6:	bf00      	nop
 8008eb8:	e004      	b.n	8008ec4 <USBH_AUDIO_CSRequest+0x194>
      break;
 8008eba:	bf00      	nop
 8008ebc:	e002      	b.n	8008ec4 <USBH_AUDIO_CSRequest+0x194>
      break;
 8008ebe:	bf00      	nop
 8008ec0:	e000      	b.n	8008ec4 <USBH_AUDIO_CSRequest+0x194>
      break;
 8008ec2:	bf00      	nop
  }
  return status;
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3718      	adds	r7, #24
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop

08008ed0 <USBH_AUDIO_HandleCSRequest>:
  *         and associated channels for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_HandleCSRequest(USBH_HandleTypeDef *phost)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_BUSY;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef cs_status = USBH_BUSY;
 8008edc:	2301      	movs	r3, #1
 8008ede:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008ee6:	69db      	ldr	r3, [r3, #28]
 8008ee8:	60bb      	str	r3, [r7, #8]

  cs_status = USBH_AUDIO_CSRequest(phost,
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	f893 11a0 	ldrb.w	r1, [r3, #416]	@ 0x1a0
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7ff ff19 	bl	8008d30 <USBH_AUDIO_CSRequest>
 8008efe:	4603      	mov	r3, r0
 8008f00:	73bb      	strb	r3, [r7, #14]
                                   AUDIO_Handle->temp_feature,
                                   AUDIO_Handle->temp_channels);

  if (cs_status != USBH_BUSY)
 8008f02:	7bbb      	ldrb	r3, [r7, #14]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d01c      	beq.n	8008f42 <USBH_AUDIO_HandleCSRequest+0x72>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d10c      	bne.n	8008f2c <USBH_AUDIO_HandleCSRequest+0x5c>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
      AUDIO_Handle->temp_channels = 0U;
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
      status = USBH_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	73fb      	strb	r3, [r7, #15]
 8008f2a:	e007      	b.n	8008f3c <USBH_AUDIO_HandleCSRequest+0x6c>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 8008f32:	3b01      	subs	r3, #1
 8008f34:	b2da      	uxtb	r2, r3
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	2206      	movs	r2, #6
 8008f40:	705a      	strb	r2, [r3, #1]
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }

  return status;
 8008f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <USBH_AUDIO_Process>:
  *         The function is for managing state machine for Audio data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Process(USBH_HandleTypeDef *phost)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008f54:	2301      	movs	r3, #1
 8008f56:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008f5e:	69db      	ldr	r3, [r3, #28]
 8008f60:	60bb      	str	r3, [r7, #8]

  if (AUDIO_Handle->headphone.supported == 1U)
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d102      	bne.n	8008f72 <USBH_AUDIO_Process+0x26>
  {
    (void)USBH_AUDIO_OutputStream(phost);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f001 f8dd 	bl	800a12c <USBH_AUDIO_OutputStream>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d102      	bne.n	8008f82 <USBH_AUDIO_Process+0x36>
  {
    (void)USBH_AUDIO_InputStream(phost);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f001 f813 	bl	8009fa8 <USBH_AUDIO_InputStream>
  }

  return status;
 8008f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBH_AUDIO_SOFProcess>:
  *         The function is for managing the SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	370c      	adds	r7, #12
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr

08008fa2 <USBH_AUDIO_FindAudioStreamingIN>:
  * @brief  Find IN Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingIN(USBH_HandleTypeDef *phost)
{
 8008fa2:	b480      	push	{r7}
 8008fa4:	b085      	sub	sp, #20
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL;
 8008faa:	2302      	movs	r3, #2
 8008fac:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008fb4:	69db      	ldr	r3, [r3, #28]
 8008fb6:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	73fb      	strb	r3, [r7, #15]
 8008fc0:	e09e      	b.n	8009100 <USBH_AUDIO_FindAudioStreamingIN+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	211a      	movs	r1, #26
 8008fc8:	fb01 f303 	mul.w	r3, r1, r3
 8008fcc:	4413      	add	r3, r2
 8008fce:	f203 3347 	addw	r3, r3, #839	@ 0x347
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	f040 8090 	bne.w	80090fa <USBH_AUDIO_FindAudioStreamingIN+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	211a      	movs	r1, #26
 8008fe0:	fb01 f303 	mul.w	r3, r1, r3
 8008fe4:	4413      	add	r3, r2
 8008fe6:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8008fea:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	f040 8084 	bne.w	80090fa <USBH_AUDIO_FindAudioStreamingIN+0x158>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U) &&
 8008ff2:	7bfb      	ldrb	r3, [r7, #15]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	211a      	movs	r1, #26
 8008ff8:	fb01 f303 	mul.w	r3, r1, r3
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	b25b      	sxtb	r3, r3
 8009006:	2b00      	cmp	r3, #0
 8009008:	da77      	bge.n	80090fa <USBH_AUDIO_FindAudioStreamingIN+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 800900a:	7bfb      	ldrb	r3, [r7, #15]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	211a      	movs	r1, #26
 8009010:	fb01 f303 	mul.w	r3, r1, r3
 8009014:	4413      	add	r3, r2
 8009016:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800901a:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U) &&
 800901c:	2b00      	cmp	r3, #0
 800901e:	d06c      	beq.n	80090fa <USBH_AUDIO_FindAudioStreamingIN+0x158>
      {
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009020:	7bfb      	ldrb	r3, [r7, #15]
 8009022:	7bba      	ldrb	r2, [r7, #14]
 8009024:	6879      	ldr	r1, [r7, #4]
 8009026:	201a      	movs	r0, #26
 8009028:	fb00 f303 	mul.w	r3, r0, r3
 800902c:	440b      	add	r3, r1
 800902e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009032:	7818      	ldrb	r0, [r3, #0]
 8009034:	68b9      	ldr	r1, [r7, #8]
 8009036:	4613      	mov	r3, r2
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	4413      	add	r3, r2
 800903c:	005b      	lsls	r3, r3, #1
 800903e:	440b      	add	r3, r1
 8009040:	3306      	adds	r3, #6
 8009042:	4602      	mov	r2, r0
 8009044:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009046:	7bfb      	ldrb	r3, [r7, #15]
 8009048:	7bba      	ldrb	r2, [r7, #14]
 800904a:	6879      	ldr	r1, [r7, #4]
 800904c:	201a      	movs	r0, #26
 800904e:	fb00 f303 	mul.w	r3, r0, r3
 8009052:	440b      	add	r3, r1
 8009054:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009058:	8818      	ldrh	r0, [r3, #0]
 800905a:	68b9      	ldr	r1, [r7, #8]
 800905c:	4613      	mov	r3, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	4413      	add	r3, r2
 8009062:	005b      	lsls	r3, r3, #1
 8009064:	440b      	add	r3, r1
 8009066:	3308      	adds	r3, #8
 8009068:	4602      	mov	r2, r0
 800906a:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 800906c:	7bfb      	ldrb	r3, [r7, #15]
 800906e:	7bba      	ldrb	r2, [r7, #14]
 8009070:	6879      	ldr	r1, [r7, #4]
 8009072:	201a      	movs	r0, #26
 8009074:	fb00 f303 	mul.w	r3, r0, r3
 8009078:	440b      	add	r3, r1
 800907a:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 800907e:	7818      	ldrb	r0, [r3, #0]
 8009080:	68b9      	ldr	r1, [r7, #8]
 8009082:	4613      	mov	r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	005b      	lsls	r3, r3, #1
 800908a:	440b      	add	r3, r1
 800908c:	330b      	adds	r3, #11
 800908e:	4602      	mov	r2, r0
 8009090:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8009092:	7bfb      	ldrb	r3, [r7, #15]
 8009094:	7bba      	ldrb	r2, [r7, #14]
 8009096:	6879      	ldr	r1, [r7, #4]
 8009098:	201a      	movs	r0, #26
 800909a:	fb00 f303 	mul.w	r3, r0, r3
 800909e:	440b      	add	r3, r1
 80090a0:	f203 3345 	addw	r3, r3, #837	@ 0x345
 80090a4:	7818      	ldrb	r0, [r3, #0]
 80090a6:	68b9      	ldr	r1, [r7, #8]
 80090a8:	4613      	mov	r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4413      	add	r3, r2
 80090ae:	005b      	lsls	r3, r3, #1
 80090b0:	440b      	add	r3, r1
 80090b2:	330a      	adds	r3, #10
 80090b4:	4602      	mov	r2, r0
 80090b6:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80090b8:	7bfb      	ldrb	r3, [r7, #15]
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	211a      	movs	r1, #26
 80090be:	fb01 f303 	mul.w	r3, r1, r3
 80090c2:	4413      	add	r3, r2
 80090c4:	f203 3352 	addw	r3, r3, #850	@ 0x352
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	7bba      	ldrb	r2, [r7, #14]
 80090cc:	4618      	mov	r0, r3
 80090ce:	68b9      	ldr	r1, [r7, #8]
 80090d0:	4613      	mov	r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	4413      	add	r3, r2
 80090d6:	005b      	lsls	r3, r3, #1
 80090d8:	440b      	add	r3, r1
 80090da:	330e      	adds	r3, #14
 80090dc:	4602      	mov	r2, r0
 80090de:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].valid = 1U;
 80090e0:	7bba      	ldrb	r2, [r7, #14]
 80090e2:	68b9      	ldr	r1, [r7, #8]
 80090e4:	4613      	mov	r3, r2
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	4413      	add	r3, r2
 80090ea:	005b      	lsls	r3, r3, #1
 80090ec:	440b      	add	r3, r1
 80090ee:	330c      	adds	r3, #12
 80090f0:	2201      	movs	r2, #1
 80090f2:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 80090f4:	7bbb      	ldrb	r3, [r7, #14]
 80090f6:	3301      	adds	r3, #1
 80090f8:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80090fa:	7bfb      	ldrb	r3, [r7, #15]
 80090fc:	3301      	adds	r3, #1
 80090fe:	73fb      	strb	r3, [r7, #15]
 8009100:	7bfb      	ldrb	r3, [r7, #15]
 8009102:	2b09      	cmp	r3, #9
 8009104:	f67f af5d 	bls.w	8008fc2 <USBH_AUDIO_FindAudioStreamingIN+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 8009108:	7bbb      	ldrb	r3, [r7, #14]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d001      	beq.n	8009112 <USBH_AUDIO_FindAudioStreamingIN+0x170>
  {
    status = USBH_OK;
 800910e:	2300      	movs	r3, #0
 8009110:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8009112:	7b7b      	ldrb	r3, [r7, #13]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3714      	adds	r7, #20
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <USBH_AUDIO_FindAudioStreamingOUT>:
  * @brief  Find OUT Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingOUT(USBH_HandleTypeDef *phost)
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL;
 8009128:	2302      	movs	r3, #2
 800912a:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8009132:	69db      	ldr	r3, [r3, #28]
 8009134:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 8009136:	2300      	movs	r3, #0
 8009138:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800913a:	2300      	movs	r3, #0
 800913c:	73fb      	strb	r3, [r7, #15]
 800913e:	e09e      	b.n	800927e <USBH_AUDIO_FindAudioStreamingOUT+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8009140:	7bfb      	ldrb	r3, [r7, #15]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	211a      	movs	r1, #26
 8009146:	fb01 f303 	mul.w	r3, r1, r3
 800914a:	4413      	add	r3, r2
 800914c:	f203 3347 	addw	r3, r3, #839	@ 0x347
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	2b01      	cmp	r3, #1
 8009154:	f040 8090 	bne.w	8009278 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8009158:	7bfb      	ldrb	r3, [r7, #15]
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	211a      	movs	r1, #26
 800915e:	fb01 f303 	mul.w	r3, r1, r3
 8009162:	4413      	add	r3, r2
 8009164:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8009168:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 800916a:	2b02      	cmp	r3, #2
 800916c:	f040 8084 	bne.w	8009278 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 8009170:	7bfb      	ldrb	r3, [r7, #15]
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	211a      	movs	r1, #26
 8009176:	fb01 f303 	mul.w	r3, r1, r3
 800917a:	4413      	add	r3, r2
 800917c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	b25b      	sxtb	r3, r3
 8009184:	2b00      	cmp	r3, #0
 8009186:	db77      	blt.n	8009278 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8009188:	7bfb      	ldrb	r3, [r7, #15]
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	211a      	movs	r1, #26
 800918e:	fb01 f303 	mul.w	r3, r1, r3
 8009192:	4413      	add	r3, r2
 8009194:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009198:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 800919a:	2b00      	cmp	r3, #0
 800919c:	d06c      	beq.n	8009278 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
      {
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800919e:	7bfb      	ldrb	r3, [r7, #15]
 80091a0:	7bba      	ldrb	r2, [r7, #14]
 80091a2:	6879      	ldr	r1, [r7, #4]
 80091a4:	201a      	movs	r0, #26
 80091a6:	fb00 f303 	mul.w	r3, r0, r3
 80091aa:	440b      	add	r3, r1
 80091ac:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80091b0:	7818      	ldrb	r0, [r3, #0]
 80091b2:	68b9      	ldr	r1, [r7, #8]
 80091b4:	4613      	mov	r3, r2
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	4413      	add	r3, r2
 80091ba:	005b      	lsls	r3, r3, #1
 80091bc:	440b      	add	r3, r1
 80091be:	3338      	adds	r3, #56	@ 0x38
 80091c0:	4602      	mov	r2, r0
 80091c2:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80091c4:	7bfb      	ldrb	r3, [r7, #15]
 80091c6:	7bba      	ldrb	r2, [r7, #14]
 80091c8:	6879      	ldr	r1, [r7, #4]
 80091ca:	201a      	movs	r0, #26
 80091cc:	fb00 f303 	mul.w	r3, r0, r3
 80091d0:	440b      	add	r3, r1
 80091d2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80091d6:	8818      	ldrh	r0, [r3, #0]
 80091d8:	68b9      	ldr	r1, [r7, #8]
 80091da:	4613      	mov	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	005b      	lsls	r3, r3, #1
 80091e2:	440b      	add	r3, r1
 80091e4:	333a      	adds	r3, #58	@ 0x3a
 80091e6:	4602      	mov	r2, r0
 80091e8:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
 80091ec:	7bba      	ldrb	r2, [r7, #14]
 80091ee:	6879      	ldr	r1, [r7, #4]
 80091f0:	201a      	movs	r0, #26
 80091f2:	fb00 f303 	mul.w	r3, r0, r3
 80091f6:	440b      	add	r3, r1
 80091f8:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 80091fc:	7818      	ldrb	r0, [r3, #0]
 80091fe:	68b9      	ldr	r1, [r7, #8]
 8009200:	4613      	mov	r3, r2
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	4413      	add	r3, r2
 8009206:	005b      	lsls	r3, r3, #1
 8009208:	440b      	add	r3, r1
 800920a:	333d      	adds	r3, #61	@ 0x3d
 800920c:	4602      	mov	r2, r0
 800920e:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8009210:	7bfb      	ldrb	r3, [r7, #15]
 8009212:	7bba      	ldrb	r2, [r7, #14]
 8009214:	6879      	ldr	r1, [r7, #4]
 8009216:	201a      	movs	r0, #26
 8009218:	fb00 f303 	mul.w	r3, r0, r3
 800921c:	440b      	add	r3, r1
 800921e:	f203 3345 	addw	r3, r3, #837	@ 0x345
 8009222:	7818      	ldrb	r0, [r3, #0]
 8009224:	68b9      	ldr	r1, [r7, #8]
 8009226:	4613      	mov	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4413      	add	r3, r2
 800922c:	005b      	lsls	r3, r3, #1
 800922e:	440b      	add	r3, r1
 8009230:	333c      	adds	r3, #60	@ 0x3c
 8009232:	4602      	mov	r2, r0
 8009234:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8009236:	7bfb      	ldrb	r3, [r7, #15]
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	211a      	movs	r1, #26
 800923c:	fb01 f303 	mul.w	r3, r1, r3
 8009240:	4413      	add	r3, r2
 8009242:	f203 3352 	addw	r3, r3, #850	@ 0x352
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	7bba      	ldrb	r2, [r7, #14]
 800924a:	4618      	mov	r0, r3
 800924c:	68b9      	ldr	r1, [r7, #8]
 800924e:	4613      	mov	r3, r2
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	4413      	add	r3, r2
 8009254:	005b      	lsls	r3, r3, #1
 8009256:	440b      	add	r3, r1
 8009258:	3340      	adds	r3, #64	@ 0x40
 800925a:	4602      	mov	r2, r0
 800925c:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].valid = 1U;
 800925e:	7bba      	ldrb	r2, [r7, #14]
 8009260:	68b9      	ldr	r1, [r7, #8]
 8009262:	4613      	mov	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4413      	add	r3, r2
 8009268:	005b      	lsls	r3, r3, #1
 800926a:	440b      	add	r3, r1
 800926c:	333e      	adds	r3, #62	@ 0x3e
 800926e:	2201      	movs	r2, #1
 8009270:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8009272:	7bbb      	ldrb	r3, [r7, #14]
 8009274:	3301      	adds	r3, #1
 8009276:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8009278:	7bfb      	ldrb	r3, [r7, #15]
 800927a:	3301      	adds	r3, #1
 800927c:	73fb      	strb	r3, [r7, #15]
 800927e:	7bfb      	ldrb	r3, [r7, #15]
 8009280:	2b09      	cmp	r3, #9
 8009282:	f67f af5d 	bls.w	8009140 <USBH_AUDIO_FindAudioStreamingOUT+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 8009286:	7bbb      	ldrb	r3, [r7, #14]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <USBH_AUDIO_FindAudioStreamingOUT+0x170>
  {
    status = USBH_OK;
 800928c:	2300      	movs	r3, #0
 800928e:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8009290:	7b7b      	ldrb	r3, [r7, #13]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3714      	adds	r7, #20
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr

0800929e <USBH_AUDIO_FindHIDControl>:
  * @brief  Find HID Control interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindHIDControl(USBH_HandleTypeDef *phost)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b084      	sub	sp, #16
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  uint8_t interface;
  USBH_StatusTypeDef status = USBH_FAIL;
 80092a6:	2302      	movs	r3, #2
 80092a8:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 80092b0:	69db      	ldr	r3, [r3, #28]
 80092b2:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOCONTROL  interface */
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFFU);
 80092b4:	23ff      	movs	r3, #255	@ 0xff
 80092b6:	2201      	movs	r2, #1
 80092b8:	2101      	movs	r1, #1
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f001 f9f5 	bl	800a6aa <USBH_FindInterface>
 80092c0:	4603      	mov	r3, r0
 80092c2:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES))
 80092c4:	7bfb      	ldrb	r3, [r7, #15]
 80092c6:	2bff      	cmp	r3, #255	@ 0xff
 80092c8:	d002      	beq.n	80092d0 <USBH_AUDIO_FindHIDControl+0x32>
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
 80092cc:	2b09      	cmp	r3, #9
 80092ce:	d901      	bls.n	80092d4 <USBH_AUDIO_FindHIDControl+0x36>
  {
    return USBH_FAIL;
 80092d0:	2302      	movs	r3, #2
 80092d2:	e062      	b.n	800939a <USBH_AUDIO_FindHIDControl+0xfc>
  }

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80092d4:	2300      	movs	r3, #0
 80092d6:	73fb      	strb	r3, [r7, #15]
 80092d8:	e05b      	b.n	8009392 <USBH_AUDIO_FindHIDControl+0xf4>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 80092da:	7bfb      	ldrb	r3, [r7, #15]
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	211a      	movs	r1, #26
 80092e0:	fb01 f303 	mul.w	r3, r1, r3
 80092e4:	4413      	add	r3, r2
 80092e6:	f203 3347 	addw	r3, r3, #839	@ 0x347
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	2b03      	cmp	r3, #3
 80092ee:	d14d      	bne.n	800938c <USBH_AUDIO_FindHIDControl+0xee>
        (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 80092f0:	7bfb      	ldrb	r3, [r7, #15]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	211a      	movs	r1, #26
 80092f6:	fb01 f303 	mul.w	r3, r1, r3
 80092fa:	4413      	add	r3, r2
 80092fc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009300:	881b      	ldrh	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8009302:	2b00      	cmp	r3, #0
 8009304:	d042      	beq.n	800938c <USBH_AUDIO_FindHIDControl+0xee>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x80U)
 8009306:	7bfb      	ldrb	r3, [r7, #15]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	211a      	movs	r1, #26
 800930c:	fb01 f303 	mul.w	r3, r1, r3
 8009310:	4413      	add	r3, r2
 8009312:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	b25b      	sxtb	r3, r3
 800931a:	2b00      	cmp	r3, #0
 800931c:	da36      	bge.n	800938c <USBH_AUDIO_FindHIDControl+0xee>
      {
        AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800931e:	7bfb      	ldrb	r3, [r7, #15]
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	211a      	movs	r1, #26
 8009324:	fb01 f303 	mul.w	r3, r1, r3
 8009328:	4413      	add	r3, r2
 800932a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800932e:	781a      	ldrb	r2, [r3, #0]
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
        AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009336:	7bfb      	ldrb	r3, [r7, #15]
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	211a      	movs	r1, #26
 800933c:	fb01 f303 	mul.w	r3, r1, r3
 8009340:	4413      	add	r3, r2
 8009342:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009346:	881a      	ldrh	r2, [r3, #0]
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	f8a3 2186 	strh.w	r2, [r3, #390]	@ 0x186
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 800934e:	7bfb      	ldrb	r3, [r7, #15]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	211a      	movs	r1, #26
 8009354:	fb01 f303 	mul.w	r3, r1, r3
 8009358:	4413      	add	r3, r2
 800935a:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 800935e:	781a      	ldrb	r2, [r3, #0]
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
        AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8009366:	7bfb      	ldrb	r3, [r7, #15]
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	211a      	movs	r1, #26
 800936c:	fb01 f303 	mul.w	r3, r1, r3
 8009370:	4413      	add	r3, r2
 8009372:	f203 3352 	addw	r3, r3, #850	@ 0x352
 8009376:	781a      	ldrb	r2, [r3, #0]
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	f883 218b 	strb.w	r2, [r3, #395]	@ 0x18b
        AUDIO_Handle->control.supported = 1U;
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	2201      	movs	r2, #1
 8009382:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
        status = USBH_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	73bb      	strb	r3, [r7, #14]
        break;
 800938a:	e005      	b.n	8009398 <USBH_AUDIO_FindHIDControl+0xfa>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800938c:	7bfb      	ldrb	r3, [r7, #15]
 800938e:	3301      	adds	r3, #1
 8009390:	73fb      	strb	r3, [r7, #15]
 8009392:	7bfb      	ldrb	r3, [r7, #15]
 8009394:	2b09      	cmp	r3, #9
 8009396:	d9a0      	bls.n	80092da <USBH_AUDIO_FindHIDControl+0x3c>
      }
    }
  }

  return status;
 8009398:	7bbb      	ldrb	r3, [r7, #14]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <USBH_AUDIO_ParseCSDescriptors>:
  * @brief  Parse AC and interfaces Descriptors
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ParseCSDescriptors(USBH_HandleTypeDef *phost)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b088      	sub	sp, #32
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80093aa:	2300      	movs	r3, #0
 80093ac:	77fb      	strb	r3, [r7, #31]
  USBH_DescHeader_t            *pdesc;
  uint16_t                      ptr;
  uint8_t                       itf_index = 0U;
 80093ae:	2300      	movs	r3, #0
 80093b0:	75fb      	strb	r3, [r7, #23]
  uint8_t                       itf_number = 0U;
 80093b2:	2300      	movs	r3, #0
 80093b4:	75bb      	strb	r3, [r7, #22]
  uint8_t                       alt_setting;
  AUDIO_HandleTypeDef           *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	613b      	str	r3, [r7, #16]
  pdesc   = (USBH_DescHeader_t *)(void *)(phost->device.CfgDesc_Raw);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	331c      	adds	r3, #28
 80093c4:	61bb      	str	r3, [r7, #24]
  ptr = USB_LEN_CFG_DESC;
 80093c6:	2309      	movs	r3, #9
 80093c8:	81bb      	strh	r3, [r7, #12]

  AUDIO_Handle->class_desc.FeatureUnitNum = 0U;
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
  AUDIO_Handle->class_desc.InputTerminalNum = 0U;
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f8a3 20ea 	strh.w	r2, [r3, #234]	@ 0xea
  AUDIO_Handle->class_desc.OutputTerminalNum = 0U;
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	2200      	movs	r2, #0
 80093de:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
  AUDIO_Handle->class_desc.ASNum = 0U;
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8

  while (ptr < phost->device.CfgDesc.wTotalLength)
 80093ea:	e03c      	b.n	8009466 <USBH_AUDIO_ParseCSDescriptors+0xc4>
  {
    pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80093ec:	f107 030c 	add.w	r3, r7, #12
 80093f0:	4619      	mov	r1, r3
 80093f2:	69b8      	ldr	r0, [r7, #24]
 80093f4:	f002 fa85 	bl	800b902 <USBH_GetNextDesc>
 80093f8:	61b8      	str	r0, [r7, #24]

    switch (pdesc->bDescriptorType)
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	785b      	ldrb	r3, [r3, #1]
 80093fe:	2b04      	cmp	r3, #4
 8009400:	d002      	beq.n	8009408 <USBH_AUDIO_ParseCSDescriptors+0x66>
 8009402:	2b24      	cmp	r3, #36	@ 0x24
 8009404:	d00f      	beq.n	8009426 <USBH_AUDIO_ParseCSDescriptors+0x84>
          }
        }
        break;

      default:
        break;
 8009406:	e02e      	b.n	8009466 <USBH_AUDIO_ParseCSDescriptors+0xc4>
        itf_number = *((uint8_t *)(void *)pdesc + 2U);
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	789b      	ldrb	r3, [r3, #2]
 800940c:	75bb      	strb	r3, [r7, #22]
        alt_setting = *((uint8_t *)(void *)pdesc + 3U);
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	78db      	ldrb	r3, [r3, #3]
 8009412:	73fb      	strb	r3, [r7, #15]
        itf_index = USBH_FindInterfaceIndex(phost, itf_number, alt_setting);
 8009414:	7bfa      	ldrb	r2, [r7, #15]
 8009416:	7dbb      	ldrb	r3, [r7, #22]
 8009418:	4619      	mov	r1, r3
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f001 f98b 	bl	800a736 <USBH_FindInterfaceIndex>
 8009420:	4603      	mov	r3, r0
 8009422:	75fb      	strb	r3, [r7, #23]
        break;
 8009424:	e01f      	b.n	8009466 <USBH_AUDIO_ParseCSDescriptors+0xc4>
        if (itf_number <= phost->device.CfgDesc.bNumInterfaces)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800942c:	7dba      	ldrb	r2, [r7, #22]
 800942e:	429a      	cmp	r2, r3
 8009430:	d818      	bhi.n	8009464 <USBH_AUDIO_ParseCSDescriptors+0xc2>
          if ((itf_index == 0xFFU) || (itf_index >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009432:	7dfb      	ldrb	r3, [r7, #23]
 8009434:	2bff      	cmp	r3, #255	@ 0xff
 8009436:	d002      	beq.n	800943e <USBH_AUDIO_ParseCSDescriptors+0x9c>
 8009438:	7dfb      	ldrb	r3, [r7, #23]
 800943a:	2b09      	cmp	r3, #9
 800943c:	d902      	bls.n	8009444 <USBH_AUDIO_ParseCSDescriptors+0xa2>
            status = USBH_FAIL;
 800943e:	2302      	movs	r3, #2
 8009440:	77fb      	strb	r3, [r7, #31]
        break;
 8009442:	e00f      	b.n	8009464 <USBH_AUDIO_ParseCSDescriptors+0xc2>
            (void)ParseCSDescriptors(&AUDIO_Handle->class_desc,
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 800944a:	7dfb      	ldrb	r3, [r7, #23]
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	211a      	movs	r1, #26
 8009450:	fb01 f303 	mul.w	r3, r1, r3
 8009454:	4413      	add	r3, r2
 8009456:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	69ba      	ldr	r2, [r7, #24]
 800945e:	4619      	mov	r1, r3
 8009460:	f000 f80c 	bl	800947c <ParseCSDescriptors>
        break;
 8009464:	bf00      	nop
  while (ptr < phost->device.CfgDesc.wTotalLength)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8b3 233a 	ldrh.w	r2, [r3, #826]	@ 0x33a
 800946c:	89bb      	ldrh	r3, [r7, #12]
 800946e:	429a      	cmp	r2, r3
 8009470:	d8bc      	bhi.n	80093ec <USBH_AUDIO_ParseCSDescriptors+0x4a>
    }
  }

  return status;
 8009472:	7ffb      	ldrb	r3, [r7, #31]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3720      	adds	r7, #32
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <ParseCSDescriptors>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef ParseCSDescriptors(AUDIO_ClassSpecificDescTypedef *class_desc,
                                             uint8_t ac_subclass,
                                             uint8_t *pdesc)
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	460b      	mov	r3, r1
 8009486:	607a      	str	r2, [r7, #4]
 8009488:	72fb      	strb	r3, [r7, #11]
  if (ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 800948a:	7afb      	ldrb	r3, [r7, #11]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d163      	bne.n	8009558 <ParseCSDescriptors+0xdc>
  {
    switch (pdesc[2])
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	3302      	adds	r3, #2
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	3b01      	subs	r3, #1
 8009498:	2b05      	cmp	r3, #5
 800949a:	f200 8081 	bhi.w	80095a0 <ParseCSDescriptors+0x124>
 800949e:	a201      	add	r2, pc, #4	@ (adr r2, 80094a4 <ParseCSDescriptors+0x28>)
 80094a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a4:	080094bd 	.word	0x080094bd
 80094a8:	080094c5 	.word	0x080094c5
 80094ac:	080094e1 	.word	0x080094e1
 80094b0:	0800953b 	.word	0x0800953b
 80094b4:	0800951d 	.word	0x0800951d
 80094b8:	080094ff 	.word	0x080094ff
    {
      case UAC_HEADER:
        class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)(void *)pdesc;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	601a      	str	r2, [r3, #0]
        break;
 80094c2:	e06e      	b.n	80095a2 <ParseCSDescriptors+0x126>

      case UAC_INPUT_TERMINAL:
        class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef *)(void *)pdesc;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 80094ca:	1c5a      	adds	r2, r3, #1
 80094cc:	b291      	uxth	r1, r2
 80094ce:	68fa      	ldr	r2, [r7, #12]
 80094d0:	f8a2 107e 	strh.w	r1, [r2, #126]	@ 0x7e
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	4413      	add	r3, r2
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	605a      	str	r2, [r3, #4]
        break;
 80094de:	e060      	b.n	80095a2 <ParseCSDescriptors+0x126>

      case UAC_OUTPUT_TERMINAL:
        class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef *)(void *)pdesc;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80094e6:	1c5a      	adds	r2, r3, #1
 80094e8:	b291      	uxth	r1, r2
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	f8a2 1080 	strh.w	r1, [r2, #128]	@ 0x80
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	3304      	adds	r3, #4
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	4413      	add	r3, r2
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	605a      	str	r2, [r3, #4]
        break;
 80094fc:	e051      	b.n	80095a2 <ParseCSDescriptors+0x126>

      case UAC_FEATURE_UNIT:
        class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef *)(void *)pdesc;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8009504:	1c5a      	adds	r2, r3, #1
 8009506:	b291      	uxth	r1, r2
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	f8a2 1082 	strh.w	r1, [r2, #130]	@ 0x82
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	3308      	adds	r3, #8
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4413      	add	r3, r2
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	605a      	str	r2, [r3, #4]
        break;
 800951a:	e042      	b.n	80095a2 <ParseCSDescriptors+0x126>

      case UAC_SELECTOR_UNIT:
        class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef *)(void *)pdesc;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8009522:	1c5a      	adds	r2, r3, #1
 8009524:	b291      	uxth	r1, r2
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	f8a2 1084 	strh.w	r1, [r2, #132]	@ 0x84
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	3310      	adds	r3, #16
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	605a      	str	r2, [r3, #4]
        break;
 8009538:	e033      	b.n	80095a2 <ParseCSDescriptors+0x126>

      case UAC_MIXER_UNIT:
        class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef *)(void *)pdesc;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8009540:	1c5a      	adds	r2, r3, #1
 8009542:	b291      	uxth	r1, r2
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	f8a2 1086 	strh.w	r1, [r2, #134]	@ 0x86
 800954a:	68fa      	ldr	r2, [r7, #12]
 800954c:	330c      	adds	r3, #12
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4413      	add	r3, r2
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	605a      	str	r2, [r3, #4]
        break;
 8009556:	e024      	b.n	80095a2 <ParseCSDescriptors+0x126>
        break;
    }
  }
  else
  {
    if (ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 8009558:	7afb      	ldrb	r3, [r7, #11]
 800955a:	2b02      	cmp	r3, #2
 800955c:	d121      	bne.n	80095a2 <ParseCSDescriptors+0x126>
    {
      switch (pdesc[2])
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	3302      	adds	r3, #2
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d002      	beq.n	800956e <ParseCSDescriptors+0xf2>
 8009568:	2b02      	cmp	r3, #2
 800956a:	d00a      	beq.n	8009582 <ParseCSDescriptors+0x106>
          break;
        case UAC_FORMAT_TYPE:
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
          break;
        default:
          break;
 800956c:	e019      	b.n	80095a2 <ParseCSDescriptors+0x126>
          class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef *)(void *)pdesc;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	330a      	adds	r3, #10
 8009578:	00db      	lsls	r3, r3, #3
 800957a:	4413      	add	r3, r2
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	605a      	str	r2, [r3, #4]
          break;
 8009580:	e00f      	b.n	80095a2 <ParseCSDescriptors+0x126>
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8009588:	1c5a      	adds	r2, r3, #1
 800958a:	b291      	uxth	r1, r2
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	f8a2 107c 	strh.w	r1, [r2, #124]	@ 0x7c
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	330a      	adds	r3, #10
 8009596:	00db      	lsls	r3, r3, #3
 8009598:	4413      	add	r3, r2
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	609a      	str	r2, [r3, #8]
          break;
 800959e:	e000      	b.n	80095a2 <ParseCSDescriptors+0x126>
        break;
 80095a0:	bf00      	nop
      }
    }
  }

  return USBH_OK;
 80095a2:	2300      	movs	r3, #0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3714      	adds	r7, #20
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <USBH_AUDIO_FindLinkedUnit>:
  * @param  phost: Host handle
  * @param  UnitID: Unit identifier
  * @retval UnitID, Index and Type of the associated Unit
  */
static uint32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	460b      	mov	r3, r1
 80095ba:	70fb      	strb	r3, [r7, #3]
  uint8_t Index;
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 80095c2:	69db      	ldr	r3, [r3, #28]
 80095c4:	60bb      	str	r3, [r7, #8]

  /* Find Feature Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 80095c6:	2300      	movs	r3, #0
 80095c8:	73fb      	strb	r3, [r7, #15]
 80095ca:	e01b      	b.n	8009604 <USBH_AUDIO_FindLinkedUnit+0x54>
  {
    if (AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	3322      	adds	r3, #34	@ 0x22
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	4413      	add	r3, r2
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	791b      	ldrb	r3, [r3, #4]
 80095da:	78fa      	ldrb	r2, [r7, #3]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d10e      	bne.n	80095fe <USBH_AUDIO_FindLinkedUnit+0x4e>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bUnitID;
 80095e0:	7bfb      	ldrb	r3, [r7, #15]
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	3322      	adds	r3, #34	@ 0x22
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	4413      	add	r3, r2
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	78db      	ldrb	r3, [r3, #3]
 80095ee:	70fb      	strb	r3, [r7, #3]

      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
 80095f0:	78fb      	ldrb	r3, [r7, #3]
 80095f2:	041a      	lsls	r2, r3, #16
 80095f4:	7bfb      	ldrb	r3, [r7, #15]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80095fc:	e086      	b.n	800970c <USBH_AUDIO_FindLinkedUnit+0x15c>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 80095fe:	7bfb      	ldrb	r3, [r7, #15]
 8009600:	3301      	adds	r3, #1
 8009602:	73fb      	strb	r3, [r7, #15]
 8009604:	7bfb      	ldrb	r3, [r7, #15]
 8009606:	b29a      	uxth	r2, r3
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	@ 0xee
 800960e:	429a      	cmp	r2, r3
 8009610:	d3dc      	bcc.n	80095cc <USBH_AUDIO_FindLinkedUnit+0x1c>
    }
  }

  /* Find Mixer Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8009612:	2300      	movs	r3, #0
 8009614:	73fb      	strb	r3, [r7, #15]
 8009616:	e025      	b.n	8009664 <USBH_AUDIO_FindLinkedUnit+0xb4>
  {
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 8009618:	7bfb      	ldrb	r3, [r7, #15]
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	3326      	adds	r3, #38	@ 0x26
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	4413      	add	r3, r2
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	795b      	ldrb	r3, [r3, #5]
 8009626:	78fa      	ldrb	r2, [r7, #3]
 8009628:	429a      	cmp	r2, r3
 800962a:	d009      	beq.n	8009640 <USBH_AUDIO_FindLinkedUnit+0x90>
        (AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID1 == UnitID))
 800962c:	7bfb      	ldrb	r3, [r7, #15]
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	3326      	adds	r3, #38	@ 0x26
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	4413      	add	r3, r2
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	799b      	ldrb	r3, [r3, #6]
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 800963a:	78fa      	ldrb	r2, [r7, #3]
 800963c:	429a      	cmp	r2, r3
 800963e:	d10e      	bne.n	800965e <USBH_AUDIO_FindLinkedUnit+0xae>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bUnitID;
 8009640:	7bfb      	ldrb	r3, [r7, #15]
 8009642:	68ba      	ldr	r2, [r7, #8]
 8009644:	3326      	adds	r3, #38	@ 0x26
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	4413      	add	r3, r2
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	78db      	ldrb	r3, [r3, #3]
 800964e:	70fb      	strb	r3, [r7, #3]

      return (uint32_t)((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
 8009650:	78fb      	ldrb	r3, [r7, #3]
 8009652:	041a      	lsls	r2, r3, #16
 8009654:	7bfb      	ldrb	r3, [r7, #15]
 8009656:	4313      	orrs	r3, r2
 8009658:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800965c:	e056      	b.n	800970c <USBH_AUDIO_FindLinkedUnit+0x15c>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 800965e:	7bfb      	ldrb	r3, [r7, #15]
 8009660:	3301      	adds	r3, #1
 8009662:	73fb      	strb	r3, [r7, #15]
 8009664:	7bfb      	ldrb	r3, [r7, #15]
 8009666:	b29a      	uxth	r2, r3
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 800966e:	429a      	cmp	r2, r3
 8009670:	d3d2      	bcc.n	8009618 <USBH_AUDIO_FindLinkedUnit+0x68>
    }
  }

  /* Find Selector Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8009672:	2300      	movs	r3, #0
 8009674:	73fb      	strb	r3, [r7, #15]
 8009676:	e01b      	b.n	80096b0 <USBH_AUDIO_FindLinkedUnit+0x100>
  {
    if (AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 8009678:	7bfb      	ldrb	r3, [r7, #15]
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	332a      	adds	r3, #42	@ 0x2a
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	4413      	add	r3, r2
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	795b      	ldrb	r3, [r3, #5]
 8009686:	78fa      	ldrb	r2, [r7, #3]
 8009688:	429a      	cmp	r2, r3
 800968a:	d10e      	bne.n	80096aa <USBH_AUDIO_FindLinkedUnit+0xfa>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bUnitID;
 800968c:	7bfb      	ldrb	r3, [r7, #15]
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	332a      	adds	r3, #42	@ 0x2a
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	4413      	add	r3, r2
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	78db      	ldrb	r3, [r3, #3]
 800969a:	70fb      	strb	r3, [r7, #3]

      return (uint32_t)((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
 800969c:	78fb      	ldrb	r3, [r7, #3]
 800969e:	041a      	lsls	r2, r3, #16
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80096a8:	e030      	b.n	800970c <USBH_AUDIO_FindLinkedUnit+0x15c>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 80096aa:	7bfb      	ldrb	r3, [r7, #15]
 80096ac:	3301      	adds	r3, #1
 80096ae:	73fb      	strb	r3, [r7, #15]
 80096b0:	7bfb      	ldrb	r3, [r7, #15]
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d3dc      	bcc.n	8009678 <USBH_AUDIO_FindLinkedUnit+0xc8>
    }
  }

  /* Find Output Terminal Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 80096be:	2300      	movs	r3, #0
 80096c0:	73fb      	strb	r3, [r7, #15]
 80096c2:	e01b      	b.n	80096fc <USBH_AUDIO_FindLinkedUnit+0x14c>
  {
    if (AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 80096c4:	7bfb      	ldrb	r3, [r7, #15]
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	331e      	adds	r3, #30
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	4413      	add	r3, r2
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	79db      	ldrb	r3, [r3, #7]
 80096d2:	78fa      	ldrb	r2, [r7, #3]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d10e      	bne.n	80096f6 <USBH_AUDIO_FindLinkedUnit+0x146>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bTerminalID;
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
 80096da:	68ba      	ldr	r2, [r7, #8]
 80096dc:	331e      	adds	r3, #30
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	4413      	add	r3, r2
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	78db      	ldrb	r3, [r3, #3]
 80096e6:	70fb      	strb	r3, [r7, #3]

      return (uint32_t)((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
 80096e8:	78fb      	ldrb	r3, [r7, #3]
 80096ea:	041a      	lsls	r2, r3, #16
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80096f4:	e00a      	b.n	800970c <USBH_AUDIO_FindLinkedUnit+0x15c>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
 80096f8:	3301      	adds	r3, #1
 80096fa:	73fb      	strb	r3, [r7, #15]
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
 80096fe:	b29a      	uxth	r2, r3
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 8009706:	429a      	cmp	r2, r3
 8009708:	d3dc      	bcc.n	80096c4 <USBH_AUDIO_FindLinkedUnit+0x114>
    }
  }

  /* No associated Unit found return undefined ID 0x00*/
  return 0U;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3714      	adds	r7, #20
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <USBH_AUDIO_BuildMicrophonePath>:
  * @brief  Build full path for Microphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildMicrophonePath(USBH_HandleTypeDef *phost)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8009720:	2300      	movs	r3, #0
 8009722:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8009724:	2300      	movs	r3, #0
 8009726:	757b      	strb	r3, [r7, #21]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800972e:	69db      	ldr	r3, [r3, #28]
 8009730:	613b      	str	r3, [r7, #16]

  /*Find microphone IT*/
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8009732:	2300      	movs	r3, #0
 8009734:	75bb      	strb	r3, [r7, #22]
 8009736:	e02b      	b.n	8009790 <USBH_AUDIO_BuildMicrophonePath+0x78>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201U)
 8009738:	7dbb      	ldrb	r3, [r7, #22]
 800973a:	693a      	ldr	r2, [r7, #16]
 800973c:	331a      	adds	r3, #26
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	4413      	add	r3, r2
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	791b      	ldrb	r3, [r3, #4]
 8009746:	4619      	mov	r1, r3
 8009748:	7dbb      	ldrb	r3, [r7, #22]
 800974a:	693a      	ldr	r2, [r7, #16]
 800974c:	331a      	adds	r3, #26
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4413      	add	r3, r2
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	795b      	ldrb	r3, [r3, #5]
 8009756:	021b      	lsls	r3, r3, #8
 8009758:	b29b      	uxth	r3, r3
 800975a:	430b      	orrs	r3, r1
 800975c:	f240 2201 	movw	r2, #513	@ 0x201
 8009760:	4293      	cmp	r3, r2
 8009762:	d112      	bne.n	800978a <USBH_AUDIO_BuildMicrophonePath+0x72>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8009764:	7dbb      	ldrb	r3, [r7, #22]
 8009766:	693a      	ldr	r2, [r7, #16]
 8009768:	331a      	adds	r3, #26
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	4413      	add	r3, r2
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	78db      	ldrb	r3, [r3, #3]
 8009772:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8009774:	7dbb      	ldrb	r3, [r7, #22]
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	331a      	adds	r3, #26
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	79da      	ldrb	r2, [r3, #7]
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
      break;
 8009788:	e009      	b.n	800979e <USBH_AUDIO_BuildMicrophonePath+0x86>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 800978a:	7dbb      	ldrb	r3, [r7, #22]
 800978c:	3301      	adds	r3, #1
 800978e:	75bb      	strb	r3, [r7, #22]
 8009790:	7dbb      	ldrb	r3, [r7, #22]
 8009792:	b29a      	uxth	r2, r3
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	@ 0xea
 800979a:	429a      	cmp	r2, r3
 800979c:	d3cc      	bcc.n	8009738 <USBH_AUDIO_BuildMicrophonePath+0x20>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 800979e:	7dfb      	ldrb	r3, [r7, #23]
 80097a0:	4619      	mov	r1, r3
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7ff ff04 	bl	80095b0 <USBH_AUDIO_FindLinkedUnit>
 80097a8:	60f8      	str	r0, [r7, #12]

    if (value == 0U)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d101      	bne.n	80097b4 <USBH_AUDIO_BuildMicrophonePath+0x9c>
    {
      return USBH_FAIL;
 80097b0:	2302      	movs	r3, #2
 80097b2:	e035      	b.n	8009820 <USBH_AUDIO_BuildMicrophonePath+0x108>
    }

    Index = (uint8_t)(value & 0xFFU);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	72fb      	strb	r3, [r7, #11]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	0a1b      	lsrs	r3, r3, #8
 80097bc:	72bb      	strb	r3, [r7, #10]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	0c1b      	lsrs	r3, r3, #16
 80097c2:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 80097c4:	7abb      	ldrb	r3, [r7, #10]
 80097c6:	3b03      	subs	r3, #3
 80097c8:	2b03      	cmp	r3, #3
 80097ca:	d81f      	bhi.n	800980c <USBH_AUDIO_BuildMicrophonePath+0xf4>
 80097cc:	a201      	add	r2, pc, #4	@ (adr r2, 80097d4 <USBH_AUDIO_BuildMicrophonePath+0xbc>)
 80097ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d2:	bf00      	nop
 80097d4:	08009803 	.word	0x08009803
 80097d8:	080097ef 	.word	0x080097ef
 80097dc:	080097f9 	.word	0x080097f9
 80097e0:	080097e5 	.word	0x080097e5
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->microphone.asociated_feature = Index;
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	7afa      	ldrb	r2, [r7, #11]
 80097e8:	f883 214f 	strb.w	r2, [r3, #335]	@ 0x14f
        break;
 80097ec:	e011      	b.n	8009812 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->microphone.asociated_mixer = Index;
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	7afa      	ldrb	r2, [r7, #11]
 80097f2:	f883 214d 	strb.w	r2, [r3, #333]	@ 0x14d
        break;
 80097f6:	e00c      	b.n	8009812 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->microphone.asociated_selector = Index;
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	7afa      	ldrb	r2, [r7, #11]
 80097fc:	f883 214e 	strb.w	r2, [r3, #334]	@ 0x14e
        break;
 8009800:	e007      	b.n	8009812 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->microphone.asociated_terminal = Index;
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	7afa      	ldrb	r2, [r7, #11]
 8009806:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150
        break;
 800980a:	e002      	b.n	8009812 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      default:
        ret = USBH_FAIL;
 800980c:	2302      	movs	r3, #2
 800980e:	757b      	strb	r3, [r7, #21]
        break;
 8009810:	bf00      	nop
    }
  } while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8009812:	7abb      	ldrb	r3, [r7, #10]
 8009814:	2b03      	cmp	r3, #3
 8009816:	d002      	beq.n	800981e <USBH_AUDIO_BuildMicrophonePath+0x106>
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1bf      	bne.n	800979e <USBH_AUDIO_BuildMicrophonePath+0x86>

  return ret;
 800981e:	7d7b      	ldrb	r3, [r7, #21]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3718      	adds	r7, #24
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <USBH_AUDIO_BuildHeadphonePath>:
  * @brief  Build full path for Headphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildHeadphonePath(USBH_HandleTypeDef *phost)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8009830:	2300      	movs	r3, #0
 8009832:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	753b      	strb	r3, [r7, #20]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800983e:	69db      	ldr	r3, [r3, #28]
 8009840:	613b      	str	r3, [r7, #16]

  /* Find association between audio streaming and microphone */
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8009842:	2300      	movs	r3, #0
 8009844:	757b      	strb	r3, [r7, #21]
 8009846:	e02b      	b.n	80098a0 <USBH_AUDIO_BuildHeadphonePath+0x78>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101U)
 8009848:	7d7b      	ldrb	r3, [r7, #21]
 800984a:	693a      	ldr	r2, [r7, #16]
 800984c:	331a      	adds	r3, #26
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	791b      	ldrb	r3, [r3, #4]
 8009856:	4619      	mov	r1, r3
 8009858:	7d7b      	ldrb	r3, [r7, #21]
 800985a:	693a      	ldr	r2, [r7, #16]
 800985c:	331a      	adds	r3, #26
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4413      	add	r3, r2
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	795b      	ldrb	r3, [r3, #5]
 8009866:	021b      	lsls	r3, r3, #8
 8009868:	b29b      	uxth	r3, r3
 800986a:	430b      	orrs	r3, r1
 800986c:	f240 1201 	movw	r2, #257	@ 0x101
 8009870:	4293      	cmp	r3, r2
 8009872:	d112      	bne.n	800989a <USBH_AUDIO_BuildHeadphonePath+0x72>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8009874:	7d7b      	ldrb	r3, [r7, #21]
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	331a      	adds	r3, #26
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	4413      	add	r3, r2
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	78db      	ldrb	r3, [r3, #3]
 8009882:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8009884:	7d7b      	ldrb	r3, [r7, #21]
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	331a      	adds	r3, #26
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	4413      	add	r3, r2
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	79da      	ldrb	r2, [r3, #7]
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
      break;
 8009898:	e009      	b.n	80098ae <USBH_AUDIO_BuildHeadphonePath+0x86>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 800989a:	7d7b      	ldrb	r3, [r7, #21]
 800989c:	3301      	adds	r3, #1
 800989e:	757b      	strb	r3, [r7, #21]
 80098a0:	7d7b      	ldrb	r3, [r7, #21]
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	@ 0xea
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d3cc      	bcc.n	8009848 <USBH_AUDIO_BuildHeadphonePath+0x20>
    }
  }

  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 80098ae:	2300      	movs	r3, #0
 80098b0:	75bb      	strb	r3, [r7, #22]
 80098b2:	e011      	b.n	80098d8 <USBH_AUDIO_BuildHeadphonePath+0xb0>
  {
    if (AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 80098b4:	7dbb      	ldrb	r3, [r7, #22]
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	3317      	adds	r3, #23
 80098ba:	00db      	lsls	r3, r3, #3
 80098bc:	4413      	add	r3, r2
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	78db      	ldrb	r3, [r3, #3]
 80098c2:	7dfa      	ldrb	r2, [r7, #23]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d104      	bne.n	80098d2 <USBH_AUDIO_BuildHeadphonePath+0xaa>
    {
      AUDIO_Handle->headphone.asociated_as = Index;
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	7dba      	ldrb	r2, [r7, #22]
 80098cc:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
      break;
 80098d0:	e009      	b.n	80098e6 <USBH_AUDIO_BuildHeadphonePath+0xbe>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 80098d2:	7dbb      	ldrb	r3, [r7, #22]
 80098d4:	3301      	adds	r3, #1
 80098d6:	75bb      	strb	r3, [r7, #22]
 80098d8:	7dbb      	ldrb	r3, [r7, #22]
 80098da:	b29a      	uxth	r2, r3
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	@ 0xe8
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d3e6      	bcc.n	80098b4 <USBH_AUDIO_BuildHeadphonePath+0x8c>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 80098e6:	7dfb      	ldrb	r3, [r7, #23]
 80098e8:	4619      	mov	r1, r3
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7ff fe60 	bl	80095b0 <USBH_AUDIO_FindLinkedUnit>
 80098f0:	60f8      	str	r0, [r7, #12]

    if (value == 0U)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d101      	bne.n	80098fc <USBH_AUDIO_BuildHeadphonePath+0xd4>
    {
      return USBH_FAIL;
 80098f8:	2302      	movs	r3, #2
 80098fa:	e053      	b.n	80099a4 <USBH_AUDIO_BuildHeadphonePath+0x17c>
    }

    Index = (uint8_t)(value & 0xFFU);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	75bb      	strb	r3, [r7, #22]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	0a1b      	lsrs	r3, r3, #8
 8009904:	72fb      	strb	r3, [r7, #11]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	0c1b      	lsrs	r3, r3, #16
 800990a:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 800990c:	7afb      	ldrb	r3, [r7, #11]
 800990e:	3b03      	subs	r3, #3
 8009910:	2b03      	cmp	r3, #3
 8009912:	d83c      	bhi.n	800998e <USBH_AUDIO_BuildHeadphonePath+0x166>
 8009914:	a201      	add	r2, pc, #4	@ (adr r2, 800991c <USBH_AUDIO_BuildHeadphonePath+0xf4>)
 8009916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991a:	bf00      	nop
 800991c:	0800994b 	.word	0x0800994b
 8009920:	08009937 	.word	0x08009937
 8009924:	08009941 	.word	0x08009941
 8009928:	0800992d 	.word	0x0800992d
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->headphone.asociated_feature = Index;
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	7dba      	ldrb	r2, [r7, #22]
 8009930:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
        break;
 8009934:	e02f      	b.n	8009996 <USBH_AUDIO_BuildHeadphonePath+0x16e>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->headphone.asociated_mixer = Index;
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	7dba      	ldrb	r2, [r7, #22]
 800993a:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
        break;
 800993e:	e02a      	b.n	8009996 <USBH_AUDIO_BuildHeadphonePath+0x16e>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->headphone.asociated_selector = Index;
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	7dba      	ldrb	r2, [r7, #22]
 8009944:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
        break;
 8009948:	e025      	b.n	8009996 <USBH_AUDIO_BuildHeadphonePath+0x16e>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->headphone.asociated_terminal = Index;
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	7dba      	ldrb	r2, [r7, #22]
 800994e:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
        if (Index < AUDIO_MAX_NUM_OUT_TERMINAL)
 8009952:	7dbb      	ldrb	r3, [r7, #22]
 8009954:	2b03      	cmp	r3, #3
 8009956:	d817      	bhi.n	8009988 <USBH_AUDIO_BuildHeadphonePath+0x160>
        {
          if (LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103U)
 8009958:	7dbb      	ldrb	r3, [r7, #22]
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	331e      	adds	r3, #30
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	4413      	add	r3, r2
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	791b      	ldrb	r3, [r3, #4]
 8009966:	4619      	mov	r1, r3
 8009968:	7dbb      	ldrb	r3, [r7, #22]
 800996a:	693a      	ldr	r2, [r7, #16]
 800996c:	331e      	adds	r3, #30
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	4413      	add	r3, r2
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	795b      	ldrb	r3, [r3, #5]
 8009976:	021b      	lsls	r3, r3, #8
 8009978:	b29b      	uxth	r3, r3
 800997a:	430b      	orrs	r3, r1
 800997c:	f240 1203 	movw	r2, #259	@ 0x103
 8009980:	4293      	cmp	r3, r2
 8009982:	d007      	beq.n	8009994 <USBH_AUDIO_BuildHeadphonePath+0x16c>
          {
            return  USBH_OK;
 8009984:	2300      	movs	r3, #0
 8009986:	e00d      	b.n	80099a4 <USBH_AUDIO_BuildHeadphonePath+0x17c>
          }
        }
        else
        {
          ret = USBH_FAIL;
 8009988:	2302      	movs	r3, #2
 800998a:	753b      	strb	r3, [r7, #20]
        }
        break;
 800998c:	e002      	b.n	8009994 <USBH_AUDIO_BuildHeadphonePath+0x16c>

      default:
        ret = USBH_FAIL;
 800998e:	2302      	movs	r3, #2
 8009990:	753b      	strb	r3, [r7, #20]
        break;
 8009992:	e000      	b.n	8009996 <USBH_AUDIO_BuildHeadphonePath+0x16e>
        break;
 8009994:	bf00      	nop
    }
  } while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8009996:	7afb      	ldrb	r3, [r7, #11]
 8009998:	2b03      	cmp	r3, #3
 800999a:	d002      	beq.n	80099a2 <USBH_AUDIO_BuildHeadphonePath+0x17a>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1a1      	bne.n	80098e6 <USBH_AUDIO_BuildHeadphonePath+0xbe>

  return ret;
 80099a2:	7d3b      	ldrb	r3, [r7, #20]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3718      	adds	r7, #24
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <USBH_AC_SetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b086      	sub	sp, #24
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	4608      	mov	r0, r1
 80099b6:	4611      	mov	r1, r2
 80099b8:	461a      	mov	r2, r3
 80099ba:	4603      	mov	r3, r0
 80099bc:	70fb      	strb	r3, [r7, #3]
 80099be:	460b      	mov	r3, r1
 80099c0:	70bb      	strb	r3, [r7, #2]
 80099c2:	4613      	mov	r3, r2
 80099c4:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80099c6:	2300      	movs	r3, #0
 80099c8:	82fb      	strh	r3, [r7, #22]
 80099ca:	2300      	movs	r3, #0
 80099cc:	82bb      	strh	r3, [r7, #20]
 80099ce:	2300      	movs	r3, #0
 80099d0:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID, InterfaceNum;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 80099d8:	69db      	ldr	r3, [r3, #28]
 80099da:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef ret = USBH_OK;
 80099dc:	2300      	movs	r3, #0
 80099de:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 80099e0:	78fb      	ldrb	r3, [r7, #3]
 80099e2:	2b02      	cmp	r3, #2
 80099e4:	d002      	beq.n	80099ec <USBH_AC_SetCur+0x40>
 80099e6:	2b06      	cmp	r3, #6
 80099e8:	d018      	beq.n	8009a1c <USBH_AC_SetCur+0x70>
 80099ea:	e035      	b.n	8009a58 <USBH_AC_SetCur+0xac>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099f0:	78db      	ldrb	r3, [r3, #3]
 80099f2:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80099f4:	2300      	movs	r3, #0
 80099f6:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80099f8:	7afb      	ldrb	r3, [r7, #11]
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	021b      	lsls	r3, r3, #8
 80099fe:	b29a      	uxth	r2, r3
 8009a00:	7abb      	ldrb	r3, [r7, #10]
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	4313      	orrs	r3, r2
 8009a06:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8009a08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009a0c:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 8009a16:	2301      	movs	r3, #1
 8009a18:	827b      	strh	r3, [r7, #18]
      break;
 8009a1a:	e020      	b.n	8009a5e <USBH_AC_SetCur+0xb2>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8009a1c:	78bb      	ldrb	r3, [r7, #2]
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	3322      	adds	r3, #34	@ 0x22
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	78db      	ldrb	r3, [r3, #3]
 8009a2a:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8009a30:	7afb      	ldrb	r3, [r7, #11]
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	021b      	lsls	r3, r3, #8
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	7abb      	ldrb	r3, [r7, #10]
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8009a40:	787b      	ldrb	r3, [r7, #1]
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	021b      	lsls	r3, r3, #8
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8009a52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009a54:	827b      	strh	r3, [r7, #18]
      break;
 8009a56:	e002      	b.n	8009a5e <USBH_AC_SetCur+0xb2>

    default:
      ret = USBH_FAIL;
 8009a58:	2302      	movs	r3, #2
 8009a5a:	747b      	strb	r3, [r7, #17]
      break;
 8009a5c:	bf00      	nop
  }

  if (ret != USBH_OK)
 8009a5e:	7c7b      	ldrb	r3, [r7, #17]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d001      	beq.n	8009a68 <USBH_AC_SetCur+0xbc>
  {
    return ret;
 8009a64:	7c7b      	ldrb	r3, [r7, #17]
 8009a66:	e017      	b.n	8009a98 <USBH_AC_SetCur+0xec>
  }

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2221      	movs	r2, #33	@ 0x21
 8009a6c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2201      	movs	r2, #1
 8009a72:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	8afa      	ldrh	r2, [r7, #22]
 8009a78:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	8aba      	ldrh	r2, [r7, #20]
 8009a7e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	8a7a      	ldrh	r2, [r7, #18]
 8009a84:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8009a8c:	8a7a      	ldrh	r2, [r7, #18]
 8009a8e:	4619      	mov	r1, r3
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f001 ff50 	bl	800b936 <USBH_CtlReq>
 8009a96:	4603      	mov	r3, r0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3718      	adds	r7, #24
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <USBH_AC_GetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	4608      	mov	r0, r1
 8009aaa:	4611      	mov	r1, r2
 8009aac:	461a      	mov	r2, r3
 8009aae:	4603      	mov	r3, r0
 8009ab0:	70fb      	strb	r3, [r7, #3]
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	70bb      	strb	r3, [r7, #2]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8009aba:	2300      	movs	r3, #0
 8009abc:	82fb      	strh	r3, [r7, #22]
 8009abe:	2300      	movs	r3, #0
 8009ac0:	82bb      	strh	r3, [r7, #20]
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	743b      	strb	r3, [r7, #16]
 8009aca:	2300      	movs	r3, #0
 8009acc:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8009ad4:	69db      	ldr	r3, [r3, #28]
 8009ad6:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8009adc:	78fb      	ldrb	r3, [r7, #3]
 8009ade:	2b06      	cmp	r3, #6
 8009ae0:	d01e      	beq.n	8009b20 <USBH_AC_GetCur+0x80>
 8009ae2:	2b06      	cmp	r3, #6
 8009ae4:	dc4f      	bgt.n	8009b86 <USBH_AC_GetCur+0xe6>
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	d002      	beq.n	8009af0 <USBH_AC_GetCur+0x50>
 8009aea:	2b03      	cmp	r3, #3
 8009aec:	d036      	beq.n	8009b5c <USBH_AC_GetCur+0xbc>
 8009aee:	e04a      	b.n	8009b86 <USBH_AC_GetCur+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009af4:	78db      	ldrb	r3, [r3, #3]
 8009af6:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8009af8:	2300      	movs	r3, #0
 8009afa:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8009afc:	7c3b      	ldrb	r3, [r7, #16]
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	021b      	lsls	r3, r3, #8
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	7bfb      	ldrb	r3, [r7, #15]
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8009b0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009b10:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	827b      	strh	r3, [r7, #18]
      break;
 8009b1e:	e035      	b.n	8009b8c <USBH_AC_GetCur+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8009b20:	78bb      	ldrb	r3, [r7, #2]
 8009b22:	68ba      	ldr	r2, [r7, #8]
 8009b24:	3322      	adds	r3, #34	@ 0x22
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	4413      	add	r3, r2
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	78db      	ldrb	r3, [r3, #3]
 8009b2e:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8009b30:	2300      	movs	r3, #0
 8009b32:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8009b34:	7c3b      	ldrb	r3, [r7, #16]
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	021b      	lsls	r3, r3, #8
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	7bfb      	ldrb	r3, [r7, #15]
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	4313      	orrs	r3, r2
 8009b42:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8009b44:	787b      	ldrb	r3, [r7, #1]
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	021b      	lsls	r3, r3, #8
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	4313      	orrs	r3, r2
 8009b54:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8009b56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b58:	827b      	strh	r3, [r7, #18]
      break;
 8009b5a:	e017      	b.n	8009b8c <USBH_AC_GetCur+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b62:	78db      	ldrb	r3, [r3, #3]
 8009b64:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8009b66:	2300      	movs	r3, #0
 8009b68:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8009b6a:	7c3b      	ldrb	r3, [r7, #16]
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	021b      	lsls	r3, r3, #8
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	7bfb      	ldrb	r3, [r7, #15]
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	4313      	orrs	r3, r2
 8009b78:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8009b7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009b7e:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8009b80:	2301      	movs	r3, #1
 8009b82:	827b      	strh	r3, [r7, #18]
      break;
 8009b84:	e002      	b.n	8009b8c <USBH_AC_GetCur+0xec>

    default:
      ret = USBH_FAIL;
 8009b86:	2302      	movs	r3, #2
 8009b88:	747b      	strb	r3, [r7, #17]
      break;
 8009b8a:	bf00      	nop
  }

  if (ret != USBH_OK)
 8009b8c:	7c7b      	ldrb	r3, [r7, #17]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d001      	beq.n	8009b96 <USBH_AC_GetCur+0xf6>
  {
    return ret;
 8009b92:	7c7b      	ldrb	r3, [r7, #17]
 8009b94:	e017      	b.n	8009bc6 <USBH_AC_GetCur+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	22a1      	movs	r2, #161	@ 0xa1
 8009b9a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2281      	movs	r2, #129	@ 0x81
 8009ba0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	8afa      	ldrh	r2, [r7, #22]
 8009ba6:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	8aba      	ldrh	r2, [r7, #20]
 8009bac:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	8a7a      	ldrh	r2, [r7, #18]
 8009bb2:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8009bba:	8a7a      	ldrh	r2, [r7, #18]
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f001 feb9 	bl	800b936 <USBH_CtlReq>
 8009bc4:	4603      	mov	r3, r0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3718      	adds	r7, #24
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <USBH_AC_GetMax>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b086      	sub	sp, #24
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
 8009bd6:	4608      	mov	r0, r1
 8009bd8:	4611      	mov	r1, r2
 8009bda:	461a      	mov	r2, r3
 8009bdc:	4603      	mov	r3, r0
 8009bde:	70fb      	strb	r3, [r7, #3]
 8009be0:	460b      	mov	r3, r1
 8009be2:	70bb      	strb	r3, [r7, #2]
 8009be4:	4613      	mov	r3, r2
 8009be6:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8009be8:	2300      	movs	r3, #0
 8009bea:	82fb      	strh	r3, [r7, #22]
 8009bec:	2300      	movs	r3, #0
 8009bee:	82bb      	strh	r3, [r7, #20]
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	743b      	strb	r3, [r7, #16]
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8009c02:	69db      	ldr	r3, [r3, #28]
 8009c04:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8009c0a:	78fb      	ldrb	r3, [r7, #3]
 8009c0c:	2b06      	cmp	r3, #6
 8009c0e:	d01e      	beq.n	8009c4e <USBH_AC_GetMax+0x80>
 8009c10:	2b06      	cmp	r3, #6
 8009c12:	dc4f      	bgt.n	8009cb4 <USBH_AC_GetMax+0xe6>
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	d002      	beq.n	8009c1e <USBH_AC_GetMax+0x50>
 8009c18:	2b03      	cmp	r3, #3
 8009c1a:	d036      	beq.n	8009c8a <USBH_AC_GetMax+0xbc>
 8009c1c:	e04a      	b.n	8009cb4 <USBH_AC_GetMax+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c22:	78db      	ldrb	r3, [r3, #3]
 8009c24:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8009c26:	2300      	movs	r3, #0
 8009c28:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8009c2a:	7c3b      	ldrb	r3, [r7, #16]
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	021b      	lsls	r3, r3, #8
 8009c30:	b29a      	uxth	r2, r3
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	4313      	orrs	r3, r2
 8009c38:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8009c3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009c3e:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	827b      	strh	r3, [r7, #18]
      break;
 8009c4c:	e035      	b.n	8009cba <USBH_AC_GetMax+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8009c4e:	78bb      	ldrb	r3, [r7, #2]
 8009c50:	68ba      	ldr	r2, [r7, #8]
 8009c52:	3322      	adds	r3, #34	@ 0x22
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	4413      	add	r3, r2
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	78db      	ldrb	r3, [r3, #3]
 8009c5c:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8009c5e:	2300      	movs	r3, #0
 8009c60:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8009c62:	7c3b      	ldrb	r3, [r7, #16]
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	021b      	lsls	r3, r3, #8
 8009c68:	b29a      	uxth	r2, r3
 8009c6a:	7bfb      	ldrb	r3, [r7, #15]
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8009c72:	787b      	ldrb	r3, [r7, #1]
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	021b      	lsls	r3, r3, #8
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	4313      	orrs	r3, r2
 8009c82:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8009c84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009c86:	827b      	strh	r3, [r7, #18]
      break;
 8009c88:	e017      	b.n	8009cba <USBH_AC_GetMax+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c90:	78db      	ldrb	r3, [r3, #3]
 8009c92:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8009c94:	2300      	movs	r3, #0
 8009c96:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8009c98:	7c3b      	ldrb	r3, [r7, #16]
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	021b      	lsls	r3, r3, #8
 8009c9e:	b29a      	uxth	r2, r3
 8009ca0:	7bfb      	ldrb	r3, [r7, #15]
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8009ca8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009cac:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	827b      	strh	r3, [r7, #18]
      break;
 8009cb2:	e002      	b.n	8009cba <USBH_AC_GetMax+0xec>

    default:
      ret = USBH_FAIL;
 8009cb4:	2302      	movs	r3, #2
 8009cb6:	747b      	strb	r3, [r7, #17]
      break;
 8009cb8:	bf00      	nop
  }

  if (ret != USBH_OK)
 8009cba:	7c7b      	ldrb	r3, [r7, #17]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d001      	beq.n	8009cc4 <USBH_AC_GetMax+0xf6>
  {
    return ret;
 8009cc0:	7c7b      	ldrb	r3, [r7, #17]
 8009cc2:	e017      	b.n	8009cf4 <USBH_AC_GetMax+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	22a1      	movs	r2, #161	@ 0xa1
 8009cc8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2283      	movs	r2, #131	@ 0x83
 8009cce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	8afa      	ldrh	r2, [r7, #22]
 8009cd4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	8aba      	ldrh	r2, [r7, #20]
 8009cda:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	8a7a      	ldrh	r2, [r7, #18]
 8009ce0:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8009ce8:	8a7a      	ldrh	r2, [r7, #18]
 8009cea:	4619      	mov	r1, r3
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f001 fe22 	bl	800b936 <USBH_CtlReq>
 8009cf2:	4603      	mov	r3, r0

}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3718      	adds	r7, #24
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <USBH_AC_GetRes>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	4608      	mov	r0, r1
 8009d06:	4611      	mov	r1, r2
 8009d08:	461a      	mov	r2, r3
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	70fb      	strb	r3, [r7, #3]
 8009d0e:	460b      	mov	r3, r1
 8009d10:	70bb      	strb	r3, [r7, #2]
 8009d12:	4613      	mov	r3, r2
 8009d14:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8009d16:	2300      	movs	r3, #0
 8009d18:	82fb      	strh	r3, [r7, #22]
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	82bb      	strh	r3, [r7, #20]
 8009d1e:	2300      	movs	r3, #0
 8009d20:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8009d22:	2300      	movs	r3, #0
 8009d24:	743b      	strb	r3, [r7, #16]
 8009d26:	2300      	movs	r3, #0
 8009d28:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8009d30:	69db      	ldr	r3, [r3, #28]
 8009d32:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8009d38:	78fb      	ldrb	r3, [r7, #3]
 8009d3a:	2b06      	cmp	r3, #6
 8009d3c:	d01e      	beq.n	8009d7c <USBH_AC_GetRes+0x80>
 8009d3e:	2b06      	cmp	r3, #6
 8009d40:	dc4f      	bgt.n	8009de2 <USBH_AC_GetRes+0xe6>
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d002      	beq.n	8009d4c <USBH_AC_GetRes+0x50>
 8009d46:	2b03      	cmp	r3, #3
 8009d48:	d036      	beq.n	8009db8 <USBH_AC_GetRes+0xbc>
 8009d4a:	e04a      	b.n	8009de2 <USBH_AC_GetRes+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d50:	78db      	ldrb	r3, [r3, #3]
 8009d52:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8009d54:	2300      	movs	r3, #0
 8009d56:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8009d58:	7c3b      	ldrb	r3, [r7, #16]
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	021b      	lsls	r3, r3, #8
 8009d5e:	b29a      	uxth	r2, r3
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	4313      	orrs	r3, r2
 8009d66:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8009d68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d6c:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 8009d76:	2301      	movs	r3, #1
 8009d78:	827b      	strh	r3, [r7, #18]
      break;
 8009d7a:	e035      	b.n	8009de8 <USBH_AC_GetRes+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8009d7c:	78bb      	ldrb	r3, [r7, #2]
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	3322      	adds	r3, #34	@ 0x22
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	4413      	add	r3, r2
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	78db      	ldrb	r3, [r3, #3]
 8009d8a:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8009d90:	7c3b      	ldrb	r3, [r7, #16]
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	021b      	lsls	r3, r3, #8
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	7bfb      	ldrb	r3, [r7, #15]
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8009da0:	787b      	ldrb	r3, [r7, #1]
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	021b      	lsls	r3, r3, #8
 8009da6:	b29a      	uxth	r2, r3
 8009da8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	4313      	orrs	r3, r2
 8009db0:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8009db2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009db4:	827b      	strh	r3, [r7, #18]
      break;
 8009db6:	e017      	b.n	8009de8 <USBH_AC_GetRes+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dbe:	78db      	ldrb	r3, [r3, #3]
 8009dc0:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8009dc6:	7c3b      	ldrb	r3, [r7, #16]
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	021b      	lsls	r3, r3, #8
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	7bfb      	ldrb	r3, [r7, #15]
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8009dd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009dda:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	827b      	strh	r3, [r7, #18]
      break;
 8009de0:	e002      	b.n	8009de8 <USBH_AC_GetRes+0xec>

    default:
      ret = USBH_FAIL;
 8009de2:	2302      	movs	r3, #2
 8009de4:	747b      	strb	r3, [r7, #17]
      break;
 8009de6:	bf00      	nop
  }

  if (ret != USBH_OK)
 8009de8:	7c7b      	ldrb	r3, [r7, #17]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d001      	beq.n	8009df2 <USBH_AC_GetRes+0xf6>
  {
    return ret;
 8009dee:	7c7b      	ldrb	r3, [r7, #17]
 8009df0:	e017      	b.n	8009e22 <USBH_AC_GetRes+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	22a1      	movs	r2, #161	@ 0xa1
 8009df6:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_RES;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2284      	movs	r2, #132	@ 0x84
 8009dfc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	8afa      	ldrh	r2, [r7, #22]
 8009e02:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	8aba      	ldrh	r2, [r7, #20]
 8009e08:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	8a7a      	ldrh	r2, [r7, #18]
 8009e0e:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8009e16:	8a7a      	ldrh	r2, [r7, #18]
 8009e18:	4619      	mov	r1, r3
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f001 fd8b 	bl	800b936 <USBH_CtlReq>
 8009e20:	4603      	mov	r3, r0

}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3718      	adds	r7, #24
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <USBH_AC_GetMin>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b086      	sub	sp, #24
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
 8009e32:	4608      	mov	r0, r1
 8009e34:	4611      	mov	r1, r2
 8009e36:	461a      	mov	r2, r3
 8009e38:	4603      	mov	r3, r0
 8009e3a:	70fb      	strb	r3, [r7, #3]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	70bb      	strb	r3, [r7, #2]
 8009e40:	4613      	mov	r3, r2
 8009e42:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8009e44:	2300      	movs	r3, #0
 8009e46:	82fb      	strh	r3, [r7, #22]
 8009e48:	2300      	movs	r3, #0
 8009e4a:	82bb      	strh	r3, [r7, #20]
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8009e50:	2300      	movs	r3, #0
 8009e52:	743b      	strb	r3, [r7, #16]
 8009e54:	2300      	movs	r3, #0
 8009e56:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8009e5e:	69db      	ldr	r3, [r3, #28]
 8009e60:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8009e62:	2300      	movs	r3, #0
 8009e64:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8009e66:	78fb      	ldrb	r3, [r7, #3]
 8009e68:	2b06      	cmp	r3, #6
 8009e6a:	d01e      	beq.n	8009eaa <USBH_AC_GetMin+0x80>
 8009e6c:	2b06      	cmp	r3, #6
 8009e6e:	dc4f      	bgt.n	8009f10 <USBH_AC_GetMin+0xe6>
 8009e70:	2b02      	cmp	r3, #2
 8009e72:	d002      	beq.n	8009e7a <USBH_AC_GetMin+0x50>
 8009e74:	2b03      	cmp	r3, #3
 8009e76:	d036      	beq.n	8009ee6 <USBH_AC_GetMin+0xbc>
 8009e78:	e04a      	b.n	8009f10 <USBH_AC_GetMin+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e7e:	78db      	ldrb	r3, [r3, #3]
 8009e80:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8009e82:	2300      	movs	r3, #0
 8009e84:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8009e86:	7c3b      	ldrb	r3, [r7, #16]
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	021b      	lsls	r3, r3, #8
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	7bfb      	ldrb	r3, [r7, #15]
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	4313      	orrs	r3, r2
 8009e94:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8009e96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e9a:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	827b      	strh	r3, [r7, #18]
      break;
 8009ea8:	e035      	b.n	8009f16 <USBH_AC_GetMin+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8009eaa:	78bb      	ldrb	r3, [r7, #2]
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	3322      	adds	r3, #34	@ 0x22
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4413      	add	r3, r2
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	78db      	ldrb	r3, [r3, #3]
 8009eb8:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8009eba:	2300      	movs	r3, #0
 8009ebc:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8009ebe:	7c3b      	ldrb	r3, [r7, #16]
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	021b      	lsls	r3, r3, #8
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	7bfb      	ldrb	r3, [r7, #15]
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8009ece:	787b      	ldrb	r3, [r7, #1]
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	021b      	lsls	r3, r3, #8
 8009ed4:	b29a      	uxth	r2, r3
 8009ed6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	4313      	orrs	r3, r2
 8009ede:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8009ee0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009ee2:	827b      	strh	r3, [r7, #18]
      break;
 8009ee4:	e017      	b.n	8009f16 <USBH_AC_GetMin+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eec:	78db      	ldrb	r3, [r3, #3]
 8009eee:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8009ef4:	7c3b      	ldrb	r3, [r7, #16]
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	021b      	lsls	r3, r3, #8
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	7bfb      	ldrb	r3, [r7, #15]
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	4313      	orrs	r3, r2
 8009f02:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8009f04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009f08:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	827b      	strh	r3, [r7, #18]
      break;
 8009f0e:	e002      	b.n	8009f16 <USBH_AC_GetMin+0xec>

    default:
      ret = USBH_FAIL;
 8009f10:	2302      	movs	r3, #2
 8009f12:	747b      	strb	r3, [r7, #17]
      break;
 8009f14:	bf00      	nop
  }

  if (ret != USBH_OK)
 8009f16:	7c7b      	ldrb	r3, [r7, #17]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d001      	beq.n	8009f20 <USBH_AC_GetMin+0xf6>
  {
    return ret;
 8009f1c:	7c7b      	ldrb	r3, [r7, #17]
 8009f1e:	e017      	b.n	8009f50 <USBH_AC_GetMin+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	22a1      	movs	r2, #161	@ 0xa1
 8009f24:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2282      	movs	r2, #130	@ 0x82
 8009f2a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	8afa      	ldrh	r2, [r7, #22]
 8009f30:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	8aba      	ldrh	r2, [r7, #20]
 8009f36:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	8a7a      	ldrh	r2, [r7, #18]
 8009f3c:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8009f44:	8a7a      	ldrh	r2, [r7, #18]
 8009f46:	4619      	mov	r1, r3
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f001 fcf4 	bl	800b936 <USBH_CtlReq>
 8009f4e:	4603      	mov	r3, r0

}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3718      	adds	r7, #24
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <USBH_AUDIO_SetEndpointControls>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetEndpointControls(USBH_HandleTypeDef *phost,
                                                         uint8_t  Ep,
                                                         uint8_t *buff)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b086      	sub	sp, #24
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	460b      	mov	r3, r1
 8009f62:	607a      	str	r2, [r7, #4]
 8009f64:	72fb      	strb	r3, [r7, #11]
  uint16_t wValue, wIndex, wLength;

  wValue = SAMPLING_FREQ_CONTROL << 8U;
 8009f66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009f6a:	82fb      	strh	r3, [r7, #22]
  wIndex = Ep;
 8009f6c:	7afb      	ldrb	r3, [r7, #11]
 8009f6e:	82bb      	strh	r3, [r7, #20]
  wLength = 3U; /*length of the frequency parameter*/
 8009f70:	2303      	movs	r3, #3
 8009f72:	827b      	strh	r3, [r7, #18]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2222      	movs	r2, #34	@ 0x22
 8009f78:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	8afa      	ldrh	r2, [r7, #22]
 8009f84:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	8aba      	ldrh	r2, [r7, #20]
 8009f8a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	8a7a      	ldrh	r2, [r7, #18]
 8009f90:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 8009f92:	8a7b      	ldrh	r3, [r7, #18]
 8009f94:	461a      	mov	r2, r3
 8009f96:	6879      	ldr	r1, [r7, #4]
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f001 fccc 	bl	800b936 <USBH_CtlReq>
 8009f9e:	4603      	mov	r3, r0

}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3718      	adds	r7, #24
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <USBH_AUDIO_InputStream>:
  * @brief  Handle Input stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InputStream(USBH_HandleTypeDef *phost)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  USBH_StatusTypeDef status = USBH_BUSY;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	73fb      	strb	r3, [r7, #15]

  return status;
 8009fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
	...

08009fc4 <USBH_AUDIO_Control>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Control(USBH_HandleTypeDef *phost)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b086      	sub	sp, #24
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8009fd6:	69db      	ldr	r3, [r3, #28]
 8009fd8:	613b      	str	r3, [r7, #16]
  uint16_t attribute  = 0U;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	81fb      	strh	r3, [r7, #14]

  switch (AUDIO_Handle->control_state)
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	78db      	ldrb	r3, [r3, #3]
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	2b04      	cmp	r3, #4
 8009fe6:	f200 8090 	bhi.w	800a10a <USBH_AUDIO_Control+0x146>
 8009fea:	a201      	add	r2, pc, #4	@ (adr r2, 8009ff0 <USBH_AUDIO_Control+0x2c>)
 8009fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff0:	0800a005 	.word	0x0800a005
 8009ff4:	0800a059 	.word	0x0800a059
 8009ff8:	0800a10b 	.word	0x0800a10b
 8009ffc:	0800a0d7 	.word	0x0800a0d7
 800a000:	0800a0f1 	.word	0x0800a0f1
  {
    case AUDIO_CONTROL_INIT:
      if ((phost->Timer & 1U) == 0U)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800a00a:	f003 0301 	and.w	r3, r3, #1
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d17d      	bne.n	800a10e <USBH_AUDIO_Control+0x14a>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
        (void)USBH_InterruptReceiveData(phost,
                                        (uint8_t *)(void *)(AUDIO_Handle->mem),
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	f503 71c8 	add.w	r1, r3, #400	@ 0x190
                                        (uint8_t)AUDIO_Handle->control.EpSize,
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	f8b3 3186 	ldrh.w	r3, [r3, #390]	@ 0x186
        (void)USBH_InterruptReceiveData(phost,
 800a02a:	b2da      	uxtb	r2, r3
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f001 fe8d 	bl	800bd52 <USBH_InterruptReceiveData>
                                        AUDIO_Handle->control.Pipe);

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1

        AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE;
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	2202      	movs	r2, #2
 800a054:	70da      	strb	r2, [r3, #3]
      }
      break;
 800a056:	e05a      	b.n	800a10e <USBH_AUDIO_Control+0x14a>

    case AUDIO_CONTROL_CHANGE:
      if (USBH_LL_GetURBState(phost, AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 800a05e:	4619      	mov	r1, r3
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f002 f9be 	bl	800c3e2 <USBH_LL_GetURBState>
 800a066:	4603      	mov	r3, r0
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d114      	bne.n	800a096 <USBH_AUDIO_Control+0xd2>
      {
        attribute = LE16(&AUDIO_Handle->mem[0]);
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800a078:	3302      	adds	r3, #2
 800a07a:	881b      	ldrh	r3, [r3, #0]
 800a07c:	021b      	lsls	r3, r3, #8
 800a07e:	b29b      	uxth	r3, r3
 800a080:	4313      	orrs	r3, r2
 800a082:	81fb      	strh	r3, [r7, #14]
        if (USBH_AUDIO_SetControlAttribute(phost, (uint8_t)attribute) == USBH_BUSY)
 800a084:	89fb      	ldrh	r3, [r7, #14]
 800a086:	b2db      	uxtb	r3, r3
 800a088:	4619      	mov	r1, r3
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 f97a 	bl	800a384 <USBH_AUDIO_SetControlAttribute>
 800a090:	4603      	mov	r3, r0
 800a092:	2b01      	cmp	r3, #1
 800a094:	d03d      	beq.n	800a112 <USBH_AUDIO_Control+0x14e>
        {
          break;
        }
      }

      if ((phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 800a0a2:	1ad3      	subs	r3, r2, r3
 800a0a4:	693a      	ldr	r2, [r7, #16]
 800a0a6:	f892 218b 	ldrb.w	r2, [r2, #395]	@ 0x18b
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d333      	bcc.n	800a116 <USBH_AUDIO_Control+0x152>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c

        (void)USBH_InterruptReceiveData(phost,
                                        (uint8_t *)(void *)(AUDIO_Handle->mem),
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	f503 71c8 	add.w	r1, r3, #400	@ 0x190
                                        (uint8_t)AUDIO_Handle->control.EpSize,
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	f8b3 3186 	ldrh.w	r3, [r3, #390]	@ 0x186
        (void)USBH_InterruptReceiveData(phost,
 800a0c6:	b2da      	uxtb	r2, r3
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f001 fe3f 	bl	800bd52 <USBH_InterruptReceiveData>
                                        AUDIO_Handle->control.Pipe);

      }
      break;
 800a0d4:	e01f      	b.n	800a116 <USBH_AUDIO_Control+0x152>

    case AUDIO_CONTROL_VOLUME_UP:
      if (USBH_AUDIO_SetControlAttribute(phost, 1U) == USBH_OK)
 800a0d6:	2101      	movs	r1, #1
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 f953 	bl	800a384 <USBH_AUDIO_SetControlAttribute>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d11a      	bne.n	800a11a <USBH_AUDIO_Control+0x156>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a0ee:	e014      	b.n	800a11a <USBH_AUDIO_Control+0x156>

    case AUDIO_CONTROL_VOLUME_DOWN:
      if (USBH_AUDIO_SetControlAttribute(phost, 2U) == USBH_OK)
 800a0f0:	2102      	movs	r1, #2
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 f946 	bl	800a384 <USBH_AUDIO_SetControlAttribute>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d10f      	bne.n	800a11e <USBH_AUDIO_Control+0x15a>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	2201      	movs	r2, #1
 800a102:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 800a104:	2300      	movs	r3, #0
 800a106:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a108:	e009      	b.n	800a11e <USBH_AUDIO_Control+0x15a>

    case AUDIO_CONTROL_IDLE:
    default:
      break;
 800a10a:	bf00      	nop
 800a10c:	e008      	b.n	800a120 <USBH_AUDIO_Control+0x15c>
      break;
 800a10e:	bf00      	nop
 800a110:	e006      	b.n	800a120 <USBH_AUDIO_Control+0x15c>
          break;
 800a112:	bf00      	nop
 800a114:	e004      	b.n	800a120 <USBH_AUDIO_Control+0x15c>
      break;
 800a116:	bf00      	nop
 800a118:	e002      	b.n	800a120 <USBH_AUDIO_Control+0x15c>
      break;
 800a11a:	bf00      	nop
 800a11c:	e000      	b.n	800a120 <USBH_AUDIO_Control+0x15c>
      break;
 800a11e:	bf00      	nop
  }

  return status;
 800a120:	7dfb      	ldrb	r3, [r7, #23]
}
 800a122:	4618      	mov	r0, r3
 800a124:	3718      	adds	r7, #24
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop

0800a12c <USBH_AUDIO_OutputStream>:
  * @brief  Handle Output stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_OutputStream(USBH_HandleTypeDef *phost)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b086      	sub	sp, #24
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a134:	2301      	movs	r3, #1
 800a136:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800a13e:	69db      	ldr	r3, [r3, #28]
 800a140:	613b      	str	r3, [r7, #16]
  uint8_t *buff;


  switch (AUDIO_Handle->play_state)
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	789b      	ldrb	r3, [r3, #2]
 800a146:	3b01      	subs	r3, #1
 800a148:	2b04      	cmp	r3, #4
 800a14a:	d85c      	bhi.n	800a206 <USBH_AUDIO_OutputStream+0xda>
 800a14c:	a201      	add	r2, pc, #4	@ (adr r2, 800a154 <USBH_AUDIO_OutputStream+0x28>)
 800a14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a152:	bf00      	nop
 800a154:	0800a169 	.word	0x0800a169
 800a158:	0800a1c5 	.word	0x0800a1c5
 800a15c:	0800a18f 	.word	0x0800a18f
 800a160:	0800a1fb 	.word	0x0800a1fb
 800a164:	0800a1f5 	.word	0x0800a1f5
  {
    case AUDIO_PLAYBACK_INIT:

      if (AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800a16e:	693a      	ldr	r2, [r7, #16]
 800a170:	3317      	adds	r3, #23
 800a172:	00db      	lsls	r3, r3, #3
 800a174:	4413      	add	r3, r2
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	79db      	ldrb	r3, [r3, #7]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d103      	bne.n	800a186 <USBH_AUDIO_OutputStream+0x5a>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP_FREQ;
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	2203      	movs	r2, #3
 800a182:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a184:	e044      	b.n	800a210 <USBH_AUDIO_OutputStream+0xe4>
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	2202      	movs	r2, #2
 800a18a:	709a      	strb	r2, [r3, #2]
      break;
 800a18c:	e040      	b.n	800a210 <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_SET_EP_FREQ:

      buff = (uint8_t *)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800a194:	693a      	ldr	r2, [r7, #16]
 800a196:	3317      	adds	r3, #23
 800a198:	00db      	lsls	r3, r3, #3
 800a19a:	4413      	add	r3, r2
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	3308      	adds	r3, #8
 800a1a0:	60fb      	str	r3, [r7, #12]

      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f7ff fed3 	bl	8009f58 <USBH_AUDIO_SetEndpointControls>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a1b6:	7dfb      	ldrb	r3, [r7, #23]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d126      	bne.n	800a20a <USBH_AUDIO_OutputStream+0xde>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	2205      	movs	r2, #5
 800a1c0:	709a      	strb	r2, [r3, #2]
      }
      break;
 800a1c2:	e022      	b.n	800a20a <USBH_AUDIO_OutputStream+0xde>

    case AUDIO_PLAYBACK_SET_EP:
      buff = (uint8_t *)(void *)&AUDIO_Handle->headphone.frequency;
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800a1ca:	60fb      	str	r3, [r7, #12]
      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f7ff febe 	bl	8009f58 <USBH_AUDIO_SetEndpointControls>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a1e0:	7dfb      	ldrb	r3, [r7, #23]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d113      	bne.n	800a20e <USBH_AUDIO_OutputStream+0xe2>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	2205      	movs	r2, #5
 800a1ea:	709a      	strb	r2, [r3, #2]
        USBH_AUDIO_FrequencySet(phost);
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 f96e 	bl	800a4ce <USBH_AUDIO_FrequencySet>
      }
      break;
 800a1f2:	e00c      	b.n	800a20e <USBH_AUDIO_OutputStream+0xe2>

    case AUDIO_PLAYBACK_IDLE:
      status = USBH_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a1f8:	e00a      	b.n	800a210 <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_PLAY:
      (void)USBH_AUDIO_Transmit(phost);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 f80e 	bl	800a21c <USBH_AUDIO_Transmit>
      status = USBH_OK;
 800a200:	2300      	movs	r3, #0
 800a202:	75fb      	strb	r3, [r7, #23]
      break;
 800a204:	e004      	b.n	800a210 <USBH_AUDIO_OutputStream+0xe4>

    default:
      break;
 800a206:	bf00      	nop
 800a208:	e002      	b.n	800a210 <USBH_AUDIO_OutputStream+0xe4>
      break;
 800a20a:	bf00      	nop
 800a20c:	e000      	b.n	800a210 <USBH_AUDIO_OutputStream+0xe4>
      break;
 800a20e:	bf00      	nop
  }

  return status;
 800a210:	7dfb      	ldrb	r3, [r7, #23]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3718      	adds	r7, #24
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop

0800a21c <USBH_AUDIO_Transmit>:
  * @brief  Handle Transmission process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Transmit(USBH_HandleTypeDef *phost)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a224:	2301      	movs	r3, #1
 800a226:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800a22e:	69db      	ldr	r3, [r3, #28]
 800a230:	60bb      	str	r3, [r7, #8]

  switch (AUDIO_Handle->processing_state)
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	791b      	ldrb	r3, [r3, #4]
 800a236:	2b01      	cmp	r3, #1
 800a238:	d002      	beq.n	800a240 <USBH_AUDIO_Transmit+0x24>
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d033      	beq.n	800a2a6 <USBH_AUDIO_Transmit+0x8a>
 800a23e:	e096      	b.n	800a36e <USBH_AUDIO_Transmit+0x152>
  {
    case AUDIO_DATA_START_OUT:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) == 0U)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800a246:	f003 0301 	and.w	r3, r3, #1
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	f040 8092 	bne.w	800a374 <USBH_AUDIO_Transmit+0x158>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	2202      	movs	r2, #2
 800a260:	711a      	strb	r2, [r3, #4]
        (void)USBH_IsocSendData(phost,
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	f8d3 1110 	ldr.w	r1, [r3, #272]	@ 0x110
                                AUDIO_Handle->headphone.buf,
                                (uint32_t)AUDIO_Handle->headphone.frame_length,
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
        (void)USBH_IsocSendData(phost,
 800a26e:	461a      	mov	r2, r3
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f001 fd8a 	bl	800bd90 <USBH_IsocSendData>
                                AUDIO_Handle->headphone.Pipe);

        AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length;
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 800a282:	461a      	mov	r2, r3
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length;
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 800a290:	461a      	mov	r2, r3
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a2a4:	e066      	b.n	800a374 <USBH_AUDIO_Transmit+0x158>

    case AUDIO_DATA_OUT:
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f002 f897 	bl	800c3e2 <USBH_LL_GetURBState>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d15e      	bne.n	800a378 <USBH_AUDIO_Transmit+0x15c>
          ((phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800a2c6:	1ad3      	subs	r3, r2, r3
 800a2c8:	68ba      	ldr	r2, [r7, #8]
 800a2ca:	f892 20fc 	ldrb.w	r2, [r2, #252]	@ 0xfc
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d352      	bcc.n	800a378 <USBH_AUDIO_Transmit+0x15c>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

        if (AUDIO_Handle->control.supported == 1U)
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d102      	bne.n	800a2ee <USBH_AUDIO_Transmit+0xd2>
        {
          (void)USBH_AUDIO_Control(phost);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7ff fe6b 	bl	8009fc4 <USBH_AUDIO_Control>
        }

        if (AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d82b      	bhi.n	800a356 <USBH_AUDIO_Transmit+0x13a>
        {
          (void)USBH_IsocSendData(phost,
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
                                  AUDIO_Handle->headphone.cbuf,
                                  (uint32_t)AUDIO_Handle->headphone.frame_length,
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
          (void)USBH_IsocSendData(phost,
 800a30a:	461a      	mov	r2, r3
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f001 fd3c 	bl	800bd90 <USBH_IsocSendData>
                                  AUDIO_Handle->headphone.Pipe);

          AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a31e:	68ba      	ldr	r2, [r7, #8]
 800a320:	f8b2 2120 	ldrh.w	r2, [r2, #288]	@ 0x120
 800a324:	441a      	add	r2, r3
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
          AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800a332:	68ba      	ldr	r2, [r7, #8]
 800a334:	f8b2 2120 	ldrh.w	r2, [r2, #288]	@ 0x120
 800a338:	441a      	add	r2, r3
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
          AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800a346:	68ba      	ldr	r2, [r7, #8]
 800a348:	f8b2 2120 	ldrh.w	r2, [r2, #288]	@ 0x120
 800a34c:	441a      	add	r2, r3
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
          USBH_AUDIO_BufferEmptyCallback(phost);
        }
      }
      break;
 800a354:	e010      	b.n	800a378 <USBH_AUDIO_Transmit+0x15c>
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	f04f 32ff 	mov.w	r2, #4294967295
 800a35c:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	2205      	movs	r2, #5
 800a364:	709a      	strb	r2, [r3, #2]
          USBH_AUDIO_BufferEmptyCallback(phost);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f8bb 	bl	800a4e2 <USBH_AUDIO_BufferEmptyCallback>
      break;
 800a36c:	e004      	b.n	800a378 <USBH_AUDIO_Transmit+0x15c>

    default:
      status = USBH_FAIL;
 800a36e:	2302      	movs	r3, #2
 800a370:	73fb      	strb	r3, [r7, #15]
      break;
 800a372:	e002      	b.n	800a37a <USBH_AUDIO_Transmit+0x15e>
      break;
 800a374:	bf00      	nop
 800a376:	e000      	b.n	800a37a <USBH_AUDIO_Transmit+0x15e>
      break;
 800a378:	bf00      	nop
  }
  return status;
 800a37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3710      	adds	r7, #16
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute(USBH_HandleTypeDef *phost, uint8_t attrib)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	460b      	mov	r3, r1
 800a38e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a390:	2301      	movs	r3, #1
 800a392:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800a39a:	69db      	ldr	r3, [r3, #28]
 800a39c:	60bb      	str	r3, [r7, #8]

  switch (attrib)
 800a39e:	78fb      	ldrb	r3, [r7, #3]
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d002      	beq.n	800a3aa <USBH_AUDIO_SetControlAttribute+0x26>
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d00b      	beq.n	800a3c0 <USBH_AUDIO_SetControlAttribute+0x3c>
 800a3a8:	e015      	b.n	800a3d6 <USBH_AUDIO_SetControlAttribute+0x52>
  {
    case 0x01:
      AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800a3b6:	441a      	add	r2, r3
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
      break;
 800a3be:	e00d      	b.n	800a3dc <USBH_AUDIO_SetControlAttribute+0x58>

    case 0x02:
      AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800a3cc:	1ad2      	subs	r2, r2, r3
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
      break;
 800a3d4:	e002      	b.n	800a3dc <USBH_AUDIO_SetControlAttribute+0x58>

    default :
      status = USBH_FAIL;
 800a3d6:	2302      	movs	r3, #2
 800a3d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a3da:	bf00      	nop
  }

  if (AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d905      	bls.n	800a3f8 <USBH_AUDIO_SetControlAttribute+0x74>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMax;
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
  }

  if (AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800a404:	429a      	cmp	r2, r3
 800a406:	d205      	bcs.n	800a414 <USBH_AUDIO_SetControlAttribute+0x90>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMin;
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
  }

  if (AUDIO_SetVolume(phost,
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	f893 11a0 	ldrb.w	r1, [r3, #416]	@ 0x1a0
                      AUDIO_Handle->temp_feature,
                      (uint8_t)AUDIO_Handle->temp_channels,
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	f893 21a1 	ldrb.w	r2, [r3, #417]	@ 0x1a1
                      (uint16_t)AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
  if (AUDIO_SetVolume(phost,
 800a426:	b29b      	uxth	r3, r3
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 f827 	bl	800a47c <AUDIO_SetVolume>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b01      	cmp	r3, #1
 800a432:	d01e      	beq.n	800a472 <USBH_AUDIO_SetControlAttribute+0xee>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d10e      	bne.n	800a45c <USBH_AUDIO_SetControlAttribute+0xd8>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
      status = USBH_OK;
 800a456:	2300      	movs	r3, #0
 800a458:	73fb      	strb	r3, [r7, #15]
 800a45a:	e007      	b.n	800a46c <USBH_AUDIO_SetControlAttribute+0xe8>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 800a462:	3b01      	subs	r3, #1
 800a464:	b2da      	uxtb	r2, r3
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	2206      	movs	r2, #6
 800a470:	705a      	strb	r2, [r3, #1]
  }


  return status;
 800a472:	7bfb      	ldrb	r3, [r7, #15]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <AUDIO_SetVolume>:
  * @param  channel: channel index
  * @param  volume: new volume
  * @retval USBH Status
  */
static USBH_StatusTypeDef AUDIO_SetVolume(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel, uint16_t volume)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af02      	add	r7, sp, #8
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	4608      	mov	r0, r1
 800a486:	4611      	mov	r1, r2
 800a488:	461a      	mov	r2, r3
 800a48a:	4603      	mov	r3, r0
 800a48c:	70fb      	strb	r3, [r7, #3]
 800a48e:	460b      	mov	r3, r1
 800a490:	70bb      	strb	r3, [r7, #2]
 800a492:	4613      	mov	r3, r2
 800a494:	803b      	strh	r3, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a496:	2301      	movs	r3, #1
 800a498:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800a4a0:	69db      	ldr	r3, [r3, #28]
 800a4a2:	60bb      	str	r3, [r7, #8]

  AUDIO_Handle->mem[0] = volume;
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	883a      	ldrh	r2, [r7, #0]
 800a4a8:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

  status = USBH_AC_SetCur(phost, UAC_FEATURE_UNIT, feature,
 800a4ac:	78fa      	ldrb	r2, [r7, #3]
 800a4ae:	2302      	movs	r3, #2
 800a4b0:	9301      	str	r3, [sp, #4]
 800a4b2:	78bb      	ldrb	r3, [r7, #2]
 800a4b4:	9300      	str	r3, [sp, #0]
 800a4b6:	2302      	movs	r3, #2
 800a4b8:	2106      	movs	r1, #6
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f7ff fa76 	bl	80099ac <USBH_AC_SetCur>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	73fb      	strb	r3, [r7, #15]
                          VOLUME_CONTROL, channel, 2U);

  return status;
 800a4c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <USBH_AUDIO_FrequencySet>:
  * @brief  The function informs user that Settings have been changed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_FrequencySet(USBH_HandleTypeDef *phost)
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	b083      	sub	sp, #12
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a4d6:	bf00      	nop
 800a4d8:	370c      	adds	r7, #12
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr

0800a4e2 <USBH_AUDIO_BufferEmptyCallback>:
  * @brief  The function informs user that User data are processed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_BufferEmptyCallback(USBH_HandleTypeDef *phost)
{
 800a4e2:	b480      	push	{r7}
 800a4e4:	b083      	sub	sp, #12
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a4ea:	bf00      	nop
 800a4ec:	370c      	adds	r7, #12
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr

0800a4f6 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b084      	sub	sp, #16
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	60f8      	str	r0, [r7, #12]
 800a4fe:	60b9      	str	r1, [r7, #8]
 800a500:	4613      	mov	r3, r2
 800a502:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d101      	bne.n	800a50e <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a50a:	2302      	movs	r3, #2
 800a50c:	e029      	b.n	800a562 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	79fa      	ldrb	r2, [r7, #7]
 800a512:	f883 249c 	strb.w	r2, [r3, #1180]	@ 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2200      	movs	r2, #0
 800a51a:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c
  phost->ClassNumber = 0U;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2200      	movs	r2, #0
 800a522:	f8c3 2450 	str.w	r2, [r3, #1104]	@ 0x450

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f000 f81f 	bl	800a56a <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2200      	movs	r2, #0
 800a530:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2200      	movs	r2, #0
 800a538:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d003      	beq.n	800a55a <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	68ba      	ldr	r2, [r7, #8]
 800a556:	f8c3 24a4 	str.w	r2, [r3, #1188]	@ 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f001 fe0e 	bl	800c17c <USBH_LL_Init>

  return USBH_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b084      	sub	sp, #16
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a572:	2300      	movs	r3, #0
 800a574:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a576:	2300      	movs	r3, #0
 800a578:	60fb      	str	r3, [r7, #12]
 800a57a:	e00a      	b.n	800a592 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	4413      	add	r3, r2
 800a588:	2200      	movs	r2, #0
 800a58a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	3301      	adds	r3, #1
 800a590:	60fb      	str	r3, [r7, #12]
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2b0f      	cmp	r3, #15
 800a596:	d9f1      	bls.n	800a57c <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a598:	2300      	movs	r3, #0
 800a59a:	60fb      	str	r3, [r7, #12]
 800a59c:	e009      	b.n	800a5b2 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	60fb      	str	r3, [r7, #12]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5b8:	d3f1      	bcc.n	800a59e <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f8c3 2494 	str.w	r2, [r3, #1172]	@ 0x494

  phost->Control.state = CTRL_SETUP;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2240      	movs	r2, #64	@ 0x40
 800a5de:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	331c      	adds	r3, #28
 800a60a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a60e:	2100      	movs	r1, #0
 800a610:	4618      	mov	r0, r3
 800a612:	f002 f877 	bl	800c704 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a61c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a620:	2100      	movs	r1, #0
 800a622:	4618      	mov	r0, r3
 800a624:	f002 f86e 	bl	800c704 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a62e:	2212      	movs	r2, #18
 800a630:	2100      	movs	r1, #0
 800a632:	4618      	mov	r0, r3
 800a634:	f002 f866 	bl	800c704 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a63e:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 800a642:	2100      	movs	r1, #0
 800a644:	4618      	mov	r0, r3
 800a646:	f002 f85d 	bl	800c704 <memset>

  return USBH_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3710      	adds	r7, #16
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a654:	b480      	push	{r7}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a65e:	2300      	movs	r3, #0
 800a660:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d017      	beq.n	800a698 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 3450 	ldr.w	r3, [r3, #1104]	@ 0x450
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d10f      	bne.n	800a692 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8d3 3450 	ldr.w	r3, [r3, #1104]	@ 0x450
 800a678:	1c59      	adds	r1, r3, #1
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	f8c2 1450 	str.w	r1, [r2, #1104]	@ 0x450
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	f503 7389 	add.w	r3, r3, #274	@ 0x112
 800a686:	6839      	ldr	r1, [r7, #0]
 800a688:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a68c:	2300      	movs	r3, #0
 800a68e:	73fb      	strb	r3, [r7, #15]
 800a690:	e004      	b.n	800a69c <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a692:	2302      	movs	r3, #2
 800a694:	73fb      	strb	r3, [r7, #15]
 800a696:	e001      	b.n	800a69c <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a698:	2302      	movs	r3, #2
 800a69a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3714      	adds	r7, #20
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a6aa:	b480      	push	{r7}
 800a6ac:	b087      	sub	sp, #28
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
 800a6b2:	4608      	mov	r0, r1
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	70fb      	strb	r3, [r7, #3]
 800a6bc:	460b      	mov	r3, r1
 800a6be:	70bb      	strb	r3, [r7, #2]
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a6d2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a6d4:	e025      	b.n	800a722 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a6d6:	7dfb      	ldrb	r3, [r7, #23]
 800a6d8:	221a      	movs	r2, #26
 800a6da:	fb02 f303 	mul.w	r3, r2, r3
 800a6de:	3308      	adds	r3, #8
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	3302      	adds	r3, #2
 800a6e6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	795b      	ldrb	r3, [r3, #5]
 800a6ec:	78fa      	ldrb	r2, [r7, #3]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d002      	beq.n	800a6f8 <USBH_FindInterface+0x4e>
 800a6f2:	78fb      	ldrb	r3, [r7, #3]
 800a6f4:	2bff      	cmp	r3, #255	@ 0xff
 800a6f6:	d111      	bne.n	800a71c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a6fc:	78ba      	ldrb	r2, [r7, #2]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d002      	beq.n	800a708 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a702:	78bb      	ldrb	r3, [r7, #2]
 800a704:	2bff      	cmp	r3, #255	@ 0xff
 800a706:	d109      	bne.n	800a71c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a70c:	787a      	ldrb	r2, [r7, #1]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d002      	beq.n	800a718 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a712:	787b      	ldrb	r3, [r7, #1]
 800a714:	2bff      	cmp	r3, #255	@ 0xff
 800a716:	d101      	bne.n	800a71c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a718:	7dfb      	ldrb	r3, [r7, #23]
 800a71a:	e006      	b.n	800a72a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a71c:	7dfb      	ldrb	r3, [r7, #23]
 800a71e:	3301      	adds	r3, #1
 800a720:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a722:	7dfb      	ldrb	r3, [r7, #23]
 800a724:	2b09      	cmp	r3, #9
 800a726:	d9d6      	bls.n	800a6d6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a728:	23ff      	movs	r3, #255	@ 0xff
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	371c      	adds	r7, #28
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr

0800a736 <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 800a736:	b480      	push	{r7}
 800a738:	b087      	sub	sp, #28
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
 800a73e:	460b      	mov	r3, r1
 800a740:	70fb      	strb	r3, [r7, #3]
 800a742:	4613      	mov	r3, r2
 800a744:	70bb      	strb	r3, [r7, #2]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a746:	2300      	movs	r3, #0
 800a748:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a74a:	2300      	movs	r3, #0
 800a74c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a754:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a756:	e017      	b.n	800a788 <USBH_FindInterfaceIndex+0x52>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a758:	7dfb      	ldrb	r3, [r7, #23]
 800a75a:	221a      	movs	r2, #26
 800a75c:	fb02 f303 	mul.w	r3, r2, r3
 800a760:	3308      	adds	r3, #8
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	4413      	add	r3, r2
 800a766:	3302      	adds	r3, #2
 800a768:	613b      	str	r3, [r7, #16]
    if ((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	789b      	ldrb	r3, [r3, #2]
 800a76e:	78fa      	ldrb	r2, [r7, #3]
 800a770:	429a      	cmp	r2, r3
 800a772:	d106      	bne.n	800a782 <USBH_FindInterfaceIndex+0x4c>
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	78db      	ldrb	r3, [r3, #3]
 800a778:	78ba      	ldrb	r2, [r7, #2]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d101      	bne.n	800a782 <USBH_FindInterfaceIndex+0x4c>
    {
      return  if_ix;
 800a77e:	7dfb      	ldrb	r3, [r7, #23]
 800a780:	e006      	b.n	800a790 <USBH_FindInterfaceIndex+0x5a>
    }
    if_ix++;
 800a782:	7dfb      	ldrb	r3, [r7, #23]
 800a784:	3301      	adds	r3, #1
 800a786:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a788:	7dfb      	ldrb	r3, [r7, #23]
 800a78a:	2b09      	cmp	r3, #9
 800a78c:	d9e4      	bls.n	800a758 <USBH_FindInterfaceIndex+0x22>
  }
  return 0xFFU;
 800a78e:	23ff      	movs	r3, #255	@ 0xff
}
 800a790:	4618      	mov	r0, r3
 800a792:	371c      	adds	r7, #28
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f001 fd25 	bl	800c1f4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a7aa:	2101      	movs	r1, #1
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f001 fe2b 	bl	800c408 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a7b2:	2300      	movs	r3, #0
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3708      	adds	r7, #8
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b088      	sub	sp, #32
 800a7c0:	af04      	add	r7, sp, #16
 800a7c2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a7c4:	2302      	movs	r3, #2
 800a7c6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d102      	bne.n	800a7de <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2203      	movs	r2, #3
 800a7dc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	2b0b      	cmp	r3, #11
 800a7e6:	f200 81bd 	bhi.w	800ab64 <USBH_Process+0x3a8>
 800a7ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a7f0 <USBH_Process+0x34>)
 800a7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f0:	0800a821 	.word	0x0800a821
 800a7f4:	0800a853 	.word	0x0800a853
 800a7f8:	0800a8bb 	.word	0x0800a8bb
 800a7fc:	0800aaff 	.word	0x0800aaff
 800a800:	0800ab65 	.word	0x0800ab65
 800a804:	0800a95b 	.word	0x0800a95b
 800a808:	0800aaa5 	.word	0x0800aaa5
 800a80c:	0800a991 	.word	0x0800a991
 800a810:	0800a9b1 	.word	0x0800a9b1
 800a814:	0800a9cf 	.word	0x0800a9cf
 800a818:	0800aa13 	.word	0x0800aa13
 800a81c:	0800aae7 	.word	0x0800aae7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a826:	b2db      	uxtb	r3, r3
 800a828:	2b00      	cmp	r3, #0
 800a82a:	f000 819d 	beq.w	800ab68 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2201      	movs	r2, #1
 800a832:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a834:	20c8      	movs	r0, #200	@ 0xc8
 800a836:	f001 fe31 	bl	800c49c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f001 fd37 	bl	800c2ae <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a850:	e18a      	b.n	800ab68 <USBH_Process+0x3ac>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d107      	bne.n	800a86c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2202      	movs	r2, #2
 800a868:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a86a:	e18c      	b.n	800ab86 <USBH_Process+0x3ca>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 800a872:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a876:	d914      	bls.n	800a8a2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a87e:	3301      	adds	r3, #1
 800a880:	b2da      	uxtb	r2, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a88e:	2b03      	cmp	r3, #3
 800a890:	d903      	bls.n	800a89a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	220d      	movs	r2, #13
 800a896:	701a      	strb	r2, [r3, #0]
      break;
 800a898:	e175      	b.n	800ab86 <USBH_Process+0x3ca>
            phost->gState = HOST_IDLE;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	701a      	strb	r2, [r3, #0]
      break;
 800a8a0:	e171      	b.n	800ab86 <USBH_Process+0x3ca>
          phost->Timeout += 10U;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 800a8a8:	f103 020a 	add.w	r2, r3, #10
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
          USBH_Delay(10U);
 800a8b2:	200a      	movs	r0, #10
 800a8b4:	f001 fdf2 	bl	800c49c <USBH_Delay>
      break;
 800a8b8:	e165      	b.n	800ab86 <USBH_Process+0x3ca>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d005      	beq.n	800a8d0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 800a8ca:	2104      	movs	r1, #4
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a8d0:	2064      	movs	r0, #100	@ 0x64
 800a8d2:	f001 fde3 	bl	800c49c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f001 fcc2 	bl	800c260 <USBH_LL_GetSpeed>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	461a      	mov	r2, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2205      	movs	r2, #5
 800a8ea:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f001 fa98 	bl	800be24 <USBH_AllocPipe>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a8fc:	2180      	movs	r1, #128	@ 0x80
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f001 fa90 	bl	800be24 <USBH_AllocPipe>
 800a904:	4603      	mov	r3, r0
 800a906:	461a      	mov	r2, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	7919      	ldrb	r1, [r3, #4]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a920:	9202      	str	r2, [sp, #8]
 800a922:	2200      	movs	r2, #0
 800a924:	9201      	str	r2, [sp, #4]
 800a926:	9300      	str	r3, [sp, #0]
 800a928:	4603      	mov	r3, r0
 800a92a:	2280      	movs	r2, #128	@ 0x80
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f001 fa4a 	bl	800bdc6 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	7959      	ldrb	r1, [r3, #5]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a946:	9202      	str	r2, [sp, #8]
 800a948:	2200      	movs	r2, #0
 800a94a:	9201      	str	r2, [sp, #4]
 800a94c:	9300      	str	r3, [sp, #0]
 800a94e:	4603      	mov	r3, r0
 800a950:	2200      	movs	r2, #0
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f001 fa37 	bl	800bdc6 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a958:	e115      	b.n	800ab86 <USBH_Process+0x3ca>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 f918 	bl	800ab90 <USBH_HandleEnum>
 800a960:	4603      	mov	r3, r0
 800a962:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a964:	7bbb      	ldrb	r3, [r7, #14]
 800a966:	b2db      	uxtb	r3, r3
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f040 80ff 	bne.w	800ab6c <USBH_Process+0x3b0>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d103      	bne.n	800a988 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2208      	movs	r2, #8
 800a984:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a986:	e0f1      	b.n	800ab6c <USBH_Process+0x3b0>
          phost->gState = HOST_INPUT;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2207      	movs	r2, #7
 800a98c:	701a      	strb	r2, [r3, #0]
      break;
 800a98e:	e0ed      	b.n	800ab6c <USBH_Process+0x3b0>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 800a996:	2b00      	cmp	r3, #0
 800a998:	f000 80ea 	beq.w	800ab70 <USBH_Process+0x3b4>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 800a9a2:	2101      	movs	r1, #1
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2208      	movs	r2, #8
 800a9ac:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a9ae:	e0df      	b.n	800ab70 <USBH_Process+0x3b4>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fc3c 	bl	800b236 <USBH_SetCfg>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f040 80d7 	bne.w	800ab74 <USBH_Process+0x3b8>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2209      	movs	r2, #9
 800a9ca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a9cc:	e0d2      	b.n	800ab74 <USBH_Process+0x3b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a9d4:	f003 0320 	and.w	r3, r3, #32
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d016      	beq.n	800aa0a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a9dc:	2101      	movs	r1, #1
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 fc73 	bl	800b2ca <USBH_SetFeature>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a9e8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d103      	bne.n	800a9f8 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	220a      	movs	r2, #10
 800a9f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a9f6:	e0bf      	b.n	800ab78 <USBH_Process+0x3bc>
        else if (status == USBH_NOT_SUPPORTED)
 800a9f8:	7bbb      	ldrb	r3, [r7, #14]
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	2b03      	cmp	r3, #3
 800a9fe:	f040 80bb 	bne.w	800ab78 <USBH_Process+0x3bc>
          phost->gState = HOST_CHECK_CLASS;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	220a      	movs	r2, #10
 800aa06:	701a      	strb	r2, [r3, #0]
      break;
 800aa08:	e0b6      	b.n	800ab78 <USBH_Process+0x3bc>
        phost->gState = HOST_CHECK_CLASS;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	220a      	movs	r2, #10
 800aa0e:	701a      	strb	r2, [r3, #0]
      break;
 800aa10:	e0b2      	b.n	800ab78 <USBH_Process+0x3bc>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8d3 3450 	ldr.w	r3, [r3, #1104]	@ 0x450
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f000 80af 	beq.w	800ab7c <USBH_Process+0x3c0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aa26:	2300      	movs	r3, #0
 800aa28:	73fb      	strb	r3, [r7, #15]
 800aa2a:	e018      	b.n	800aa5e <USBH_Process+0x2a2>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800aa2c:	7bfa      	ldrb	r2, [r7, #15]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f502 7289 	add.w	r2, r2, #274	@ 0x112
 800aa34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa38:	791a      	ldrb	r2, [r3, #4]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d109      	bne.n	800aa58 <USBH_Process+0x29c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800aa44:	7bfa      	ldrb	r2, [r7, #15]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f502 7289 	add.w	r2, r2, #274	@ 0x112
 800aa4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c
            break;
 800aa56:	e005      	b.n	800aa64 <USBH_Process+0x2a8>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aa58:	7bfb      	ldrb	r3, [r7, #15]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	73fb      	strb	r3, [r7, #15]
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d0e3      	beq.n	800aa2c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d016      	beq.n	800aa9c <USBH_Process+0x2e0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	4798      	blx	r3
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d109      	bne.n	800aa94 <USBH_Process+0x2d8>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2206      	movs	r2, #6
 800aa84:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 800aa8c:	2103      	movs	r1, #3
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aa92:	e073      	b.n	800ab7c <USBH_Process+0x3c0>
            phost->gState = HOST_ABORT_STATE;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	220d      	movs	r2, #13
 800aa98:	701a      	strb	r2, [r3, #0]
      break;
 800aa9a:	e06f      	b.n	800ab7c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	220d      	movs	r2, #13
 800aaa0:	701a      	strb	r2, [r3, #0]
      break;
 800aaa2:	e06b      	b.n	800ab7c <USBH_Process+0x3c0>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d017      	beq.n	800aade <USBH_Process+0x322>
      {
        status = phost->pActiveClass->Requests(phost);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800aab4:	691b      	ldr	r3, [r3, #16]
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	4798      	blx	r3
 800aaba:	4603      	mov	r3, r0
 800aabc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800aabe:	7bbb      	ldrb	r3, [r7, #14]
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d103      	bne.n	800aace <USBH_Process+0x312>
        {
          phost->gState = HOST_CLASS;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	220b      	movs	r2, #11
 800aaca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aacc:	e058      	b.n	800ab80 <USBH_Process+0x3c4>
        else if (status == USBH_FAIL)
 800aace:	7bbb      	ldrb	r3, [r7, #14]
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	2b02      	cmp	r3, #2
 800aad4:	d154      	bne.n	800ab80 <USBH_Process+0x3c4>
          phost->gState = HOST_ABORT_STATE;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	220d      	movs	r2, #13
 800aada:	701a      	strb	r2, [r3, #0]
      break;
 800aadc:	e050      	b.n	800ab80 <USBH_Process+0x3c4>
        phost->gState = HOST_ABORT_STATE;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	220d      	movs	r2, #13
 800aae2:	701a      	strb	r2, [r3, #0]
      break;
 800aae4:	e04c      	b.n	800ab80 <USBH_Process+0x3c4>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d049      	beq.n	800ab84 <USBH_Process+0x3c8>
      {
        phost->pActiveClass->BgndProcess(phost);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800aaf6:	695b      	ldr	r3, [r3, #20]
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	4798      	blx	r3
      }
      break;
 800aafc:	e042      	b.n	800ab84 <USBH_Process+0x3c8>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f7ff fd2f 	bl	800a56a <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d009      	beq.n	800ab2a <USBH_Process+0x36e>
      {
        phost->pActiveClass->DeInit(phost);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c
      }

      if (phost->pUser != NULL)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d005      	beq.n	800ab40 <USBH_Process+0x384>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 800ab3a:	2105      	movs	r1, #5
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d107      	bne.n	800ab5c <USBH_Process+0x3a0>
      {
        phost->device.is_ReEnumerated = 0U;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f7ff fe21 	bl	800a79c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ab5a:	e014      	b.n	800ab86 <USBH_Process+0x3ca>
        (void)USBH_LL_Start(phost);
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f001 fb49 	bl	800c1f4 <USBH_LL_Start>
      break;
 800ab62:	e010      	b.n	800ab86 <USBH_Process+0x3ca>

    case HOST_ABORT_STATE:
    default :
      break;
 800ab64:	bf00      	nop
 800ab66:	e00e      	b.n	800ab86 <USBH_Process+0x3ca>
      break;
 800ab68:	bf00      	nop
 800ab6a:	e00c      	b.n	800ab86 <USBH_Process+0x3ca>
      break;
 800ab6c:	bf00      	nop
 800ab6e:	e00a      	b.n	800ab86 <USBH_Process+0x3ca>
    break;
 800ab70:	bf00      	nop
 800ab72:	e008      	b.n	800ab86 <USBH_Process+0x3ca>
      break;
 800ab74:	bf00      	nop
 800ab76:	e006      	b.n	800ab86 <USBH_Process+0x3ca>
      break;
 800ab78:	bf00      	nop
 800ab7a:	e004      	b.n	800ab86 <USBH_Process+0x3ca>
      break;
 800ab7c:	bf00      	nop
 800ab7e:	e002      	b.n	800ab86 <USBH_Process+0x3ca>
      break;
 800ab80:	bf00      	nop
 800ab82:	e000      	b.n	800ab86 <USBH_Process+0x3ca>
      break;
 800ab84:	bf00      	nop
  }
  return USBH_OK;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3710      	adds	r7, #16
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b088      	sub	sp, #32
 800ab94:	af04      	add	r7, sp, #16
 800ab96:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	785b      	ldrb	r3, [r3, #1]
 800aba4:	2b07      	cmp	r3, #7
 800aba6:	f200 81bd 	bhi.w	800af24 <USBH_HandleEnum+0x394>
 800abaa:	a201      	add	r2, pc, #4	@ (adr r2, 800abb0 <USBH_HandleEnum+0x20>)
 800abac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb0:	0800abd1 	.word	0x0800abd1
 800abb4:	0800ac8b 	.word	0x0800ac8b
 800abb8:	0800acf5 	.word	0x0800acf5
 800abbc:	0800ad7f 	.word	0x0800ad7f
 800abc0:	0800ade9 	.word	0x0800ade9
 800abc4:	0800ae59 	.word	0x0800ae59
 800abc8:	0800ae9f 	.word	0x0800ae9f
 800abcc:	0800aee5 	.word	0x0800aee5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800abd0:	2108      	movs	r1, #8
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 fa4c 	bl	800b070 <USBH_Get_DevDesc>
 800abd8:	4603      	mov	r3, r0
 800abda:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800abdc:	7bbb      	ldrb	r3, [r7, #14]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d12e      	bne.n	800ac40 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2201      	movs	r2, #1
 800abf0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	7919      	ldrb	r1, [r3, #4]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ac06:	9202      	str	r2, [sp, #8]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	9201      	str	r2, [sp, #4]
 800ac0c:	9300      	str	r3, [sp, #0]
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2280      	movs	r2, #128	@ 0x80
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f001 f8d7 	bl	800bdc6 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	7959      	ldrb	r1, [r3, #5]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac2c:	9202      	str	r2, [sp, #8]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	9201      	str	r2, [sp, #4]
 800ac32:	9300      	str	r3, [sp, #0]
 800ac34:	4603      	mov	r3, r0
 800ac36:	2200      	movs	r2, #0
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f001 f8c4 	bl	800bdc6 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ac3e:	e173      	b.n	800af28 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac40:	7bbb      	ldrb	r3, [r7, #14]
 800ac42:	2b03      	cmp	r3, #3
 800ac44:	f040 8170 	bne.w	800af28 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ac4e:	3301      	adds	r3, #1
 800ac50:	b2da      	uxtb	r2, r3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ac5e:	2b03      	cmp	r3, #3
 800ac60:	d903      	bls.n	800ac6a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	220d      	movs	r2, #13
 800ac66:	701a      	strb	r2, [r3, #0]
      break;
 800ac68:	e15e      	b.n	800af28 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	795b      	ldrb	r3, [r3, #5]
 800ac6e:	4619      	mov	r1, r3
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f001 f8f9 	bl	800be68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	791b      	ldrb	r3, [r3, #4]
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f001 f8f3 	bl	800be68 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2200      	movs	r2, #0
 800ac86:	701a      	strb	r2, [r3, #0]
      break;
 800ac88:	e14e      	b.n	800af28 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ac8a:	2112      	movs	r1, #18
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 f9ef 	bl	800b070 <USBH_Get_DevDesc>
 800ac92:	4603      	mov	r3, r0
 800ac94:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac96:	7bbb      	ldrb	r3, [r7, #14]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d103      	bne.n	800aca4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2202      	movs	r2, #2
 800aca0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aca2:	e143      	b.n	800af2c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aca4:	7bbb      	ldrb	r3, [r7, #14]
 800aca6:	2b03      	cmp	r3, #3
 800aca8:	f040 8140 	bne.w	800af2c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800acb2:	3301      	adds	r3, #1
 800acb4:	b2da      	uxtb	r2, r3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800acc2:	2b03      	cmp	r3, #3
 800acc4:	d903      	bls.n	800acce <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	220d      	movs	r2, #13
 800acca:	701a      	strb	r2, [r3, #0]
      break;
 800accc:	e12e      	b.n	800af2c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	795b      	ldrb	r3, [r3, #5]
 800acd2:	4619      	mov	r1, r3
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f001 f8c7 	bl	800be68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	791b      	ldrb	r3, [r3, #4]
 800acde:	4619      	mov	r1, r3
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f001 f8c1 	bl	800be68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	701a      	strb	r2, [r3, #0]
      break;
 800acf2:	e11b      	b.n	800af2c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800acf4:	2101      	movs	r1, #1
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 fa79 	bl	800b1ee <USBH_SetAddress>
 800acfc:	4603      	mov	r3, r0
 800acfe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad00:	7bbb      	ldrb	r3, [r7, #14]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d130      	bne.n	800ad68 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800ad06:	2002      	movs	r0, #2
 800ad08:	f001 fbc8 	bl	800c49c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2203      	movs	r2, #3
 800ad18:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	7919      	ldrb	r1, [r3, #4]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ad2e:	9202      	str	r2, [sp, #8]
 800ad30:	2200      	movs	r2, #0
 800ad32:	9201      	str	r2, [sp, #4]
 800ad34:	9300      	str	r3, [sp, #0]
 800ad36:	4603      	mov	r3, r0
 800ad38:	2280      	movs	r2, #128	@ 0x80
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f001 f843 	bl	800bdc6 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	7959      	ldrb	r1, [r3, #5]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ad54:	9202      	str	r2, [sp, #8]
 800ad56:	2200      	movs	r2, #0
 800ad58:	9201      	str	r2, [sp, #4]
 800ad5a:	9300      	str	r3, [sp, #0]
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	2200      	movs	r2, #0
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f001 f830 	bl	800bdc6 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ad66:	e0e3      	b.n	800af30 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad68:	7bbb      	ldrb	r3, [r7, #14]
 800ad6a:	2b03      	cmp	r3, #3
 800ad6c:	f040 80e0 	bne.w	800af30 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	220d      	movs	r2, #13
 800ad74:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	705a      	strb	r2, [r3, #1]
      break;
 800ad7c:	e0d8      	b.n	800af30 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ad7e:	2109      	movs	r1, #9
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f9a1 	bl	800b0c8 <USBH_Get_CfgDesc>
 800ad86:	4603      	mov	r3, r0
 800ad88:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad8a:	7bbb      	ldrb	r3, [r7, #14]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d103      	bne.n	800ad98 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2204      	movs	r2, #4
 800ad94:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ad96:	e0cd      	b.n	800af34 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad98:	7bbb      	ldrb	r3, [r7, #14]
 800ad9a:	2b03      	cmp	r3, #3
 800ad9c:	f040 80ca 	bne.w	800af34 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ada6:	3301      	adds	r3, #1
 800ada8:	b2da      	uxtb	r2, r3
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800adb6:	2b03      	cmp	r3, #3
 800adb8:	d903      	bls.n	800adc2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	220d      	movs	r2, #13
 800adbe:	701a      	strb	r2, [r3, #0]
      break;
 800adc0:	e0b8      	b.n	800af34 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	795b      	ldrb	r3, [r3, #5]
 800adc6:	4619      	mov	r1, r3
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f001 f84d 	bl	800be68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	791b      	ldrb	r3, [r3, #4]
 800add2:	4619      	mov	r1, r3
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f001 f847 	bl	800be68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	701a      	strb	r2, [r3, #0]
      break;
 800ade6:	e0a5      	b.n	800af34 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800adee:	4619      	mov	r1, r3
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 f969 	bl	800b0c8 <USBH_Get_CfgDesc>
 800adf6:	4603      	mov	r3, r0
 800adf8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800adfa:	7bbb      	ldrb	r3, [r7, #14]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d103      	bne.n	800ae08 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2205      	movs	r2, #5
 800ae04:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ae06:	e097      	b.n	800af38 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae08:	7bbb      	ldrb	r3, [r7, #14]
 800ae0a:	2b03      	cmp	r3, #3
 800ae0c:	f040 8094 	bne.w	800af38 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ae16:	3301      	adds	r3, #1
 800ae18:	b2da      	uxtb	r2, r3
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ae26:	2b03      	cmp	r3, #3
 800ae28:	d903      	bls.n	800ae32 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	220d      	movs	r2, #13
 800ae2e:	701a      	strb	r2, [r3, #0]
      break;
 800ae30:	e082      	b.n	800af38 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	795b      	ldrb	r3, [r3, #5]
 800ae36:	4619      	mov	r1, r3
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f001 f815 	bl	800be68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	791b      	ldrb	r3, [r3, #4]
 800ae42:	4619      	mov	r1, r3
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f001 f80f 	bl	800be68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	701a      	strb	r2, [r3, #0]
      break;
 800ae56:	e06f      	b.n	800af38 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d019      	beq.n	800ae96 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ae6e:	23ff      	movs	r3, #255	@ 0xff
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 f953 	bl	800b11c <USBH_Get_StringDesc>
 800ae76:	4603      	mov	r3, r0
 800ae78:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ae7a:	7bbb      	ldrb	r3, [r7, #14]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d103      	bne.n	800ae88 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2206      	movs	r2, #6
 800ae84:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ae86:	e059      	b.n	800af3c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae88:	7bbb      	ldrb	r3, [r7, #14]
 800ae8a:	2b03      	cmp	r3, #3
 800ae8c:	d156      	bne.n	800af3c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2206      	movs	r2, #6
 800ae92:	705a      	strb	r2, [r3, #1]
      break;
 800ae94:	e052      	b.n	800af3c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2206      	movs	r2, #6
 800ae9a:	705a      	strb	r2, [r3, #1]
      break;
 800ae9c:	e04e      	b.n	800af3c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d019      	beq.n	800aedc <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aeb4:	23ff      	movs	r3, #255	@ 0xff
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 f930 	bl	800b11c <USBH_Get_StringDesc>
 800aebc:	4603      	mov	r3, r0
 800aebe:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aec0:	7bbb      	ldrb	r3, [r7, #14]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d103      	bne.n	800aece <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2207      	movs	r2, #7
 800aeca:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800aecc:	e038      	b.n	800af40 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aece:	7bbb      	ldrb	r3, [r7, #14]
 800aed0:	2b03      	cmp	r3, #3
 800aed2:	d135      	bne.n	800af40 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2207      	movs	r2, #7
 800aed8:	705a      	strb	r2, [r3, #1]
      break;
 800aeda:	e031      	b.n	800af40 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2207      	movs	r2, #7
 800aee0:	705a      	strb	r2, [r3, #1]
      break;
 800aee2:	e02d      	b.n	800af40 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d017      	beq.n	800af1e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800aefa:	23ff      	movs	r3, #255	@ 0xff
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 f90d 	bl	800b11c <USBH_Get_StringDesc>
 800af02:	4603      	mov	r3, r0
 800af04:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800af06:	7bbb      	ldrb	r3, [r7, #14]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d102      	bne.n	800af12 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800af0c:	2300      	movs	r3, #0
 800af0e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800af10:	e018      	b.n	800af44 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af12:	7bbb      	ldrb	r3, [r7, #14]
 800af14:	2b03      	cmp	r3, #3
 800af16:	d115      	bne.n	800af44 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800af18:	2300      	movs	r3, #0
 800af1a:	73fb      	strb	r3, [r7, #15]
      break;
 800af1c:	e012      	b.n	800af44 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800af1e:	2300      	movs	r3, #0
 800af20:	73fb      	strb	r3, [r7, #15]
      break;
 800af22:	e00f      	b.n	800af44 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800af24:	bf00      	nop
 800af26:	e00e      	b.n	800af46 <USBH_HandleEnum+0x3b6>
      break;
 800af28:	bf00      	nop
 800af2a:	e00c      	b.n	800af46 <USBH_HandleEnum+0x3b6>
      break;
 800af2c:	bf00      	nop
 800af2e:	e00a      	b.n	800af46 <USBH_HandleEnum+0x3b6>
      break;
 800af30:	bf00      	nop
 800af32:	e008      	b.n	800af46 <USBH_HandleEnum+0x3b6>
      break;
 800af34:	bf00      	nop
 800af36:	e006      	b.n	800af46 <USBH_HandleEnum+0x3b6>
      break;
 800af38:	bf00      	nop
 800af3a:	e004      	b.n	800af46 <USBH_HandleEnum+0x3b6>
      break;
 800af3c:	bf00      	nop
 800af3e:	e002      	b.n	800af46 <USBH_HandleEnum+0x3b6>
      break;
 800af40:	bf00      	nop
 800af42:	e000      	b.n	800af46 <USBH_HandleEnum+0x3b6>
      break;
 800af44:	bf00      	nop
  }
  return Status;
 800af46:	7bfb      	ldrb	r3, [r7, #15]
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800af50:	b480      	push	{r7}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	683a      	ldr	r2, [r7, #0]
 800af5e:	f8c3 2494 	str.w	r2, [r3, #1172]	@ 0x494
}
 800af62:	bf00      	nop
 800af64:	370c      	adds	r7, #12
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr

0800af6e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800af6e:	b580      	push	{r7, lr}
 800af70:	b082      	sub	sp, #8
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800af7c:	1c5a      	adds	r2, r3, #1
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8c3 2494 	str.w	r2, [r3, #1172]	@ 0x494
  USBH_HandleSof(phost);
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 f804 	bl	800af92 <USBH_HandleSof>
}
 800af8a:	bf00      	nop
 800af8c:	3708      	adds	r7, #8
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}

0800af92 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800af92:	b580      	push	{r7, lr}
 800af94:	b082      	sub	sp, #8
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	2b0b      	cmp	r3, #11
 800afa2:	d10a      	bne.n	800afba <USBH_HandleSof+0x28>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d005      	beq.n	800afba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800afb4:	699b      	ldr	r3, [r3, #24]
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	4798      	blx	r3
  }
}
 800afba:	bf00      	nop
 800afbc:	3708      	adds	r7, #8
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800afc2:	b480      	push	{r7}
 800afc4:	b083      	sub	sp, #12
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2201      	movs	r2, #1
 800afce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800afd2:	bf00      	nop
}
 800afd4:	370c      	adds	r7, #12
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr

0800afde <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800afde:	b480      	push	{r7}
 800afe0:	b083      	sub	sp, #12
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800afee:	bf00      	nop
}
 800aff0:	370c      	adds	r7, #12
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800affa:	b480      	push	{r7}
 800affc:	b083      	sub	sp, #12
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2201      	movs	r2, #1
 800b006:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2200      	movs	r2, #0
 800b00e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2200      	movs	r2, #0
 800b016:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2201      	movs	r2, #1
 800b034:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f001 f8ee 	bl	800c22a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	791b      	ldrb	r3, [r3, #4]
 800b052:	4619      	mov	r1, r3
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 ff07 	bl	800be68 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	795b      	ldrb	r3, [r3, #5]
 800b05e:	4619      	mov	r1, r3
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 ff01 	bl	800be68 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3708      	adds	r7, #8
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b086      	sub	sp, #24
 800b074:	af02      	add	r7, sp, #8
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	460b      	mov	r3, r1
 800b07a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800b07c:	887b      	ldrh	r3, [r7, #2]
 800b07e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b082:	d901      	bls.n	800b088 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b084:	2303      	movs	r3, #3
 800b086:	e01b      	b.n	800b0c0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b08e:	887b      	ldrh	r3, [r7, #2]
 800b090:	9300      	str	r3, [sp, #0]
 800b092:	4613      	mov	r3, r2
 800b094:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b098:	2100      	movs	r1, #0
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 f872 	bl	800b184 <USBH_GetDescriptor>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d109      	bne.n	800b0be <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b0b0:	887a      	ldrh	r2, [r7, #2]
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 f92d 	bl	800b314 <USBH_ParseDevDesc>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b0be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3710      	adds	r7, #16
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b086      	sub	sp, #24
 800b0cc:	af02      	add	r7, sp, #8
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	331c      	adds	r3, #28
 800b0d8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800b0da:	887b      	ldrh	r3, [r7, #2]
 800b0dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0e0:	d901      	bls.n	800b0e6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b0e2:	2303      	movs	r3, #3
 800b0e4:	e016      	b.n	800b114 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b0e6:	887b      	ldrh	r3, [r7, #2]
 800b0e8:	9300      	str	r3, [sp, #0]
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 f846 	bl	800b184 <USBH_GetDescriptor>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b0fc:	7bfb      	ldrb	r3, [r7, #15]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d107      	bne.n	800b112 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b102:	887b      	ldrh	r3, [r7, #2]
 800b104:	461a      	mov	r2, r3
 800b106:	68b9      	ldr	r1, [r7, #8]
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 f9b3 	bl	800b474 <USBH_ParseCfgDesc>
 800b10e:	4603      	mov	r3, r0
 800b110:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b112:	7bfb      	ldrb	r3, [r7, #15]
}
 800b114:	4618      	mov	r0, r3
 800b116:	3710      	adds	r7, #16
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b088      	sub	sp, #32
 800b120:	af02      	add	r7, sp, #8
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	607a      	str	r2, [r7, #4]
 800b126:	461a      	mov	r2, r3
 800b128:	460b      	mov	r3, r1
 800b12a:	72fb      	strb	r3, [r7, #11]
 800b12c:	4613      	mov	r3, r2
 800b12e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800b130:	893b      	ldrh	r3, [r7, #8]
 800b132:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b136:	d802      	bhi.n	800b13e <USBH_Get_StringDesc+0x22>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d101      	bne.n	800b142 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b13e:	2303      	movs	r3, #3
 800b140:	e01c      	b.n	800b17c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800b142:	7afb      	ldrb	r3, [r7, #11]
 800b144:	b29b      	uxth	r3, r3
 800b146:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800b14a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b152:	893b      	ldrh	r3, [r7, #8]
 800b154:	9300      	str	r3, [sp, #0]
 800b156:	460b      	mov	r3, r1
 800b158:	2100      	movs	r1, #0
 800b15a:	68f8      	ldr	r0, [r7, #12]
 800b15c:	f000 f812 	bl	800b184 <USBH_GetDescriptor>
 800b160:	4603      	mov	r3, r0
 800b162:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b164:	7dfb      	ldrb	r3, [r7, #23]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d107      	bne.n	800b17a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b170:	893a      	ldrh	r2, [r7, #8]
 800b172:	6879      	ldr	r1, [r7, #4]
 800b174:	4618      	mov	r0, r3
 800b176:	f000 fb91 	bl	800b89c <USBH_ParseStringDesc>
  }

  return status;
 800b17a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3718      	adds	r7, #24
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	607b      	str	r3, [r7, #4]
 800b18e:	460b      	mov	r3, r1
 800b190:	72fb      	strb	r3, [r7, #11]
 800b192:	4613      	mov	r3, r2
 800b194:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	789b      	ldrb	r3, [r3, #2]
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	d11c      	bne.n	800b1d8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b19e:	7afb      	ldrb	r3, [r7, #11]
 800b1a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b1a4:	b2da      	uxtb	r2, r3
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2206      	movs	r2, #6
 800b1ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	893a      	ldrh	r2, [r7, #8]
 800b1b4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b1b6:	893b      	ldrh	r3, [r7, #8]
 800b1b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b1bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1c0:	d104      	bne.n	800b1cc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f240 4209 	movw	r2, #1033	@ 0x409
 800b1c8:	829a      	strh	r2, [r3, #20]
 800b1ca:	e002      	b.n	800b1d2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	8b3a      	ldrh	r2, [r7, #24]
 800b1d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b1d8:	8b3b      	ldrh	r3, [r7, #24]
 800b1da:	461a      	mov	r2, r3
 800b1dc:	6879      	ldr	r1, [r7, #4]
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	f000 fba9 	bl	800b936 <USBH_CtlReq>
 800b1e4:	4603      	mov	r3, r0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3710      	adds	r7, #16
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b082      	sub	sp, #8
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	789b      	ldrb	r3, [r3, #2]
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d10f      	bne.n	800b222 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2200      	movs	r2, #0
 800b206:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2205      	movs	r2, #5
 800b20c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b20e:	78fb      	ldrb	r3, [r7, #3]
 800b210:	b29a      	uxth	r2, r3
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2200      	movs	r2, #0
 800b21a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b222:	2200      	movs	r2, #0
 800b224:	2100      	movs	r1, #0
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 fb85 	bl	800b936 <USBH_CtlReq>
 800b22c:	4603      	mov	r3, r0
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3708      	adds	r7, #8
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}

0800b236 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b236:	b580      	push	{r7, lr}
 800b238:	b082      	sub	sp, #8
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
 800b23e:	460b      	mov	r3, r1
 800b240:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	789b      	ldrb	r3, [r3, #2]
 800b246:	2b01      	cmp	r3, #1
 800b248:	d10e      	bne.n	800b268 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2209      	movs	r2, #9
 800b254:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	887a      	ldrh	r2, [r7, #2]
 800b25a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b268:	2200      	movs	r2, #0
 800b26a:	2100      	movs	r1, #0
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 fb62 	bl	800b936 <USBH_CtlReq>
 800b272:	4603      	mov	r3, r0
}
 800b274:	4618      	mov	r0, r3
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <USBH_SetInterface>:
  * @param  phost: Host Handle
  * @param  altSetting: Interface value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetInterface(USBH_HandleTypeDef *phost, uint8_t ep_num, uint8_t altSetting)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	460b      	mov	r3, r1
 800b286:	70fb      	strb	r3, [r7, #3]
 800b288:	4613      	mov	r3, r2
 800b28a:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	789b      	ldrb	r3, [r3, #2]
 800b290:	2b01      	cmp	r3, #1
 800b292:	d110      	bne.n	800b2b6 <USBH_SetInterface+0x3a>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2201      	movs	r2, #1
 800b298:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	220b      	movs	r2, #11
 800b29e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = altSetting;
 800b2a0:	78bb      	ldrb	r3, [r7, #2]
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b2a8:	78fb      	ldrb	r3, [r7, #3]
 800b2aa:	b29a      	uxth	r2, r3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 fb3b 	bl	800b936 <USBH_CtlReq>
 800b2c0:	4603      	mov	r3, r0
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3708      	adds	r7, #8
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b2ca:	b580      	push	{r7, lr}
 800b2cc:	b082      	sub	sp, #8
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	789b      	ldrb	r3, [r3, #2]
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d10f      	bne.n	800b2fe <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2203      	movs	r2, #3
 800b2e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b2ea:	78fb      	ldrb	r3, [r7, #3]
 800b2ec:	b29a      	uxth	r2, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b2fe:	2200      	movs	r2, #0
 800b300:	2100      	movs	r1, #0
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 fb17 	bl	800b936 <USBH_CtlReq>
 800b308:	4603      	mov	r3, r0
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3708      	adds	r7, #8
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
	...

0800b314 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b314:	b480      	push	{r7}
 800b316:	b087      	sub	sp, #28
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	4613      	mov	r3, r2
 800b320:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800b328:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800b32a:	2300      	movs	r3, #0
 800b32c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d101      	bne.n	800b338 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800b334:	2302      	movs	r3, #2
 800b336:	e094      	b.n	800b462 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	781a      	ldrb	r2, [r3, #0]
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	785a      	ldrb	r2, [r3, #1]
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	3302      	adds	r3, #2
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	461a      	mov	r2, r3
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	3303      	adds	r3, #3
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	021b      	lsls	r3, r3, #8
 800b358:	b29b      	uxth	r3, r3
 800b35a:	4313      	orrs	r3, r2
 800b35c:	b29a      	uxth	r2, r3
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	791a      	ldrb	r2, [r3, #4]
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	795a      	ldrb	r2, [r3, #5]
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	799a      	ldrb	r2, [r3, #6]
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	79da      	ldrb	r2, [r3, #7]
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d004      	beq.n	800b396 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b392:	2b01      	cmp	r3, #1
 800b394:	d11b      	bne.n	800b3ce <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	79db      	ldrb	r3, [r3, #7]
 800b39a:	2b20      	cmp	r3, #32
 800b39c:	dc0f      	bgt.n	800b3be <USBH_ParseDevDesc+0xaa>
 800b39e:	2b08      	cmp	r3, #8
 800b3a0:	db0f      	blt.n	800b3c2 <USBH_ParseDevDesc+0xae>
 800b3a2:	3b08      	subs	r3, #8
 800b3a4:	4a32      	ldr	r2, [pc, #200]	@ (800b470 <USBH_ParseDevDesc+0x15c>)
 800b3a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b3aa:	f003 0301 	and.w	r3, r3, #1
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	bf14      	ite	ne
 800b3b2:	2301      	movne	r3, #1
 800b3b4:	2300      	moveq	r3, #0
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d106      	bne.n	800b3ca <USBH_ParseDevDesc+0xb6>
 800b3bc:	e001      	b.n	800b3c2 <USBH_ParseDevDesc+0xae>
 800b3be:	2b40      	cmp	r3, #64	@ 0x40
 800b3c0:	d003      	beq.n	800b3ca <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	2208      	movs	r2, #8
 800b3c6:	71da      	strb	r2, [r3, #7]
        break;
 800b3c8:	e000      	b.n	800b3cc <USBH_ParseDevDesc+0xb8>
        break;
 800b3ca:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800b3cc:	e00e      	b.n	800b3ec <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b3d4:	2b02      	cmp	r3, #2
 800b3d6:	d107      	bne.n	800b3e8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	79db      	ldrb	r3, [r3, #7]
 800b3dc:	2b08      	cmp	r3, #8
 800b3de:	d005      	beq.n	800b3ec <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	2208      	movs	r2, #8
 800b3e4:	71da      	strb	r2, [r3, #7]
 800b3e6:	e001      	b.n	800b3ec <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b3e8:	2303      	movs	r3, #3
 800b3ea:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800b3ec:	88fb      	ldrh	r3, [r7, #6]
 800b3ee:	2b08      	cmp	r3, #8
 800b3f0:	d936      	bls.n	800b460 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	3308      	adds	r3, #8
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	3309      	adds	r3, #9
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	021b      	lsls	r3, r3, #8
 800b402:	b29b      	uxth	r3, r3
 800b404:	4313      	orrs	r3, r2
 800b406:	b29a      	uxth	r2, r3
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	330a      	adds	r3, #10
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	461a      	mov	r2, r3
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	330b      	adds	r3, #11
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	021b      	lsls	r3, r3, #8
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	4313      	orrs	r3, r2
 800b420:	b29a      	uxth	r2, r3
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	330c      	adds	r3, #12
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	461a      	mov	r2, r3
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	330d      	adds	r3, #13
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	021b      	lsls	r3, r3, #8
 800b436:	b29b      	uxth	r3, r3
 800b438:	4313      	orrs	r3, r2
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	7b9a      	ldrb	r2, [r3, #14]
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	7bda      	ldrb	r2, [r3, #15]
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	7c1a      	ldrb	r2, [r3, #16]
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	7c5a      	ldrb	r2, [r3, #17]
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800b460:	7dfb      	ldrb	r3, [r7, #23]
}
 800b462:	4618      	mov	r0, r3
 800b464:	371c      	adds	r7, #28
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr
 800b46e:	bf00      	nop
 800b470:	01000101 	.word	0x01000101

0800b474 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b08c      	sub	sp, #48	@ 0x30
 800b478:	af00      	add	r7, sp, #0
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	60b9      	str	r1, [r7, #8]
 800b47e:	4613      	mov	r3, r2
 800b480:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b488:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b48a:	2300      	movs	r3, #0
 800b48c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b490:	2300      	movs	r3, #0
 800b492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800b496:	2300      	movs	r3, #0
 800b498:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d101      	bne.n	800b4a6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800b4a2:	2302      	movs	r3, #2
 800b4a4:	e0da      	b.n	800b65c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	781a      	ldrb	r2, [r3, #0]
 800b4ae:	6a3b      	ldr	r3, [r7, #32]
 800b4b0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	785a      	ldrb	r2, [r3, #1]
 800b4b6:	6a3b      	ldr	r3, [r7, #32]
 800b4b8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	3302      	adds	r3, #2
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	3303      	adds	r3, #3
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	021b      	lsls	r3, r3, #8
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4d4:	bf28      	it	cs
 800b4d6:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800b4da:	b29a      	uxth	r2, r3
 800b4dc:	6a3b      	ldr	r3, [r7, #32]
 800b4de:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	791a      	ldrb	r2, [r3, #4]
 800b4e4:	6a3b      	ldr	r3, [r7, #32]
 800b4e6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	795a      	ldrb	r2, [r3, #5]
 800b4ec:	6a3b      	ldr	r3, [r7, #32]
 800b4ee:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	799a      	ldrb	r2, [r3, #6]
 800b4f4:	6a3b      	ldr	r3, [r7, #32]
 800b4f6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	79da      	ldrb	r2, [r3, #7]
 800b4fc:	6a3b      	ldr	r3, [r7, #32]
 800b4fe:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	7a1a      	ldrb	r2, [r3, #8]
 800b504:	6a3b      	ldr	r3, [r7, #32]
 800b506:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800b508:	6a3b      	ldr	r3, [r7, #32]
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	2b09      	cmp	r3, #9
 800b50e:	d002      	beq.n	800b516 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b510:	6a3b      	ldr	r3, [r7, #32]
 800b512:	2209      	movs	r2, #9
 800b514:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b516:	88fb      	ldrh	r3, [r7, #6]
 800b518:	2b09      	cmp	r3, #9
 800b51a:	f240 809d 	bls.w	800b658 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800b51e:	2309      	movs	r3, #9
 800b520:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b522:	2300      	movs	r3, #0
 800b524:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b526:	e081      	b.n	800b62c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b528:	f107 0316 	add.w	r3, r7, #22
 800b52c:	4619      	mov	r1, r3
 800b52e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b530:	f000 f9e7 	bl	800b902 <USBH_GetNextDesc>
 800b534:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b538:	785b      	ldrb	r3, [r3, #1]
 800b53a:	2b04      	cmp	r3, #4
 800b53c:	d176      	bne.n	800b62c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b53e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	2b09      	cmp	r3, #9
 800b544:	d002      	beq.n	800b54c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b548:	2209      	movs	r2, #9
 800b54a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b54c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b550:	221a      	movs	r2, #26
 800b552:	fb02 f303 	mul.w	r3, r2, r3
 800b556:	3308      	adds	r3, #8
 800b558:	6a3a      	ldr	r2, [r7, #32]
 800b55a:	4413      	add	r3, r2
 800b55c:	3302      	adds	r3, #2
 800b55e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b560:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b562:	69f8      	ldr	r0, [r7, #28]
 800b564:	f000 f87e 	bl	800b664 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b568:	2300      	movs	r3, #0
 800b56a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b56e:	2300      	movs	r3, #0
 800b570:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b572:	e043      	b.n	800b5fc <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b574:	f107 0316 	add.w	r3, r7, #22
 800b578:	4619      	mov	r1, r3
 800b57a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b57c:	f000 f9c1 	bl	800b902 <USBH_GetNextDesc>
 800b580:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b584:	785b      	ldrb	r3, [r3, #1]
 800b586:	2b05      	cmp	r3, #5
 800b588:	d138      	bne.n	800b5fc <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800b58a:	69fb      	ldr	r3, [r7, #28]
 800b58c:	795b      	ldrb	r3, [r3, #5]
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d113      	bne.n	800b5ba <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b592:	69fb      	ldr	r3, [r7, #28]
 800b594:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800b596:	2b02      	cmp	r3, #2
 800b598:	d003      	beq.n	800b5a2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b59a:	69fb      	ldr	r3, [r7, #28]
 800b59c:	799b      	ldrb	r3, [r3, #6]
 800b59e:	2b03      	cmp	r3, #3
 800b5a0:	d10b      	bne.n	800b5ba <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b5a2:	69fb      	ldr	r3, [r7, #28]
 800b5a4:	79db      	ldrb	r3, [r3, #7]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d10b      	bne.n	800b5c2 <USBH_ParseCfgDesc+0x14e>
 800b5aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	2b09      	cmp	r3, #9
 800b5b0:	d007      	beq.n	800b5c2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800b5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5b4:	2209      	movs	r2, #9
 800b5b6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b5b8:	e003      	b.n	800b5c2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5bc:	2207      	movs	r2, #7
 800b5be:	701a      	strb	r2, [r3, #0]
 800b5c0:	e000      	b.n	800b5c4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b5c2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b5c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5c8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b5cc:	3201      	adds	r2, #1
 800b5ce:	00d2      	lsls	r2, r2, #3
 800b5d0:	211a      	movs	r1, #26
 800b5d2:	fb01 f303 	mul.w	r3, r1, r3
 800b5d6:	4413      	add	r3, r2
 800b5d8:	3308      	adds	r3, #8
 800b5da:	6a3a      	ldr	r2, [r7, #32]
 800b5dc:	4413      	add	r3, r2
 800b5de:	3304      	adds	r3, #4
 800b5e0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b5e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b5e4:	69b9      	ldr	r1, [r7, #24]
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	f000 f870 	bl	800b6cc <USBH_ParseEPDesc>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800b5f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	791b      	ldrb	r3, [r3, #4]
 800b600:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b604:	429a      	cmp	r2, r3
 800b606:	d204      	bcs.n	800b612 <USBH_ParseCfgDesc+0x19e>
 800b608:	6a3b      	ldr	r3, [r7, #32]
 800b60a:	885a      	ldrh	r2, [r3, #2]
 800b60c:	8afb      	ldrh	r3, [r7, #22]
 800b60e:	429a      	cmp	r2, r3
 800b610:	d8b0      	bhi.n	800b574 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b612:	69fb      	ldr	r3, [r7, #28]
 800b614:	791b      	ldrb	r3, [r3, #4]
 800b616:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d201      	bcs.n	800b622 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800b61e:	2303      	movs	r3, #3
 800b620:	e01c      	b.n	800b65c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800b622:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b626:	3301      	adds	r3, #1
 800b628:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b62c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b630:	2b09      	cmp	r3, #9
 800b632:	d805      	bhi.n	800b640 <USBH_ParseCfgDesc+0x1cc>
 800b634:	6a3b      	ldr	r3, [r7, #32]
 800b636:	885a      	ldrh	r2, [r3, #2]
 800b638:	8afb      	ldrh	r3, [r7, #22]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	f63f af74 	bhi.w	800b528 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b640:	6a3b      	ldr	r3, [r7, #32]
 800b642:	791b      	ldrb	r3, [r3, #4]
 800b644:	2b0a      	cmp	r3, #10
 800b646:	bf28      	it	cs
 800b648:	230a      	movcs	r3, #10
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b650:	429a      	cmp	r2, r3
 800b652:	d201      	bcs.n	800b658 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800b654:	2303      	movs	r3, #3
 800b656:	e001      	b.n	800b65c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800b658:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3730      	adds	r7, #48	@ 0x30
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	781a      	ldrb	r2, [r3, #0]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	785a      	ldrb	r2, [r3, #1]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	789a      	ldrb	r2, [r3, #2]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	78da      	ldrb	r2, [r3, #3]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	3304      	adds	r3, #4
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	2b02      	cmp	r3, #2
 800b696:	bf28      	it	cs
 800b698:	2302      	movcs	r3, #2
 800b69a:	b2da      	uxtb	r2, r3
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	795a      	ldrb	r2, [r3, #5]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	799a      	ldrb	r2, [r3, #6]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	79da      	ldrb	r2, [r3, #7]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	7a1a      	ldrb	r2, [r3, #8]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	721a      	strb	r2, [r3, #8]
}
 800b6c0:	bf00      	nop
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b087      	sub	sp, #28
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	781a      	ldrb	r2, [r3, #0]
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	785a      	ldrb	r2, [r3, #1]
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	789a      	ldrb	r2, [r3, #2]
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	78da      	ldrb	r2, [r3, #3]
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	3304      	adds	r3, #4
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	461a      	mov	r2, r3
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	3305      	adds	r3, #5
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	021b      	lsls	r3, r3, #8
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	4313      	orrs	r3, r2
 800b710:	b29a      	uxth	r2, r3
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	799a      	ldrb	r2, [r3, #6]
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	889b      	ldrh	r3, [r3, #4]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d009      	beq.n	800b73a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b72a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b72e:	d804      	bhi.n	800b73a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b734:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b738:	d901      	bls.n	800b73e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800b73a:	2303      	movs	r3, #3
 800b73c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b744:	2b00      	cmp	r3, #0
 800b746:	d136      	bne.n	800b7b6 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	78db      	ldrb	r3, [r3, #3]
 800b74c:	f003 0303 	and.w	r3, r3, #3
 800b750:	2b02      	cmp	r3, #2
 800b752:	d108      	bne.n	800b766 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	889b      	ldrh	r3, [r3, #4]
 800b758:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b75c:	f240 8097 	bls.w	800b88e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b760:	2303      	movs	r3, #3
 800b762:	75fb      	strb	r3, [r7, #23]
 800b764:	e093      	b.n	800b88e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	78db      	ldrb	r3, [r3, #3]
 800b76a:	f003 0303 	and.w	r3, r3, #3
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d107      	bne.n	800b782 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	889b      	ldrh	r3, [r3, #4]
 800b776:	2b40      	cmp	r3, #64	@ 0x40
 800b778:	f240 8089 	bls.w	800b88e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b77c:	2303      	movs	r3, #3
 800b77e:	75fb      	strb	r3, [r7, #23]
 800b780:	e085      	b.n	800b88e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	78db      	ldrb	r3, [r3, #3]
 800b786:	f003 0303 	and.w	r3, r3, #3
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d005      	beq.n	800b79a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	78db      	ldrb	r3, [r3, #3]
 800b792:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b796:	2b03      	cmp	r3, #3
 800b798:	d10a      	bne.n	800b7b0 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	799b      	ldrb	r3, [r3, #6]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d003      	beq.n	800b7aa <USBH_ParseEPDesc+0xde>
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	799b      	ldrb	r3, [r3, #6]
 800b7a6:	2b10      	cmp	r3, #16
 800b7a8:	d970      	bls.n	800b88c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800b7aa:	2303      	movs	r3, #3
 800b7ac:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b7ae:	e06d      	b.n	800b88c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b7b0:	2303      	movs	r3, #3
 800b7b2:	75fb      	strb	r3, [r7, #23]
 800b7b4:	e06b      	b.n	800b88e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d13c      	bne.n	800b83a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	78db      	ldrb	r3, [r3, #3]
 800b7c4:	f003 0303 	and.w	r3, r3, #3
 800b7c8:	2b02      	cmp	r3, #2
 800b7ca:	d005      	beq.n	800b7d8 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	78db      	ldrb	r3, [r3, #3]
 800b7d0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d106      	bne.n	800b7e6 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	889b      	ldrh	r3, [r3, #4]
 800b7dc:	2b40      	cmp	r3, #64	@ 0x40
 800b7de:	d956      	bls.n	800b88e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b7e0:	2303      	movs	r3, #3
 800b7e2:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b7e4:	e053      	b.n	800b88e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	78db      	ldrb	r3, [r3, #3]
 800b7ea:	f003 0303 	and.w	r3, r3, #3
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d10e      	bne.n	800b810 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	799b      	ldrb	r3, [r3, #6]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d007      	beq.n	800b80a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800b7fe:	2b10      	cmp	r3, #16
 800b800:	d803      	bhi.n	800b80a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800b806:	2b40      	cmp	r3, #64	@ 0x40
 800b808:	d941      	bls.n	800b88e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b80a:	2303      	movs	r3, #3
 800b80c:	75fb      	strb	r3, [r7, #23]
 800b80e:	e03e      	b.n	800b88e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	78db      	ldrb	r3, [r3, #3]
 800b814:	f003 0303 	and.w	r3, r3, #3
 800b818:	2b03      	cmp	r3, #3
 800b81a:	d10b      	bne.n	800b834 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	799b      	ldrb	r3, [r3, #6]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d004      	beq.n	800b82e <USBH_ParseEPDesc+0x162>
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	889b      	ldrh	r3, [r3, #4]
 800b828:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b82c:	d32f      	bcc.n	800b88e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b82e:	2303      	movs	r3, #3
 800b830:	75fb      	strb	r3, [r7, #23]
 800b832:	e02c      	b.n	800b88e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b834:	2303      	movs	r3, #3
 800b836:	75fb      	strb	r3, [r7, #23]
 800b838:	e029      	b.n	800b88e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b840:	2b02      	cmp	r3, #2
 800b842:	d120      	bne.n	800b886 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	78db      	ldrb	r3, [r3, #3]
 800b848:	f003 0303 	and.w	r3, r3, #3
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d106      	bne.n	800b85e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	889b      	ldrh	r3, [r3, #4]
 800b854:	2b08      	cmp	r3, #8
 800b856:	d01a      	beq.n	800b88e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b858:	2303      	movs	r3, #3
 800b85a:	75fb      	strb	r3, [r7, #23]
 800b85c:	e017      	b.n	800b88e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	78db      	ldrb	r3, [r3, #3]
 800b862:	f003 0303 	and.w	r3, r3, #3
 800b866:	2b03      	cmp	r3, #3
 800b868:	d10a      	bne.n	800b880 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	799b      	ldrb	r3, [r3, #6]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d003      	beq.n	800b87a <USBH_ParseEPDesc+0x1ae>
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	889b      	ldrh	r3, [r3, #4]
 800b876:	2b08      	cmp	r3, #8
 800b878:	d909      	bls.n	800b88e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b87a:	2303      	movs	r3, #3
 800b87c:	75fb      	strb	r3, [r7, #23]
 800b87e:	e006      	b.n	800b88e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b880:	2303      	movs	r3, #3
 800b882:	75fb      	strb	r3, [r7, #23]
 800b884:	e003      	b.n	800b88e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b886:	2303      	movs	r3, #3
 800b888:	75fb      	strb	r3, [r7, #23]
 800b88a:	e000      	b.n	800b88e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b88c:	bf00      	nop
  }

  return status;
 800b88e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b890:	4618      	mov	r0, r3
 800b892:	371c      	adds	r7, #28
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b087      	sub	sp, #28
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	4613      	mov	r3, r2
 800b8a8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	2b03      	cmp	r3, #3
 800b8b2:	d120      	bne.n	800b8f6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	1e9a      	subs	r2, r3, #2
 800b8ba:	88fb      	ldrh	r3, [r7, #6]
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	bf28      	it	cs
 800b8c0:	4613      	movcs	r3, r2
 800b8c2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	3302      	adds	r3, #2
 800b8c8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	82fb      	strh	r3, [r7, #22]
 800b8ce:	e00b      	b.n	800b8e8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b8d0:	8afb      	ldrh	r3, [r7, #22]
 800b8d2:	68fa      	ldr	r2, [r7, #12]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	781a      	ldrb	r2, [r3, #0]
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	3301      	adds	r3, #1
 800b8e0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b8e2:	8afb      	ldrh	r3, [r7, #22]
 800b8e4:	3302      	adds	r3, #2
 800b8e6:	82fb      	strh	r3, [r7, #22]
 800b8e8:	8afa      	ldrh	r2, [r7, #22]
 800b8ea:	8abb      	ldrh	r3, [r7, #20]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d3ef      	bcc.n	800b8d0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	701a      	strb	r2, [r3, #0]
  }
}
 800b8f6:	bf00      	nop
 800b8f8:	371c      	adds	r7, #28
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr

0800b902 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b902:	b480      	push	{r7}
 800b904:	b085      	sub	sp, #20
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
 800b90a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	881b      	ldrh	r3, [r3, #0]
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	7812      	ldrb	r2, [r2, #0]
 800b914:	4413      	add	r3, r2
 800b916:	b29a      	uxth	r2, r3
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	4413      	add	r3, r2
 800b926:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b928:	68fb      	ldr	r3, [r7, #12]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3714      	adds	r7, #20
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr

0800b936 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b936:	b580      	push	{r7, lr}
 800b938:	b086      	sub	sp, #24
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	60f8      	str	r0, [r7, #12]
 800b93e:	60b9      	str	r1, [r7, #8]
 800b940:	4613      	mov	r3, r2
 800b942:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b944:	2301      	movs	r3, #1
 800b946:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	789b      	ldrb	r3, [r3, #2]
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d002      	beq.n	800b956 <USBH_CtlReq+0x20>
 800b950:	2b02      	cmp	r3, #2
 800b952:	d00f      	beq.n	800b974 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b954:	e027      	b.n	800b9a6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	68ba      	ldr	r2, [r7, #8]
 800b95a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	88fa      	ldrh	r2, [r7, #6]
 800b960:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2201      	movs	r2, #1
 800b966:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2202      	movs	r2, #2
 800b96c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b96e:	2301      	movs	r3, #1
 800b970:	75fb      	strb	r3, [r7, #23]
      break;
 800b972:	e018      	b.n	800b9a6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f000 f81b 	bl	800b9b0 <USBH_HandleControl>
 800b97a:	4603      	mov	r3, r0
 800b97c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b97e:	7dfb      	ldrb	r3, [r7, #23]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d002      	beq.n	800b98a <USBH_CtlReq+0x54>
 800b984:	7dfb      	ldrb	r3, [r7, #23]
 800b986:	2b03      	cmp	r3, #3
 800b988:	d106      	bne.n	800b998 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2201      	movs	r2, #1
 800b98e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2200      	movs	r2, #0
 800b994:	761a      	strb	r2, [r3, #24]
      break;
 800b996:	e005      	b.n	800b9a4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b998:	7dfb      	ldrb	r3, [r7, #23]
 800b99a:	2b02      	cmp	r3, #2
 800b99c:	d102      	bne.n	800b9a4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	709a      	strb	r2, [r3, #2]
      break;
 800b9a4:	bf00      	nop
  }
  return status;
 800b9a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3718      	adds	r7, #24
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b086      	sub	sp, #24
 800b9b4:	af02      	add	r7, sp, #8
 800b9b6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	7e1b      	ldrb	r3, [r3, #24]
 800b9c4:	3b01      	subs	r3, #1
 800b9c6:	2b0a      	cmp	r3, #10
 800b9c8:	f200 8156 	bhi.w	800bc78 <USBH_HandleControl+0x2c8>
 800b9cc:	a201      	add	r2, pc, #4	@ (adr r2, 800b9d4 <USBH_HandleControl+0x24>)
 800b9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d2:	bf00      	nop
 800b9d4:	0800ba01 	.word	0x0800ba01
 800b9d8:	0800ba1b 	.word	0x0800ba1b
 800b9dc:	0800ba85 	.word	0x0800ba85
 800b9e0:	0800baab 	.word	0x0800baab
 800b9e4:	0800bae3 	.word	0x0800bae3
 800b9e8:	0800bb0d 	.word	0x0800bb0d
 800b9ec:	0800bb5f 	.word	0x0800bb5f
 800b9f0:	0800bb81 	.word	0x0800bb81
 800b9f4:	0800bbbd 	.word	0x0800bbbd
 800b9f8:	0800bbe3 	.word	0x0800bbe3
 800b9fc:	0800bc21 	.word	0x0800bc21
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f103 0110 	add.w	r1, r3, #16
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	795b      	ldrb	r3, [r3, #5]
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 f943 	bl	800bc98 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2202      	movs	r2, #2
 800ba16:	761a      	strb	r2, [r3, #24]
      break;
 800ba18:	e139      	b.n	800bc8e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	795b      	ldrb	r3, [r3, #5]
 800ba1e:	4619      	mov	r1, r3
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 fcde 	bl	800c3e2 <USBH_LL_GetURBState>
 800ba26:	4603      	mov	r3, r0
 800ba28:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ba2a:	7bbb      	ldrb	r3, [r7, #14]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d11e      	bne.n	800ba6e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	7c1b      	ldrb	r3, [r3, #16]
 800ba34:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ba38:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	8adb      	ldrh	r3, [r3, #22]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00a      	beq.n	800ba58 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ba42:	7b7b      	ldrb	r3, [r7, #13]
 800ba44:	2b80      	cmp	r3, #128	@ 0x80
 800ba46:	d103      	bne.n	800ba50 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2203      	movs	r2, #3
 800ba4c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ba4e:	e115      	b.n	800bc7c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2205      	movs	r2, #5
 800ba54:	761a      	strb	r2, [r3, #24]
      break;
 800ba56:	e111      	b.n	800bc7c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ba58:	7b7b      	ldrb	r3, [r7, #13]
 800ba5a:	2b80      	cmp	r3, #128	@ 0x80
 800ba5c:	d103      	bne.n	800ba66 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2209      	movs	r2, #9
 800ba62:	761a      	strb	r2, [r3, #24]
      break;
 800ba64:	e10a      	b.n	800bc7c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2207      	movs	r2, #7
 800ba6a:	761a      	strb	r2, [r3, #24]
      break;
 800ba6c:	e106      	b.n	800bc7c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ba6e:	7bbb      	ldrb	r3, [r7, #14]
 800ba70:	2b04      	cmp	r3, #4
 800ba72:	d003      	beq.n	800ba7c <USBH_HandleControl+0xcc>
 800ba74:	7bbb      	ldrb	r3, [r7, #14]
 800ba76:	2b02      	cmp	r3, #2
 800ba78:	f040 8100 	bne.w	800bc7c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	220b      	movs	r2, #11
 800ba80:	761a      	strb	r2, [r3, #24]
      break;
 800ba82:	e0fb      	b.n	800bc7c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800ba8a:	b29a      	uxth	r2, r3
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6899      	ldr	r1, [r3, #8]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	899a      	ldrh	r2, [r3, #12]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	791b      	ldrb	r3, [r3, #4]
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 f93a 	bl	800bd16 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2204      	movs	r2, #4
 800baa6:	761a      	strb	r2, [r3, #24]
      break;
 800baa8:	e0f1      	b.n	800bc8e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	791b      	ldrb	r3, [r3, #4]
 800baae:	4619      	mov	r1, r3
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 fc96 	bl	800c3e2 <USBH_LL_GetURBState>
 800bab6:	4603      	mov	r3, r0
 800bab8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800baba:	7bbb      	ldrb	r3, [r7, #14]
 800babc:	2b01      	cmp	r3, #1
 800babe:	d102      	bne.n	800bac6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2209      	movs	r2, #9
 800bac4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bac6:	7bbb      	ldrb	r3, [r7, #14]
 800bac8:	2b05      	cmp	r3, #5
 800baca:	d102      	bne.n	800bad2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bacc:	2303      	movs	r3, #3
 800bace:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bad0:	e0d6      	b.n	800bc80 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800bad2:	7bbb      	ldrb	r3, [r7, #14]
 800bad4:	2b04      	cmp	r3, #4
 800bad6:	f040 80d3 	bne.w	800bc80 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	220b      	movs	r2, #11
 800bade:	761a      	strb	r2, [r3, #24]
      break;
 800bae0:	e0ce      	b.n	800bc80 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6899      	ldr	r1, [r3, #8]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	899a      	ldrh	r2, [r3, #12]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	795b      	ldrb	r3, [r3, #5]
 800baee:	2001      	movs	r0, #1
 800baf0:	9000      	str	r0, [sp, #0]
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 f8ea 	bl	800bccc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800bafe:	b29a      	uxth	r2, r3
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2206      	movs	r2, #6
 800bb08:	761a      	strb	r2, [r3, #24]
      break;
 800bb0a:	e0c0      	b.n	800bc8e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	795b      	ldrb	r3, [r3, #5]
 800bb10:	4619      	mov	r1, r3
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 fc65 	bl	800c3e2 <USBH_LL_GetURBState>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bb1c:	7bbb      	ldrb	r3, [r7, #14]
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	d103      	bne.n	800bb2a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2207      	movs	r2, #7
 800bb26:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bb28:	e0ac      	b.n	800bc84 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800bb2a:	7bbb      	ldrb	r3, [r7, #14]
 800bb2c:	2b05      	cmp	r3, #5
 800bb2e:	d105      	bne.n	800bb3c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	220c      	movs	r2, #12
 800bb34:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bb36:	2303      	movs	r3, #3
 800bb38:	73fb      	strb	r3, [r7, #15]
      break;
 800bb3a:	e0a3      	b.n	800bc84 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bb3c:	7bbb      	ldrb	r3, [r7, #14]
 800bb3e:	2b02      	cmp	r3, #2
 800bb40:	d103      	bne.n	800bb4a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2205      	movs	r2, #5
 800bb46:	761a      	strb	r2, [r3, #24]
      break;
 800bb48:	e09c      	b.n	800bc84 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800bb4a:	7bbb      	ldrb	r3, [r7, #14]
 800bb4c:	2b04      	cmp	r3, #4
 800bb4e:	f040 8099 	bne.w	800bc84 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	220b      	movs	r2, #11
 800bb56:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bb58:	2302      	movs	r3, #2
 800bb5a:	73fb      	strb	r3, [r7, #15]
      break;
 800bb5c:	e092      	b.n	800bc84 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	791b      	ldrb	r3, [r3, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	2100      	movs	r1, #0
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 f8d5 	bl	800bd16 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2208      	movs	r2, #8
 800bb7c:	761a      	strb	r2, [r3, #24]

      break;
 800bb7e:	e086      	b.n	800bc8e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	791b      	ldrb	r3, [r3, #4]
 800bb84:	4619      	mov	r1, r3
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f000 fc2b 	bl	800c3e2 <USBH_LL_GetURBState>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bb90:	7bbb      	ldrb	r3, [r7, #14]
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d105      	bne.n	800bba2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	220d      	movs	r2, #13
 800bb9a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bba0:	e072      	b.n	800bc88 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800bba2:	7bbb      	ldrb	r3, [r7, #14]
 800bba4:	2b04      	cmp	r3, #4
 800bba6:	d103      	bne.n	800bbb0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	220b      	movs	r2, #11
 800bbac:	761a      	strb	r2, [r3, #24]
      break;
 800bbae:	e06b      	b.n	800bc88 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800bbb0:	7bbb      	ldrb	r3, [r7, #14]
 800bbb2:	2b05      	cmp	r3, #5
 800bbb4:	d168      	bne.n	800bc88 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800bbb6:	2303      	movs	r3, #3
 800bbb8:	73fb      	strb	r3, [r7, #15]
      break;
 800bbba:	e065      	b.n	800bc88 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	795b      	ldrb	r3, [r3, #5]
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	9200      	str	r2, [sp, #0]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 f87f 	bl	800bccc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	220a      	movs	r2, #10
 800bbde:	761a      	strb	r2, [r3, #24]
      break;
 800bbe0:	e055      	b.n	800bc8e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	795b      	ldrb	r3, [r3, #5]
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 fbfa 	bl	800c3e2 <USBH_LL_GetURBState>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bbf2:	7bbb      	ldrb	r3, [r7, #14]
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d105      	bne.n	800bc04 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	220d      	movs	r2, #13
 800bc00:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bc02:	e043      	b.n	800bc8c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bc04:	7bbb      	ldrb	r3, [r7, #14]
 800bc06:	2b02      	cmp	r3, #2
 800bc08:	d103      	bne.n	800bc12 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2209      	movs	r2, #9
 800bc0e:	761a      	strb	r2, [r3, #24]
      break;
 800bc10:	e03c      	b.n	800bc8c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800bc12:	7bbb      	ldrb	r3, [r7, #14]
 800bc14:	2b04      	cmp	r3, #4
 800bc16:	d139      	bne.n	800bc8c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	220b      	movs	r2, #11
 800bc1c:	761a      	strb	r2, [r3, #24]
      break;
 800bc1e:	e035      	b.n	800bc8c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	7e5b      	ldrb	r3, [r3, #25]
 800bc24:	3301      	adds	r3, #1
 800bc26:	b2da      	uxtb	r2, r3
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	765a      	strb	r2, [r3, #25]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	7e5b      	ldrb	r3, [r3, #25]
 800bc30:	2b02      	cmp	r3, #2
 800bc32:	d806      	bhi.n	800bc42 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2201      	movs	r2, #1
 800bc38:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bc40:	e025      	b.n	800bc8e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 800bc48:	2106      	movs	r1, #6
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2200      	movs	r2, #0
 800bc52:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	795b      	ldrb	r3, [r3, #5]
 800bc58:	4619      	mov	r1, r3
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 f904 	bl	800be68 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	791b      	ldrb	r3, [r3, #4]
 800bc64:	4619      	mov	r1, r3
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f000 f8fe 	bl	800be68 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bc72:	2302      	movs	r3, #2
 800bc74:	73fb      	strb	r3, [r7, #15]
      break;
 800bc76:	e00a      	b.n	800bc8e <USBH_HandleControl+0x2de>

    default:
      break;
 800bc78:	bf00      	nop
 800bc7a:	e008      	b.n	800bc8e <USBH_HandleControl+0x2de>
      break;
 800bc7c:	bf00      	nop
 800bc7e:	e006      	b.n	800bc8e <USBH_HandleControl+0x2de>
      break;
 800bc80:	bf00      	nop
 800bc82:	e004      	b.n	800bc8e <USBH_HandleControl+0x2de>
      break;
 800bc84:	bf00      	nop
 800bc86:	e002      	b.n	800bc8e <USBH_HandleControl+0x2de>
      break;
 800bc88:	bf00      	nop
 800bc8a:	e000      	b.n	800bc8e <USBH_HandleControl+0x2de>
      break;
 800bc8c:	bf00      	nop
  }

  return status;
 800bc8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3710      	adds	r7, #16
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b088      	sub	sp, #32
 800bc9c:	af04      	add	r7, sp, #16
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	4613      	mov	r3, r2
 800bca4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bca6:	79f9      	ldrb	r1, [r7, #7]
 800bca8:	2300      	movs	r3, #0
 800bcaa:	9303      	str	r3, [sp, #12]
 800bcac:	2308      	movs	r3, #8
 800bcae:	9302      	str	r3, [sp, #8]
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	9301      	str	r3, [sp, #4]
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	9300      	str	r3, [sp, #0]
 800bcb8:	2300      	movs	r3, #0
 800bcba:	2200      	movs	r2, #0
 800bcbc:	68f8      	ldr	r0, [r7, #12]
 800bcbe:	f000 fb5f 	bl	800c380 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3710      	adds	r7, #16
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b088      	sub	sp, #32
 800bcd0:	af04      	add	r7, sp, #16
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	4611      	mov	r1, r2
 800bcd8:	461a      	mov	r2, r3
 800bcda:	460b      	mov	r3, r1
 800bcdc:	80fb      	strh	r3, [r7, #6]
 800bcde:	4613      	mov	r3, r2
 800bce0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d001      	beq.n	800bcf0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bcec:	2300      	movs	r3, #0
 800bcee:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bcf0:	7979      	ldrb	r1, [r7, #5]
 800bcf2:	7e3b      	ldrb	r3, [r7, #24]
 800bcf4:	9303      	str	r3, [sp, #12]
 800bcf6:	88fb      	ldrh	r3, [r7, #6]
 800bcf8:	9302      	str	r3, [sp, #8]
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	9301      	str	r3, [sp, #4]
 800bcfe:	2301      	movs	r3, #1
 800bd00:	9300      	str	r3, [sp, #0]
 800bd02:	2300      	movs	r3, #0
 800bd04:	2200      	movs	r2, #0
 800bd06:	68f8      	ldr	r0, [r7, #12]
 800bd08:	f000 fb3a 	bl	800c380 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bd0c:	2300      	movs	r3, #0
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3710      	adds	r7, #16
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}

0800bd16 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bd16:	b580      	push	{r7, lr}
 800bd18:	b088      	sub	sp, #32
 800bd1a:	af04      	add	r7, sp, #16
 800bd1c:	60f8      	str	r0, [r7, #12]
 800bd1e:	60b9      	str	r1, [r7, #8]
 800bd20:	4611      	mov	r1, r2
 800bd22:	461a      	mov	r2, r3
 800bd24:	460b      	mov	r3, r1
 800bd26:	80fb      	strh	r3, [r7, #6]
 800bd28:	4613      	mov	r3, r2
 800bd2a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bd2c:	7979      	ldrb	r1, [r7, #5]
 800bd2e:	2300      	movs	r3, #0
 800bd30:	9303      	str	r3, [sp, #12]
 800bd32:	88fb      	ldrh	r3, [r7, #6]
 800bd34:	9302      	str	r3, [sp, #8]
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	9301      	str	r3, [sp, #4]
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	9300      	str	r3, [sp, #0]
 800bd3e:	2300      	movs	r3, #0
 800bd40:	2201      	movs	r2, #1
 800bd42:	68f8      	ldr	r0, [r7, #12]
 800bd44:	f000 fb1c 	bl	800c380 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bd48:	2300      	movs	r3, #0

}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b088      	sub	sp, #32
 800bd56:	af04      	add	r7, sp, #16
 800bd58:	60f8      	str	r0, [r7, #12]
 800bd5a:	60b9      	str	r1, [r7, #8]
 800bd5c:	4611      	mov	r1, r2
 800bd5e:	461a      	mov	r2, r3
 800bd60:	460b      	mov	r3, r1
 800bd62:	71fb      	strb	r3, [r7, #7]
 800bd64:	4613      	mov	r3, r2
 800bd66:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bd68:	79fb      	ldrb	r3, [r7, #7]
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	79b9      	ldrb	r1, [r7, #6]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	9203      	str	r2, [sp, #12]
 800bd72:	9302      	str	r3, [sp, #8]
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	9301      	str	r3, [sp, #4]
 800bd78:	2301      	movs	r3, #1
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	2303      	movs	r3, #3
 800bd7e:	2201      	movs	r2, #1
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f000 fafd 	bl	800c380 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800bd86:	2300      	movs	r3, #0
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3710      	adds	r7, #16
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint32_t length,
                                     uint8_t pipe_num)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b088      	sub	sp, #32
 800bd94:	af04      	add	r7, sp, #16
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	607a      	str	r2, [r7, #4]
 800bd9c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	78f9      	ldrb	r1, [r7, #3]
 800bda4:	2200      	movs	r2, #0
 800bda6:	9203      	str	r2, [sp, #12]
 800bda8:	9302      	str	r3, [sp, #8]
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	9301      	str	r3, [sp, #4]
 800bdae:	2301      	movs	r3, #1
 800bdb0:	9300      	str	r3, [sp, #0]
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	68f8      	ldr	r0, [r7, #12]
 800bdb8:	f000 fae2 	bl	800c380 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800bdbc:	2300      	movs	r3, #0
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3710      	adds	r7, #16
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}

0800bdc6 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b086      	sub	sp, #24
 800bdca:	af04      	add	r7, sp, #16
 800bdcc:	6078      	str	r0, [r7, #4]
 800bdce:	4608      	mov	r0, r1
 800bdd0:	4611      	mov	r1, r2
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	70fb      	strb	r3, [r7, #3]
 800bdd8:	460b      	mov	r3, r1
 800bdda:	70bb      	strb	r3, [r7, #2]
 800bddc:	4613      	mov	r3, r2
 800bdde:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bde0:	7878      	ldrb	r0, [r7, #1]
 800bde2:	78ba      	ldrb	r2, [r7, #2]
 800bde4:	78f9      	ldrb	r1, [r7, #3]
 800bde6:	8b3b      	ldrh	r3, [r7, #24]
 800bde8:	9302      	str	r3, [sp, #8]
 800bdea:	7d3b      	ldrb	r3, [r7, #20]
 800bdec:	9301      	str	r3, [sp, #4]
 800bdee:	7c3b      	ldrb	r3, [r7, #16]
 800bdf0:	9300      	str	r3, [sp, #0]
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 fa75 	bl	800c2e4 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3708      	adds	r7, #8
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	460b      	mov	r3, r1
 800be0e:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800be10:	78fb      	ldrb	r3, [r7, #3]
 800be12:	4619      	mov	r1, r3
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 fa94 	bl	800c342 <USBH_LL_ClosePipe>

  return USBH_OK;
 800be1a:	2300      	movs	r3, #0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3708      	adds	r7, #8
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	460b      	mov	r3, r1
 800be2e:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 f839 	bl	800bea8 <USBH_GetFreePipe>
 800be36:	4603      	mov	r3, r0
 800be38:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800be3a:	89fb      	ldrh	r3, [r7, #14]
 800be3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800be40:	4293      	cmp	r3, r2
 800be42:	d00b      	beq.n	800be5c <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800be44:	78fa      	ldrb	r2, [r7, #3]
 800be46:	89fb      	ldrh	r3, [r7, #14]
 800be48:	f003 030f 	and.w	r3, r3, #15
 800be4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800be50:	6879      	ldr	r1, [r7, #4]
 800be52:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	440b      	add	r3, r1
 800be5a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800be5c:	89fb      	ldrh	r3, [r7, #14]
 800be5e:	b2db      	uxtb	r3, r3
}
 800be60:	4618      	mov	r0, r3
 800be62:	3710      	adds	r7, #16
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	460b      	mov	r3, r1
 800be72:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800be74:	78fb      	ldrb	r3, [r7, #3]
 800be76:	2b0f      	cmp	r3, #15
 800be78:	d80f      	bhi.n	800be9a <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800be7a:	78fb      	ldrb	r3, [r7, #3]
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	4413      	add	r3, r2
 800be86:	685a      	ldr	r2, [r3, #4]
 800be88:	78fb      	ldrb	r3, [r7, #3]
 800be8a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800be8e:	6879      	ldr	r1, [r7, #4]
 800be90:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	440b      	add	r3, r1
 800be98:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800be9a:	2300      	movs	r3, #0
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	370c      	adds	r7, #12
 800bea0:	46bd      	mov	sp, r7
 800bea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea6:	4770      	bx	lr

0800bea8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b085      	sub	sp, #20
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800beb0:	2300      	movs	r3, #0
 800beb2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800beb4:	2300      	movs	r3, #0
 800beb6:	73fb      	strb	r3, [r7, #15]
 800beb8:	e010      	b.n	800bedc <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800beba:	7bfb      	ldrb	r3, [r7, #15]
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	4413      	add	r3, r2
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800becc:	2b00      	cmp	r3, #0
 800bece:	d102      	bne.n	800bed6 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 800bed0:	7bfb      	ldrb	r3, [r7, #15]
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	e007      	b.n	800bee6 <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bed6:	7bfb      	ldrb	r3, [r7, #15]
 800bed8:	3301      	adds	r3, #1
 800beda:	73fb      	strb	r3, [r7, #15]
 800bedc:	7bfb      	ldrb	r3, [r7, #15]
 800bede:	2b0f      	cmp	r3, #15
 800bee0:	d9eb      	bls.n	800beba <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bee2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3714      	adds	r7, #20
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr
	...

0800bef4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800bef8:	2201      	movs	r2, #1
 800befa:	490e      	ldr	r1, [pc, #56]	@ (800bf34 <MX_USB_HOST_Init+0x40>)
 800befc:	480e      	ldr	r0, [pc, #56]	@ (800bf38 <MX_USB_HOST_Init+0x44>)
 800befe:	f7fe fafa 	bl	800a4f6 <USBH_Init>
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d001      	beq.n	800bf0c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bf08:	f7f5 fd4a 	bl	80019a0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_AUDIO_CLASS) != USBH_OK)
 800bf0c:	490b      	ldr	r1, [pc, #44]	@ (800bf3c <MX_USB_HOST_Init+0x48>)
 800bf0e:	480a      	ldr	r0, [pc, #40]	@ (800bf38 <MX_USB_HOST_Init+0x44>)
 800bf10:	f7fe fba0 	bl	800a654 <USBH_RegisterClass>
 800bf14:	4603      	mov	r3, r0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d001      	beq.n	800bf1e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bf1a:	f7f5 fd41 	bl	80019a0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800bf1e:	4806      	ldr	r0, [pc, #24]	@ (800bf38 <MX_USB_HOST_Init+0x44>)
 800bf20:	f7fe fc3c 	bl	800a79c <USBH_Start>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d001      	beq.n	800bf2e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bf2a:	f7f5 fd39 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bf2e:	bf00      	nop
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	0800bf55 	.word	0x0800bf55
 800bf38:	20000254 	.word	0x20000254
 800bf3c:	20000024 	.word	0x20000024

0800bf40 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800bf44:	4802      	ldr	r0, [pc, #8]	@ (800bf50 <MX_USB_HOST_Process+0x10>)
 800bf46:	f7fe fc39 	bl	800a7bc <USBH_Process>
}
 800bf4a:	bf00      	nop
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	20000254 	.word	0x20000254

0800bf54 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bf60:	78fb      	ldrb	r3, [r7, #3]
 800bf62:	3b01      	subs	r3, #1
 800bf64:	2b04      	cmp	r3, #4
 800bf66:	d819      	bhi.n	800bf9c <USBH_UserProcess+0x48>
 800bf68:	a201      	add	r2, pc, #4	@ (adr r2, 800bf70 <USBH_UserProcess+0x1c>)
 800bf6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf6e:	bf00      	nop
 800bf70:	0800bf9d 	.word	0x0800bf9d
 800bf74:	0800bf8d 	.word	0x0800bf8d
 800bf78:	0800bf9d 	.word	0x0800bf9d
 800bf7c:	0800bf95 	.word	0x0800bf95
 800bf80:	0800bf85 	.word	0x0800bf85
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bf84:	4b09      	ldr	r3, [pc, #36]	@ (800bfac <USBH_UserProcess+0x58>)
 800bf86:	2203      	movs	r2, #3
 800bf88:	701a      	strb	r2, [r3, #0]
  break;
 800bf8a:	e008      	b.n	800bf9e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bf8c:	4b07      	ldr	r3, [pc, #28]	@ (800bfac <USBH_UserProcess+0x58>)
 800bf8e:	2202      	movs	r2, #2
 800bf90:	701a      	strb	r2, [r3, #0]
  break;
 800bf92:	e004      	b.n	800bf9e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bf94:	4b05      	ldr	r3, [pc, #20]	@ (800bfac <USBH_UserProcess+0x58>)
 800bf96:	2201      	movs	r2, #1
 800bf98:	701a      	strb	r2, [r3, #0]
  break;
 800bf9a:	e000      	b.n	800bf9e <USBH_UserProcess+0x4a>

  default:
  break;
 800bf9c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bf9e:	bf00      	nop
 800bfa0:	370c      	adds	r7, #12
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr
 800bfaa:	bf00      	nop
 800bfac:	200006fc 	.word	0x200006fc

0800bfb0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b0ae      	sub	sp, #184	@ 0xb8
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfb8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	601a      	str	r2, [r3, #0]
 800bfc0:	605a      	str	r2, [r3, #4]
 800bfc2:	609a      	str	r2, [r3, #8]
 800bfc4:	60da      	str	r2, [r3, #12]
 800bfc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bfc8:	f107 0318 	add.w	r3, r7, #24
 800bfcc:	228c      	movs	r2, #140	@ 0x8c
 800bfce:	2100      	movs	r1, #0
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f000 fb97 	bl	800c704 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bfde:	d173      	bne.n	800c0c8 <HAL_HCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bfe0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bfe4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800bfe6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800bfea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800bfee:	2301      	movs	r3, #1
 800bff0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800bff2:	2301      	movs	r3, #1
 800bff4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800bff6:	2318      	movs	r3, #24
 800bff8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800bffa:	2302      	movs	r3, #2
 800bffc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800bffe:	2302      	movs	r3, #2
 800c000:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800c002:	2302      	movs	r3, #2
 800c004:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800c006:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c00a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c00c:	f107 0318 	add.w	r3, r7, #24
 800c010:	4618      	mov	r0, r3
 800c012:	f7f8 fe2f 	bl	8004c74 <HAL_RCCEx_PeriphCLKConfig>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d001      	beq.n	800c020 <HAL_HCD_MspInit+0x70>
    {
      Error_Handler();
 800c01c:	f7f5 fcc0 	bl	80019a0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c020:	4b2b      	ldr	r3, [pc, #172]	@ (800c0d0 <HAL_HCD_MspInit+0x120>)
 800c022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c024:	4a2a      	ldr	r2, [pc, #168]	@ (800c0d0 <HAL_HCD_MspInit+0x120>)
 800c026:	f043 0301 	orr.w	r3, r3, #1
 800c02a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c02c:	4b28      	ldr	r3, [pc, #160]	@ (800c0d0 <HAL_HCD_MspInit+0x120>)
 800c02e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c030:	f003 0301 	and.w	r3, r3, #1
 800c034:	617b      	str	r3, [r7, #20]
 800c036:	697b      	ldr	r3, [r7, #20]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800c038:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800c03c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c040:	2302      	movs	r3, #2
 800c042:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c046:	2300      	movs	r3, #0
 800c048:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c04c:	2303      	movs	r3, #3
 800c04e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c052:	230a      	movs	r3, #10
 800c054:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c058:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c05c:	4619      	mov	r1, r3
 800c05e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c062:	f7f6 f8c1 	bl	80021e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c066:	4b1a      	ldr	r3, [pc, #104]	@ (800c0d0 <HAL_HCD_MspInit+0x120>)
 800c068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c06a:	4a19      	ldr	r2, [pc, #100]	@ (800c0d0 <HAL_HCD_MspInit+0x120>)
 800c06c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c070:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c072:	4b17      	ldr	r3, [pc, #92]	@ (800c0d0 <HAL_HCD_MspInit+0x120>)
 800c074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c076:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c07a:	613b      	str	r3, [r7, #16]
 800c07c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c07e:	4b14      	ldr	r3, [pc, #80]	@ (800c0d0 <HAL_HCD_MspInit+0x120>)
 800c080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c086:	2b00      	cmp	r3, #0
 800c088:	d114      	bne.n	800c0b4 <HAL_HCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c08a:	4b11      	ldr	r3, [pc, #68]	@ (800c0d0 <HAL_HCD_MspInit+0x120>)
 800c08c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c08e:	4a10      	ldr	r2, [pc, #64]	@ (800c0d0 <HAL_HCD_MspInit+0x120>)
 800c090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c094:	6593      	str	r3, [r2, #88]	@ 0x58
 800c096:	4b0e      	ldr	r3, [pc, #56]	@ (800c0d0 <HAL_HCD_MspInit+0x120>)
 800c098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c09a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c09e:	60fb      	str	r3, [r7, #12]
 800c0a0:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800c0a2:	f7f7 ff89 	bl	8003fb8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800c0a6:	4b0a      	ldr	r3, [pc, #40]	@ (800c0d0 <HAL_HCD_MspInit+0x120>)
 800c0a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0aa:	4a09      	ldr	r2, [pc, #36]	@ (800c0d0 <HAL_HCD_MspInit+0x120>)
 800c0ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c0b0:	6593      	str	r3, [r2, #88]	@ 0x58
 800c0b2:	e001      	b.n	800c0b8 <HAL_HCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800c0b4:	f7f7 ff80 	bl	8003fb8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	2100      	movs	r1, #0
 800c0bc:	2043      	movs	r0, #67	@ 0x43
 800c0be:	f7f5 ffde 	bl	800207e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c0c2:	2043      	movs	r0, #67	@ 0x43
 800c0c4:	f7f5 fff7 	bl	80020b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c0c8:	bf00      	nop
 800c0ca:	37b8      	adds	r7, #184	@ 0xb8
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	40021000 	.word	0x40021000

0800c0d4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7fe ff43 	bl	800af6e <USBH_LL_IncTimer>
}
 800c0e8:	bf00      	nop
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7fe ff7b 	bl	800affa <USBH_LL_Connect>
}
 800c104:	bf00      	nop
 800c106:	3708      	adds	r7, #8
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7fe ff84 	bl	800b028 <USBH_LL_Disconnect>
}
 800c120:	bf00      	nop
 800c122:	3708      	adds	r7, #8
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	460b      	mov	r3, r1
 800c132:	70fb      	strb	r3, [r7, #3]
 800c134:	4613      	mov	r3, r2
 800c136:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c138:	bf00      	nop
 800c13a:	370c      	adds	r7, #12
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr

0800c144 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c152:	4618      	mov	r0, r3
 800c154:	f7fe ff35 	bl	800afc2 <USBH_LL_PortEnabled>
}
 800c158:	bf00      	nop
 800c15a:	3708      	adds	r7, #8
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fe ff35 	bl	800afde <USBH_LL_PortDisabled>
}
 800c174:	bf00      	nop
 800c176:	3708      	adds	r7, #8
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f893 349c 	ldrb.w	r3, [r3, #1180]	@ 0x49c
 800c18a:	2b01      	cmp	r3, #1
 800c18c:	d12a      	bne.n	800c1e4 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c18e:	4a18      	ldr	r2, [pc, #96]	@ (800c1f0 <USBH_LL_Init+0x74>)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
  phost->pData = &hhcd_USB_OTG_FS;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	4a15      	ldr	r2, [pc, #84]	@ (800c1f0 <USBH_LL_Init+0x74>)
 800c19a:	f8c3 24a0 	str.w	r2, [r3, #1184]	@ 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c19e:	4b14      	ldr	r3, [pc, #80]	@ (800c1f0 <USBH_LL_Init+0x74>)
 800c1a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c1a4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800c1a6:	4b12      	ldr	r3, [pc, #72]	@ (800c1f0 <USBH_LL_Init+0x74>)
 800c1a8:	220c      	movs	r2, #12
 800c1aa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c1ac:	4b10      	ldr	r3, [pc, #64]	@ (800c1f0 <USBH_LL_Init+0x74>)
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c1b2:	4b0f      	ldr	r3, [pc, #60]	@ (800c1f0 <USBH_LL_Init+0x74>)
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c1b8:	4b0d      	ldr	r3, [pc, #52]	@ (800c1f0 <USBH_LL_Init+0x74>)
 800c1ba:	2202      	movs	r2, #2
 800c1bc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c1be:	4b0c      	ldr	r3, [pc, #48]	@ (800c1f0 <USBH_LL_Init+0x74>)
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c1c4:	480a      	ldr	r0, [pc, #40]	@ (800c1f0 <USBH_LL_Init+0x74>)
 800c1c6:	f7f6 f9dc 	bl	8002582 <HAL_HCD_Init>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d001      	beq.n	800c1d4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c1d0:	f7f5 fbe6 	bl	80019a0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c1d4:	4806      	ldr	r0, [pc, #24]	@ (800c1f0 <USBH_LL_Init+0x74>)
 800c1d6:	f7f6 fddb 	bl	8002d90 <HAL_HCD_GetCurrentFrame>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	4619      	mov	r1, r3
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f7fe feb6 	bl	800af50 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c1e4:	2300      	movs	r3, #0
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	20000700 	.word	0x20000700

0800c1f4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c200:	2300      	movs	r3, #0
 800c202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7f6 fd5d 	bl	8002cca <HAL_HCD_Start>
 800c210:	4603      	mov	r3, r0
 800c212:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c214:	7bfb      	ldrb	r3, [r7, #15]
 800c216:	4618      	mov	r0, r3
 800c218:	f000 f94c 	bl	800c4b4 <USBH_Get_USB_Status>
 800c21c:	4603      	mov	r3, r0
 800c21e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c220:	7bbb      	ldrb	r3, [r7, #14]
}
 800c222:	4618      	mov	r0, r3
 800c224:	3710      	adds	r7, #16
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}

0800c22a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c22a:	b580      	push	{r7, lr}
 800c22c:	b084      	sub	sp, #16
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c232:	2300      	movs	r3, #0
 800c234:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c236:	2300      	movs	r3, #0
 800c238:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 800c240:	4618      	mov	r0, r3
 800c242:	f7f6 fd65 	bl	8002d10 <HAL_HCD_Stop>
 800c246:	4603      	mov	r3, r0
 800c248:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c24a:	7bfb      	ldrb	r3, [r7, #15]
 800c24c:	4618      	mov	r0, r3
 800c24e:	f000 f931 	bl	800c4b4 <USBH_Get_USB_Status>
 800c252:	4603      	mov	r3, r0
 800c254:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c256:	7bbb      	ldrb	r3, [r7, #14]
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3710      	adds	r7, #16
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c268:	2301      	movs	r3, #1
 800c26a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 800c272:	4618      	mov	r0, r3
 800c274:	f7f6 fd9a 	bl	8002dac <HAL_HCD_GetCurrentSpeed>
 800c278:	4603      	mov	r3, r0
 800c27a:	2b02      	cmp	r3, #2
 800c27c:	d00c      	beq.n	800c298 <USBH_LL_GetSpeed+0x38>
 800c27e:	2b02      	cmp	r3, #2
 800c280:	d80d      	bhi.n	800c29e <USBH_LL_GetSpeed+0x3e>
 800c282:	2b00      	cmp	r3, #0
 800c284:	d002      	beq.n	800c28c <USBH_LL_GetSpeed+0x2c>
 800c286:	2b01      	cmp	r3, #1
 800c288:	d003      	beq.n	800c292 <USBH_LL_GetSpeed+0x32>
 800c28a:	e008      	b.n	800c29e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c28c:	2300      	movs	r3, #0
 800c28e:	73fb      	strb	r3, [r7, #15]
    break;
 800c290:	e008      	b.n	800c2a4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c292:	2301      	movs	r3, #1
 800c294:	73fb      	strb	r3, [r7, #15]
    break;
 800c296:	e005      	b.n	800c2a4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c298:	2302      	movs	r3, #2
 800c29a:	73fb      	strb	r3, [r7, #15]
    break;
 800c29c:	e002      	b.n	800c2a4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	73fb      	strb	r3, [r7, #15]
    break;
 800c2a2:	bf00      	nop
  }
  return  speed;
 800c2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}

0800c2ae <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c2ae:	b580      	push	{r7, lr}
 800c2b0:	b084      	sub	sp, #16
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f7f6 fd40 	bl	8002d4a <HAL_HCD_ResetPort>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c2ce:	7bfb      	ldrb	r3, [r7, #15]
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f000 f8ef 	bl	800c4b4 <USBH_Get_USB_Status>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2da:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3710      	adds	r7, #16
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}

0800c2e4 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c2e4:	b590      	push	{r4, r7, lr}
 800c2e6:	b089      	sub	sp, #36	@ 0x24
 800c2e8:	af04      	add	r7, sp, #16
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	4608      	mov	r0, r1
 800c2ee:	4611      	mov	r1, r2
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	70fb      	strb	r3, [r7, #3]
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	70bb      	strb	r3, [r7, #2]
 800c2fa:	4613      	mov	r3, r2
 800c2fc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2fe:	2300      	movs	r3, #0
 800c300:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c302:	2300      	movs	r3, #0
 800c304:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	@ 0x4a0
 800c30c:	787c      	ldrb	r4, [r7, #1]
 800c30e:	78ba      	ldrb	r2, [r7, #2]
 800c310:	78f9      	ldrb	r1, [r7, #3]
 800c312:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c314:	9302      	str	r3, [sp, #8]
 800c316:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c31a:	9301      	str	r3, [sp, #4]
 800c31c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c320:	9300      	str	r3, [sp, #0]
 800c322:	4623      	mov	r3, r4
 800c324:	f7f6 f98f 	bl	8002646 <HAL_HCD_HC_Init>
 800c328:	4603      	mov	r3, r0
 800c32a:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c32c:	7bfb      	ldrb	r3, [r7, #15]
 800c32e:	4618      	mov	r0, r3
 800c330:	f000 f8c0 	bl	800c4b4 <USBH_Get_USB_Status>
 800c334:	4603      	mov	r3, r0
 800c336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c338:	7bbb      	ldrb	r3, [r7, #14]
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3714      	adds	r7, #20
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd90      	pop	{r4, r7, pc}

0800c342 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c342:	b580      	push	{r7, lr}
 800c344:	b084      	sub	sp, #16
 800c346:	af00      	add	r7, sp, #0
 800c348:	6078      	str	r0, [r7, #4]
 800c34a:	460b      	mov	r3, r1
 800c34c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c34e:	2300      	movs	r3, #0
 800c350:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c352:	2300      	movs	r3, #0
 800c354:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 800c35c:	78fa      	ldrb	r2, [r7, #3]
 800c35e:	4611      	mov	r1, r2
 800c360:	4618      	mov	r0, r3
 800c362:	f7f6 fa12 	bl	800278a <HAL_HCD_HC_Halt>
 800c366:	4603      	mov	r3, r0
 800c368:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c36a:	7bfb      	ldrb	r3, [r7, #15]
 800c36c:	4618      	mov	r0, r3
 800c36e:	f000 f8a1 	bl	800c4b4 <USBH_Get_USB_Status>
 800c372:	4603      	mov	r3, r0
 800c374:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c376:	7bbb      	ldrb	r3, [r7, #14]
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3710      	adds	r7, #16
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c380:	b590      	push	{r4, r7, lr}
 800c382:	b089      	sub	sp, #36	@ 0x24
 800c384:	af04      	add	r7, sp, #16
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	4608      	mov	r0, r1
 800c38a:	4611      	mov	r1, r2
 800c38c:	461a      	mov	r2, r3
 800c38e:	4603      	mov	r3, r0
 800c390:	70fb      	strb	r3, [r7, #3]
 800c392:	460b      	mov	r3, r1
 800c394:	70bb      	strb	r3, [r7, #2]
 800c396:	4613      	mov	r3, r2
 800c398:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c39a:	2300      	movs	r3, #0
 800c39c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	@ 0x4a0
 800c3a8:	787c      	ldrb	r4, [r7, #1]
 800c3aa:	78ba      	ldrb	r2, [r7, #2]
 800c3ac:	78f9      	ldrb	r1, [r7, #3]
 800c3ae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c3b2:	9303      	str	r3, [sp, #12]
 800c3b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c3b6:	9302      	str	r3, [sp, #8]
 800c3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ba:	9301      	str	r3, [sp, #4]
 800c3bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c3c0:	9300      	str	r3, [sp, #0]
 800c3c2:	4623      	mov	r3, r4
 800c3c4:	f7f6 fa04 	bl	80027d0 <HAL_HCD_HC_SubmitRequest>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c3cc:	7bfb      	ldrb	r3, [r7, #15]
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f000 f870 	bl	800c4b4 <USBH_Get_USB_Status>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3714      	adds	r7, #20
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd90      	pop	{r4, r7, pc}

0800c3e2 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b082      	sub	sp, #8
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 800c3f4:	78fa      	ldrb	r2, [r7, #3]
 800c3f6:	4611      	mov	r1, r2
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f7f6 fcb4 	bl	8002d66 <HAL_HCD_HC_GetURBState>
 800c3fe:	4603      	mov	r3, r0
}
 800c400:	4618      	mov	r0, r3
 800c402:	3708      	adds	r7, #8
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	460b      	mov	r3, r1
 800c412:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f893 349c 	ldrb.w	r3, [r3, #1180]	@ 0x49c
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d103      	bne.n	800c426 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c41e:	78fb      	ldrb	r3, [r7, #3]
 800c420:	4618      	mov	r0, r3
 800c422:	f000 f873 	bl	800c50c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c426:	20c8      	movs	r0, #200	@ 0xc8
 800c428:	f7f5 fd2a 	bl	8001e80 <HAL_Delay>
  return USBH_OK;
 800c42c:	2300      	movs	r3, #0
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3708      	adds	r7, #8
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}

0800c436 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c436:	b480      	push	{r7}
 800c438:	b085      	sub	sp, #20
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	6078      	str	r0, [r7, #4]
 800c43e:	460b      	mov	r3, r1
 800c440:	70fb      	strb	r3, [r7, #3]
 800c442:	4613      	mov	r3, r2
 800c444:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 800c44c:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c44e:	78fa      	ldrb	r2, [r7, #3]
 800c450:	68f9      	ldr	r1, [r7, #12]
 800c452:	4613      	mov	r3, r2
 800c454:	005b      	lsls	r3, r3, #1
 800c456:	4413      	add	r3, r2
 800c458:	011b      	lsls	r3, r3, #4
 800c45a:	440b      	add	r3, r1
 800c45c:	333b      	adds	r3, #59	@ 0x3b
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d00a      	beq.n	800c47a <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c464:	78fa      	ldrb	r2, [r7, #3]
 800c466:	68f9      	ldr	r1, [r7, #12]
 800c468:	4613      	mov	r3, r2
 800c46a:	005b      	lsls	r3, r3, #1
 800c46c:	4413      	add	r3, r2
 800c46e:	011b      	lsls	r3, r3, #4
 800c470:	440b      	add	r3, r1
 800c472:	3358      	adds	r3, #88	@ 0x58
 800c474:	78ba      	ldrb	r2, [r7, #2]
 800c476:	701a      	strb	r2, [r3, #0]
 800c478:	e009      	b.n	800c48e <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c47a:	78fa      	ldrb	r2, [r7, #3]
 800c47c:	68f9      	ldr	r1, [r7, #12]
 800c47e:	4613      	mov	r3, r2
 800c480:	005b      	lsls	r3, r3, #1
 800c482:	4413      	add	r3, r2
 800c484:	011b      	lsls	r3, r3, #4
 800c486:	440b      	add	r3, r1
 800c488:	3359      	adds	r3, #89	@ 0x59
 800c48a:	78ba      	ldrb	r2, [r7, #2]
 800c48c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c48e:	2300      	movs	r3, #0
}
 800c490:	4618      	mov	r0, r3
 800c492:	3714      	adds	r7, #20
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr

0800c49c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f7f5 fceb 	bl	8001e80 <HAL_Delay>
}
 800c4aa:	bf00      	nop
 800c4ac:	3708      	adds	r7, #8
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
	...

0800c4b4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b085      	sub	sp, #20
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c4c2:	79fb      	ldrb	r3, [r7, #7]
 800c4c4:	2b03      	cmp	r3, #3
 800c4c6:	d817      	bhi.n	800c4f8 <USBH_Get_USB_Status+0x44>
 800c4c8:	a201      	add	r2, pc, #4	@ (adr r2, 800c4d0 <USBH_Get_USB_Status+0x1c>)
 800c4ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ce:	bf00      	nop
 800c4d0:	0800c4e1 	.word	0x0800c4e1
 800c4d4:	0800c4e7 	.word	0x0800c4e7
 800c4d8:	0800c4ed 	.word	0x0800c4ed
 800c4dc:	0800c4f3 	.word	0x0800c4f3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	73fb      	strb	r3, [r7, #15]
    break;
 800c4e4:	e00b      	b.n	800c4fe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c4e6:	2302      	movs	r3, #2
 800c4e8:	73fb      	strb	r3, [r7, #15]
    break;
 800c4ea:	e008      	b.n	800c4fe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	73fb      	strb	r3, [r7, #15]
    break;
 800c4f0:	e005      	b.n	800c4fe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c4f2:	2302      	movs	r3, #2
 800c4f4:	73fb      	strb	r3, [r7, #15]
    break;
 800c4f6:	e002      	b.n	800c4fe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c4f8:	2302      	movs	r3, #2
 800c4fa:	73fb      	strb	r3, [r7, #15]
    break;
 800c4fc:	bf00      	nop
  }
  return usb_status;
 800c4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c500:	4618      	mov	r0, r3
 800c502:	3714      	adds	r7, #20
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	4603      	mov	r3, r0
 800c514:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c516:	79fb      	ldrb	r3, [r7, #7]
 800c518:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c51a:	79fb      	ldrb	r3, [r7, #7]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d102      	bne.n	800c526 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c520:	2300      	movs	r3, #0
 800c522:	73fb      	strb	r3, [r7, #15]
 800c524:	e001      	b.n	800c52a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c526:	2301      	movs	r3, #1
 800c528:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 800c52a:	7bfb      	ldrb	r3, [r7, #15]
 800c52c:	461a      	mov	r2, r3
 800c52e:	2140      	movs	r1, #64	@ 0x40
 800c530:	4803      	ldr	r0, [pc, #12]	@ (800c540 <MX_DriverVbusFS+0x34>)
 800c532:	f7f5 ffeb 	bl	800250c <HAL_GPIO_WritePin>
}
 800c536:	bf00      	nop
 800c538:	3710      	adds	r7, #16
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	48001800 	.word	0x48001800

0800c544 <malloc>:
 800c544:	4b02      	ldr	r3, [pc, #8]	@ (800c550 <malloc+0xc>)
 800c546:	4601      	mov	r1, r0
 800c548:	6818      	ldr	r0, [r3, #0]
 800c54a:	f000 b82d 	b.w	800c5a8 <_malloc_r>
 800c54e:	bf00      	nop
 800c550:	20000044 	.word	0x20000044

0800c554 <free>:
 800c554:	4b02      	ldr	r3, [pc, #8]	@ (800c560 <free+0xc>)
 800c556:	4601      	mov	r1, r0
 800c558:	6818      	ldr	r0, [r3, #0]
 800c55a:	f000 b917 	b.w	800c78c <_free_r>
 800c55e:	bf00      	nop
 800c560:	20000044 	.word	0x20000044

0800c564 <sbrk_aligned>:
 800c564:	b570      	push	{r4, r5, r6, lr}
 800c566:	4e0f      	ldr	r6, [pc, #60]	@ (800c5a4 <sbrk_aligned+0x40>)
 800c568:	460c      	mov	r4, r1
 800c56a:	6831      	ldr	r1, [r6, #0]
 800c56c:	4605      	mov	r5, r0
 800c56e:	b911      	cbnz	r1, 800c576 <sbrk_aligned+0x12>
 800c570:	f000 f8d0 	bl	800c714 <_sbrk_r>
 800c574:	6030      	str	r0, [r6, #0]
 800c576:	4621      	mov	r1, r4
 800c578:	4628      	mov	r0, r5
 800c57a:	f000 f8cb 	bl	800c714 <_sbrk_r>
 800c57e:	1c43      	adds	r3, r0, #1
 800c580:	d103      	bne.n	800c58a <sbrk_aligned+0x26>
 800c582:	f04f 34ff 	mov.w	r4, #4294967295
 800c586:	4620      	mov	r0, r4
 800c588:	bd70      	pop	{r4, r5, r6, pc}
 800c58a:	1cc4      	adds	r4, r0, #3
 800c58c:	f024 0403 	bic.w	r4, r4, #3
 800c590:	42a0      	cmp	r0, r4
 800c592:	d0f8      	beq.n	800c586 <sbrk_aligned+0x22>
 800c594:	1a21      	subs	r1, r4, r0
 800c596:	4628      	mov	r0, r5
 800c598:	f000 f8bc 	bl	800c714 <_sbrk_r>
 800c59c:	3001      	adds	r0, #1
 800c59e:	d1f2      	bne.n	800c586 <sbrk_aligned+0x22>
 800c5a0:	e7ef      	b.n	800c582 <sbrk_aligned+0x1e>
 800c5a2:	bf00      	nop
 800c5a4:	20000a44 	.word	0x20000a44

0800c5a8 <_malloc_r>:
 800c5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5ac:	1ccd      	adds	r5, r1, #3
 800c5ae:	f025 0503 	bic.w	r5, r5, #3
 800c5b2:	3508      	adds	r5, #8
 800c5b4:	2d0c      	cmp	r5, #12
 800c5b6:	bf38      	it	cc
 800c5b8:	250c      	movcc	r5, #12
 800c5ba:	2d00      	cmp	r5, #0
 800c5bc:	4606      	mov	r6, r0
 800c5be:	db01      	blt.n	800c5c4 <_malloc_r+0x1c>
 800c5c0:	42a9      	cmp	r1, r5
 800c5c2:	d904      	bls.n	800c5ce <_malloc_r+0x26>
 800c5c4:	230c      	movs	r3, #12
 800c5c6:	6033      	str	r3, [r6, #0]
 800c5c8:	2000      	movs	r0, #0
 800c5ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c6a4 <_malloc_r+0xfc>
 800c5d2:	f000 f869 	bl	800c6a8 <__malloc_lock>
 800c5d6:	f8d8 3000 	ldr.w	r3, [r8]
 800c5da:	461c      	mov	r4, r3
 800c5dc:	bb44      	cbnz	r4, 800c630 <_malloc_r+0x88>
 800c5de:	4629      	mov	r1, r5
 800c5e0:	4630      	mov	r0, r6
 800c5e2:	f7ff ffbf 	bl	800c564 <sbrk_aligned>
 800c5e6:	1c43      	adds	r3, r0, #1
 800c5e8:	4604      	mov	r4, r0
 800c5ea:	d158      	bne.n	800c69e <_malloc_r+0xf6>
 800c5ec:	f8d8 4000 	ldr.w	r4, [r8]
 800c5f0:	4627      	mov	r7, r4
 800c5f2:	2f00      	cmp	r7, #0
 800c5f4:	d143      	bne.n	800c67e <_malloc_r+0xd6>
 800c5f6:	2c00      	cmp	r4, #0
 800c5f8:	d04b      	beq.n	800c692 <_malloc_r+0xea>
 800c5fa:	6823      	ldr	r3, [r4, #0]
 800c5fc:	4639      	mov	r1, r7
 800c5fe:	4630      	mov	r0, r6
 800c600:	eb04 0903 	add.w	r9, r4, r3
 800c604:	f000 f886 	bl	800c714 <_sbrk_r>
 800c608:	4581      	cmp	r9, r0
 800c60a:	d142      	bne.n	800c692 <_malloc_r+0xea>
 800c60c:	6821      	ldr	r1, [r4, #0]
 800c60e:	1a6d      	subs	r5, r5, r1
 800c610:	4629      	mov	r1, r5
 800c612:	4630      	mov	r0, r6
 800c614:	f7ff ffa6 	bl	800c564 <sbrk_aligned>
 800c618:	3001      	adds	r0, #1
 800c61a:	d03a      	beq.n	800c692 <_malloc_r+0xea>
 800c61c:	6823      	ldr	r3, [r4, #0]
 800c61e:	442b      	add	r3, r5
 800c620:	6023      	str	r3, [r4, #0]
 800c622:	f8d8 3000 	ldr.w	r3, [r8]
 800c626:	685a      	ldr	r2, [r3, #4]
 800c628:	bb62      	cbnz	r2, 800c684 <_malloc_r+0xdc>
 800c62a:	f8c8 7000 	str.w	r7, [r8]
 800c62e:	e00f      	b.n	800c650 <_malloc_r+0xa8>
 800c630:	6822      	ldr	r2, [r4, #0]
 800c632:	1b52      	subs	r2, r2, r5
 800c634:	d420      	bmi.n	800c678 <_malloc_r+0xd0>
 800c636:	2a0b      	cmp	r2, #11
 800c638:	d917      	bls.n	800c66a <_malloc_r+0xc2>
 800c63a:	1961      	adds	r1, r4, r5
 800c63c:	42a3      	cmp	r3, r4
 800c63e:	6025      	str	r5, [r4, #0]
 800c640:	bf18      	it	ne
 800c642:	6059      	strne	r1, [r3, #4]
 800c644:	6863      	ldr	r3, [r4, #4]
 800c646:	bf08      	it	eq
 800c648:	f8c8 1000 	streq.w	r1, [r8]
 800c64c:	5162      	str	r2, [r4, r5]
 800c64e:	604b      	str	r3, [r1, #4]
 800c650:	4630      	mov	r0, r6
 800c652:	f000 f82f 	bl	800c6b4 <__malloc_unlock>
 800c656:	f104 000b 	add.w	r0, r4, #11
 800c65a:	1d23      	adds	r3, r4, #4
 800c65c:	f020 0007 	bic.w	r0, r0, #7
 800c660:	1ac2      	subs	r2, r0, r3
 800c662:	bf1c      	itt	ne
 800c664:	1a1b      	subne	r3, r3, r0
 800c666:	50a3      	strne	r3, [r4, r2]
 800c668:	e7af      	b.n	800c5ca <_malloc_r+0x22>
 800c66a:	6862      	ldr	r2, [r4, #4]
 800c66c:	42a3      	cmp	r3, r4
 800c66e:	bf0c      	ite	eq
 800c670:	f8c8 2000 	streq.w	r2, [r8]
 800c674:	605a      	strne	r2, [r3, #4]
 800c676:	e7eb      	b.n	800c650 <_malloc_r+0xa8>
 800c678:	4623      	mov	r3, r4
 800c67a:	6864      	ldr	r4, [r4, #4]
 800c67c:	e7ae      	b.n	800c5dc <_malloc_r+0x34>
 800c67e:	463c      	mov	r4, r7
 800c680:	687f      	ldr	r7, [r7, #4]
 800c682:	e7b6      	b.n	800c5f2 <_malloc_r+0x4a>
 800c684:	461a      	mov	r2, r3
 800c686:	685b      	ldr	r3, [r3, #4]
 800c688:	42a3      	cmp	r3, r4
 800c68a:	d1fb      	bne.n	800c684 <_malloc_r+0xdc>
 800c68c:	2300      	movs	r3, #0
 800c68e:	6053      	str	r3, [r2, #4]
 800c690:	e7de      	b.n	800c650 <_malloc_r+0xa8>
 800c692:	230c      	movs	r3, #12
 800c694:	6033      	str	r3, [r6, #0]
 800c696:	4630      	mov	r0, r6
 800c698:	f000 f80c 	bl	800c6b4 <__malloc_unlock>
 800c69c:	e794      	b.n	800c5c8 <_malloc_r+0x20>
 800c69e:	6005      	str	r5, [r0, #0]
 800c6a0:	e7d6      	b.n	800c650 <_malloc_r+0xa8>
 800c6a2:	bf00      	nop
 800c6a4:	20000a48 	.word	0x20000a48

0800c6a8 <__malloc_lock>:
 800c6a8:	4801      	ldr	r0, [pc, #4]	@ (800c6b0 <__malloc_lock+0x8>)
 800c6aa:	f000 b86d 	b.w	800c788 <__retarget_lock_acquire_recursive>
 800c6ae:	bf00      	nop
 800c6b0:	20000b88 	.word	0x20000b88

0800c6b4 <__malloc_unlock>:
 800c6b4:	4801      	ldr	r0, [pc, #4]	@ (800c6bc <__malloc_unlock+0x8>)
 800c6b6:	f000 b868 	b.w	800c78a <__retarget_lock_release_recursive>
 800c6ba:	bf00      	nop
 800c6bc:	20000b88 	.word	0x20000b88

0800c6c0 <siprintf>:
 800c6c0:	b40e      	push	{r1, r2, r3}
 800c6c2:	b510      	push	{r4, lr}
 800c6c4:	b09d      	sub	sp, #116	@ 0x74
 800c6c6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c6c8:	9002      	str	r0, [sp, #8]
 800c6ca:	9006      	str	r0, [sp, #24]
 800c6cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c6d0:	480a      	ldr	r0, [pc, #40]	@ (800c6fc <siprintf+0x3c>)
 800c6d2:	9107      	str	r1, [sp, #28]
 800c6d4:	9104      	str	r1, [sp, #16]
 800c6d6:	490a      	ldr	r1, [pc, #40]	@ (800c700 <siprintf+0x40>)
 800c6d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6dc:	9105      	str	r1, [sp, #20]
 800c6de:	2400      	movs	r4, #0
 800c6e0:	a902      	add	r1, sp, #8
 800c6e2:	6800      	ldr	r0, [r0, #0]
 800c6e4:	9301      	str	r3, [sp, #4]
 800c6e6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c6e8:	f000 f8f6 	bl	800c8d8 <_svfiprintf_r>
 800c6ec:	9b02      	ldr	r3, [sp, #8]
 800c6ee:	701c      	strb	r4, [r3, #0]
 800c6f0:	b01d      	add	sp, #116	@ 0x74
 800c6f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6f6:	b003      	add	sp, #12
 800c6f8:	4770      	bx	lr
 800c6fa:	bf00      	nop
 800c6fc:	20000044 	.word	0x20000044
 800c700:	ffff0208 	.word	0xffff0208

0800c704 <memset>:
 800c704:	4402      	add	r2, r0
 800c706:	4603      	mov	r3, r0
 800c708:	4293      	cmp	r3, r2
 800c70a:	d100      	bne.n	800c70e <memset+0xa>
 800c70c:	4770      	bx	lr
 800c70e:	f803 1b01 	strb.w	r1, [r3], #1
 800c712:	e7f9      	b.n	800c708 <memset+0x4>

0800c714 <_sbrk_r>:
 800c714:	b538      	push	{r3, r4, r5, lr}
 800c716:	4d06      	ldr	r5, [pc, #24]	@ (800c730 <_sbrk_r+0x1c>)
 800c718:	2300      	movs	r3, #0
 800c71a:	4604      	mov	r4, r0
 800c71c:	4608      	mov	r0, r1
 800c71e:	602b      	str	r3, [r5, #0]
 800c720:	f7f5 fac8 	bl	8001cb4 <_sbrk>
 800c724:	1c43      	adds	r3, r0, #1
 800c726:	d102      	bne.n	800c72e <_sbrk_r+0x1a>
 800c728:	682b      	ldr	r3, [r5, #0]
 800c72a:	b103      	cbz	r3, 800c72e <_sbrk_r+0x1a>
 800c72c:	6023      	str	r3, [r4, #0]
 800c72e:	bd38      	pop	{r3, r4, r5, pc}
 800c730:	20000b84 	.word	0x20000b84

0800c734 <__errno>:
 800c734:	4b01      	ldr	r3, [pc, #4]	@ (800c73c <__errno+0x8>)
 800c736:	6818      	ldr	r0, [r3, #0]
 800c738:	4770      	bx	lr
 800c73a:	bf00      	nop
 800c73c:	20000044 	.word	0x20000044

0800c740 <__libc_init_array>:
 800c740:	b570      	push	{r4, r5, r6, lr}
 800c742:	4d0d      	ldr	r5, [pc, #52]	@ (800c778 <__libc_init_array+0x38>)
 800c744:	4c0d      	ldr	r4, [pc, #52]	@ (800c77c <__libc_init_array+0x3c>)
 800c746:	1b64      	subs	r4, r4, r5
 800c748:	10a4      	asrs	r4, r4, #2
 800c74a:	2600      	movs	r6, #0
 800c74c:	42a6      	cmp	r6, r4
 800c74e:	d109      	bne.n	800c764 <__libc_init_array+0x24>
 800c750:	4d0b      	ldr	r5, [pc, #44]	@ (800c780 <__libc_init_array+0x40>)
 800c752:	4c0c      	ldr	r4, [pc, #48]	@ (800c784 <__libc_init_array+0x44>)
 800c754:	f000 fba6 	bl	800cea4 <_init>
 800c758:	1b64      	subs	r4, r4, r5
 800c75a:	10a4      	asrs	r4, r4, #2
 800c75c:	2600      	movs	r6, #0
 800c75e:	42a6      	cmp	r6, r4
 800c760:	d105      	bne.n	800c76e <__libc_init_array+0x2e>
 800c762:	bd70      	pop	{r4, r5, r6, pc}
 800c764:	f855 3b04 	ldr.w	r3, [r5], #4
 800c768:	4798      	blx	r3
 800c76a:	3601      	adds	r6, #1
 800c76c:	e7ee      	b.n	800c74c <__libc_init_array+0xc>
 800c76e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c772:	4798      	blx	r3
 800c774:	3601      	adds	r6, #1
 800c776:	e7f2      	b.n	800c75e <__libc_init_array+0x1e>
 800c778:	0800d124 	.word	0x0800d124
 800c77c:	0800d124 	.word	0x0800d124
 800c780:	0800d124 	.word	0x0800d124
 800c784:	0800d128 	.word	0x0800d128

0800c788 <__retarget_lock_acquire_recursive>:
 800c788:	4770      	bx	lr

0800c78a <__retarget_lock_release_recursive>:
 800c78a:	4770      	bx	lr

0800c78c <_free_r>:
 800c78c:	b538      	push	{r3, r4, r5, lr}
 800c78e:	4605      	mov	r5, r0
 800c790:	2900      	cmp	r1, #0
 800c792:	d041      	beq.n	800c818 <_free_r+0x8c>
 800c794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c798:	1f0c      	subs	r4, r1, #4
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	bfb8      	it	lt
 800c79e:	18e4      	addlt	r4, r4, r3
 800c7a0:	f7ff ff82 	bl	800c6a8 <__malloc_lock>
 800c7a4:	4a1d      	ldr	r2, [pc, #116]	@ (800c81c <_free_r+0x90>)
 800c7a6:	6813      	ldr	r3, [r2, #0]
 800c7a8:	b933      	cbnz	r3, 800c7b8 <_free_r+0x2c>
 800c7aa:	6063      	str	r3, [r4, #4]
 800c7ac:	6014      	str	r4, [r2, #0]
 800c7ae:	4628      	mov	r0, r5
 800c7b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7b4:	f7ff bf7e 	b.w	800c6b4 <__malloc_unlock>
 800c7b8:	42a3      	cmp	r3, r4
 800c7ba:	d908      	bls.n	800c7ce <_free_r+0x42>
 800c7bc:	6820      	ldr	r0, [r4, #0]
 800c7be:	1821      	adds	r1, r4, r0
 800c7c0:	428b      	cmp	r3, r1
 800c7c2:	bf01      	itttt	eq
 800c7c4:	6819      	ldreq	r1, [r3, #0]
 800c7c6:	685b      	ldreq	r3, [r3, #4]
 800c7c8:	1809      	addeq	r1, r1, r0
 800c7ca:	6021      	streq	r1, [r4, #0]
 800c7cc:	e7ed      	b.n	800c7aa <_free_r+0x1e>
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	b10b      	cbz	r3, 800c7d8 <_free_r+0x4c>
 800c7d4:	42a3      	cmp	r3, r4
 800c7d6:	d9fa      	bls.n	800c7ce <_free_r+0x42>
 800c7d8:	6811      	ldr	r1, [r2, #0]
 800c7da:	1850      	adds	r0, r2, r1
 800c7dc:	42a0      	cmp	r0, r4
 800c7de:	d10b      	bne.n	800c7f8 <_free_r+0x6c>
 800c7e0:	6820      	ldr	r0, [r4, #0]
 800c7e2:	4401      	add	r1, r0
 800c7e4:	1850      	adds	r0, r2, r1
 800c7e6:	4283      	cmp	r3, r0
 800c7e8:	6011      	str	r1, [r2, #0]
 800c7ea:	d1e0      	bne.n	800c7ae <_free_r+0x22>
 800c7ec:	6818      	ldr	r0, [r3, #0]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	6053      	str	r3, [r2, #4]
 800c7f2:	4408      	add	r0, r1
 800c7f4:	6010      	str	r0, [r2, #0]
 800c7f6:	e7da      	b.n	800c7ae <_free_r+0x22>
 800c7f8:	d902      	bls.n	800c800 <_free_r+0x74>
 800c7fa:	230c      	movs	r3, #12
 800c7fc:	602b      	str	r3, [r5, #0]
 800c7fe:	e7d6      	b.n	800c7ae <_free_r+0x22>
 800c800:	6820      	ldr	r0, [r4, #0]
 800c802:	1821      	adds	r1, r4, r0
 800c804:	428b      	cmp	r3, r1
 800c806:	bf04      	itt	eq
 800c808:	6819      	ldreq	r1, [r3, #0]
 800c80a:	685b      	ldreq	r3, [r3, #4]
 800c80c:	6063      	str	r3, [r4, #4]
 800c80e:	bf04      	itt	eq
 800c810:	1809      	addeq	r1, r1, r0
 800c812:	6021      	streq	r1, [r4, #0]
 800c814:	6054      	str	r4, [r2, #4]
 800c816:	e7ca      	b.n	800c7ae <_free_r+0x22>
 800c818:	bd38      	pop	{r3, r4, r5, pc}
 800c81a:	bf00      	nop
 800c81c:	20000a48 	.word	0x20000a48

0800c820 <__ssputs_r>:
 800c820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c824:	688e      	ldr	r6, [r1, #8]
 800c826:	461f      	mov	r7, r3
 800c828:	42be      	cmp	r6, r7
 800c82a:	680b      	ldr	r3, [r1, #0]
 800c82c:	4682      	mov	sl, r0
 800c82e:	460c      	mov	r4, r1
 800c830:	4690      	mov	r8, r2
 800c832:	d82d      	bhi.n	800c890 <__ssputs_r+0x70>
 800c834:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c838:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c83c:	d026      	beq.n	800c88c <__ssputs_r+0x6c>
 800c83e:	6965      	ldr	r5, [r4, #20]
 800c840:	6909      	ldr	r1, [r1, #16]
 800c842:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c846:	eba3 0901 	sub.w	r9, r3, r1
 800c84a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c84e:	1c7b      	adds	r3, r7, #1
 800c850:	444b      	add	r3, r9
 800c852:	106d      	asrs	r5, r5, #1
 800c854:	429d      	cmp	r5, r3
 800c856:	bf38      	it	cc
 800c858:	461d      	movcc	r5, r3
 800c85a:	0553      	lsls	r3, r2, #21
 800c85c:	d527      	bpl.n	800c8ae <__ssputs_r+0x8e>
 800c85e:	4629      	mov	r1, r5
 800c860:	f7ff fea2 	bl	800c5a8 <_malloc_r>
 800c864:	4606      	mov	r6, r0
 800c866:	b360      	cbz	r0, 800c8c2 <__ssputs_r+0xa2>
 800c868:	6921      	ldr	r1, [r4, #16]
 800c86a:	464a      	mov	r2, r9
 800c86c:	f000 fad6 	bl	800ce1c <memcpy>
 800c870:	89a3      	ldrh	r3, [r4, #12]
 800c872:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c87a:	81a3      	strh	r3, [r4, #12]
 800c87c:	6126      	str	r6, [r4, #16]
 800c87e:	6165      	str	r5, [r4, #20]
 800c880:	444e      	add	r6, r9
 800c882:	eba5 0509 	sub.w	r5, r5, r9
 800c886:	6026      	str	r6, [r4, #0]
 800c888:	60a5      	str	r5, [r4, #8]
 800c88a:	463e      	mov	r6, r7
 800c88c:	42be      	cmp	r6, r7
 800c88e:	d900      	bls.n	800c892 <__ssputs_r+0x72>
 800c890:	463e      	mov	r6, r7
 800c892:	6820      	ldr	r0, [r4, #0]
 800c894:	4632      	mov	r2, r6
 800c896:	4641      	mov	r1, r8
 800c898:	f000 faa6 	bl	800cde8 <memmove>
 800c89c:	68a3      	ldr	r3, [r4, #8]
 800c89e:	1b9b      	subs	r3, r3, r6
 800c8a0:	60a3      	str	r3, [r4, #8]
 800c8a2:	6823      	ldr	r3, [r4, #0]
 800c8a4:	4433      	add	r3, r6
 800c8a6:	6023      	str	r3, [r4, #0]
 800c8a8:	2000      	movs	r0, #0
 800c8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8ae:	462a      	mov	r2, r5
 800c8b0:	f000 fac2 	bl	800ce38 <_realloc_r>
 800c8b4:	4606      	mov	r6, r0
 800c8b6:	2800      	cmp	r0, #0
 800c8b8:	d1e0      	bne.n	800c87c <__ssputs_r+0x5c>
 800c8ba:	6921      	ldr	r1, [r4, #16]
 800c8bc:	4650      	mov	r0, sl
 800c8be:	f7ff ff65 	bl	800c78c <_free_r>
 800c8c2:	230c      	movs	r3, #12
 800c8c4:	f8ca 3000 	str.w	r3, [sl]
 800c8c8:	89a3      	ldrh	r3, [r4, #12]
 800c8ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8ce:	81a3      	strh	r3, [r4, #12]
 800c8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d4:	e7e9      	b.n	800c8aa <__ssputs_r+0x8a>
	...

0800c8d8 <_svfiprintf_r>:
 800c8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8dc:	4698      	mov	r8, r3
 800c8de:	898b      	ldrh	r3, [r1, #12]
 800c8e0:	061b      	lsls	r3, r3, #24
 800c8e2:	b09d      	sub	sp, #116	@ 0x74
 800c8e4:	4607      	mov	r7, r0
 800c8e6:	460d      	mov	r5, r1
 800c8e8:	4614      	mov	r4, r2
 800c8ea:	d510      	bpl.n	800c90e <_svfiprintf_r+0x36>
 800c8ec:	690b      	ldr	r3, [r1, #16]
 800c8ee:	b973      	cbnz	r3, 800c90e <_svfiprintf_r+0x36>
 800c8f0:	2140      	movs	r1, #64	@ 0x40
 800c8f2:	f7ff fe59 	bl	800c5a8 <_malloc_r>
 800c8f6:	6028      	str	r0, [r5, #0]
 800c8f8:	6128      	str	r0, [r5, #16]
 800c8fa:	b930      	cbnz	r0, 800c90a <_svfiprintf_r+0x32>
 800c8fc:	230c      	movs	r3, #12
 800c8fe:	603b      	str	r3, [r7, #0]
 800c900:	f04f 30ff 	mov.w	r0, #4294967295
 800c904:	b01d      	add	sp, #116	@ 0x74
 800c906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c90a:	2340      	movs	r3, #64	@ 0x40
 800c90c:	616b      	str	r3, [r5, #20]
 800c90e:	2300      	movs	r3, #0
 800c910:	9309      	str	r3, [sp, #36]	@ 0x24
 800c912:	2320      	movs	r3, #32
 800c914:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c918:	f8cd 800c 	str.w	r8, [sp, #12]
 800c91c:	2330      	movs	r3, #48	@ 0x30
 800c91e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cabc <_svfiprintf_r+0x1e4>
 800c922:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c926:	f04f 0901 	mov.w	r9, #1
 800c92a:	4623      	mov	r3, r4
 800c92c:	469a      	mov	sl, r3
 800c92e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c932:	b10a      	cbz	r2, 800c938 <_svfiprintf_r+0x60>
 800c934:	2a25      	cmp	r2, #37	@ 0x25
 800c936:	d1f9      	bne.n	800c92c <_svfiprintf_r+0x54>
 800c938:	ebba 0b04 	subs.w	fp, sl, r4
 800c93c:	d00b      	beq.n	800c956 <_svfiprintf_r+0x7e>
 800c93e:	465b      	mov	r3, fp
 800c940:	4622      	mov	r2, r4
 800c942:	4629      	mov	r1, r5
 800c944:	4638      	mov	r0, r7
 800c946:	f7ff ff6b 	bl	800c820 <__ssputs_r>
 800c94a:	3001      	adds	r0, #1
 800c94c:	f000 80a7 	beq.w	800ca9e <_svfiprintf_r+0x1c6>
 800c950:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c952:	445a      	add	r2, fp
 800c954:	9209      	str	r2, [sp, #36]	@ 0x24
 800c956:	f89a 3000 	ldrb.w	r3, [sl]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	f000 809f 	beq.w	800ca9e <_svfiprintf_r+0x1c6>
 800c960:	2300      	movs	r3, #0
 800c962:	f04f 32ff 	mov.w	r2, #4294967295
 800c966:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c96a:	f10a 0a01 	add.w	sl, sl, #1
 800c96e:	9304      	str	r3, [sp, #16]
 800c970:	9307      	str	r3, [sp, #28]
 800c972:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c976:	931a      	str	r3, [sp, #104]	@ 0x68
 800c978:	4654      	mov	r4, sl
 800c97a:	2205      	movs	r2, #5
 800c97c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c980:	484e      	ldr	r0, [pc, #312]	@ (800cabc <_svfiprintf_r+0x1e4>)
 800c982:	f7f3 fc3d 	bl	8000200 <memchr>
 800c986:	9a04      	ldr	r2, [sp, #16]
 800c988:	b9d8      	cbnz	r0, 800c9c2 <_svfiprintf_r+0xea>
 800c98a:	06d0      	lsls	r0, r2, #27
 800c98c:	bf44      	itt	mi
 800c98e:	2320      	movmi	r3, #32
 800c990:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c994:	0711      	lsls	r1, r2, #28
 800c996:	bf44      	itt	mi
 800c998:	232b      	movmi	r3, #43	@ 0x2b
 800c99a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c99e:	f89a 3000 	ldrb.w	r3, [sl]
 800c9a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9a4:	d015      	beq.n	800c9d2 <_svfiprintf_r+0xfa>
 800c9a6:	9a07      	ldr	r2, [sp, #28]
 800c9a8:	4654      	mov	r4, sl
 800c9aa:	2000      	movs	r0, #0
 800c9ac:	f04f 0c0a 	mov.w	ip, #10
 800c9b0:	4621      	mov	r1, r4
 800c9b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9b6:	3b30      	subs	r3, #48	@ 0x30
 800c9b8:	2b09      	cmp	r3, #9
 800c9ba:	d94b      	bls.n	800ca54 <_svfiprintf_r+0x17c>
 800c9bc:	b1b0      	cbz	r0, 800c9ec <_svfiprintf_r+0x114>
 800c9be:	9207      	str	r2, [sp, #28]
 800c9c0:	e014      	b.n	800c9ec <_svfiprintf_r+0x114>
 800c9c2:	eba0 0308 	sub.w	r3, r0, r8
 800c9c6:	fa09 f303 	lsl.w	r3, r9, r3
 800c9ca:	4313      	orrs	r3, r2
 800c9cc:	9304      	str	r3, [sp, #16]
 800c9ce:	46a2      	mov	sl, r4
 800c9d0:	e7d2      	b.n	800c978 <_svfiprintf_r+0xa0>
 800c9d2:	9b03      	ldr	r3, [sp, #12]
 800c9d4:	1d19      	adds	r1, r3, #4
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	9103      	str	r1, [sp, #12]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	bfbb      	ittet	lt
 800c9de:	425b      	neglt	r3, r3
 800c9e0:	f042 0202 	orrlt.w	r2, r2, #2
 800c9e4:	9307      	strge	r3, [sp, #28]
 800c9e6:	9307      	strlt	r3, [sp, #28]
 800c9e8:	bfb8      	it	lt
 800c9ea:	9204      	strlt	r2, [sp, #16]
 800c9ec:	7823      	ldrb	r3, [r4, #0]
 800c9ee:	2b2e      	cmp	r3, #46	@ 0x2e
 800c9f0:	d10a      	bne.n	800ca08 <_svfiprintf_r+0x130>
 800c9f2:	7863      	ldrb	r3, [r4, #1]
 800c9f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9f6:	d132      	bne.n	800ca5e <_svfiprintf_r+0x186>
 800c9f8:	9b03      	ldr	r3, [sp, #12]
 800c9fa:	1d1a      	adds	r2, r3, #4
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	9203      	str	r2, [sp, #12]
 800ca00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca04:	3402      	adds	r4, #2
 800ca06:	9305      	str	r3, [sp, #20]
 800ca08:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cacc <_svfiprintf_r+0x1f4>
 800ca0c:	7821      	ldrb	r1, [r4, #0]
 800ca0e:	2203      	movs	r2, #3
 800ca10:	4650      	mov	r0, sl
 800ca12:	f7f3 fbf5 	bl	8000200 <memchr>
 800ca16:	b138      	cbz	r0, 800ca28 <_svfiprintf_r+0x150>
 800ca18:	9b04      	ldr	r3, [sp, #16]
 800ca1a:	eba0 000a 	sub.w	r0, r0, sl
 800ca1e:	2240      	movs	r2, #64	@ 0x40
 800ca20:	4082      	lsls	r2, r0
 800ca22:	4313      	orrs	r3, r2
 800ca24:	3401      	adds	r4, #1
 800ca26:	9304      	str	r3, [sp, #16]
 800ca28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca2c:	4824      	ldr	r0, [pc, #144]	@ (800cac0 <_svfiprintf_r+0x1e8>)
 800ca2e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ca32:	2206      	movs	r2, #6
 800ca34:	f7f3 fbe4 	bl	8000200 <memchr>
 800ca38:	2800      	cmp	r0, #0
 800ca3a:	d036      	beq.n	800caaa <_svfiprintf_r+0x1d2>
 800ca3c:	4b21      	ldr	r3, [pc, #132]	@ (800cac4 <_svfiprintf_r+0x1ec>)
 800ca3e:	bb1b      	cbnz	r3, 800ca88 <_svfiprintf_r+0x1b0>
 800ca40:	9b03      	ldr	r3, [sp, #12]
 800ca42:	3307      	adds	r3, #7
 800ca44:	f023 0307 	bic.w	r3, r3, #7
 800ca48:	3308      	adds	r3, #8
 800ca4a:	9303      	str	r3, [sp, #12]
 800ca4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca4e:	4433      	add	r3, r6
 800ca50:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca52:	e76a      	b.n	800c92a <_svfiprintf_r+0x52>
 800ca54:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca58:	460c      	mov	r4, r1
 800ca5a:	2001      	movs	r0, #1
 800ca5c:	e7a8      	b.n	800c9b0 <_svfiprintf_r+0xd8>
 800ca5e:	2300      	movs	r3, #0
 800ca60:	3401      	adds	r4, #1
 800ca62:	9305      	str	r3, [sp, #20]
 800ca64:	4619      	mov	r1, r3
 800ca66:	f04f 0c0a 	mov.w	ip, #10
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca70:	3a30      	subs	r2, #48	@ 0x30
 800ca72:	2a09      	cmp	r2, #9
 800ca74:	d903      	bls.n	800ca7e <_svfiprintf_r+0x1a6>
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d0c6      	beq.n	800ca08 <_svfiprintf_r+0x130>
 800ca7a:	9105      	str	r1, [sp, #20]
 800ca7c:	e7c4      	b.n	800ca08 <_svfiprintf_r+0x130>
 800ca7e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca82:	4604      	mov	r4, r0
 800ca84:	2301      	movs	r3, #1
 800ca86:	e7f0      	b.n	800ca6a <_svfiprintf_r+0x192>
 800ca88:	ab03      	add	r3, sp, #12
 800ca8a:	9300      	str	r3, [sp, #0]
 800ca8c:	462a      	mov	r2, r5
 800ca8e:	4b0e      	ldr	r3, [pc, #56]	@ (800cac8 <_svfiprintf_r+0x1f0>)
 800ca90:	a904      	add	r1, sp, #16
 800ca92:	4638      	mov	r0, r7
 800ca94:	f3af 8000 	nop.w
 800ca98:	1c42      	adds	r2, r0, #1
 800ca9a:	4606      	mov	r6, r0
 800ca9c:	d1d6      	bne.n	800ca4c <_svfiprintf_r+0x174>
 800ca9e:	89ab      	ldrh	r3, [r5, #12]
 800caa0:	065b      	lsls	r3, r3, #25
 800caa2:	f53f af2d 	bmi.w	800c900 <_svfiprintf_r+0x28>
 800caa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800caa8:	e72c      	b.n	800c904 <_svfiprintf_r+0x2c>
 800caaa:	ab03      	add	r3, sp, #12
 800caac:	9300      	str	r3, [sp, #0]
 800caae:	462a      	mov	r2, r5
 800cab0:	4b05      	ldr	r3, [pc, #20]	@ (800cac8 <_svfiprintf_r+0x1f0>)
 800cab2:	a904      	add	r1, sp, #16
 800cab4:	4638      	mov	r0, r7
 800cab6:	f000 f879 	bl	800cbac <_printf_i>
 800caba:	e7ed      	b.n	800ca98 <_svfiprintf_r+0x1c0>
 800cabc:	0800d0e8 	.word	0x0800d0e8
 800cac0:	0800d0f2 	.word	0x0800d0f2
 800cac4:	00000000 	.word	0x00000000
 800cac8:	0800c821 	.word	0x0800c821
 800cacc:	0800d0ee 	.word	0x0800d0ee

0800cad0 <_printf_common>:
 800cad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cad4:	4616      	mov	r6, r2
 800cad6:	4698      	mov	r8, r3
 800cad8:	688a      	ldr	r2, [r1, #8]
 800cada:	690b      	ldr	r3, [r1, #16]
 800cadc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cae0:	4293      	cmp	r3, r2
 800cae2:	bfb8      	it	lt
 800cae4:	4613      	movlt	r3, r2
 800cae6:	6033      	str	r3, [r6, #0]
 800cae8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800caec:	4607      	mov	r7, r0
 800caee:	460c      	mov	r4, r1
 800caf0:	b10a      	cbz	r2, 800caf6 <_printf_common+0x26>
 800caf2:	3301      	adds	r3, #1
 800caf4:	6033      	str	r3, [r6, #0]
 800caf6:	6823      	ldr	r3, [r4, #0]
 800caf8:	0699      	lsls	r1, r3, #26
 800cafa:	bf42      	ittt	mi
 800cafc:	6833      	ldrmi	r3, [r6, #0]
 800cafe:	3302      	addmi	r3, #2
 800cb00:	6033      	strmi	r3, [r6, #0]
 800cb02:	6825      	ldr	r5, [r4, #0]
 800cb04:	f015 0506 	ands.w	r5, r5, #6
 800cb08:	d106      	bne.n	800cb18 <_printf_common+0x48>
 800cb0a:	f104 0a19 	add.w	sl, r4, #25
 800cb0e:	68e3      	ldr	r3, [r4, #12]
 800cb10:	6832      	ldr	r2, [r6, #0]
 800cb12:	1a9b      	subs	r3, r3, r2
 800cb14:	42ab      	cmp	r3, r5
 800cb16:	dc26      	bgt.n	800cb66 <_printf_common+0x96>
 800cb18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cb1c:	6822      	ldr	r2, [r4, #0]
 800cb1e:	3b00      	subs	r3, #0
 800cb20:	bf18      	it	ne
 800cb22:	2301      	movne	r3, #1
 800cb24:	0692      	lsls	r2, r2, #26
 800cb26:	d42b      	bmi.n	800cb80 <_printf_common+0xb0>
 800cb28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cb2c:	4641      	mov	r1, r8
 800cb2e:	4638      	mov	r0, r7
 800cb30:	47c8      	blx	r9
 800cb32:	3001      	adds	r0, #1
 800cb34:	d01e      	beq.n	800cb74 <_printf_common+0xa4>
 800cb36:	6823      	ldr	r3, [r4, #0]
 800cb38:	6922      	ldr	r2, [r4, #16]
 800cb3a:	f003 0306 	and.w	r3, r3, #6
 800cb3e:	2b04      	cmp	r3, #4
 800cb40:	bf02      	ittt	eq
 800cb42:	68e5      	ldreq	r5, [r4, #12]
 800cb44:	6833      	ldreq	r3, [r6, #0]
 800cb46:	1aed      	subeq	r5, r5, r3
 800cb48:	68a3      	ldr	r3, [r4, #8]
 800cb4a:	bf0c      	ite	eq
 800cb4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb50:	2500      	movne	r5, #0
 800cb52:	4293      	cmp	r3, r2
 800cb54:	bfc4      	itt	gt
 800cb56:	1a9b      	subgt	r3, r3, r2
 800cb58:	18ed      	addgt	r5, r5, r3
 800cb5a:	2600      	movs	r6, #0
 800cb5c:	341a      	adds	r4, #26
 800cb5e:	42b5      	cmp	r5, r6
 800cb60:	d11a      	bne.n	800cb98 <_printf_common+0xc8>
 800cb62:	2000      	movs	r0, #0
 800cb64:	e008      	b.n	800cb78 <_printf_common+0xa8>
 800cb66:	2301      	movs	r3, #1
 800cb68:	4652      	mov	r2, sl
 800cb6a:	4641      	mov	r1, r8
 800cb6c:	4638      	mov	r0, r7
 800cb6e:	47c8      	blx	r9
 800cb70:	3001      	adds	r0, #1
 800cb72:	d103      	bne.n	800cb7c <_printf_common+0xac>
 800cb74:	f04f 30ff 	mov.w	r0, #4294967295
 800cb78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb7c:	3501      	adds	r5, #1
 800cb7e:	e7c6      	b.n	800cb0e <_printf_common+0x3e>
 800cb80:	18e1      	adds	r1, r4, r3
 800cb82:	1c5a      	adds	r2, r3, #1
 800cb84:	2030      	movs	r0, #48	@ 0x30
 800cb86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cb8a:	4422      	add	r2, r4
 800cb8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cb90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cb94:	3302      	adds	r3, #2
 800cb96:	e7c7      	b.n	800cb28 <_printf_common+0x58>
 800cb98:	2301      	movs	r3, #1
 800cb9a:	4622      	mov	r2, r4
 800cb9c:	4641      	mov	r1, r8
 800cb9e:	4638      	mov	r0, r7
 800cba0:	47c8      	blx	r9
 800cba2:	3001      	adds	r0, #1
 800cba4:	d0e6      	beq.n	800cb74 <_printf_common+0xa4>
 800cba6:	3601      	adds	r6, #1
 800cba8:	e7d9      	b.n	800cb5e <_printf_common+0x8e>
	...

0800cbac <_printf_i>:
 800cbac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbb0:	7e0f      	ldrb	r7, [r1, #24]
 800cbb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cbb4:	2f78      	cmp	r7, #120	@ 0x78
 800cbb6:	4691      	mov	r9, r2
 800cbb8:	4680      	mov	r8, r0
 800cbba:	460c      	mov	r4, r1
 800cbbc:	469a      	mov	sl, r3
 800cbbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cbc2:	d807      	bhi.n	800cbd4 <_printf_i+0x28>
 800cbc4:	2f62      	cmp	r7, #98	@ 0x62
 800cbc6:	d80a      	bhi.n	800cbde <_printf_i+0x32>
 800cbc8:	2f00      	cmp	r7, #0
 800cbca:	f000 80d1 	beq.w	800cd70 <_printf_i+0x1c4>
 800cbce:	2f58      	cmp	r7, #88	@ 0x58
 800cbd0:	f000 80b8 	beq.w	800cd44 <_printf_i+0x198>
 800cbd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cbd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cbdc:	e03a      	b.n	800cc54 <_printf_i+0xa8>
 800cbde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cbe2:	2b15      	cmp	r3, #21
 800cbe4:	d8f6      	bhi.n	800cbd4 <_printf_i+0x28>
 800cbe6:	a101      	add	r1, pc, #4	@ (adr r1, 800cbec <_printf_i+0x40>)
 800cbe8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cbec:	0800cc45 	.word	0x0800cc45
 800cbf0:	0800cc59 	.word	0x0800cc59
 800cbf4:	0800cbd5 	.word	0x0800cbd5
 800cbf8:	0800cbd5 	.word	0x0800cbd5
 800cbfc:	0800cbd5 	.word	0x0800cbd5
 800cc00:	0800cbd5 	.word	0x0800cbd5
 800cc04:	0800cc59 	.word	0x0800cc59
 800cc08:	0800cbd5 	.word	0x0800cbd5
 800cc0c:	0800cbd5 	.word	0x0800cbd5
 800cc10:	0800cbd5 	.word	0x0800cbd5
 800cc14:	0800cbd5 	.word	0x0800cbd5
 800cc18:	0800cd57 	.word	0x0800cd57
 800cc1c:	0800cc83 	.word	0x0800cc83
 800cc20:	0800cd11 	.word	0x0800cd11
 800cc24:	0800cbd5 	.word	0x0800cbd5
 800cc28:	0800cbd5 	.word	0x0800cbd5
 800cc2c:	0800cd79 	.word	0x0800cd79
 800cc30:	0800cbd5 	.word	0x0800cbd5
 800cc34:	0800cc83 	.word	0x0800cc83
 800cc38:	0800cbd5 	.word	0x0800cbd5
 800cc3c:	0800cbd5 	.word	0x0800cbd5
 800cc40:	0800cd19 	.word	0x0800cd19
 800cc44:	6833      	ldr	r3, [r6, #0]
 800cc46:	1d1a      	adds	r2, r3, #4
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	6032      	str	r2, [r6, #0]
 800cc4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cc54:	2301      	movs	r3, #1
 800cc56:	e09c      	b.n	800cd92 <_printf_i+0x1e6>
 800cc58:	6833      	ldr	r3, [r6, #0]
 800cc5a:	6820      	ldr	r0, [r4, #0]
 800cc5c:	1d19      	adds	r1, r3, #4
 800cc5e:	6031      	str	r1, [r6, #0]
 800cc60:	0606      	lsls	r6, r0, #24
 800cc62:	d501      	bpl.n	800cc68 <_printf_i+0xbc>
 800cc64:	681d      	ldr	r5, [r3, #0]
 800cc66:	e003      	b.n	800cc70 <_printf_i+0xc4>
 800cc68:	0645      	lsls	r5, r0, #25
 800cc6a:	d5fb      	bpl.n	800cc64 <_printf_i+0xb8>
 800cc6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cc70:	2d00      	cmp	r5, #0
 800cc72:	da03      	bge.n	800cc7c <_printf_i+0xd0>
 800cc74:	232d      	movs	r3, #45	@ 0x2d
 800cc76:	426d      	negs	r5, r5
 800cc78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc7c:	4858      	ldr	r0, [pc, #352]	@ (800cde0 <_printf_i+0x234>)
 800cc7e:	230a      	movs	r3, #10
 800cc80:	e011      	b.n	800cca6 <_printf_i+0xfa>
 800cc82:	6821      	ldr	r1, [r4, #0]
 800cc84:	6833      	ldr	r3, [r6, #0]
 800cc86:	0608      	lsls	r0, r1, #24
 800cc88:	f853 5b04 	ldr.w	r5, [r3], #4
 800cc8c:	d402      	bmi.n	800cc94 <_printf_i+0xe8>
 800cc8e:	0649      	lsls	r1, r1, #25
 800cc90:	bf48      	it	mi
 800cc92:	b2ad      	uxthmi	r5, r5
 800cc94:	2f6f      	cmp	r7, #111	@ 0x6f
 800cc96:	4852      	ldr	r0, [pc, #328]	@ (800cde0 <_printf_i+0x234>)
 800cc98:	6033      	str	r3, [r6, #0]
 800cc9a:	bf14      	ite	ne
 800cc9c:	230a      	movne	r3, #10
 800cc9e:	2308      	moveq	r3, #8
 800cca0:	2100      	movs	r1, #0
 800cca2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cca6:	6866      	ldr	r6, [r4, #4]
 800cca8:	60a6      	str	r6, [r4, #8]
 800ccaa:	2e00      	cmp	r6, #0
 800ccac:	db05      	blt.n	800ccba <_printf_i+0x10e>
 800ccae:	6821      	ldr	r1, [r4, #0]
 800ccb0:	432e      	orrs	r6, r5
 800ccb2:	f021 0104 	bic.w	r1, r1, #4
 800ccb6:	6021      	str	r1, [r4, #0]
 800ccb8:	d04b      	beq.n	800cd52 <_printf_i+0x1a6>
 800ccba:	4616      	mov	r6, r2
 800ccbc:	fbb5 f1f3 	udiv	r1, r5, r3
 800ccc0:	fb03 5711 	mls	r7, r3, r1, r5
 800ccc4:	5dc7      	ldrb	r7, [r0, r7]
 800ccc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ccca:	462f      	mov	r7, r5
 800cccc:	42bb      	cmp	r3, r7
 800ccce:	460d      	mov	r5, r1
 800ccd0:	d9f4      	bls.n	800ccbc <_printf_i+0x110>
 800ccd2:	2b08      	cmp	r3, #8
 800ccd4:	d10b      	bne.n	800ccee <_printf_i+0x142>
 800ccd6:	6823      	ldr	r3, [r4, #0]
 800ccd8:	07df      	lsls	r7, r3, #31
 800ccda:	d508      	bpl.n	800ccee <_printf_i+0x142>
 800ccdc:	6923      	ldr	r3, [r4, #16]
 800ccde:	6861      	ldr	r1, [r4, #4]
 800cce0:	4299      	cmp	r1, r3
 800cce2:	bfde      	ittt	le
 800cce4:	2330      	movle	r3, #48	@ 0x30
 800cce6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ccea:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ccee:	1b92      	subs	r2, r2, r6
 800ccf0:	6122      	str	r2, [r4, #16]
 800ccf2:	f8cd a000 	str.w	sl, [sp]
 800ccf6:	464b      	mov	r3, r9
 800ccf8:	aa03      	add	r2, sp, #12
 800ccfa:	4621      	mov	r1, r4
 800ccfc:	4640      	mov	r0, r8
 800ccfe:	f7ff fee7 	bl	800cad0 <_printf_common>
 800cd02:	3001      	adds	r0, #1
 800cd04:	d14a      	bne.n	800cd9c <_printf_i+0x1f0>
 800cd06:	f04f 30ff 	mov.w	r0, #4294967295
 800cd0a:	b004      	add	sp, #16
 800cd0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd10:	6823      	ldr	r3, [r4, #0]
 800cd12:	f043 0320 	orr.w	r3, r3, #32
 800cd16:	6023      	str	r3, [r4, #0]
 800cd18:	4832      	ldr	r0, [pc, #200]	@ (800cde4 <_printf_i+0x238>)
 800cd1a:	2778      	movs	r7, #120	@ 0x78
 800cd1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cd20:	6823      	ldr	r3, [r4, #0]
 800cd22:	6831      	ldr	r1, [r6, #0]
 800cd24:	061f      	lsls	r7, r3, #24
 800cd26:	f851 5b04 	ldr.w	r5, [r1], #4
 800cd2a:	d402      	bmi.n	800cd32 <_printf_i+0x186>
 800cd2c:	065f      	lsls	r7, r3, #25
 800cd2e:	bf48      	it	mi
 800cd30:	b2ad      	uxthmi	r5, r5
 800cd32:	6031      	str	r1, [r6, #0]
 800cd34:	07d9      	lsls	r1, r3, #31
 800cd36:	bf44      	itt	mi
 800cd38:	f043 0320 	orrmi.w	r3, r3, #32
 800cd3c:	6023      	strmi	r3, [r4, #0]
 800cd3e:	b11d      	cbz	r5, 800cd48 <_printf_i+0x19c>
 800cd40:	2310      	movs	r3, #16
 800cd42:	e7ad      	b.n	800cca0 <_printf_i+0xf4>
 800cd44:	4826      	ldr	r0, [pc, #152]	@ (800cde0 <_printf_i+0x234>)
 800cd46:	e7e9      	b.n	800cd1c <_printf_i+0x170>
 800cd48:	6823      	ldr	r3, [r4, #0]
 800cd4a:	f023 0320 	bic.w	r3, r3, #32
 800cd4e:	6023      	str	r3, [r4, #0]
 800cd50:	e7f6      	b.n	800cd40 <_printf_i+0x194>
 800cd52:	4616      	mov	r6, r2
 800cd54:	e7bd      	b.n	800ccd2 <_printf_i+0x126>
 800cd56:	6833      	ldr	r3, [r6, #0]
 800cd58:	6825      	ldr	r5, [r4, #0]
 800cd5a:	6961      	ldr	r1, [r4, #20]
 800cd5c:	1d18      	adds	r0, r3, #4
 800cd5e:	6030      	str	r0, [r6, #0]
 800cd60:	062e      	lsls	r6, r5, #24
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	d501      	bpl.n	800cd6a <_printf_i+0x1be>
 800cd66:	6019      	str	r1, [r3, #0]
 800cd68:	e002      	b.n	800cd70 <_printf_i+0x1c4>
 800cd6a:	0668      	lsls	r0, r5, #25
 800cd6c:	d5fb      	bpl.n	800cd66 <_printf_i+0x1ba>
 800cd6e:	8019      	strh	r1, [r3, #0]
 800cd70:	2300      	movs	r3, #0
 800cd72:	6123      	str	r3, [r4, #16]
 800cd74:	4616      	mov	r6, r2
 800cd76:	e7bc      	b.n	800ccf2 <_printf_i+0x146>
 800cd78:	6833      	ldr	r3, [r6, #0]
 800cd7a:	1d1a      	adds	r2, r3, #4
 800cd7c:	6032      	str	r2, [r6, #0]
 800cd7e:	681e      	ldr	r6, [r3, #0]
 800cd80:	6862      	ldr	r2, [r4, #4]
 800cd82:	2100      	movs	r1, #0
 800cd84:	4630      	mov	r0, r6
 800cd86:	f7f3 fa3b 	bl	8000200 <memchr>
 800cd8a:	b108      	cbz	r0, 800cd90 <_printf_i+0x1e4>
 800cd8c:	1b80      	subs	r0, r0, r6
 800cd8e:	6060      	str	r0, [r4, #4]
 800cd90:	6863      	ldr	r3, [r4, #4]
 800cd92:	6123      	str	r3, [r4, #16]
 800cd94:	2300      	movs	r3, #0
 800cd96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd9a:	e7aa      	b.n	800ccf2 <_printf_i+0x146>
 800cd9c:	6923      	ldr	r3, [r4, #16]
 800cd9e:	4632      	mov	r2, r6
 800cda0:	4649      	mov	r1, r9
 800cda2:	4640      	mov	r0, r8
 800cda4:	47d0      	blx	sl
 800cda6:	3001      	adds	r0, #1
 800cda8:	d0ad      	beq.n	800cd06 <_printf_i+0x15a>
 800cdaa:	6823      	ldr	r3, [r4, #0]
 800cdac:	079b      	lsls	r3, r3, #30
 800cdae:	d413      	bmi.n	800cdd8 <_printf_i+0x22c>
 800cdb0:	68e0      	ldr	r0, [r4, #12]
 800cdb2:	9b03      	ldr	r3, [sp, #12]
 800cdb4:	4298      	cmp	r0, r3
 800cdb6:	bfb8      	it	lt
 800cdb8:	4618      	movlt	r0, r3
 800cdba:	e7a6      	b.n	800cd0a <_printf_i+0x15e>
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	4632      	mov	r2, r6
 800cdc0:	4649      	mov	r1, r9
 800cdc2:	4640      	mov	r0, r8
 800cdc4:	47d0      	blx	sl
 800cdc6:	3001      	adds	r0, #1
 800cdc8:	d09d      	beq.n	800cd06 <_printf_i+0x15a>
 800cdca:	3501      	adds	r5, #1
 800cdcc:	68e3      	ldr	r3, [r4, #12]
 800cdce:	9903      	ldr	r1, [sp, #12]
 800cdd0:	1a5b      	subs	r3, r3, r1
 800cdd2:	42ab      	cmp	r3, r5
 800cdd4:	dcf2      	bgt.n	800cdbc <_printf_i+0x210>
 800cdd6:	e7eb      	b.n	800cdb0 <_printf_i+0x204>
 800cdd8:	2500      	movs	r5, #0
 800cdda:	f104 0619 	add.w	r6, r4, #25
 800cdde:	e7f5      	b.n	800cdcc <_printf_i+0x220>
 800cde0:	0800d0f9 	.word	0x0800d0f9
 800cde4:	0800d10a 	.word	0x0800d10a

0800cde8 <memmove>:
 800cde8:	4288      	cmp	r0, r1
 800cdea:	b510      	push	{r4, lr}
 800cdec:	eb01 0402 	add.w	r4, r1, r2
 800cdf0:	d902      	bls.n	800cdf8 <memmove+0x10>
 800cdf2:	4284      	cmp	r4, r0
 800cdf4:	4623      	mov	r3, r4
 800cdf6:	d807      	bhi.n	800ce08 <memmove+0x20>
 800cdf8:	1e43      	subs	r3, r0, #1
 800cdfa:	42a1      	cmp	r1, r4
 800cdfc:	d008      	beq.n	800ce10 <memmove+0x28>
 800cdfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce06:	e7f8      	b.n	800cdfa <memmove+0x12>
 800ce08:	4402      	add	r2, r0
 800ce0a:	4601      	mov	r1, r0
 800ce0c:	428a      	cmp	r2, r1
 800ce0e:	d100      	bne.n	800ce12 <memmove+0x2a>
 800ce10:	bd10      	pop	{r4, pc}
 800ce12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce1a:	e7f7      	b.n	800ce0c <memmove+0x24>

0800ce1c <memcpy>:
 800ce1c:	440a      	add	r2, r1
 800ce1e:	4291      	cmp	r1, r2
 800ce20:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce24:	d100      	bne.n	800ce28 <memcpy+0xc>
 800ce26:	4770      	bx	lr
 800ce28:	b510      	push	{r4, lr}
 800ce2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce32:	4291      	cmp	r1, r2
 800ce34:	d1f9      	bne.n	800ce2a <memcpy+0xe>
 800ce36:	bd10      	pop	{r4, pc}

0800ce38 <_realloc_r>:
 800ce38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce3c:	4607      	mov	r7, r0
 800ce3e:	4614      	mov	r4, r2
 800ce40:	460d      	mov	r5, r1
 800ce42:	b921      	cbnz	r1, 800ce4e <_realloc_r+0x16>
 800ce44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce48:	4611      	mov	r1, r2
 800ce4a:	f7ff bbad 	b.w	800c5a8 <_malloc_r>
 800ce4e:	b92a      	cbnz	r2, 800ce5c <_realloc_r+0x24>
 800ce50:	f7ff fc9c 	bl	800c78c <_free_r>
 800ce54:	4625      	mov	r5, r4
 800ce56:	4628      	mov	r0, r5
 800ce58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce5c:	f000 f81a 	bl	800ce94 <_malloc_usable_size_r>
 800ce60:	4284      	cmp	r4, r0
 800ce62:	4606      	mov	r6, r0
 800ce64:	d802      	bhi.n	800ce6c <_realloc_r+0x34>
 800ce66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce6a:	d8f4      	bhi.n	800ce56 <_realloc_r+0x1e>
 800ce6c:	4621      	mov	r1, r4
 800ce6e:	4638      	mov	r0, r7
 800ce70:	f7ff fb9a 	bl	800c5a8 <_malloc_r>
 800ce74:	4680      	mov	r8, r0
 800ce76:	b908      	cbnz	r0, 800ce7c <_realloc_r+0x44>
 800ce78:	4645      	mov	r5, r8
 800ce7a:	e7ec      	b.n	800ce56 <_realloc_r+0x1e>
 800ce7c:	42b4      	cmp	r4, r6
 800ce7e:	4622      	mov	r2, r4
 800ce80:	4629      	mov	r1, r5
 800ce82:	bf28      	it	cs
 800ce84:	4632      	movcs	r2, r6
 800ce86:	f7ff ffc9 	bl	800ce1c <memcpy>
 800ce8a:	4629      	mov	r1, r5
 800ce8c:	4638      	mov	r0, r7
 800ce8e:	f7ff fc7d 	bl	800c78c <_free_r>
 800ce92:	e7f1      	b.n	800ce78 <_realloc_r+0x40>

0800ce94 <_malloc_usable_size_r>:
 800ce94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce98:	1f18      	subs	r0, r3, #4
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	bfbc      	itt	lt
 800ce9e:	580b      	ldrlt	r3, [r1, r0]
 800cea0:	18c0      	addlt	r0, r0, r3
 800cea2:	4770      	bx	lr

0800cea4 <_init>:
 800cea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cea6:	bf00      	nop
 800cea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceaa:	bc08      	pop	{r3}
 800ceac:	469e      	mov	lr, r3
 800ceae:	4770      	bx	lr

0800ceb0 <_fini>:
 800ceb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceb2:	bf00      	nop
 800ceb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceb6:	bc08      	pop	{r3}
 800ceb8:	469e      	mov	lr, r3
 800ceba:	4770      	bx	lr
