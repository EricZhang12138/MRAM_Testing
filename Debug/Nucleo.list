
Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6f0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800c8a0  0800c8a0  0000d8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb88  0800cb88  0000e08c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cb88  0800cb88  0000db88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb90  0800cb90  0000e08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb90  0800cb90  0000db90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cb94  0800cb94  0000db94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0800cb98  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b08  2000008c  0800cc24  0000e08c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b94  0800cc24  0000eb94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b00d  00000000  00000000  0000e0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e7e  00000000  00000000  000290c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  0002cf48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f2f  00000000  00000000  0002e328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002af76  00000000  00000000  0002f257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c16  00000000  00000000  0005a1cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdf93  00000000  00000000  00073de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00171d76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005770  00000000  00000000  00171dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0017752c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c888 	.word	0x0800c888

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	0800c888 	.word	0x0800c888

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <clrstr>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void clrstr(uint8_t* str, int len){
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]
	for(int i=0; i<len; i++){
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	e007      	b.n	80005ec <clrstr+0x20>
		*(str+i)='\0';
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<len; i++){
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	3301      	adds	r3, #1
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fa      	ldr	r2, [r7, #12]
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	dbf3      	blt.n	80005dc <clrstr+0x10>
	}
}
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
	...

08000604 <HAL_UART_RxCpltCallback>:

	uint32_t start_cycle = DWT->CYCCNT;
	while((DWT->CYCCNT-start_cycle)<cycles_needed);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){                                       // Weakly defined function, used for callback in the ISR in this case
 8000604:	b580      	push	{r7, lr}
 8000606:	b09c      	sub	sp, #112	@ 0x70
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	                                                                                          // Better practice to have it in a separate file
	HAL_UART_Receive_IT(&hlpuart1, Rx, 1); //It will then self-sustain
 800060c:	2201      	movs	r2, #1
 800060e:	49b7      	ldr	r1, [pc, #732]	@ (80008ec <HAL_UART_RxCpltCallback+0x2e8>)
 8000610:	48b7      	ldr	r0, [pc, #732]	@ (80008f0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000612:	f005 fb71 	bl	8005cf8 <HAL_UART_Receive_IT>

    if(Rx[0]==testDetailCmd[read])                                                    //strcmp may be wrongly used here
 8000616:	4bb5      	ldr	r3, [pc, #724]	@ (80008ec <HAL_UART_RxCpltCallback+0x2e8>)
 8000618:	781a      	ldrb	r2, [r3, #0]
 800061a:	4bb6      	ldr	r3, [pc, #728]	@ (80008f4 <HAL_UART_RxCpltCallback+0x2f0>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	4619      	mov	r1, r3
 8000620:	4bb5      	ldr	r3, [pc, #724]	@ (80008f8 <HAL_UART_RxCpltCallback+0x2f4>)
 8000622:	5c5b      	ldrb	r3, [r3, r1]
 8000624:	429a      	cmp	r2, r3
 8000626:	d106      	bne.n	8000636 <HAL_UART_RxCpltCallback+0x32>
      {
      	read++;
 8000628:	4bb2      	ldr	r3, [pc, #712]	@ (80008f4 <HAL_UART_RxCpltCallback+0x2f0>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	3301      	adds	r3, #1
 800062e:	b2da      	uxtb	r2, r3
 8000630:	4bb0      	ldr	r3, [pc, #704]	@ (80008f4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000632:	701a      	strb	r2, [r3, #0]
 8000634:	e00c      	b.n	8000650 <HAL_UART_RxCpltCallback+0x4c>
      }
    else
      {
    	  if(Rx[0]==testDetailCmd[0]){
 8000636:	4bad      	ldr	r3, [pc, #692]	@ (80008ec <HAL_UART_RxCpltCallback+0x2e8>)
 8000638:	781a      	ldrb	r2, [r3, #0]
 800063a:	4baf      	ldr	r3, [pc, #700]	@ (80008f8 <HAL_UART_RxCpltCallback+0x2f4>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	429a      	cmp	r2, r3
 8000640:	d103      	bne.n	800064a <HAL_UART_RxCpltCallback+0x46>
    		  read = 1;
 8000642:	4bac      	ldr	r3, [pc, #688]	@ (80008f4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000644:	2201      	movs	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	e002      	b.n	8000650 <HAL_UART_RxCpltCallback+0x4c>
    	  }
    	  else{
    	      	read=0;
 800064a:	4baa      	ldr	r3, [pc, #680]	@ (80008f4 <HAL_UART_RxCpltCallback+0x2f0>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
    	  }
      }
      if(read>=2)
 8000650:	4ba8      	ldr	r3, [pc, #672]	@ (80008f4 <HAL_UART_RxCpltCallback+0x2f0>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b01      	cmp	r3, #1
 8000656:	f240 8236 	bls.w	8000ac6 <HAL_UART_RxCpltCallback+0x4c2>
      {
      	read=0;
 800065a:	4ba6      	ldr	r3, [pc, #664]	@ (80008f4 <HAL_UART_RxCpltCallback+0x2f0>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
      	if(consoleMode){
 8000660:	4ba6      	ldr	r3, [pc, #664]	@ (80008fc <HAL_UART_RxCpltCallback+0x2f8>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	f000 8191 	beq.w	800098c <HAL_UART_RxCpltCallback+0x388>
      		uint8_t data[76];
      		clrstr(data, 76);
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	214c      	movs	r1, #76	@ 0x4c
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ffab 	bl	80005cc <clrstr>
      		HAL_UART_Transmit(&hlpuart1,"Memory Test Latest Results: \r\n\n" ,31,40); //SET TO /0 SO AS TO REMOVE EXTRANEOUS STUFF
 8000676:	2328      	movs	r3, #40	@ 0x28
 8000678:	221f      	movs	r2, #31
 800067a:	49a1      	ldr	r1, [pc, #644]	@ (8000900 <HAL_UART_RxCpltCallback+0x2fc>)
 800067c:	489c      	ldr	r0, [pc, #624]	@ (80008f0 <HAL_UART_RxCpltCallback+0x2ec>)
 800067e:	f005 fab1 	bl	8005be4 <HAL_UART_Transmit>
      		clrstr(data, 76);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	214c      	movs	r1, #76	@ 0x4c
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff9f 	bl	80005cc <clrstr>
      		sprintf(data, "MRAM0 tests completed:\t%lu\r\nMRAM0 failures:\t\t%u\r\n", numTestsMRAM0, numFailsMRAM0);
 800068e:	4b9d      	ldr	r3, [pc, #628]	@ (8000904 <HAL_UART_RxCpltCallback+0x300>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	4b9d      	ldr	r3, [pc, #628]	@ (8000908 <HAL_UART_RxCpltCallback+0x304>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f107 0008 	add.w	r0, r7, #8
 800069a:	499c      	ldr	r1, [pc, #624]	@ (800090c <HAL_UART_RxCpltCallback+0x308>)
 800069c:	f00b fd02 	bl	800c0a4 <siprintf>
      		HAL_UART_Transmit(&hlpuart1,data,strlen(data),40);
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fda3 	bl	80001f0 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	f107 0108 	add.w	r1, r7, #8
 80006b2:	2328      	movs	r3, #40	@ 0x28
 80006b4:	488e      	ldr	r0, [pc, #568]	@ (80008f0 <HAL_UART_RxCpltCallback+0x2ec>)
 80006b6:	f005 fa95 	bl	8005be4 <HAL_UART_Transmit>
      		clrstr(data, 76);
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	214c      	movs	r1, #76	@ 0x4c
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff83 	bl	80005cc <clrstr>
      		sprintf(data, "MRAM1 tests completed:\t%lu\r\nMRAM1 failures:\t\t%u\r\n", numTestsMRAM1, numFailsMRAM1);
 80006c6:	4b92      	ldr	r3, [pc, #584]	@ (8000910 <HAL_UART_RxCpltCallback+0x30c>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	4b92      	ldr	r3, [pc, #584]	@ (8000914 <HAL_UART_RxCpltCallback+0x310>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f107 0008 	add.w	r0, r7, #8
 80006d2:	4991      	ldr	r1, [pc, #580]	@ (8000918 <HAL_UART_RxCpltCallback+0x314>)
 80006d4:	f00b fce6 	bl	800c0a4 <siprintf>
      		HAL_UART_Transmit(&hlpuart1,data,strlen(data),40);
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff fd87 	bl	80001f0 <strlen>
 80006e2:	4603      	mov	r3, r0
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	f107 0108 	add.w	r1, r7, #8
 80006ea:	2328      	movs	r3, #40	@ 0x28
 80006ec:	4880      	ldr	r0, [pc, #512]	@ (80008f0 <HAL_UART_RxCpltCallback+0x2ec>)
 80006ee:	f005 fa79 	bl	8005be4 <HAL_UART_Transmit>
      		clrstr(data, 76);
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	214c      	movs	r1, #76	@ 0x4c
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ff67 	bl	80005cc <clrstr>
      		sprintf(data, "MRAM2 tests completed:\t%lu\r\nMRAM2 failures:\t\t%u\r\n", numTestsMRAM2, numFailsMRAM2);
 80006fe:	4b87      	ldr	r3, [pc, #540]	@ (800091c <HAL_UART_RxCpltCallback+0x318>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	4b87      	ldr	r3, [pc, #540]	@ (8000920 <HAL_UART_RxCpltCallback+0x31c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f107 0008 	add.w	r0, r7, #8
 800070a:	4986      	ldr	r1, [pc, #536]	@ (8000924 <HAL_UART_RxCpltCallback+0x320>)
 800070c:	f00b fcca 	bl	800c0a4 <siprintf>
      		HAL_UART_Transmit(&hlpuart1,data,strlen(data),40);
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fd6b 	bl	80001f0 <strlen>
 800071a:	4603      	mov	r3, r0
 800071c:	b29a      	uxth	r2, r3
 800071e:	f107 0108 	add.w	r1, r7, #8
 8000722:	2328      	movs	r3, #40	@ 0x28
 8000724:	4872      	ldr	r0, [pc, #456]	@ (80008f0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000726:	f005 fa5d 	bl	8005be4 <HAL_UART_Transmit>
      		clrstr(data, 76);
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	214c      	movs	r1, #76	@ 0x4c
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff4b 	bl	80005cc <clrstr>
      		sprintf(data, "MRAM3 tests completed:\t%lu\r\nMRAM3 failures:\t\t%u\r\n", numTestsMRAM3, numFailsMRAM3);
 8000736:	4b7c      	ldr	r3, [pc, #496]	@ (8000928 <HAL_UART_RxCpltCallback+0x324>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	4b7c      	ldr	r3, [pc, #496]	@ (800092c <HAL_UART_RxCpltCallback+0x328>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f107 0008 	add.w	r0, r7, #8
 8000742:	497b      	ldr	r1, [pc, #492]	@ (8000930 <HAL_UART_RxCpltCallback+0x32c>)
 8000744:	f00b fcae 	bl	800c0a4 <siprintf>
      		HAL_UART_Transmit(&hlpuart1,data,strlen(data),40);
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff fd4f 	bl	80001f0 <strlen>
 8000752:	4603      	mov	r3, r0
 8000754:	b29a      	uxth	r2, r3
 8000756:	f107 0108 	add.w	r1, r7, #8
 800075a:	2328      	movs	r3, #40	@ 0x28
 800075c:	4864      	ldr	r0, [pc, #400]	@ (80008f0 <HAL_UART_RxCpltCallback+0x2ec>)
 800075e:	f005 fa41 	bl	8005be4 <HAL_UART_Transmit>
      		clrstr(data, 76);
 8000762:	f107 0308 	add.w	r3, r7, #8
 8000766:	214c      	movs	r1, #76	@ 0x4c
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ff2f 	bl	80005cc <clrstr>
      		sprintf(data, "MRAM4 tests completed:\t%lu\r\nMRAM4 failures:\t\t%u\r\n", numTestsMRAM4, numFailsMRAM4);
 800076e:	4b71      	ldr	r3, [pc, #452]	@ (8000934 <HAL_UART_RxCpltCallback+0x330>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	4b71      	ldr	r3, [pc, #452]	@ (8000938 <HAL_UART_RxCpltCallback+0x334>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f107 0008 	add.w	r0, r7, #8
 800077a:	4970      	ldr	r1, [pc, #448]	@ (800093c <HAL_UART_RxCpltCallback+0x338>)
 800077c:	f00b fc92 	bl	800c0a4 <siprintf>
      		HAL_UART_Transmit(&hlpuart1,data,strlen(data),40);
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fd33 	bl	80001f0 <strlen>
 800078a:	4603      	mov	r3, r0
 800078c:	b29a      	uxth	r2, r3
 800078e:	f107 0108 	add.w	r1, r7, #8
 8000792:	2328      	movs	r3, #40	@ 0x28
 8000794:	4856      	ldr	r0, [pc, #344]	@ (80008f0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000796:	f005 fa25 	bl	8005be4 <HAL_UART_Transmit>
      		clrstr(data, 76);
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	214c      	movs	r1, #76	@ 0x4c
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff13 	bl	80005cc <clrstr>
      		sprintf(data, "MRAM5 tests completed:\t%lu\r\nMRAM5 failures:\t\t%u\r\n", numTestsMRAM5, numFailsMRAM5);
 80007a6:	4b66      	ldr	r3, [pc, #408]	@ (8000940 <HAL_UART_RxCpltCallback+0x33c>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	4b66      	ldr	r3, [pc, #408]	@ (8000944 <HAL_UART_RxCpltCallback+0x340>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f107 0008 	add.w	r0, r7, #8
 80007b2:	4965      	ldr	r1, [pc, #404]	@ (8000948 <HAL_UART_RxCpltCallback+0x344>)
 80007b4:	f00b fc76 	bl	800c0a4 <siprintf>
      		HAL_UART_Transmit(&hlpuart1,data,strlen(data),40);
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fd17 	bl	80001f0 <strlen>
 80007c2:	4603      	mov	r3, r0
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	f107 0108 	add.w	r1, r7, #8
 80007ca:	2328      	movs	r3, #40	@ 0x28
 80007cc:	4848      	ldr	r0, [pc, #288]	@ (80008f0 <HAL_UART_RxCpltCallback+0x2ec>)
 80007ce:	f005 fa09 	bl	8005be4 <HAL_UART_Transmit>
      		clrstr(data, 76);
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	214c      	movs	r1, #76	@ 0x4c
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fef7 	bl	80005cc <clrstr>

      		HAL_UART_Transmit(&hlpuart1,"\nCurrently testing chip ",24,40);
 80007de:	2328      	movs	r3, #40	@ 0x28
 80007e0:	2218      	movs	r2, #24
 80007e2:	495a      	ldr	r1, [pc, #360]	@ (800094c <HAL_UART_RxCpltCallback+0x348>)
 80007e4:	4842      	ldr	r0, [pc, #264]	@ (80008f0 <HAL_UART_RxCpltCallback+0x2ec>)
 80007e6:	f005 f9fd 	bl	8005be4 <HAL_UART_Transmit>
      		switch(currChip){
 80007ea:	4b59      	ldr	r3, [pc, #356]	@ (8000950 <HAL_UART_RxCpltCallback+0x34c>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b05      	cmp	r3, #5
 80007f0:	d838      	bhi.n	8000864 <HAL_UART_RxCpltCallback+0x260>
 80007f2:	a201      	add	r2, pc, #4	@ (adr r2, 80007f8 <HAL_UART_RxCpltCallback+0x1f4>)
 80007f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f8:	08000811 	.word	0x08000811
 80007fc:	0800081f 	.word	0x0800081f
 8000800:	0800082d 	.word	0x0800082d
 8000804:	0800083b 	.word	0x0800083b
 8000808:	08000849 	.word	0x08000849
 800080c:	08000857 	.word	0x08000857
      		case 0:
      			HAL_UART_Transmit(&hlpuart1,"MRAM0\r\n",7,40);
 8000810:	2328      	movs	r3, #40	@ 0x28
 8000812:	2207      	movs	r2, #7
 8000814:	494f      	ldr	r1, [pc, #316]	@ (8000954 <HAL_UART_RxCpltCallback+0x350>)
 8000816:	4836      	ldr	r0, [pc, #216]	@ (80008f0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000818:	f005 f9e4 	bl	8005be4 <HAL_UART_Transmit>
      			break;
 800081c:	e022      	b.n	8000864 <HAL_UART_RxCpltCallback+0x260>
      		case 1:
      			HAL_UART_Transmit(&hlpuart1,"MRAM1\r\n",7,40);
 800081e:	2328      	movs	r3, #40	@ 0x28
 8000820:	2207      	movs	r2, #7
 8000822:	494d      	ldr	r1, [pc, #308]	@ (8000958 <HAL_UART_RxCpltCallback+0x354>)
 8000824:	4832      	ldr	r0, [pc, #200]	@ (80008f0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000826:	f005 f9dd 	bl	8005be4 <HAL_UART_Transmit>
      			break;
 800082a:	e01b      	b.n	8000864 <HAL_UART_RxCpltCallback+0x260>
      		case 2:
      			HAL_UART_Transmit(&hlpuart1,"MRAM2\r\n",7,40);
 800082c:	2328      	movs	r3, #40	@ 0x28
 800082e:	2207      	movs	r2, #7
 8000830:	494a      	ldr	r1, [pc, #296]	@ (800095c <HAL_UART_RxCpltCallback+0x358>)
 8000832:	482f      	ldr	r0, [pc, #188]	@ (80008f0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000834:	f005 f9d6 	bl	8005be4 <HAL_UART_Transmit>
      			break;
 8000838:	e014      	b.n	8000864 <HAL_UART_RxCpltCallback+0x260>
      		case 3:
      			HAL_UART_Transmit(&hlpuart1,"MRAM3\r\n",7,40);
 800083a:	2328      	movs	r3, #40	@ 0x28
 800083c:	2207      	movs	r2, #7
 800083e:	4948      	ldr	r1, [pc, #288]	@ (8000960 <HAL_UART_RxCpltCallback+0x35c>)
 8000840:	482b      	ldr	r0, [pc, #172]	@ (80008f0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000842:	f005 f9cf 	bl	8005be4 <HAL_UART_Transmit>
      			break;
 8000846:	e00d      	b.n	8000864 <HAL_UART_RxCpltCallback+0x260>
      		case 4:
      			HAL_UART_Transmit(&hlpuart1,"MRAM4\r\n",7,40);
 8000848:	2328      	movs	r3, #40	@ 0x28
 800084a:	2207      	movs	r2, #7
 800084c:	4945      	ldr	r1, [pc, #276]	@ (8000964 <HAL_UART_RxCpltCallback+0x360>)
 800084e:	4828      	ldr	r0, [pc, #160]	@ (80008f0 <HAL_UART_RxCpltCallback+0x2ec>)
 8000850:	f005 f9c8 	bl	8005be4 <HAL_UART_Transmit>
      			break;
 8000854:	e006      	b.n	8000864 <HAL_UART_RxCpltCallback+0x260>
      		case 5:
      			HAL_UART_Transmit(&hlpuart1,"MRAM5\r\n",7,40);
 8000856:	2328      	movs	r3, #40	@ 0x28
 8000858:	2207      	movs	r2, #7
 800085a:	4943      	ldr	r1, [pc, #268]	@ (8000968 <HAL_UART_RxCpltCallback+0x364>)
 800085c:	4824      	ldr	r0, [pc, #144]	@ (80008f0 <HAL_UART_RxCpltCallback+0x2ec>)
 800085e:	f005 f9c1 	bl	8005be4 <HAL_UART_Transmit>
      			break;
 8000862:	bf00      	nop
      		}
      		HAL_UART_Transmit(&hlpuart1,"Current state: ",15,40);
 8000864:	2328      	movs	r3, #40	@ 0x28
 8000866:	220f      	movs	r2, #15
 8000868:	4940      	ldr	r1, [pc, #256]	@ (800096c <HAL_UART_RxCpltCallback+0x368>)
 800086a:	4821      	ldr	r0, [pc, #132]	@ (80008f0 <HAL_UART_RxCpltCallback+0x2ec>)
 800086c:	f005 f9ba 	bl	8005be4 <HAL_UART_Transmit>
      		switch(currState){
 8000870:	4b3f      	ldr	r3, [pc, #252]	@ (8000970 <HAL_UART_RxCpltCallback+0x36c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b05      	cmp	r3, #5
 8000876:	f200 8126 	bhi.w	8000ac6 <HAL_UART_RxCpltCallback+0x4c2>
 800087a:	a201      	add	r2, pc, #4	@ (adr r2, 8000880 <HAL_UART_RxCpltCallback+0x27c>)
 800087c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000880:	08000899 	.word	0x08000899
 8000884:	080008a7 	.word	0x080008a7
 8000888:	080008b5 	.word	0x080008b5
 800088c:	080008c3 	.word	0x080008c3
 8000890:	080008d1 	.word	0x080008d1
 8000894:	080008df 	.word	0x080008df
      		case 0:
      			HAL_UART_Transmit(&hlpuart1,"UP:w0\r\n\r\n",9,40);
 8000898:	2328      	movs	r3, #40	@ 0x28
 800089a:	2209      	movs	r2, #9
 800089c:	4935      	ldr	r1, [pc, #212]	@ (8000974 <HAL_UART_RxCpltCallback+0x370>)
 800089e:	4814      	ldr	r0, [pc, #80]	@ (80008f0 <HAL_UART_RxCpltCallback+0x2ec>)
 80008a0:	f005 f9a0 	bl	8005be4 <HAL_UART_Transmit>
      			break;
 80008a4:	e10f      	b.n	8000ac6 <HAL_UART_RxCpltCallback+0x4c2>
      		case 1:
      			HAL_UART_Transmit(&hlpuart1,"UP:r0 w1\r\n\r\n",12,40);
 80008a6:	2328      	movs	r3, #40	@ 0x28
 80008a8:	220c      	movs	r2, #12
 80008aa:	4933      	ldr	r1, [pc, #204]	@ (8000978 <HAL_UART_RxCpltCallback+0x374>)
 80008ac:	4810      	ldr	r0, [pc, #64]	@ (80008f0 <HAL_UART_RxCpltCallback+0x2ec>)
 80008ae:	f005 f999 	bl	8005be4 <HAL_UART_Transmit>
      			break;
 80008b2:	e108      	b.n	8000ac6 <HAL_UART_RxCpltCallback+0x4c2>
      		case 2:
      			HAL_UART_Transmit(&hlpuart1,"UP:r1 w0\r\n\r\n",12,40);
 80008b4:	2328      	movs	r3, #40	@ 0x28
 80008b6:	220c      	movs	r2, #12
 80008b8:	4930      	ldr	r1, [pc, #192]	@ (800097c <HAL_UART_RxCpltCallback+0x378>)
 80008ba:	480d      	ldr	r0, [pc, #52]	@ (80008f0 <HAL_UART_RxCpltCallback+0x2ec>)
 80008bc:	f005 f992 	bl	8005be4 <HAL_UART_Transmit>
      			break;
 80008c0:	e101      	b.n	8000ac6 <HAL_UART_RxCpltCallback+0x4c2>
      		case 3:
      			HAL_UART_Transmit(&hlpuart1,"DOWN:r0 w1\r\n\r\n",14,40);
 80008c2:	2328      	movs	r3, #40	@ 0x28
 80008c4:	220e      	movs	r2, #14
 80008c6:	492e      	ldr	r1, [pc, #184]	@ (8000980 <HAL_UART_RxCpltCallback+0x37c>)
 80008c8:	4809      	ldr	r0, [pc, #36]	@ (80008f0 <HAL_UART_RxCpltCallback+0x2ec>)
 80008ca:	f005 f98b 	bl	8005be4 <HAL_UART_Transmit>
      			break;
 80008ce:	e0fa      	b.n	8000ac6 <HAL_UART_RxCpltCallback+0x4c2>
      		case 4:
      			HAL_UART_Transmit(&hlpuart1,"DOWN:r1 w0\r\n\r\n",14,40);
 80008d0:	2328      	movs	r3, #40	@ 0x28
 80008d2:	220e      	movs	r2, #14
 80008d4:	492b      	ldr	r1, [pc, #172]	@ (8000984 <HAL_UART_RxCpltCallback+0x380>)
 80008d6:	4806      	ldr	r0, [pc, #24]	@ (80008f0 <HAL_UART_RxCpltCallback+0x2ec>)
 80008d8:	f005 f984 	bl	8005be4 <HAL_UART_Transmit>
      			break;
 80008dc:	e0f3      	b.n	8000ac6 <HAL_UART_RxCpltCallback+0x4c2>
      		case 5:
      			HAL_UART_Transmit(&hlpuart1,"DOWN:r0\r\n\r\n",11,40);
 80008de:	2328      	movs	r3, #40	@ 0x28
 80008e0:	220b      	movs	r2, #11
 80008e2:	4929      	ldr	r1, [pc, #164]	@ (8000988 <HAL_UART_RxCpltCallback+0x384>)
 80008e4:	4802      	ldr	r0, [pc, #8]	@ (80008f0 <HAL_UART_RxCpltCallback+0x2ec>)
 80008e6:	f005 f97d 	bl	8005be4 <HAL_UART_Transmit>
      			break;
 80008ea:	e0ec      	b.n	8000ac6 <HAL_UART_RxCpltCallback+0x4c2>
 80008ec:	20000250 	.word	0x20000250
 80008f0:	200000a8 	.word	0x200000a8
 80008f4:	20000251 	.word	0x20000251
 80008f8:	2000000c 	.word	0x2000000c
 80008fc:	20000000 	.word	0x20000000
 8000900:	0800c8a0 	.word	0x0800c8a0
 8000904:	2000021c 	.word	0x2000021c
 8000908:	20000234 	.word	0x20000234
 800090c:	0800c8c0 	.word	0x0800c8c0
 8000910:	20000220 	.word	0x20000220
 8000914:	20000238 	.word	0x20000238
 8000918:	0800c8f4 	.word	0x0800c8f4
 800091c:	20000224 	.word	0x20000224
 8000920:	2000023c 	.word	0x2000023c
 8000924:	0800c928 	.word	0x0800c928
 8000928:	20000228 	.word	0x20000228
 800092c:	20000240 	.word	0x20000240
 8000930:	0800c95c 	.word	0x0800c95c
 8000934:	2000022c 	.word	0x2000022c
 8000938:	20000244 	.word	0x20000244
 800093c:	0800c990 	.word	0x0800c990
 8000940:	20000230 	.word	0x20000230
 8000944:	20000248 	.word	0x20000248
 8000948:	0800c9c4 	.word	0x0800c9c4
 800094c:	0800c9f8 	.word	0x0800c9f8
 8000950:	2000024c 	.word	0x2000024c
 8000954:	0800ca14 	.word	0x0800ca14
 8000958:	0800ca1c 	.word	0x0800ca1c
 800095c:	0800ca24 	.word	0x0800ca24
 8000960:	0800ca2c 	.word	0x0800ca2c
 8000964:	0800ca34 	.word	0x0800ca34
 8000968:	0800ca3c 	.word	0x0800ca3c
 800096c:	0800ca44 	.word	0x0800ca44
 8000970:	2000024d 	.word	0x2000024d
 8000974:	0800ca54 	.word	0x0800ca54
 8000978:	0800ca60 	.word	0x0800ca60
 800097c:	0800ca70 	.word	0x0800ca70
 8000980:	0800ca80 	.word	0x0800ca80
 8000984:	0800ca90 	.word	0x0800ca90
 8000988:	0800caa0 	.word	0x0800caa0
      		}
      	}
      	else{                       // The rest of the function won't be used
      		uint8_t data[28];

      		data[0] = (numTestsMRAM0>>24)&0x000000FF;
 800098c:	4b51      	ldr	r3, [pc, #324]	@ (8000ad4 <HAL_UART_RxCpltCallback+0x4d0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	0e1b      	lsrs	r3, r3, #24
 8000992:	b2db      	uxtb	r3, r3
 8000994:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
      		data[1] = (numTestsMRAM0>>16)&0x000000FF;
 8000998:	4b4e      	ldr	r3, [pc, #312]	@ (8000ad4 <HAL_UART_RxCpltCallback+0x4d0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	0c1b      	lsrs	r3, r3, #16
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
      		data[2] = (numTestsMRAM0>>8)&0x000000FF;
 80009a4:	4b4b      	ldr	r3, [pc, #300]	@ (8000ad4 <HAL_UART_RxCpltCallback+0x4d0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
      		data[3] = numTestsMRAM0&0x000000FF;              //for MRAM0
 80009b0:	4b48      	ldr	r3, [pc, #288]	@ (8000ad4 <HAL_UART_RxCpltCallback+0x4d0>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      		data[4] = (numTestsMRAM1>>24)&0x000000FF;
 80009ba:	4b47      	ldr	r3, [pc, #284]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x4d4>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	0e1b      	lsrs	r3, r3, #24
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
      		data[5] = (numTestsMRAM1>>16)&0x000000FF;
 80009c6:	4b44      	ldr	r3, [pc, #272]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x4d4>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	0c1b      	lsrs	r3, r3, #16
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
      		data[6] = (numTestsMRAM1>>8)&0x000000FF;
 80009d2:	4b41      	ldr	r3, [pc, #260]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x4d4>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	0a1b      	lsrs	r3, r3, #8
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
      		data[7] = numTestsMRAM1&0x000000FF;              //for MRAM1
 80009de:	4b3e      	ldr	r3, [pc, #248]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x4d4>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
      		data[8] = (numTestsMRAM2>>24)&0x000000FF;
 80009e8:	4b3c      	ldr	r3, [pc, #240]	@ (8000adc <HAL_UART_RxCpltCallback+0x4d8>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	0e1b      	lsrs	r3, r3, #24
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
      		data[9] = (numTestsMRAM2>>16)&0x000000FF;
 80009f4:	4b39      	ldr	r3, [pc, #228]	@ (8000adc <HAL_UART_RxCpltCallback+0x4d8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	0c1b      	lsrs	r3, r3, #16
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
      		data[10] = (numTestsMRAM2>>8)&0x000000FF;
 8000a00:	4b36      	ldr	r3, [pc, #216]	@ (8000adc <HAL_UART_RxCpltCallback+0x4d8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
      		data[11] = numTestsMRAM2&0x000000FF;             //for MRAM2
 8000a0c:	4b33      	ldr	r3, [pc, #204]	@ (8000adc <HAL_UART_RxCpltCallback+0x4d8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      		data[12] = (numTestsMRAM3>>24)&0x000000FF;
 8000a16:	4b32      	ldr	r3, [pc, #200]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x4dc>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	0e1b      	lsrs	r3, r3, #24
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
      		data[13] = (numTestsMRAM3>>16)&0x000000FF;
 8000a22:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x4dc>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	0c1b      	lsrs	r3, r3, #16
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
      		data[14] = (numTestsMRAM3>>8)&0x000000FF;
 8000a2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x4dc>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	0a1b      	lsrs	r3, r3, #8
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
      		data[15] = numTestsMRAM3&0x000000FF;             //for MRAM3
 8000a3a:	4b29      	ldr	r3, [pc, #164]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x4dc>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63


      		data[16] = (numFailsMRAM0>>8)&0x00FF;
 8000a44:	4b27      	ldr	r3, [pc, #156]	@ (8000ae4 <HAL_UART_RxCpltCallback+0x4e0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	0a1b      	lsrs	r3, r3, #8
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
      		data[17] = numFailsMRAM0&0x00FF;
 8000a50:	4b24      	ldr	r3, [pc, #144]	@ (8000ae4 <HAL_UART_RxCpltCallback+0x4e0>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
      		data[18] = (numFailsMRAM1>>8)&0x00FF;
 8000a5a:	4b23      	ldr	r3, [pc, #140]	@ (8000ae8 <HAL_UART_RxCpltCallback+0x4e4>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	0a1b      	lsrs	r3, r3, #8
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
      		data[19] = numFailsMRAM1&0x00FF;
 8000a66:	4b20      	ldr	r3, [pc, #128]	@ (8000ae8 <HAL_UART_RxCpltCallback+0x4e4>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      		data[20] = (numFailsMRAM2>>8)&0x00FF;
 8000a70:	4b1e      	ldr	r3, [pc, #120]	@ (8000aec <HAL_UART_RxCpltCallback+0x4e8>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	0a1b      	lsrs	r3, r3, #8
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
      		data[21] = numFailsMRAM2&0x00FF;
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000aec <HAL_UART_RxCpltCallback+0x4e8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
      		data[22] = (numFailsMRAM3>>8)&0x00FF;
 8000a86:	4b1a      	ldr	r3, [pc, #104]	@ (8000af0 <HAL_UART_RxCpltCallback+0x4ec>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	0a1b      	lsrs	r3, r3, #8
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
      		data[23] = numFailsMRAM3&0x00FF;
 8000a92:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <HAL_UART_RxCpltCallback+0x4ec>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b


      		data[24] = currChip;
 8000a9c:	4b15      	ldr	r3, [pc, #84]	@ (8000af4 <HAL_UART_RxCpltCallback+0x4f0>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
      		data[25] = currState;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <HAL_UART_RxCpltCallback+0x4f4>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d


      		data[26] = '\r';
 8000aac:	230d      	movs	r3, #13
 8000aae:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      		data[27] = '\n';
 8000ab2:	230a      	movs	r3, #10
 8000ab4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

      		HAL_UART_Transmit(&hlpuart1,data,28,30);
 8000ab8:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8000abc:	231e      	movs	r3, #30
 8000abe:	221c      	movs	r2, #28
 8000ac0:	480e      	ldr	r0, [pc, #56]	@ (8000afc <HAL_UART_RxCpltCallback+0x4f8>)
 8000ac2:	f005 f88f 	bl	8005be4 <HAL_UART_Transmit>

      	}
      }
      Rx[0] = '\0';
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <HAL_UART_RxCpltCallback+0x4fc>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]

}
 8000acc:	bf00      	nop
 8000ace:	3770      	adds	r7, #112	@ 0x70
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	2000021c 	.word	0x2000021c
 8000ad8:	20000220 	.word	0x20000220
 8000adc:	20000224 	.word	0x20000224
 8000ae0:	20000228 	.word	0x20000228
 8000ae4:	20000234 	.word	0x20000234
 8000ae8:	20000238 	.word	0x20000238
 8000aec:	2000023c 	.word	0x2000023c
 8000af0:	20000240 	.word	0x20000240
 8000af4:	2000024c 	.word	0x2000024c
 8000af8:	2000024d 	.word	0x2000024d
 8000afc:	200000a8 	.word	0x200000a8
 8000b00:	20000250 	.word	0x20000250

08000b04 <WriteMem>:

void WriteMem(uint8_t chip, uint32_t addr, uint16_t length, uint8_t* data){
 8000b04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b08:	b089      	sub	sp, #36	@ 0x24
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	4603      	mov	r3, r0
 8000b12:	73fb      	strb	r3, [r7, #15]
 8000b14:	4613      	mov	r3, r2
 8000b16:	81bb      	strh	r3, [r7, #12]
	length += 4; //Account for the header
 8000b18:	89bb      	ldrh	r3, [r7, #12]
 8000b1a:	3304      	adds	r3, #4
 8000b1c:	81bb      	strh	r3, [r7, #12]
	uint16_t selectedPin = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	83fb      	strh	r3, [r7, #30]
	switch(chip){
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	2b05      	cmp	r3, #5
 8000b26:	d827      	bhi.n	8000b78 <WriteMem+0x74>
 8000b28:	a201      	add	r2, pc, #4	@ (adr r2, 8000b30 <WriteMem+0x2c>)
 8000b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b2e:	bf00      	nop
 8000b30:	08000b49 	.word	0x08000b49
 8000b34:	08000b51 	.word	0x08000b51
 8000b38:	08000b59 	.word	0x08000b59
 8000b3c:	08000b61 	.word	0x08000b61
 8000b40:	08000b69 	.word	0x08000b69
 8000b44:	08000b71 	.word	0x08000b71
	case 0:
		selectedPin = 1024;
 8000b48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b4c:	83fb      	strh	r3, [r7, #30]
		break;
 8000b4e:	e013      	b.n	8000b78 <WriteMem+0x74>
	case 1:
		selectedPin = 4096;
 8000b50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b54:	83fb      	strh	r3, [r7, #30]
		break;
 8000b56:	e00f      	b.n	8000b78 <WriteMem+0x74>
	case 2:
		selectedPin = 16384;
 8000b58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b5c:	83fb      	strh	r3, [r7, #30]
		break;
 8000b5e:	e00b      	b.n	8000b78 <WriteMem+0x74>
	case 3:
		selectedPin = 32768;
 8000b60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b64:	83fb      	strh	r3, [r7, #30]
		break;
 8000b66:	e007      	b.n	8000b78 <WriteMem+0x74>
	case 4:
		selectedPin = 512;
 8000b68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b6c:	83fb      	strh	r3, [r7, #30]
		break;
 8000b6e:	e003      	b.n	8000b78 <WriteMem+0x74>
	case 5:
		selectedPin = 2048;
 8000b70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b74:	83fb      	strh	r3, [r7, #30]
		break;
 8000b76:	bf00      	nop
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET); //Set WRite ENable
		  HAL_SPI_Transmit(&hspi1, &wren, 1, 10);
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
	}*/

	uint8_t TxBuff[length];
 8000b78:	89b9      	ldrh	r1, [r7, #12]
 8000b7a:	466b      	mov	r3, sp
 8000b7c:	461e      	mov	r6, r3
 8000b7e:	460b      	mov	r3, r1
 8000b80:	3b01      	subs	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	b28b      	uxth	r3, r1
 8000b86:	2200      	movs	r2, #0
 8000b88:	4698      	mov	r8, r3
 8000b8a:	4691      	mov	r9, r2
 8000b8c:	f04f 0200 	mov.w	r2, #0
 8000b90:	f04f 0300 	mov.w	r3, #0
 8000b94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ba0:	b28b      	uxth	r3, r1
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	461c      	mov	r4, r3
 8000ba6:	4615      	mov	r5, r2
 8000ba8:	f04f 0200 	mov.w	r2, #0
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	00eb      	lsls	r3, r5, #3
 8000bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000bb6:	00e2      	lsls	r2, r4, #3
 8000bb8:	460b      	mov	r3, r1
 8000bba:	3307      	adds	r3, #7
 8000bbc:	08db      	lsrs	r3, r3, #3
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	ebad 0d03 	sub.w	sp, sp, r3
 8000bc4:	466b      	mov	r3, sp
 8000bc6:	3300      	adds	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
	TxBuff[0] = 0x02;
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	2202      	movs	r2, #2
 8000bce:	701a      	strb	r2, [r3, #0]
	TxBuff[1] = (addr>>16)&0x0000FF;
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	0c1b      	lsrs	r3, r3, #16
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	705a      	strb	r2, [r3, #1]
	TxBuff[2] = (addr>>8)&0x0000FF;
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	0a1b      	lsrs	r3, r3, #8
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	709a      	strb	r2, [r3, #2]
	TxBuff[3] = (addr)&0x0000FF;                                                                   //we only need the first 24 bits (16Mb)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	70da      	strb	r2, [r3, #3]

	for(int i=4; i<length; i++){
 8000bec:	2304      	movs	r3, #4
 8000bee:	61bb      	str	r3, [r7, #24]
 8000bf0:	e00c      	b.n	8000c0c <WriteMem+0x108>
		TxBuff[i] = *(data+(i-4)); //Loop through all the data and put it into the Tx buffer.
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	3b04      	subs	r3, #4
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	7819      	ldrb	r1, [r3, #0]
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	4413      	add	r3, r2
 8000c02:	460a      	mov	r2, r1
 8000c04:	701a      	strb	r2, [r3, #0]
	for(int i=4; i<length; i++){
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	61bb      	str	r3, [r7, #24]
 8000c0c:	89bb      	ldrh	r3, [r7, #12]
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	dbee      	blt.n	8000bf2 <WriteMem+0xee>
	}

	HAL_GPIO_WritePin(GPIOE, selectedPin, GPIO_PIN_RESET);
 8000c14:	8bfb      	ldrh	r3, [r7, #30]
 8000c16:	2200      	movs	r2, #0
 8000c18:	4619      	mov	r1, r3
 8000c1a:	480a      	ldr	r0, [pc, #40]	@ (8000c44 <WriteMem+0x140>)
 8000c1c:	f001 f968 	bl	8001ef0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)TxBuff, length, 100);
 8000c20:	89ba      	ldrh	r2, [r7, #12]
 8000c22:	2364      	movs	r3, #100	@ 0x64
 8000c24:	6939      	ldr	r1, [r7, #16]
 8000c26:	4808      	ldr	r0, [pc, #32]	@ (8000c48 <WriteMem+0x144>)
 8000c28:	f004 fa93 	bl	8005152 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, selectedPin, GPIO_PIN_SET);
 8000c2c:	8bfb      	ldrh	r3, [r7, #30]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	4619      	mov	r1, r3
 8000c32:	4804      	ldr	r0, [pc, #16]	@ (8000c44 <WriteMem+0x140>)
 8000c34:	f001 f95c 	bl	8001ef0 <HAL_GPIO_WritePin>
 8000c38:	46b5      	mov	sp, r6
}
 8000c3a:	bf00      	nop
 8000c3c:	3724      	adds	r7, #36	@ 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c44:	48001000 	.word	0x48001000
 8000c48:	200001b8 	.word	0x200001b8

08000c4c <ReadMem>:

void ReadMem(uint8_t chip, uint32_t addr, uint16_t length, uint8_t* buffer){
 8000c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c50:	b091      	sub	sp, #68	@ 0x44
 8000c52:	af02      	add	r7, sp, #8
 8000c54:	6139      	str	r1, [r7, #16]
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	4603      	mov	r3, r0
 8000c5a:	75fb      	strb	r3, [r7, #23]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	82bb      	strh	r3, [r7, #20]
	length += 4; //Account for the header
 8000c60:	8abb      	ldrh	r3, [r7, #20]
 8000c62:	3304      	adds	r3, #4
 8000c64:	82bb      	strh	r3, [r7, #20]

	uint16_t selectedPin = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	86fb      	strh	r3, [r7, #54]	@ 0x36
	switch(chip){
 8000c6a:	7dfb      	ldrb	r3, [r7, #23]
 8000c6c:	2b05      	cmp	r3, #5
 8000c6e:	d827      	bhi.n	8000cc0 <ReadMem+0x74>
 8000c70:	a201      	add	r2, pc, #4	@ (adr r2, 8000c78 <ReadMem+0x2c>)
 8000c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c76:	bf00      	nop
 8000c78:	08000c91 	.word	0x08000c91
 8000c7c:	08000c99 	.word	0x08000c99
 8000c80:	08000ca1 	.word	0x08000ca1
 8000c84:	08000ca9 	.word	0x08000ca9
 8000c88:	08000cb1 	.word	0x08000cb1
 8000c8c:	08000cb9 	.word	0x08000cb9
	case 0:
		selectedPin = 1024;
 8000c90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c94:	86fb      	strh	r3, [r7, #54]	@ 0x36
		break;
 8000c96:	e013      	b.n	8000cc0 <ReadMem+0x74>
	case 1:
		selectedPin = 4096;
 8000c98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c9c:	86fb      	strh	r3, [r7, #54]	@ 0x36
		break;
 8000c9e:	e00f      	b.n	8000cc0 <ReadMem+0x74>
	case 2:
		selectedPin = 16384;
 8000ca0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ca4:	86fb      	strh	r3, [r7, #54]	@ 0x36
		break;
 8000ca6:	e00b      	b.n	8000cc0 <ReadMem+0x74>
	case 3:
		selectedPin = 32768;
 8000ca8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cac:	86fb      	strh	r3, [r7, #54]	@ 0x36
		break;
 8000cae:	e007      	b.n	8000cc0 <ReadMem+0x74>
	case 4:
		selectedPin = 512;
 8000cb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cb4:	86fb      	strh	r3, [r7, #54]	@ 0x36
		break;
 8000cb6:	e003      	b.n	8000cc0 <ReadMem+0x74>
	case 5:
		selectedPin = 2048;
 8000cb8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cbc:	86fb      	strh	r3, [r7, #54]	@ 0x36
		break;
 8000cbe:	bf00      	nop
	}

	uint8_t TxBuff[length];
 8000cc0:	8ab9      	ldrh	r1, [r7, #20]
 8000cc2:	466b      	mov	r3, sp
 8000cc4:	461e      	mov	r6, r3
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ccc:	b28b      	uxth	r3, r1
 8000cce:	2200      	movs	r2, #0
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	607a      	str	r2, [r7, #4]
 8000cd4:	f04f 0200 	mov.w	r2, #0
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	00c3      	lsls	r3, r0, #3
 8000ce0:	6838      	ldr	r0, [r7, #0]
 8000ce2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ce6:	6838      	ldr	r0, [r7, #0]
 8000ce8:	00c2      	lsls	r2, r0, #3
 8000cea:	b28b      	uxth	r3, r1
 8000cec:	2200      	movs	r2, #0
 8000cee:	469a      	mov	sl, r3
 8000cf0:	4693      	mov	fp, r2
 8000cf2:	f04f 0200 	mov.w	r2, #0
 8000cf6:	f04f 0300 	mov.w	r3, #0
 8000cfa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000cfe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000d02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000d06:	460b      	mov	r3, r1
 8000d08:	3307      	adds	r3, #7
 8000d0a:	08db      	lsrs	r3, r3, #3
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	ebad 0d03 	sub.w	sp, sp, r3
 8000d12:	ab02      	add	r3, sp, #8
 8000d14:	3300      	adds	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
	TxBuff[0] = 0x03;
 8000d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	701a      	strb	r2, [r3, #0]
	TxBuff[1] = (addr>>16)&0x0000FF;
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	0c1b      	lsrs	r3, r3, #16
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d26:	705a      	strb	r2, [r3, #1]
	TxBuff[2] = (addr>>8)&0x0000FF;
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	0a1b      	lsrs	r3, r3, #8
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d30:	709a      	strb	r2, [r3, #2]
	TxBuff[3] = (addr)&0x0000FF;
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d38:	70da      	strb	r2, [r3, #3]
	for(int j = 4; j< length; j++){
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8000d3e:	e007      	b.n	8000d50 <ReadMem+0x104>
		TxBuff[j] = '\0';
 8000d40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d44:	4413      	add	r3, r2
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
	for(int j = 4; j< length; j++){
 8000d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8000d50:	8abb      	ldrh	r3, [r7, #20]
 8000d52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d54:	429a      	cmp	r2, r3
 8000d56:	dbf3      	blt.n	8000d40 <ReadMem+0xf4>
	}
	uint8_t RxBuff[length];
 8000d58:	8ab9      	ldrh	r1, [r7, #20]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	623b      	str	r3, [r7, #32]
 8000d60:	b28b      	uxth	r3, r1
 8000d62:	2200      	movs	r2, #0
 8000d64:	4698      	mov	r8, r3
 8000d66:	4691      	mov	r9, r2
 8000d68:	f04f 0200 	mov.w	r2, #0
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d7c:	b28b      	uxth	r3, r1
 8000d7e:	2200      	movs	r2, #0
 8000d80:	461c      	mov	r4, r3
 8000d82:	4615      	mov	r5, r2
 8000d84:	f04f 0200 	mov.w	r2, #0
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	00eb      	lsls	r3, r5, #3
 8000d8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d92:	00e2      	lsls	r2, r4, #3
 8000d94:	460b      	mov	r3, r1
 8000d96:	3307      	adds	r3, #7
 8000d98:	08db      	lsrs	r3, r3, #3
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	ebad 0d03 	sub.w	sp, sp, r3
 8000da0:	ab02      	add	r3, sp, #8
 8000da2:	3300      	adds	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_WritePin(GPIOE, selectedPin, GPIO_PIN_RESET);
 8000da6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000da8:	2200      	movs	r2, #0
 8000daa:	4619      	mov	r1, r3
 8000dac:	4815      	ldr	r0, [pc, #84]	@ (8000e04 <ReadMem+0x1b8>)
 8000dae:	f001 f89f 	bl	8001ef0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)TxBuff, (uint8_t *)RxBuff, length, length);
 8000db2:	8abb      	ldrh	r3, [r7, #20]
 8000db4:	8aba      	ldrh	r2, [r7, #20]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	4613      	mov	r3, r2
 8000dba:	69fa      	ldr	r2, [r7, #28]
 8000dbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000dbe:	4812      	ldr	r0, [pc, #72]	@ (8000e08 <ReadMem+0x1bc>)
 8000dc0:	f004 fb3c 	bl	800543c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOE, selectedPin, GPIO_PIN_SET);
 8000dc4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480e      	ldr	r0, [pc, #56]	@ (8000e04 <ReadMem+0x1b8>)
 8000dcc:	f001 f890 	bl	8001ef0 <HAL_GPIO_WritePin>

	for(int i=4; i<length; i++){
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000dd4:	e00b      	b.n	8000dee <ReadMem+0x1a2>
		*(buffer+(i-4)) = RxBuff[i]; //Load all the received data into the proper location
 8000dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dd8:	3b04      	subs	r3, #4
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	4413      	add	r3, r2
 8000dde:	69f9      	ldr	r1, [r7, #28]
 8000de0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000de2:	440a      	add	r2, r1
 8000de4:	7812      	ldrb	r2, [r2, #0]
 8000de6:	701a      	strb	r2, [r3, #0]
	for(int i=4; i<length; i++){
 8000de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dea:	3301      	adds	r3, #1
 8000dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000dee:	8abb      	ldrh	r3, [r7, #20]
 8000df0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000df2:	429a      	cmp	r2, r3
 8000df4:	dbef      	blt.n	8000dd6 <ReadMem+0x18a>
 8000df6:	46b5      	mov	sp, r6
	}

}
 8000df8:	bf00      	nop
 8000dfa:	373c      	adds	r7, #60	@ 0x3c
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e02:	bf00      	nop
 8000e04:	48001000 	.word	0x48001000
 8000e08:	200001b8 	.word	0x200001b8

08000e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08c      	sub	sp, #48	@ 0x30
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e12:	f000 fcb2 	bl	800177a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e16:	f000 f8c3 	bl	8000fa0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1a:	f000 f9bf 	bl	800119c <MX_GPIO_Init>
  MX_USB_HOST_Init();
 8000e1e:	f00a fd5b 	bl	800b8d8 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000e22:	f000 f94d 	bl	80010c0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000e26:	f000 f97b 	bl	8001120 <MX_SPI1_Init>
  MX_LPUART1_UART_Init();
 8000e2a:	f000 f91d 	bl	8001068 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000e2e:	4b51      	ldr	r3, [pc, #324]	@ (8000f74 <main+0x168>)
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	4a50      	ldr	r2, [pc, #320]	@ (8000f74 <main+0x168>)
 8000e34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e38:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000e3a:	4b4f      	ldr	r3, [pc, #316]	@ (8000f78 <main+0x16c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a4e      	ldr	r2, [pc, #312]	@ (8000f78 <main+0x16c>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT =0;
 8000e46:	4b4c      	ldr	r3, [pc, #304]	@ (8000f78 <main+0x16c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	605a      	str	r2, [r3, #4]



  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET); //Set WRite ENable
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f44f 415e 	mov.w	r1, #56832	@ 0xde00
 8000e52:	484a      	ldr	r0, [pc, #296]	@ (8000f7c <main+0x170>)
 8000e54:	f001 f84c 	bl	8001ef0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &wren, 1, 10); // to enable write on the MRAM chip
 8000e58:	230a      	movs	r3, #10
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4948      	ldr	r1, [pc, #288]	@ (8000f80 <main+0x174>)
 8000e5e:	4849      	ldr	r0, [pc, #292]	@ (8000f84 <main+0x178>)
 8000e60:	f004 f977 	bl	8005152 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 415e 	mov.w	r1, #56832	@ 0xde00
 8000e6a:	4844      	ldr	r0, [pc, #272]	@ (8000f7c <main+0x170>)
 8000e6c:	f001 f840 	bl	8001ef0 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&hlpuart1, Rx, 1);
 8000e70:	2201      	movs	r2, #1
 8000e72:	4945      	ldr	r1, [pc, #276]	@ (8000f88 <main+0x17c>)
 8000e74:	4845      	ldr	r0, [pc, #276]	@ (8000f8c <main+0x180>)
 8000e76:	f004 ff3f 	bl	8005cf8 <HAL_UART_Receive_IT>

  HAL_Delay(1); //short delay between transactions
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f000 fcf2 	bl	8001864 <HAL_Delay>

  //We have to configure the mode of "Avalanche AS1016A04/Avalanche AS1004A04" such that we get the back-to-back mode
  //Then we don't need wren every time we want to write
  HAL_GPIO_WritePin(GPIOE,  GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 415e 	mov.w	r1, #56832	@ 0xde00
 8000e86:	483d      	ldr	r0, [pc, #244]	@ (8000f7c <main+0x170>)
 8000e88:	f001 f832 	bl	8001ef0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, configure_code_1, 5, 20);
 8000e8c:	2314      	movs	r3, #20
 8000e8e:	2205      	movs	r2, #5
 8000e90:	493f      	ldr	r1, [pc, #252]	@ (8000f90 <main+0x184>)
 8000e92:	483c      	ldr	r0, [pc, #240]	@ (8000f84 <main+0x178>)
 8000e94:	f004 f95d 	bl	8005152 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOE,  GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f44f 415e 	mov.w	r1, #56832	@ 0xde00
 8000e9e:	4837      	ldr	r0, [pc, #220]	@ (8000f7c <main+0x170>)
 8000ea0:	f001 f826 	bl	8001ef0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
  HAL_SPI_Transmit(&hspi1, configure_code_2, 5, 20);
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
*/

  HAL_GPIO_WritePin(GPIOE,  GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET); //Set WRite ENable
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 415e 	mov.w	r1, #56832	@ 0xde00
 8000eaa:	4834      	ldr	r0, [pc, #208]	@ (8000f7c <main+0x170>)
 8000eac:	f001 f820 	bl	8001ef0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &wren, 1, 10); // to enable write on the MRAM chip
 8000eb0:	230a      	movs	r3, #10
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4932      	ldr	r1, [pc, #200]	@ (8000f80 <main+0x174>)
 8000eb6:	4833      	ldr	r0, [pc, #204]	@ (8000f84 <main+0x178>)
 8000eb8:	f004 f94b 	bl	8005152 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOE,  GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f44f 415e 	mov.w	r1, #56832	@ 0xde00
 8000ec2:	482e      	ldr	r0, [pc, #184]	@ (8000f7c <main+0x170>)
 8000ec4:	f001 f814 	bl	8001ef0 <HAL_GPIO_WritePin>


  HAL_UART_Transmit(&hlpuart1, (uint8_t*)"\r\n", 2, 1000);//Get the interrupt running
 8000ec8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ecc:	2202      	movs	r2, #2
 8000ece:	4931      	ldr	r1, [pc, #196]	@ (8000f94 <main+0x188>)
 8000ed0:	482e      	ldr	r0, [pc, #184]	@ (8000f8c <main+0x180>)
 8000ed2:	f004 fe87 	bl	8005be4 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */


  // check if the code is actually running

  int pos = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t writeByte = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t readByte = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  int chip = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28


  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000eea:	f00a fd1b 	bl	800b924 <MX_USB_HOST_Process>
    MemTest(5, &numFailsMRAM5, &numTestsMRAM5);*/




    WriteMem(chip, pos, 1, &writeByte); //Read 0, write 1 at each bit
 8000eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ef0:	b2d8      	uxtb	r0, r3
 8000ef2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000ef4:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f7ff fe03 	bl	8000b04 <WriteMem>
    ReadMem(chip, pos, 1, &readByte);
 8000efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f00:	b2d8      	uxtb	r0, r3
 8000f02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000f04:	f107 0326 	add.w	r3, r7, #38	@ 0x26
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f7ff fe9f 	bl	8000c4c <ReadMem>

    sprintf(data, "chip number: %u  read value:\t\t%u\r\n",chip,readByte);
 8000f0e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f12:	4638      	mov	r0, r7
 8000f14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f16:	4920      	ldr	r1, [pc, #128]	@ (8000f98 <main+0x18c>)
 8000f18:	f00b f8c4 	bl	800c0a4 <siprintf>
    HAL_UART_Transmit(&hlpuart1,data,sizeof(data),20);
 8000f1c:	4639      	mov	r1, r7
 8000f1e:	2314      	movs	r3, #20
 8000f20:	2225      	movs	r2, #37	@ 0x25
 8000f22:	481a      	ldr	r0, [pc, #104]	@ (8000f8c <main+0x180>)
 8000f24:	f004 fe5e 	bl	8005be4 <HAL_UART_Transmit>
    clrstr(data,37);
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2125      	movs	r1, #37	@ 0x25
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fb4d 	bl	80005cc <clrstr>

    chip++;
 8000f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f34:	3301      	adds	r3, #1
 8000f36:	62bb      	str	r3, [r7, #40]	@ 0x28
    pos++;
 8000f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (chip==6){
 8000f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f40:	2b06      	cmp	r3, #6
 8000f42:	d107      	bne.n	8000f54 <main+0x148>
    	chip=0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62bb      	str	r3, [r7, #40]	@ 0x28
    	writeByte++;
 8000f48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    if (writeByte==256){
    	writeByte=0;
    }
    HAL_Delay(1000);
 8000f54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f58:	f000 fc84 	bl	8001864 <HAL_Delay>
    if (writeByte!=readByte){
 8000f5c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f60:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d0c0      	beq.n	8000eea <main+0xde>
    	numFailsMRAM0++;
 8000f68:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <main+0x190>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f9c <main+0x190>)
 8000f70:	6013      	str	r3, [r2, #0]
  {
 8000f72:	e7ba      	b.n	8000eea <main+0xde>
 8000f74:	e000edf0 	.word	0xe000edf0
 8000f78:	e0001000 	.word	0xe0001000
 8000f7c:	48001000 	.word	0x48001000
 8000f80:	20000001 	.word	0x20000001
 8000f84:	200001b8 	.word	0x200001b8
 8000f88:	20000250 	.word	0x20000250
 8000f8c:	200000a8 	.word	0x200000a8
 8000f90:	20000004 	.word	0x20000004
 8000f94:	0800cadc 	.word	0x0800cadc
 8000f98:	0800cae0 	.word	0x0800cae0
 8000f9c:	20000234 	.word	0x20000234

08000fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b096      	sub	sp, #88	@ 0x58
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2244      	movs	r2, #68	@ 0x44
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f00b f89a 	bl	800c0e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fc2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fc6:	f002 fc93 	bl	80038f0 <HAL_PWREx_ControlVoltageScaling>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fd0:	f000 f9d8 	bl	8001384 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fd4:	f002 fc6e 	bl	80038b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000fd8:	4b22      	ldr	r3, [pc, #136]	@ (8001064 <SystemClock_Config+0xc4>)
 8000fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000fde:	4a21      	ldr	r2, [pc, #132]	@ (8001064 <SystemClock_Config+0xc4>)
 8000fe0:	f023 0318 	bic.w	r3, r3, #24
 8000fe4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000fe8:	2314      	movs	r3, #20
 8000fea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000fec:	2301      	movs	r3, #1
 8000fee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ff8:	2360      	movs	r3, #96	@ 0x60
 8000ffa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001000:	2301      	movs	r3, #1
 8001002:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001004:	2301      	movs	r3, #1
 8001006:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001008:	2328      	movs	r3, #40	@ 0x28
 800100a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800100c:	2302      	movs	r3, #2
 800100e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001010:	2302      	movs	r3, #2
 8001012:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001014:	2302      	movs	r3, #2
 8001016:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4618      	mov	r0, r3
 800101e:	f002 fcdd 	bl	80039dc <HAL_RCC_OscConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001028:	f000 f9ac 	bl	8001384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102c:	230f      	movs	r3, #15
 800102e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001030:	2303      	movs	r3, #3
 8001032:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001038:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800103c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800103e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001042:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001044:	463b      	mov	r3, r7
 8001046:	2104      	movs	r1, #4
 8001048:	4618      	mov	r0, r3
 800104a:	f003 f8e1 	bl	8004210 <HAL_RCC_ClockConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001054:	f000 f996 	bl	8001384 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001058:	f003 fdfa 	bl	8004c50 <HAL_RCCEx_EnableMSIPLLMode>
}
 800105c:	bf00      	nop
 800105e:	3758      	adds	r7, #88	@ 0x58
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40021000 	.word	0x40021000

08001068 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800106c:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <MX_LPUART1_UART_Init+0x50>)
 800106e:	4a13      	ldr	r2, [pc, #76]	@ (80010bc <MX_LPUART1_UART_Init+0x54>)
 8001070:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001072:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <MX_LPUART1_UART_Init+0x50>)
 8001074:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001078:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800107a:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <MX_LPUART1_UART_Init+0x50>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001080:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <MX_LPUART1_UART_Init+0x50>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001086:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <MX_LPUART1_UART_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800108c:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <MX_LPUART1_UART_Init+0x50>)
 800108e:	220c      	movs	r2, #12
 8001090:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001092:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <MX_LPUART1_UART_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001098:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <MX_LPUART1_UART_Init+0x50>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800109e:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <MX_LPUART1_UART_Init+0x50>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80010a4:	4804      	ldr	r0, [pc, #16]	@ (80010b8 <MX_LPUART1_UART_Init+0x50>)
 80010a6:	f004 fd4f 	bl	8005b48 <HAL_UART_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80010b0:	f000 f968 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200000a8 	.word	0x200000a8
 80010bc:	40008000 	.word	0x40008000

080010c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010c4:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <MX_USART2_UART_Init+0x58>)
 80010c6:	4a15      	ldr	r2, [pc, #84]	@ (800111c <MX_USART2_UART_Init+0x5c>)
 80010c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80010ca:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <MX_USART2_UART_Init+0x58>)
 80010cc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010d2:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <MX_USART2_UART_Init+0x58>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <MX_USART2_UART_Init+0x58>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010de:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <MX_USART2_UART_Init+0x58>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <MX_USART2_UART_Init+0x58>)
 80010e6:	220c      	movs	r2, #12
 80010e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <MX_USART2_UART_Init+0x58>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f0:	4b09      	ldr	r3, [pc, #36]	@ (8001118 <MX_USART2_UART_Init+0x58>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010f6:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <MX_USART2_UART_Init+0x58>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010fc:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <MX_USART2_UART_Init+0x58>)
 80010fe:	2200      	movs	r2, #0
 8001100:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001102:	4805      	ldr	r0, [pc, #20]	@ (8001118 <MX_USART2_UART_Init+0x58>)
 8001104:	f004 fd20 	bl	8005b48 <HAL_UART_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800110e:	f000 f939 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000130 	.word	0x20000130
 800111c:	40004400 	.word	0x40004400

08001120 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001124:	4b1b      	ldr	r3, [pc, #108]	@ (8001194 <MX_SPI1_Init+0x74>)
 8001126:	4a1c      	ldr	r2, [pc, #112]	@ (8001198 <MX_SPI1_Init+0x78>)
 8001128:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800112a:	4b1a      	ldr	r3, [pc, #104]	@ (8001194 <MX_SPI1_Init+0x74>)
 800112c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001130:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001132:	4b18      	ldr	r3, [pc, #96]	@ (8001194 <MX_SPI1_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001138:	4b16      	ldr	r3, [pc, #88]	@ (8001194 <MX_SPI1_Init+0x74>)
 800113a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800113e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001140:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <MX_SPI1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001146:	4b13      	ldr	r3, [pc, #76]	@ (8001194 <MX_SPI1_Init+0x74>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800114c:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <MX_SPI1_Init+0x74>)
 800114e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001152:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001154:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <MX_SPI1_Init+0x74>)
 8001156:	2228      	movs	r2, #40	@ 0x28
 8001158:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800115a:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <MX_SPI1_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001160:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <MX_SPI1_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001166:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <MX_SPI1_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800116c:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <MX_SPI1_Init+0x74>)
 800116e:	2207      	movs	r2, #7
 8001170:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001172:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <MX_SPI1_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <MX_SPI1_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800117e:	4805      	ldr	r0, [pc, #20]	@ (8001194 <MX_SPI1_Init+0x74>)
 8001180:	f003 ff44 	bl	800500c <HAL_SPI_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800118a:	f000 f8fb 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200001b8 	.word	0x200001b8
 8001198:	40013000 	.word	0x40013000

0800119c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08c      	sub	sp, #48	@ 0x30
 80011a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]
  /*Configure GPIO pin Output Level*/
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET); //And this
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b2:	4b6f      	ldr	r3, [pc, #444]	@ (8001370 <MX_GPIO_Init+0x1d4>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	4a6e      	ldr	r2, [pc, #440]	@ (8001370 <MX_GPIO_Init+0x1d4>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011be:	4b6c      	ldr	r3, [pc, #432]	@ (8001370 <MX_GPIO_Init+0x1d4>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	61bb      	str	r3, [r7, #24]
 80011c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ca:	4b69      	ldr	r3, [pc, #420]	@ (8001370 <MX_GPIO_Init+0x1d4>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ce:	4a68      	ldr	r2, [pc, #416]	@ (8001370 <MX_GPIO_Init+0x1d4>)
 80011d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d6:	4b66      	ldr	r3, [pc, #408]	@ (8001370 <MX_GPIO_Init+0x1d4>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	4b63      	ldr	r3, [pc, #396]	@ (8001370 <MX_GPIO_Init+0x1d4>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	4a62      	ldr	r2, [pc, #392]	@ (8001370 <MX_GPIO_Init+0x1d4>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ee:	4b60      	ldr	r3, [pc, #384]	@ (8001370 <MX_GPIO_Init+0x1d4>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001370 <MX_GPIO_Init+0x1d4>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fe:	4a5c      	ldr	r2, [pc, #368]	@ (8001370 <MX_GPIO_Init+0x1d4>)
 8001200:	f043 0310 	orr.w	r3, r3, #16
 8001204:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001206:	4b5a      	ldr	r3, [pc, #360]	@ (8001370 <MX_GPIO_Init+0x1d4>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120a:	f003 0310 	and.w	r3, r3, #16
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	4b57      	ldr	r3, [pc, #348]	@ (8001370 <MX_GPIO_Init+0x1d4>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001216:	4a56      	ldr	r2, [pc, #344]	@ (8001370 <MX_GPIO_Init+0x1d4>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800121e:	4b54      	ldr	r3, [pc, #336]	@ (8001370 <MX_GPIO_Init+0x1d4>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800122a:	4b51      	ldr	r3, [pc, #324]	@ (8001370 <MX_GPIO_Init+0x1d4>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	4a50      	ldr	r2, [pc, #320]	@ (8001370 <MX_GPIO_Init+0x1d4>)
 8001230:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001236:	4b4e      	ldr	r3, [pc, #312]	@ (8001370 <MX_GPIO_Init+0x1d4>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001242:	f002 fbbb 	bl	80039bc <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001246:	4b4a      	ldr	r3, [pc, #296]	@ (8001370 <MX_GPIO_Init+0x1d4>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124a:	4a49      	ldr	r2, [pc, #292]	@ (8001370 <MX_GPIO_Init+0x1d4>)
 800124c:	f043 0308 	orr.w	r3, r3, #8
 8001250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001252:	4b47      	ldr	r3, [pc, #284]	@ (8001370 <MX_GPIO_Init+0x1d4>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 415e 	mov.w	r1, #56832	@ 0xde00
 8001264:	4843      	ldr	r0, [pc, #268]	@ (8001374 <MX_GPIO_Init+0x1d8>)
 8001266:	f000 fe43 	bl	8001ef0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001270:	4841      	ldr	r0, [pc, #260]	@ (8001378 <MX_GPIO_Init+0x1dc>)
 8001272:	f000 fe3d 	bl	8001ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 5131 	mov.w	r1, #11328	@ 0x2c40
 800127c:	483f      	ldr	r0, [pc, #252]	@ (800137c <MX_GPIO_Init+0x1e0>)
 800127e:	f000 fe37 	bl	8001ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	2180      	movs	r1, #128	@ 0x80
 8001286:	483e      	ldr	r0, [pc, #248]	@ (8001380 <MX_GPIO_Init+0x1e4>)
 8001288:	f000 fe32 	bl	8001ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800128c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001292:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001296:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	4619      	mov	r1, r3
 80012a2:	4837      	ldr	r0, [pc, #220]	@ (8001380 <MX_GPIO_Init+0x1e4>)
 80012a4:	f000 fc92 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE10 PE11 PE12
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80012a8:	f44f 435e 	mov.w	r3, #56832	@ 0xde00
 80012ac:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4619      	mov	r1, r3
 80012c0:	482c      	ldr	r0, [pc, #176]	@ (8001374 <MX_GPIO_Init+0x1d8>)
 80012c2:	f000 fc83 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80012c6:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80012ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	4619      	mov	r1, r3
 80012de:	4826      	ldr	r0, [pc, #152]	@ (8001378 <MX_GPIO_Init+0x1dc>)
 80012e0:	f000 fc74 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 80012e4:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 80012e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	4619      	mov	r1, r3
 80012f8:	4820      	ldr	r0, [pc, #128]	@ (800137c <MX_GPIO_Init+0x1e0>)
 80012fa:	f000 fc67 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 80012fe:	f44f 5331 	mov.w	r3, #11328	@ 0x2c40
 8001302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4619      	mov	r1, r3
 8001316:	4819      	ldr	r0, [pc, #100]	@ (800137c <MX_GPIO_Init+0x1e0>)
 8001318:	f000 fc58 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 800131c:	2380      	movs	r3, #128	@ 0x80
 800131e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	4813      	ldr	r0, [pc, #76]	@ (8001380 <MX_GPIO_Init+0x1e4>)
 8001334:	f000 fc4a 	bl	8001bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001338:	2320      	movs	r3, #32
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001344:	2303      	movs	r3, #3
 8001346:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001348:	2307      	movs	r3, #7
 800134a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4619      	mov	r1, r3
 8001352:	4809      	ldr	r0, [pc, #36]	@ (8001378 <MX_GPIO_Init+0x1dc>)
 8001354:	f000 fc3a 	bl	8001bcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2100      	movs	r1, #0
 800135c:	2028      	movs	r0, #40	@ 0x28
 800135e:	f000 fb80 	bl	8001a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001362:	2028      	movs	r0, #40	@ 0x28
 8001364:	f000 fb99 	bl	8001a9a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001368:	bf00      	nop
 800136a:	3730      	adds	r7, #48	@ 0x30
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40021000 	.word	0x40021000
 8001374:	48001000 	.word	0x48001000
 8001378:	48000400 	.word	0x48000400
 800137c:	48001800 	.word	0x48001800
 8001380:	48000800 	.word	0x48000800

08001384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001388:	b672      	cpsid	i
}
 800138a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <Error_Handler+0x8>

08001390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <HAL_MspInit+0x44>)
 8001398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800139a:	4a0e      	ldr	r2, [pc, #56]	@ (80013d4 <HAL_MspInit+0x44>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <HAL_MspInit+0x44>)
 80013a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <HAL_MspInit+0x44>)
 80013b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b2:	4a08      	ldr	r2, [pc, #32]	@ (80013d4 <HAL_MspInit+0x44>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <HAL_MspInit+0x44>)
 80013bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40021000 	.word	0x40021000

080013d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b0ae      	sub	sp, #184	@ 0xb8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f0:	f107 0318 	add.w	r3, r7, #24
 80013f4:	228c      	movs	r2, #140	@ 0x8c
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f00a fe75 	bl	800c0e8 <memset>
  if(huart->Instance==LPUART1)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a4b      	ldr	r2, [pc, #300]	@ (8001530 <HAL_UART_MspInit+0x158>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d146      	bne.n	8001496 <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001408:	2320      	movs	r3, #32
 800140a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800140c:	2300      	movs	r3, #0
 800140e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001410:	f107 0318 	add.w	r3, r7, #24
 8001414:	4618      	mov	r0, r3
 8001416:	f003 f91f 	bl	8004658 <HAL_RCCEx_PeriphCLKConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001420:	f7ff ffb0 	bl	8001384 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001424:	4b43      	ldr	r3, [pc, #268]	@ (8001534 <HAL_UART_MspInit+0x15c>)
 8001426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001428:	4a42      	ldr	r2, [pc, #264]	@ (8001534 <HAL_UART_MspInit+0x15c>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001430:	4b40      	ldr	r3, [pc, #256]	@ (8001534 <HAL_UART_MspInit+0x15c>)
 8001432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800143c:	4b3d      	ldr	r3, [pc, #244]	@ (8001534 <HAL_UART_MspInit+0x15c>)
 800143e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001440:	4a3c      	ldr	r2, [pc, #240]	@ (8001534 <HAL_UART_MspInit+0x15c>)
 8001442:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001446:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001448:	4b3a      	ldr	r3, [pc, #232]	@ (8001534 <HAL_UART_MspInit+0x15c>)
 800144a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001454:	f002 fab2 	bl	80039bc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|GPIO_PIN_8;
 8001458:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800145c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001472:	2308      	movs	r3, #8
 8001474:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001478:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800147c:	4619      	mov	r1, r3
 800147e:	482e      	ldr	r0, [pc, #184]	@ (8001538 <HAL_UART_MspInit+0x160>)
 8001480:	f000 fba4 	bl	8001bcc <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001484:	2200      	movs	r2, #0
 8001486:	2100      	movs	r1, #0
 8001488:	2046      	movs	r0, #70	@ 0x46
 800148a:	f000 faea 	bl	8001a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800148e:	2046      	movs	r0, #70	@ 0x46
 8001490:	f000 fb03 	bl	8001a9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001494:	e047      	b.n	8001526 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a28      	ldr	r2, [pc, #160]	@ (800153c <HAL_UART_MspInit+0x164>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d142      	bne.n	8001526 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014a0:	2302      	movs	r3, #2
 80014a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a8:	f107 0318 	add.w	r3, r7, #24
 80014ac:	4618      	mov	r0, r3
 80014ae:	f003 f8d3 	bl	8004658 <HAL_RCCEx_PeriphCLKConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <HAL_UART_MspInit+0xe4>
      Error_Handler();
 80014b8:	f7ff ff64 	bl	8001384 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001534 <HAL_UART_MspInit+0x15c>)
 80014be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001534 <HAL_UART_MspInit+0x15c>)
 80014c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80014c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <HAL_UART_MspInit+0x15c>)
 80014ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d4:	4b17      	ldr	r3, [pc, #92]	@ (8001534 <HAL_UART_MspInit+0x15c>)
 80014d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d8:	4a16      	ldr	r2, [pc, #88]	@ (8001534 <HAL_UART_MspInit+0x15c>)
 80014da:	f043 0308 	orr.w	r3, r3, #8
 80014de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e0:	4b14      	ldr	r3, [pc, #80]	@ (8001534 <HAL_UART_MspInit+0x15c>)
 80014e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80014ec:	2360      	movs	r3, #96	@ 0x60
 80014ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001504:	2307      	movs	r3, #7
 8001506:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800150a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800150e:	4619      	mov	r1, r3
 8001510:	480b      	ldr	r0, [pc, #44]	@ (8001540 <HAL_UART_MspInit+0x168>)
 8001512:	f000 fb5b 	bl	8001bcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	2026      	movs	r0, #38	@ 0x26
 800151c:	f000 faa1 	bl	8001a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001520:	2026      	movs	r0, #38	@ 0x26
 8001522:	f000 faba 	bl	8001a9a <HAL_NVIC_EnableIRQ>
}
 8001526:	bf00      	nop
 8001528:	37b8      	adds	r7, #184	@ 0xb8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40008000 	.word	0x40008000
 8001534:	40021000 	.word	0x40021000
 8001538:	48001800 	.word	0x48001800
 800153c:	40004400 	.word	0x40004400
 8001540:	48000c00 	.word	0x48000c00

08001544 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	@ 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a20      	ldr	r2, [pc, #128]	@ (80015e4 <HAL_SPI_MspInit+0xa0>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d139      	bne.n	80015da <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001566:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <HAL_SPI_MspInit+0xa4>)
 8001568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800156a:	4a1f      	ldr	r2, [pc, #124]	@ (80015e8 <HAL_SPI_MspInit+0xa4>)
 800156c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001570:	6613      	str	r3, [r2, #96]	@ 0x60
 8001572:	4b1d      	ldr	r3, [pc, #116]	@ (80015e8 <HAL_SPI_MspInit+0xa4>)
 8001574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001576:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	4b1a      	ldr	r3, [pc, #104]	@ (80015e8 <HAL_SPI_MspInit+0xa4>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	4a19      	ldr	r2, [pc, #100]	@ (80015e8 <HAL_SPI_MspInit+0xa4>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800158a:	4b17      	ldr	r3, [pc, #92]	@ (80015e8 <HAL_SPI_MspInit+0xa4>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001596:	23a0      	movs	r3, #160	@ 0xa0
 8001598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800159e:	2302      	movs	r3, #2
 80015a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015a6:	2305      	movs	r3, #5
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b4:	f000 fb0a 	bl	8001bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015b8:	2340      	movs	r3, #64	@ 0x40
 80015ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015c8:	2305      	movs	r3, #5
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015d6:	f000 faf9 	bl	8001bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015da:	bf00      	nop
 80015dc:	3728      	adds	r7, #40	@ 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40013000 	.word	0x40013000
 80015e8:	40021000 	.word	0x40021000

080015ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <NMI_Handler+0x4>

080015f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <HardFault_Handler+0x4>

080015fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <MemManage_Handler+0x4>

08001604 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <BusFault_Handler+0x4>

0800160c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <UsageFault_Handler+0x4>

08001614 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001642:	f000 f8ef 	bl	8001824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001650:	4802      	ldr	r0, [pc, #8]	@ (800165c <USART2_IRQHandler+0x10>)
 8001652:	f004 fb9d 	bl	8005d90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000130 	.word	0x20000130

08001660 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001664:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001668:	f000 fc5a 	bl	8001f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}

08001670 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001674:	4802      	ldr	r0, [pc, #8]	@ (8001680 <OTG_FS_IRQHandler+0x10>)
 8001676:	f000 ff0b 	bl	8002490 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000708 	.word	0x20000708

08001684 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001688:	4802      	ldr	r0, [pc, #8]	@ (8001694 <LPUART1_IRQHandler+0x10>)
 800168a:	f004 fb81 	bl	8005d90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200000a8 	.word	0x200000a8

08001698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a0:	4a14      	ldr	r2, [pc, #80]	@ (80016f4 <_sbrk+0x5c>)
 80016a2:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <_sbrk+0x60>)
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016ac:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d102      	bne.n	80016ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b4:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <_sbrk+0x64>)
 80016b6:	4a12      	ldr	r2, [pc, #72]	@ (8001700 <_sbrk+0x68>)
 80016b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ba:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <_sbrk+0x64>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d207      	bcs.n	80016d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c8:	f00a fd26 	bl	800c118 <__errno>
 80016cc:	4603      	mov	r3, r0
 80016ce:	220c      	movs	r2, #12
 80016d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295
 80016d6:	e009      	b.n	80016ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d8:	4b08      	ldr	r3, [pc, #32]	@ (80016fc <_sbrk+0x64>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016de:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	4a05      	ldr	r2, [pc, #20]	@ (80016fc <_sbrk+0x64>)
 80016e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ea:	68fb      	ldr	r3, [r7, #12]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20040000 	.word	0x20040000
 80016f8:	00000400 	.word	0x00000400
 80016fc:	20000254 	.word	0x20000254
 8001700:	20000b98 	.word	0x20000b98

08001704 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001708:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <SystemInit+0x20>)
 800170a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800170e:	4a05      	ldr	r2, [pc, #20]	@ (8001724 <SystemInit+0x20>)
 8001710:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001714:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001728:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001760 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800172c:	f7ff ffea 	bl	8001704 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001730:	480c      	ldr	r0, [pc, #48]	@ (8001764 <LoopForever+0x6>)
  ldr r1, =_edata
 8001732:	490d      	ldr	r1, [pc, #52]	@ (8001768 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001734:	4a0d      	ldr	r2, [pc, #52]	@ (800176c <LoopForever+0xe>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001738:	e002      	b.n	8001740 <LoopCopyDataInit>

0800173a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800173c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173e:	3304      	adds	r3, #4

08001740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001744:	d3f9      	bcc.n	800173a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001746:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001748:	4c0a      	ldr	r4, [pc, #40]	@ (8001774 <LoopForever+0x16>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800174c:	e001      	b.n	8001752 <LoopFillZerobss>

0800174e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001750:	3204      	adds	r2, #4

08001752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001754:	d3fb      	bcc.n	800174e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001756:	f00a fce5 	bl	800c124 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800175a:	f7ff fb57 	bl	8000e0c <main>

0800175e <LoopForever>:

LoopForever:
    b LoopForever
 800175e:	e7fe      	b.n	800175e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001760:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001768:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800176c:	0800cb98 	.word	0x0800cb98
  ldr r2, =_sbss
 8001770:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001774:	20000b94 	.word	0x20000b94

08001778 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001778:	e7fe      	b.n	8001778 <ADC1_2_IRQHandler>

0800177a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001780:	2300      	movs	r3, #0
 8001782:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001784:	2003      	movs	r0, #3
 8001786:	f000 f961 	bl	8001a4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800178a:	2000      	movs	r0, #0
 800178c:	f000 f80e 	bl	80017ac <HAL_InitTick>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d002      	beq.n	800179c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	71fb      	strb	r3, [r7, #7]
 800179a:	e001      	b.n	80017a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800179c:	f7ff fdf8 	bl	8001390 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017a0:	79fb      	ldrb	r3, [r7, #7]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017b8:	4b17      	ldr	r3, [pc, #92]	@ (8001818 <HAL_InitTick+0x6c>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d023      	beq.n	8001808 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017c0:	4b16      	ldr	r3, [pc, #88]	@ (800181c <HAL_InitTick+0x70>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b14      	ldr	r3, [pc, #80]	@ (8001818 <HAL_InitTick+0x6c>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f96d 	bl	8001ab6 <HAL_SYSTICK_Config>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10f      	bne.n	8001802 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b0f      	cmp	r3, #15
 80017e6:	d809      	bhi.n	80017fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e8:	2200      	movs	r2, #0
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f000 f937 	bl	8001a62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <HAL_InitTick+0x74>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e007      	b.n	800180c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	73fb      	strb	r3, [r7, #15]
 8001800:	e004      	b.n	800180c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	73fb      	strb	r3, [r7, #15]
 8001806:	e001      	b.n	800180c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800180c:	7bfb      	ldrb	r3, [r7, #15]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000018 	.word	0x20000018
 800181c:	20000010 	.word	0x20000010
 8001820:	20000014 	.word	0x20000014

08001824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_IncTick+0x20>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <HAL_IncTick+0x24>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4413      	add	r3, r2
 8001834:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <HAL_IncTick+0x24>)
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000018 	.word	0x20000018
 8001848:	20000258 	.word	0x20000258

0800184c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;
 8001850:	4b03      	ldr	r3, [pc, #12]	@ (8001860 <HAL_GetTick+0x14>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000258 	.word	0x20000258

08001864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800186c:	f7ff ffee 	bl	800184c <HAL_GetTick>
 8001870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187c:	d005      	beq.n	800188a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800187e:	4b0a      	ldr	r3, [pc, #40]	@ (80018a8 <HAL_Delay+0x44>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4413      	add	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800188a:	bf00      	nop
 800188c:	f7ff ffde 	bl	800184c <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	429a      	cmp	r2, r3
 800189a:	d8f7      	bhi.n	800188c <HAL_Delay+0x28>
  {
  }
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000018 	.word	0x20000018

080018ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018c8:	4013      	ands	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018de:	4a04      	ldr	r2, [pc, #16]	@ (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	60d3      	str	r3, [r2, #12]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f8:	4b04      	ldr	r3, [pc, #16]	@ (800190c <__NVIC_GetPriorityGrouping+0x18>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	f003 0307 	and.w	r3, r3, #7
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	2b00      	cmp	r3, #0
 8001920:	db0b      	blt.n	800193a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	f003 021f 	and.w	r2, r3, #31
 8001928:	4907      	ldr	r1, [pc, #28]	@ (8001948 <__NVIC_EnableIRQ+0x38>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	095b      	lsrs	r3, r3, #5
 8001930:	2001      	movs	r0, #1
 8001932:	fa00 f202 	lsl.w	r2, r0, r2
 8001936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000e100 	.word	0xe000e100

0800194c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	6039      	str	r1, [r7, #0]
 8001956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	2b00      	cmp	r3, #0
 800195e:	db0a      	blt.n	8001976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	490c      	ldr	r1, [pc, #48]	@ (8001998 <__NVIC_SetPriority+0x4c>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	0112      	lsls	r2, r2, #4
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	440b      	add	r3, r1
 8001970:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001974:	e00a      	b.n	800198c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4908      	ldr	r1, [pc, #32]	@ (800199c <__NVIC_SetPriority+0x50>)
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	3b04      	subs	r3, #4
 8001984:	0112      	lsls	r2, r2, #4
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	440b      	add	r3, r1
 800198a:	761a      	strb	r2, [r3, #24]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000e100 	.word	0xe000e100
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	@ 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f1c3 0307 	rsb	r3, r3, #7
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	bf28      	it	cs
 80019be:	2304      	movcs	r3, #4
 80019c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3304      	adds	r3, #4
 80019c6:	2b06      	cmp	r3, #6
 80019c8:	d902      	bls.n	80019d0 <NVIC_EncodePriority+0x30>
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3b03      	subs	r3, #3
 80019ce:	e000      	b.n	80019d2 <NVIC_EncodePriority+0x32>
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	f04f 32ff 	mov.w	r2, #4294967295
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43da      	mvns	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	401a      	ands	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	43d9      	mvns	r1, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	4313      	orrs	r3, r2
         );
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3724      	adds	r7, #36	@ 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a18:	d301      	bcc.n	8001a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e00f      	b.n	8001a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a48 <SysTick_Config+0x40>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a26:	210f      	movs	r1, #15
 8001a28:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2c:	f7ff ff8e 	bl	800194c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a30:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <SysTick_Config+0x40>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a36:	4b04      	ldr	r3, [pc, #16]	@ (8001a48 <SysTick_Config+0x40>)
 8001a38:	2207      	movs	r2, #7
 8001a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	e000e010 	.word	0xe000e010

08001a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff ff29 	bl	80018ac <__NVIC_SetPriorityGrouping>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
 8001a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a74:	f7ff ff3e 	bl	80018f4 <__NVIC_GetPriorityGrouping>
 8001a78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	6978      	ldr	r0, [r7, #20]
 8001a80:	f7ff ff8e 	bl	80019a0 <NVIC_EncodePriority>
 8001a84:	4602      	mov	r2, r0
 8001a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff5d 	bl	800194c <__NVIC_SetPriority>
}
 8001a92:	bf00      	nop
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff31 	bl	8001910 <__NVIC_EnableIRQ>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ffa2 	bl	8001a08 <SysTick_Config>
 8001ac4:	4603      	mov	r3, r0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b085      	sub	sp, #20
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d008      	beq.n	8001af8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2204      	movs	r2, #4
 8001aea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e022      	b.n	8001b3e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 020e 	bic.w	r2, r2, #14
 8001b06:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0201 	bic.w	r2, r2, #1
 8001b16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1c:	f003 021c 	and.w	r2, r3, #28
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b24:	2101      	movs	r1, #1
 8001b26:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b084      	sub	sp, #16
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d005      	beq.n	8001b6e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2204      	movs	r2, #4
 8001b66:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
 8001b6c:	e029      	b.n	8001bc2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 020e 	bic.w	r2, r2, #14
 8001b7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0201 	bic.w	r2, r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b92:	f003 021c 	and.w	r2, r3, #28
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	4798      	blx	r3
    }
  }
  return status;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bda:	e166      	b.n	8001eaa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	2101      	movs	r1, #1
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	fa01 f303 	lsl.w	r3, r1, r3
 8001be8:	4013      	ands	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 8158 	beq.w	8001ea4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d005      	beq.n	8001c0c <HAL_GPIO_Init+0x40>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d130      	bne.n	8001c6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	2203      	movs	r2, #3
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	68da      	ldr	r2, [r3, #12]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c42:	2201      	movs	r2, #1
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	091b      	lsrs	r3, r3, #4
 8001c58:	f003 0201 	and.w	r2, r3, #1
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d017      	beq.n	8001caa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	2203      	movs	r2, #3
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d123      	bne.n	8001cfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	08da      	lsrs	r2, r3, #3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3208      	adds	r2, #8
 8001cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	220f      	movs	r2, #15
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	691a      	ldr	r2, [r3, #16]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	08da      	lsrs	r2, r3, #3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3208      	adds	r2, #8
 8001cf8:	6939      	ldr	r1, [r7, #16]
 8001cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	2203      	movs	r2, #3
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 0203 	and.w	r2, r3, #3
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 80b2 	beq.w	8001ea4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d40:	4b61      	ldr	r3, [pc, #388]	@ (8001ec8 <HAL_GPIO_Init+0x2fc>)
 8001d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d44:	4a60      	ldr	r2, [pc, #384]	@ (8001ec8 <HAL_GPIO_Init+0x2fc>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d4c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ec8 <HAL_GPIO_Init+0x2fc>)
 8001d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d58:	4a5c      	ldr	r2, [pc, #368]	@ (8001ecc <HAL_GPIO_Init+0x300>)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	089b      	lsrs	r3, r3, #2
 8001d5e:	3302      	adds	r3, #2
 8001d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	220f      	movs	r2, #15
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d82:	d02b      	beq.n	8001ddc <HAL_GPIO_Init+0x210>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a52      	ldr	r2, [pc, #328]	@ (8001ed0 <HAL_GPIO_Init+0x304>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d025      	beq.n	8001dd8 <HAL_GPIO_Init+0x20c>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a51      	ldr	r2, [pc, #324]	@ (8001ed4 <HAL_GPIO_Init+0x308>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d01f      	beq.n	8001dd4 <HAL_GPIO_Init+0x208>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a50      	ldr	r2, [pc, #320]	@ (8001ed8 <HAL_GPIO_Init+0x30c>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d019      	beq.n	8001dd0 <HAL_GPIO_Init+0x204>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a4f      	ldr	r2, [pc, #316]	@ (8001edc <HAL_GPIO_Init+0x310>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d013      	beq.n	8001dcc <HAL_GPIO_Init+0x200>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a4e      	ldr	r2, [pc, #312]	@ (8001ee0 <HAL_GPIO_Init+0x314>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d00d      	beq.n	8001dc8 <HAL_GPIO_Init+0x1fc>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a4d      	ldr	r2, [pc, #308]	@ (8001ee4 <HAL_GPIO_Init+0x318>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d007      	beq.n	8001dc4 <HAL_GPIO_Init+0x1f8>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a4c      	ldr	r2, [pc, #304]	@ (8001ee8 <HAL_GPIO_Init+0x31c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d101      	bne.n	8001dc0 <HAL_GPIO_Init+0x1f4>
 8001dbc:	2307      	movs	r3, #7
 8001dbe:	e00e      	b.n	8001dde <HAL_GPIO_Init+0x212>
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	e00c      	b.n	8001dde <HAL_GPIO_Init+0x212>
 8001dc4:	2306      	movs	r3, #6
 8001dc6:	e00a      	b.n	8001dde <HAL_GPIO_Init+0x212>
 8001dc8:	2305      	movs	r3, #5
 8001dca:	e008      	b.n	8001dde <HAL_GPIO_Init+0x212>
 8001dcc:	2304      	movs	r3, #4
 8001dce:	e006      	b.n	8001dde <HAL_GPIO_Init+0x212>
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e004      	b.n	8001dde <HAL_GPIO_Init+0x212>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e002      	b.n	8001dde <HAL_GPIO_Init+0x212>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <HAL_GPIO_Init+0x212>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	f002 0203 	and.w	r2, r2, #3
 8001de4:	0092      	lsls	r2, r2, #2
 8001de6:	4093      	lsls	r3, r2
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dee:	4937      	ldr	r1, [pc, #220]	@ (8001ecc <HAL_GPIO_Init+0x300>)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	3302      	adds	r3, #2
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dfc:	4b3b      	ldr	r3, [pc, #236]	@ (8001eec <HAL_GPIO_Init+0x320>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e20:	4a32      	ldr	r2, [pc, #200]	@ (8001eec <HAL_GPIO_Init+0x320>)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e26:	4b31      	ldr	r3, [pc, #196]	@ (8001eec <HAL_GPIO_Init+0x320>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4013      	ands	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e4a:	4a28      	ldr	r2, [pc, #160]	@ (8001eec <HAL_GPIO_Init+0x320>)
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e50:	4b26      	ldr	r3, [pc, #152]	@ (8001eec <HAL_GPIO_Init+0x320>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e74:	4a1d      	ldr	r2, [pc, #116]	@ (8001eec <HAL_GPIO_Init+0x320>)
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001eec <HAL_GPIO_Init+0x320>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	43db      	mvns	r3, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e9e:	4a13      	ldr	r2, [pc, #76]	@ (8001eec <HAL_GPIO_Init+0x320>)
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f47f ae91 	bne.w	8001bdc <HAL_GPIO_Init+0x10>
  }
}
 8001eba:	bf00      	nop
 8001ebc:	bf00      	nop
 8001ebe:	371c      	adds	r7, #28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40010000 	.word	0x40010000
 8001ed0:	48000400 	.word	0x48000400
 8001ed4:	48000800 	.word	0x48000800
 8001ed8:	48000c00 	.word	0x48000c00
 8001edc:	48001000 	.word	0x48001000
 8001ee0:	48001400 	.word	0x48001400
 8001ee4:	48001800 	.word	0x48001800
 8001ee8:	48001c00 	.word	0x48001c00
 8001eec:	40010400 	.word	0x40010400

08001ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	807b      	strh	r3, [r7, #2]
 8001efc:	4613      	mov	r3, r2
 8001efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f00:	787b      	ldrb	r3, [r7, #1]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f06:	887a      	ldrh	r2, [r7, #2]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f0c:	e002      	b.n	8001f14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f0e:	887a      	ldrh	r2, [r7, #2]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f2a:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f2c:	695a      	ldr	r2, [r3, #20]
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d006      	beq.n	8001f44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f36:	4a05      	ldr	r2, [pc, #20]	@ (8001f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f806 	bl	8001f50 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40010400 	.word	0x40010400

08001f50 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001f66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f68:	b08f      	sub	sp, #60	@ 0x3c
 8001f6a:	af0a      	add	r7, sp, #40	@ 0x28
 8001f6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e054      	b.n	8002022 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3339 	ldrb.w	r3, [r3, #825]	@ 0x339
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d106      	bne.n	8001f98 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f009 fcfe 	bl	800b994 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	f883 2339 	strb.w	r2, [r3, #825]	@ 0x339

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d102      	bne.n	8001fb2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f005 f9cb 	bl	8007352 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	603b      	str	r3, [r7, #0]
 8001fc2:	687e      	ldr	r6, [r7, #4]
 8001fc4:	466d      	mov	r5, sp
 8001fc6:	f106 0410 	add.w	r4, r6, #16
 8001fca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fd6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fda:	1d33      	adds	r3, r6, #4
 8001fdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fde:	6838      	ldr	r0, [r7, #0]
 8001fe0:	f005 f97a 	bl	80072d8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2101      	movs	r1, #1
 8001fea:	4618      	mov	r0, r3
 8001fec:	f005 f9c2 	bl	8007374 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	603b      	str	r3, [r7, #0]
 8001ff6:	687e      	ldr	r6, [r7, #4]
 8001ff8:	466d      	mov	r5, sp
 8001ffa:	f106 0410 	add.w	r4, r6, #16
 8001ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002006:	e894 0003 	ldmia.w	r4, {r0, r1}
 800200a:	e885 0003 	stmia.w	r5, {r0, r1}
 800200e:	1d33      	adds	r3, r6, #4
 8002010:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002012:	6838      	ldr	r0, [r7, #0]
 8002014:	f005 fb66 	bl	80076e4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2339 	strb.w	r2, [r3, #825]	@ 0x339

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800202a <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800202a:	b590      	push	{r4, r7, lr}
 800202c:	b089      	sub	sp, #36	@ 0x24
 800202e:	af04      	add	r7, sp, #16
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	4608      	mov	r0, r1
 8002034:	4611      	mov	r1, r2
 8002036:	461a      	mov	r2, r3
 8002038:	4603      	mov	r3, r0
 800203a:	70fb      	strb	r3, [r7, #3]
 800203c:	460b      	mov	r3, r1
 800203e:	70bb      	strb	r3, [r7, #2]
 8002040:	4613      	mov	r3, r2
 8002042:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HCcharMps = mps;
 8002044:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002046:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hhcd);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_HCD_HC_Init+0x2c>
 8002052:	2302      	movs	r3, #2
 8002054:	e087      	b.n	8002166 <HAL_HCD_HC_Init+0x13c>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338
  hhcd->hc[ch_num].do_ping = 0U;
 800205e:	78fa      	ldrb	r2, [r7, #3]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	440b      	add	r3, r1
 800206c:	333d      	adds	r3, #61	@ 0x3d
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002072:	78fa      	ldrb	r2, [r7, #3]
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	4413      	add	r3, r2
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	440b      	add	r3, r1
 8002080:	3338      	adds	r3, #56	@ 0x38
 8002082:	787a      	ldrb	r2, [r7, #1]
 8002084:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002086:	78fa      	ldrb	r2, [r7, #3]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	440b      	add	r3, r1
 8002094:	3339      	adds	r3, #57	@ 0x39
 8002096:	78fa      	ldrb	r2, [r7, #3]
 8002098:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800209a:	78fa      	ldrb	r2, [r7, #3]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4413      	add	r3, r2
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	440b      	add	r3, r1
 80020a8:	3340      	adds	r3, #64	@ 0x40
 80020aa:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80020ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	78bb      	ldrb	r3, [r7, #2]
 80020b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020b8:	b2d8      	uxtb	r0, r3
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4413      	add	r3, r2
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	440b      	add	r3, r1
 80020c6:	333a      	adds	r3, #58	@ 0x3a
 80020c8:	4602      	mov	r2, r0
 80020ca:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	4619      	mov	r1, r3
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 fb6b 	bl	80027ac <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80020d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	da0a      	bge.n	80020f4 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80020de:	78fa      	ldrb	r2, [r7, #3]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	440b      	add	r3, r1
 80020ec:	333b      	adds	r3, #59	@ 0x3b
 80020ee:	2201      	movs	r2, #1
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	e009      	b.n	8002108 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80020f4:	78fa      	ldrb	r2, [r7, #3]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	440b      	add	r3, r1
 8002102:	333b      	adds	r3, #59	@ 0x3b
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002108:	78fa      	ldrb	r2, [r7, #3]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	011b      	lsls	r3, r3, #4
 8002114:	440b      	add	r3, r1
 8002116:	333c      	adds	r3, #60	@ 0x3c
 8002118:	f897 2020 	ldrb.w	r2, [r7, #32]
 800211c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800211e:	78fa      	ldrb	r2, [r7, #3]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	b298      	uxth	r0, r3
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	440b      	add	r3, r1
 8002130:	3342      	adds	r3, #66	@ 0x42
 8002132:	4602      	mov	r2, r0
 8002134:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	b29b      	uxth	r3, r3
 800213e:	787c      	ldrb	r4, [r7, #1]
 8002140:	78ba      	ldrb	r2, [r7, #2]
 8002142:	78f9      	ldrb	r1, [r7, #3]
 8002144:	9302      	str	r3, [sp, #8]
 8002146:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	4623      	mov	r3, r4
 8002154:	f005 fc10 	bl	8007978 <USB_HC_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	72fb      	strb	r3, [r7, #11]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338

  return status;
 8002164:	7afb      	ldrb	r3, [r7, #11]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	bd90      	pop	{r4, r7, pc}

0800216e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b084      	sub	sp, #16
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	460b      	mov	r3, r1
 8002178:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_HCD_HC_Halt+0x1e>
 8002188:	2302      	movs	r3, #2
 800218a:	e00f      	b.n	80021ac <HAL_HCD_HC_Halt+0x3e>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f005 fe00 	bl	8007da2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338

  return status;
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	4608      	mov	r0, r1
 80021be:	4611      	mov	r1, r2
 80021c0:	461a      	mov	r2, r3
 80021c2:	4603      	mov	r3, r0
 80021c4:	70fb      	strb	r3, [r7, #3]
 80021c6:	460b      	mov	r3, r1
 80021c8:	70bb      	strb	r3, [r7, #2]
 80021ca:	4613      	mov	r3, r2
 80021cc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4413      	add	r3, r2
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	440b      	add	r3, r1
 80021dc:	333b      	adds	r3, #59	@ 0x3b
 80021de:	78ba      	ldrb	r2, [r7, #2]
 80021e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4413      	add	r3, r2
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	440b      	add	r3, r1
 80021f0:	3340      	adds	r3, #64	@ 0x40
 80021f2:	787a      	ldrb	r2, [r7, #1]
 80021f4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80021f6:	7c3b      	ldrb	r3, [r7, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d114      	bne.n	8002226 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	440b      	add	r3, r1
 800220a:	3344      	adds	r3, #68	@ 0x44
 800220c:	2203      	movs	r2, #3
 800220e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002210:	78fa      	ldrb	r2, [r7, #3]
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4413      	add	r3, r2
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	440b      	add	r3, r1
 800221e:	333d      	adds	r3, #61	@ 0x3d
 8002220:	7f3a      	ldrb	r2, [r7, #28]
 8002222:	701a      	strb	r2, [r3, #0]
 8002224:	e009      	b.n	800223a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002226:	78fa      	ldrb	r2, [r7, #3]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	440b      	add	r3, r1
 8002234:	3344      	adds	r3, #68	@ 0x44
 8002236:	2202      	movs	r2, #2
 8002238:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800223a:	787b      	ldrb	r3, [r7, #1]
 800223c:	2b03      	cmp	r3, #3
 800223e:	f200 80d6 	bhi.w	80023ee <HAL_HCD_HC_SubmitRequest+0x23a>
 8002242:	a201      	add	r2, pc, #4	@ (adr r2, 8002248 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002248:	08002259 	.word	0x08002259
 800224c:	080023d9 	.word	0x080023d9
 8002250:	080022c5 	.word	0x080022c5
 8002254:	0800234f 	.word	0x0800234f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002258:	7c3b      	ldrb	r3, [r7, #16]
 800225a:	2b01      	cmp	r3, #1
 800225c:	f040 80c9 	bne.w	80023f2 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (direction == 0U)
 8002260:	78bb      	ldrb	r3, [r7, #2]
 8002262:	2b00      	cmp	r3, #0
 8002264:	f040 80c5 	bne.w	80023f2 <HAL_HCD_HC_SubmitRequest+0x23e>
        {
          if (length == 0U)
 8002268:	8b3b      	ldrh	r3, [r7, #24]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d109      	bne.n	8002282 <HAL_HCD_HC_SubmitRequest+0xce>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800226e:	78fa      	ldrb	r2, [r7, #3]
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	4413      	add	r3, r2
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	440b      	add	r3, r1
 800227c:	3359      	adds	r3, #89	@ 0x59
 800227e:	2201      	movs	r2, #1
 8002280:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002282:	78fa      	ldrb	r2, [r7, #3]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4413      	add	r3, r2
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	440b      	add	r3, r1
 8002290:	3359      	adds	r3, #89	@ 0x59
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10a      	bne.n	80022ae <HAL_HCD_HC_SubmitRequest+0xfa>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	4413      	add	r3, r2
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	440b      	add	r3, r1
 80022a6:	3344      	adds	r3, #68	@ 0x44
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
            /* Put the PID 1 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
          }
        }
      }
      break;
 80022ac:	e0a1      	b.n	80023f2 <HAL_HCD_HC_SubmitRequest+0x23e>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022ae:	78fa      	ldrb	r2, [r7, #3]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	4413      	add	r3, r2
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	440b      	add	r3, r1
 80022bc:	3344      	adds	r3, #68	@ 0x44
 80022be:	2202      	movs	r2, #2
 80022c0:	701a      	strb	r2, [r3, #0]
      break;
 80022c2:	e096      	b.n	80023f2 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80022c4:	78bb      	ldrb	r3, [r7, #2]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d120      	bne.n	800230c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022ca:	78fa      	ldrb	r2, [r7, #3]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	4413      	add	r3, r2
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	440b      	add	r3, r1
 80022d8:	3359      	adds	r3, #89	@ 0x59
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10a      	bne.n	80022f6 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4413      	add	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	440b      	add	r3, r1
 80022ee:	3344      	adds	r3, #68	@ 0x44
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80022f4:	e07e      	b.n	80023f4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	4413      	add	r3, r2
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	440b      	add	r3, r1
 8002304:	3344      	adds	r3, #68	@ 0x44
 8002306:	2202      	movs	r2, #2
 8002308:	701a      	strb	r2, [r3, #0]
      break;
 800230a:	e073      	b.n	80023f4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4413      	add	r3, r2
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	440b      	add	r3, r1
 800231a:	3358      	adds	r3, #88	@ 0x58
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10a      	bne.n	8002338 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002322:	78fa      	ldrb	r2, [r7, #3]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4413      	add	r3, r2
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	440b      	add	r3, r1
 8002330:	3344      	adds	r3, #68	@ 0x44
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
      break;
 8002336:	e05d      	b.n	80023f4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	440b      	add	r3, r1
 8002346:	3344      	adds	r3, #68	@ 0x44
 8002348:	2202      	movs	r2, #2
 800234a:	701a      	strb	r2, [r3, #0]
      break;
 800234c:	e052      	b.n	80023f4 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800234e:	78bb      	ldrb	r3, [r7, #2]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d120      	bne.n	8002396 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4413      	add	r3, r2
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	440b      	add	r3, r1
 8002362:	3359      	adds	r3, #89	@ 0x59
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10a      	bne.n	8002380 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800236a:	78fa      	ldrb	r2, [r7, #3]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	440b      	add	r3, r1
 8002378:	3344      	adds	r3, #68	@ 0x44
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800237e:	e039      	b.n	80023f4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	440b      	add	r3, r1
 800238e:	3344      	adds	r3, #68	@ 0x44
 8002390:	2202      	movs	r2, #2
 8002392:	701a      	strb	r2, [r3, #0]
      break;
 8002394:	e02e      	b.n	80023f4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	4413      	add	r3, r2
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	440b      	add	r3, r1
 80023a4:	3358      	adds	r3, #88	@ 0x58
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10a      	bne.n	80023c2 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4413      	add	r3, r2
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	440b      	add	r3, r1
 80023ba:	3344      	adds	r3, #68	@ 0x44
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]
      break;
 80023c0:	e018      	b.n	80023f4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023c2:	78fa      	ldrb	r2, [r7, #3]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	440b      	add	r3, r1
 80023d0:	3344      	adds	r3, #68	@ 0x44
 80023d2:	2202      	movs	r2, #2
 80023d4:	701a      	strb	r2, [r3, #0]
      break;
 80023d6:	e00d      	b.n	80023f4 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4413      	add	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	440b      	add	r3, r1
 80023e6:	3344      	adds	r3, #68	@ 0x44
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
      break;
 80023ec:	e002      	b.n	80023f4 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80023ee:	bf00      	nop
 80023f0:	e000      	b.n	80023f4 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80023f2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4413      	add	r3, r2
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	440b      	add	r3, r1
 8002402:	3348      	adds	r3, #72	@ 0x48
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002408:	78fa      	ldrb	r2, [r7, #3]
 800240a:	8b39      	ldrh	r1, [r7, #24]
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	4403      	add	r3, r0
 8002418:	3350      	adds	r3, #80	@ 0x50
 800241a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800241c:	78fa      	ldrb	r2, [r7, #3]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4413      	add	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	440b      	add	r3, r1
 800242a:	3364      	adds	r3, #100	@ 0x64
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	440b      	add	r3, r1
 800243e:	3354      	adds	r3, #84	@ 0x54
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4413      	add	r3, r2
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	440b      	add	r3, r1
 8002452:	3339      	adds	r3, #57	@ 0x39
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	440b      	add	r3, r1
 8002466:	3365      	adds	r3, #101	@ 0x65
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	4613      	mov	r3, r2
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	4413      	add	r3, r2
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	3338      	adds	r3, #56	@ 0x38
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	4413      	add	r3, r2
 8002480:	4619      	mov	r1, r3
 8002482:	f005 fb85 	bl	8007b90 <USB_HC_StartXfer>
 8002486:	4603      	mov	r3, r0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f005 f8da 	bl	8007660 <USB_GetMode>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	f040 80fa 	bne.w	80026a8 <HAL_HCD_IRQHandler+0x218>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f005 f89d 	bl	80075f8 <USB_ReadInterrupts>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80f0 	beq.w	80026a6 <HAL_HCD_IRQHandler+0x216>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f005 f894 	bl	80075f8 <USB_ReadInterrupts>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024da:	d104      	bne.n	80024e6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80024e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f005 f884 	bl	80075f8 <USB_ReadInterrupts>
 80024f0:	4603      	mov	r3, r0
 80024f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024fa:	d104      	bne.n	8002506 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002504:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f005 f874 	bl	80075f8 <USB_ReadInterrupts>
 8002510:	4603      	mov	r3, r0
 8002512:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002516:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800251a:	d104      	bne.n	8002526 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002524:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f005 f864 	bl	80075f8 <USB_ReadInterrupts>
 8002530:	4603      	mov	r3, r0
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b02      	cmp	r3, #2
 8002538:	d103      	bne.n	8002542 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2202      	movs	r2, #2
 8002540:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f005 f856 	bl	80075f8 <USB_ReadInterrupts>
 800254c:	4603      	mov	r3, r0
 800254e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002552:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002556:	d120      	bne.n	800259a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002560:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d113      	bne.n	800259a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002572:	2110      	movs	r1, #16
 8002574:	6938      	ldr	r0, [r7, #16]
 8002576:	f004 ff49 	bl	800740c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800257a:	6938      	ldr	r0, [r7, #16]
 800257c:	f004 ff7a 	bl	8007474 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d105      	bne.n	8002594 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2101      	movs	r1, #1
 800258e:	4618      	mov	r0, r3
 8002590:	f005 f92a 	bl	80077e8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f009 faab 	bl	800baf0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f005 f82a 	bl	80075f8 <USB_ReadInterrupts>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025ae:	d102      	bne.n	80025b6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f001 f90c 	bl	80037ce <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f005 f81c 	bl	80075f8 <USB_ReadInterrupts>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d106      	bne.n	80025d8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f009 fa74 	bl	800bab8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2208      	movs	r2, #8
 80025d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f005 f80b 	bl	80075f8 <USB_ReadInterrupts>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025ec:	d138      	bne.n	8002660 <HAL_HCD_IRQHandler+0x1d0>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f005 fbc4 	bl	8007d80 <USB_HC_ReadInterrupt>
 80025f8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	e025      	b.n	800264c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d018      	beq.n	8002646 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4413      	add	r3, r2
 800261c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002626:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800262a:	d106      	bne.n	800263a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	4619      	mov	r1, r3
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f8db 	bl	80027ee <HCD_HC_IN_IRQHandler>
 8002638:	e005      	b.n	8002646 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	4619      	mov	r1, r3
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 fd0f 	bl	8003064 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	3301      	adds	r3, #1
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	429a      	cmp	r2, r3
 8002654:	d3d4      	bcc.n	8002600 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800265e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f004 ffc7 	bl	80075f8 <USB_ReadInterrupts>
 800266a:	4603      	mov	r3, r0
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b10      	cmp	r3, #16
 8002672:	d101      	bne.n	8002678 <HAL_HCD_IRQHandler+0x1e8>
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <HAL_HCD_IRQHandler+0x1ea>
 8002678:	2300      	movs	r3, #0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d014      	beq.n	80026a8 <HAL_HCD_IRQHandler+0x218>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699a      	ldr	r2, [r3, #24]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0210 	bic.w	r2, r2, #16
 800268c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 ffbe 	bl	8003610 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0210 	orr.w	r2, r2, #16
 80026a2:	619a      	str	r2, [r3, #24]
 80026a4:	e000      	b.n	80026a8 <HAL_HCD_IRQHandler+0x218>
      return;
 80026a6:	bf00      	nop
    }
  }
}
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_HCD_Start+0x16>
 80026c0:	2302      	movs	r3, #2
 80026c2:	e013      	b.n	80026ec <HAL_HCD_Start+0x3e>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2101      	movs	r1, #1
 80026d2:	4618      	mov	r0, r3
 80026d4:	f005 f8ef 	bl	80078b6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f004 fe27 	bl	8007330 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_HCD_Stop+0x16>
 8002706:	2302      	movs	r3, #2
 8002708:	e00d      	b.n	8002726 <HAL_HCD_Stop+0x32>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338
  (void)USB_StopHost(hhcd->Instance);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f005 fc63 	bl	8007fe2 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f005 f891 	bl	8007862 <USB_ResetPort>
 8002740:	4603      	mov	r3, r0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	460b      	mov	r3, r1
 8002754:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002756:	78fa      	ldrb	r2, [r7, #3]
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	4413      	add	r3, r2
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	440b      	add	r3, r1
 8002764:	3364      	adds	r3, #100	@ 0x64
 8002766:	781b      	ldrb	r3, [r3, #0]
}
 8002768:	4618      	mov	r0, r3
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f005 f8e8 	bl	8007956 <USB_GetCurrentFrame>
 8002786:	4603      	mov	r3, r0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f005 f8c3 	bl	8007928 <USB_GetHostSpeed>
 80027a2:	4603      	mov	r3, r0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].hub_addr = 0U;
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	4413      	add	r3, r2
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	440b      	add	r3, r1
 80027c6:	333f      	adds	r3, #63	@ 0x3f
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4413      	add	r3, r2
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	440b      	add	r3, r1
 80027da:	333e      	adds	r3, #62	@ 0x3e
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b086      	sub	sp, #24
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	460b      	mov	r3, r1
 80027f8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	78fa      	ldrb	r2, [r7, #3]
 800280a:	4611      	mov	r1, r2
 800280c:	4618      	mov	r0, r3
 800280e:	f004 ff06 	bl	800761e <USB_ReadChInterrupts>
 8002812:	4603      	mov	r3, r0
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b04      	cmp	r3, #4
 800281a:	d11a      	bne.n	8002852 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800281c:	78fb      	ldrb	r3, [r7, #3]
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4413      	add	r3, r2
 8002824:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002828:	461a      	mov	r2, r3
 800282a:	2304      	movs	r3, #4
 800282c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800282e:	78fa      	ldrb	r2, [r7, #3]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	4413      	add	r3, r2
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	440b      	add	r3, r1
 800283c:	3365      	adds	r3, #101	@ 0x65
 800283e:	2207      	movs	r2, #7
 8002840:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	78fa      	ldrb	r2, [r7, #3]
 8002848:	4611      	mov	r1, r2
 800284a:	4618      	mov	r0, r3
 800284c:	f005 faa9 	bl	8007da2 <USB_HC_Halt>
 8002850:	e09e      	b.n	8002990 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	78fa      	ldrb	r2, [r7, #3]
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f004 fedf 	bl	800761e <USB_ReadChInterrupts>
 8002860:	4603      	mov	r3, r0
 8002862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800286a:	d11b      	bne.n	80028a4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4413      	add	r3, r2
 8002874:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002878:	461a      	mov	r2, r3
 800287a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800287e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002880:	78fa      	ldrb	r2, [r7, #3]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	4413      	add	r3, r2
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	440b      	add	r3, r1
 800288e:	3365      	adds	r3, #101	@ 0x65
 8002890:	2208      	movs	r2, #8
 8002892:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	78fa      	ldrb	r2, [r7, #3]
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f005 fa80 	bl	8007da2 <USB_HC_Halt>
 80028a2:	e075      	b.n	8002990 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	78fa      	ldrb	r2, [r7, #3]
 80028aa:	4611      	mov	r1, r2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f004 feb6 	bl	800761e <USB_ReadChInterrupts>
 80028b2:	4603      	mov	r3, r0
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d11a      	bne.n	80028f2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028c8:	461a      	mov	r2, r3
 80028ca:	2308      	movs	r3, #8
 80028cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	4413      	add	r3, r2
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	440b      	add	r3, r1
 80028dc:	3365      	adds	r3, #101	@ 0x65
 80028de:	2206      	movs	r2, #6
 80028e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	4611      	mov	r1, r2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f005 fa59 	bl	8007da2 <USB_HC_Halt>
 80028f0:	e04e      	b.n	8002990 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	78fa      	ldrb	r2, [r7, #3]
 80028f8:	4611      	mov	r1, r2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f004 fe8f 	bl	800761e <USB_ReadChInterrupts>
 8002900:	4603      	mov	r3, r0
 8002902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002906:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800290a:	d11b      	bne.n	8002944 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4413      	add	r3, r2
 8002914:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002918:	461a      	mov	r2, r3
 800291a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800291e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002920:	78fa      	ldrb	r2, [r7, #3]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	4413      	add	r3, r2
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	440b      	add	r3, r1
 800292e:	3365      	adds	r3, #101	@ 0x65
 8002930:	2209      	movs	r2, #9
 8002932:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	78fa      	ldrb	r2, [r7, #3]
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f005 fa30 	bl	8007da2 <USB_HC_Halt>
 8002942:	e025      	b.n	8002990 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	78fa      	ldrb	r2, [r7, #3]
 800294a:	4611      	mov	r1, r2
 800294c:	4618      	mov	r0, r3
 800294e:	f004 fe66 	bl	800761e <USB_ReadChInterrupts>
 8002952:	4603      	mov	r3, r0
 8002954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002958:	2b80      	cmp	r3, #128	@ 0x80
 800295a:	d119      	bne.n	8002990 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800295c:	78fb      	ldrb	r3, [r7, #3]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002968:	461a      	mov	r2, r3
 800296a:	2380      	movs	r3, #128	@ 0x80
 800296c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4413      	add	r3, r2
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	440b      	add	r3, r1
 800297c:	3365      	adds	r3, #101	@ 0x65
 800297e:	2207      	movs	r2, #7
 8002980:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	78fa      	ldrb	r2, [r7, #3]
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f005 fa09 	bl	8007da2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	4611      	mov	r1, r2
 8002998:	4618      	mov	r0, r3
 800299a:	f004 fe40 	bl	800761e <USB_ReadChInterrupts>
 800299e:	4603      	mov	r3, r0
 80029a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029a8:	d111      	bne.n	80029ce <HCD_HC_IN_IRQHandler+0x1e0>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	78fa      	ldrb	r2, [r7, #3]
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f005 f9f5 	bl	8007da2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029c4:	461a      	mov	r2, r3
 80029c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029ca:	6093      	str	r3, [r2, #8]
 80029cc:	e347      	b.n	800305e <HCD_HC_IN_IRQHandler+0x870>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	4611      	mov	r1, r2
 80029d6:	4618      	mov	r0, r3
 80029d8:	f004 fe21 	bl	800761e <USB_ReadChInterrupts>
 80029dc:	4603      	mov	r3, r0
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	f040 80d8 	bne.w	8002b98 <HCD_HC_IN_IRQHandler+0x3aa>
  {
    hhcd->hc[chnum].state = HC_XFRC;
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	4413      	add	r3, r2
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	440b      	add	r3, r1
 80029f6:	3365      	adds	r3, #101	@ 0x65
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80029fc:	78fa      	ldrb	r2, [r7, #3]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4413      	add	r3, r2
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	440b      	add	r3, r1
 8002a0a:	3360      	adds	r3, #96	@ 0x60
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002a10:	78fb      	ldrb	r3, [r7, #3]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	2301      	movs	r3, #1
 8002a20:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	4413      	add	r3, r2
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	440b      	add	r3, r1
 8002a30:	3340      	adds	r3, #64	@ 0x40
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00a      	beq.n	8002a4e <HCD_HC_IN_IRQHandler+0x260>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a38:	78fa      	ldrb	r2, [r7, #3]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	440b      	add	r3, r1
 8002a46:	3340      	adds	r3, #64	@ 0x40
 8002a48:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d110      	bne.n	8002a70 <HCD_HC_IN_IRQHandler+0x282>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	78fa      	ldrb	r2, [r7, #3]
 8002a54:	4611      	mov	r1, r2
 8002a56:	4618      	mov	r0, r3
 8002a58:	f005 f9a3 	bl	8007da2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a68:	461a      	mov	r2, r3
 8002a6a:	2310      	movs	r3, #16
 8002a6c:	6093      	str	r3, [r2, #8]
 8002a6e:	e03d      	b.n	8002aec <HCD_HC_IN_IRQHandler+0x2fe>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002a70:	78fa      	ldrb	r2, [r7, #3]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4413      	add	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	440b      	add	r3, r1
 8002a7e:	3340      	adds	r3, #64	@ 0x40
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d00a      	beq.n	8002a9c <HCD_HC_IN_IRQHandler+0x2ae>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002a86:	78fa      	ldrb	r2, [r7, #3]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	4413      	add	r3, r2
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	440b      	add	r3, r1
 8002a94:	3340      	adds	r3, #64	@ 0x40
 8002a96:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d127      	bne.n	8002aec <HCD_HC_IN_IRQHandler+0x2fe>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	78fa      	ldrb	r2, [r7, #3]
 8002aac:	0151      	lsls	r1, r2, #5
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	440a      	add	r2, r1
 8002ab2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ab6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002aba:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002abc:	78fa      	ldrb	r2, [r7, #3]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	440b      	add	r3, r1
 8002aca:	3364      	adds	r3, #100	@ 0x64
 8002acc:	2201      	movs	r2, #1
 8002ace:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002ad0:	78fa      	ldrb	r2, [r7, #3]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	4413      	add	r3, r2
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	440b      	add	r3, r1
 8002ade:	3364      	adds	r3, #100	@ 0x64
 8002ae0:	781a      	ldrb	r2, [r3, #0]
 8002ae2:	78fb      	ldrb	r3, [r7, #3]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f009 f810 	bl	800bb0c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d13a      	bne.n	8002b6a <HCD_HC_IN_IRQHandler+0x37c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	4413      	add	r3, r2
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	440b      	add	r3, r1
 8002b02:	3354      	adds	r3, #84	@ 0x54
 8002b04:	6819      	ldr	r1, [r3, #0]
 8002b06:	78fa      	ldrb	r2, [r7, #3]
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	4413      	add	r3, r2
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	4403      	add	r3, r0
 8002b14:	3342      	adds	r3, #66	@ 0x42
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	440b      	add	r3, r1
 8002b1a:	1e59      	subs	r1, r3, #1
 8002b1c:	78fa      	ldrb	r2, [r7, #3]
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4413      	add	r3, r2
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	4403      	add	r3, r0
 8002b2a:	3342      	adds	r3, #66	@ 0x42
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 8291 	beq.w	800305e <HCD_HC_IN_IRQHandler+0x870>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4413      	add	r3, r2
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	440b      	add	r3, r1
 8002b4a:	3358      	adds	r3, #88	@ 0x58
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	f083 0301 	eor.w	r3, r3, #1
 8002b54:	b2d8      	uxtb	r0, r3
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4413      	add	r3, r2
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	440b      	add	r3, r1
 8002b62:	3358      	adds	r3, #88	@ 0x58
 8002b64:	4602      	mov	r2, r0
 8002b66:	701a      	strb	r2, [r3, #0]
 8002b68:	e279      	b.n	800305e <HCD_HC_IN_IRQHandler+0x870>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	440b      	add	r3, r1
 8002b78:	3358      	adds	r3, #88	@ 0x58
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	78fa      	ldrb	r2, [r7, #3]
 8002b7e:	f083 0301 	eor.w	r3, r3, #1
 8002b82:	b2d8      	uxtb	r0, r3
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4413      	add	r3, r2
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	440b      	add	r3, r1
 8002b90:	3358      	adds	r3, #88	@ 0x58
 8002b92:	4602      	mov	r2, r0
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	e262      	b.n	800305e <HCD_HC_IN_IRQHandler+0x870>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	78fa      	ldrb	r2, [r7, #3]
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f004 fd3c 	bl	800761e <USB_ReadChInterrupts>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f003 0320 	and.w	r3, r3, #32
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d109      	bne.n	8002bc4 <HCD_HC_IN_IRQHandler+0x3d6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002bb0:	78fb      	ldrb	r3, [r7, #3]
 8002bb2:	015a      	lsls	r2, r3, #5
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	2320      	movs	r3, #32
 8002bc0:	6093      	str	r3, [r2, #8]
 8002bc2:	e24c      	b.n	800305e <HCD_HC_IN_IRQHandler+0x870>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	78fa      	ldrb	r2, [r7, #3]
 8002bca:	4611      	mov	r1, r2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f004 fd26 	bl	800761e <USB_ReadChInterrupts>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	f040 81a0 	bne.w	8002f1e <HCD_HC_IN_IRQHandler+0x730>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002bde:	78fb      	ldrb	r3, [r7, #3]
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bea:	461a      	mov	r2, r3
 8002bec:	2302      	movs	r3, #2
 8002bee:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4413      	add	r3, r2
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	440b      	add	r3, r1
 8002bfe:	3365      	adds	r3, #101	@ 0x65
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d114      	bne.n	8002c30 <HCD_HC_IN_IRQHandler+0x442>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	4413      	add	r3, r2
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	440b      	add	r3, r1
 8002c14:	3365      	adds	r3, #101	@ 0x65
 8002c16:	2202      	movs	r2, #2
 8002c18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4413      	add	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	440b      	add	r3, r1
 8002c28:	3364      	adds	r3, #100	@ 0x64
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	701a      	strb	r2, [r3, #0]
 8002c2e:	e167      	b.n	8002f00 <HCD_HC_IN_IRQHandler+0x712>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002c30:	78fa      	ldrb	r2, [r7, #3]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4413      	add	r3, r2
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	440b      	add	r3, r1
 8002c3e:	3365      	adds	r3, #101	@ 0x65
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b06      	cmp	r3, #6
 8002c44:	d114      	bne.n	8002c70 <HCD_HC_IN_IRQHandler+0x482>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	4413      	add	r3, r2
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	440b      	add	r3, r1
 8002c54:	3365      	adds	r3, #101	@ 0x65
 8002c56:	2202      	movs	r2, #2
 8002c58:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	4413      	add	r3, r2
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	440b      	add	r3, r1
 8002c68:	3364      	adds	r3, #100	@ 0x64
 8002c6a:	2205      	movs	r2, #5
 8002c6c:	701a      	strb	r2, [r3, #0]
 8002c6e:	e147      	b.n	8002f00 <HCD_HC_IN_IRQHandler+0x712>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	4413      	add	r3, r2
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	440b      	add	r3, r1
 8002c7e:	3365      	adds	r3, #101	@ 0x65
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b07      	cmp	r3, #7
 8002c84:	d00a      	beq.n	8002c9c <HCD_HC_IN_IRQHandler+0x4ae>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002c86:	78fa      	ldrb	r2, [r7, #3]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	4413      	add	r3, r2
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	440b      	add	r3, r1
 8002c94:	3365      	adds	r3, #101	@ 0x65
 8002c96:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002c98:	2b09      	cmp	r3, #9
 8002c9a:	d176      	bne.n	8002d8a <HCD_HC_IN_IRQHandler+0x59c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c9c:	78fa      	ldrb	r2, [r7, #3]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	4413      	add	r3, r2
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	440b      	add	r3, r1
 8002caa:	3365      	adds	r3, #101	@ 0x65
 8002cac:	2202      	movs	r2, #2
 8002cae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3360      	adds	r3, #96	@ 0x60
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	1c59      	adds	r1, r3, #1
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	4413      	add	r3, r2
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	4403      	add	r3, r0
 8002cd0:	3360      	adds	r3, #96	@ 0x60
 8002cd2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002cd4:	78fa      	ldrb	r2, [r7, #3]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	4413      	add	r3, r2
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	440b      	add	r3, r1
 8002ce2:	3360      	adds	r3, #96	@ 0x60
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d914      	bls.n	8002d14 <HCD_HC_IN_IRQHandler+0x526>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4413      	add	r3, r2
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	440b      	add	r3, r1
 8002cf8:	3360      	adds	r3, #96	@ 0x60
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	4413      	add	r3, r2
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	440b      	add	r3, r1
 8002d0c:	3364      	adds	r3, #100	@ 0x64
 8002d0e:	2204      	movs	r2, #4
 8002d10:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d12:	e0f4      	b.n	8002efe <HCD_HC_IN_IRQHandler+0x710>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	440b      	add	r3, r1
 8002d22:	3364      	adds	r3, #100	@ 0x64
 8002d24:	2202      	movs	r2, #2
 8002d26:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	4413      	add	r3, r2
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	440b      	add	r3, r1
 8002d36:	3340      	adds	r3, #64	@ 0x40
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00b      	beq.n	8002d56 <HCD_HC_IN_IRQHandler+0x568>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	440b      	add	r3, r1
 8002d4c:	3340      	adds	r3, #64	@ 0x40
 8002d4e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	f040 80d4 	bne.w	8002efe <HCD_HC_IN_IRQHandler+0x710>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	015a      	lsls	r2, r3, #5
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002d6c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d74:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	015a      	lsls	r2, r3, #5
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d82:	461a      	mov	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d88:	e0b9      	b.n	8002efe <HCD_HC_IN_IRQHandler+0x710>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4413      	add	r3, r2
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	440b      	add	r3, r1
 8002d98:	3365      	adds	r3, #101	@ 0x65
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b05      	cmp	r3, #5
 8002d9e:	d10a      	bne.n	8002db6 <HCD_HC_IN_IRQHandler+0x5c8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4413      	add	r3, r2
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	440b      	add	r3, r1
 8002dae:	3365      	adds	r3, #101	@ 0x65
 8002db0:	2202      	movs	r2, #2
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	e0a4      	b.n	8002f00 <HCD_HC_IN_IRQHandler+0x712>
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	4413      	add	r3, r2
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	440b      	add	r3, r1
 8002dc4:	3365      	adds	r3, #101	@ 0x65
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d10a      	bne.n	8002de2 <HCD_HC_IN_IRQHandler+0x5f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	4413      	add	r3, r2
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	440b      	add	r3, r1
 8002dda:	3365      	adds	r3, #101	@ 0x65
 8002ddc:	2202      	movs	r2, #2
 8002dde:	701a      	strb	r2, [r3, #0]
 8002de0:	e08e      	b.n	8002f00 <HCD_HC_IN_IRQHandler+0x712>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002de2:	78fa      	ldrb	r2, [r7, #3]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4413      	add	r3, r2
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	440b      	add	r3, r1
 8002df0:	3365      	adds	r3, #101	@ 0x65
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d143      	bne.n	8002e80 <HCD_HC_IN_IRQHandler+0x692>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4413      	add	r3, r2
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	440b      	add	r3, r1
 8002e06:	3365      	adds	r3, #101	@ 0x65
 8002e08:	2202      	movs	r2, #2
 8002e0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4413      	add	r3, r2
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	440b      	add	r3, r1
 8002e1a:	3364      	adds	r3, #100	@ 0x64
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4413      	add	r3, r2
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3340      	adds	r3, #64	@ 0x40
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <HCD_HC_IN_IRQHandler+0x65e>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e36:	78fa      	ldrb	r2, [r7, #3]
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	4413      	add	r3, r2
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	440b      	add	r3, r1
 8002e44:	3340      	adds	r3, #64	@ 0x40
 8002e46:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d159      	bne.n	8002f00 <HCD_HC_IN_IRQHandler+0x712>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002e62:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e6a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e78:	461a      	mov	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e03f      	b.n	8002f00 <HCD_HC_IN_IRQHandler+0x712>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3365      	adds	r3, #101	@ 0x65
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d126      	bne.n	8002ee4 <HCD_HC_IN_IRQHandler+0x6f6>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	4413      	add	r3, r2
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	440b      	add	r3, r1
 8002ea4:	3365      	adds	r3, #101	@ 0x65
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002eaa:	78fa      	ldrb	r2, [r7, #3]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4413      	add	r3, r2
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	440b      	add	r3, r1
 8002eb8:	3360      	adds	r3, #96	@ 0x60
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	1c59      	adds	r1, r3, #1
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	4413      	add	r3, r2
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	4403      	add	r3, r0
 8002eca:	3360      	adds	r3, #96	@ 0x60
 8002ecc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4413      	add	r3, r2
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	440b      	add	r3, r1
 8002edc:	3364      	adds	r3, #100	@ 0x64
 8002ede:	2204      	movs	r2, #4
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	e00d      	b.n	8002f00 <HCD_HC_IN_IRQHandler+0x712>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4413      	add	r3, r2
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3365      	adds	r3, #101	@ 0x65
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	f000 80b0 	beq.w	800305c <HCD_HC_IN_IRQHandler+0x86e>
 8002efc:	e000      	b.n	8002f00 <HCD_HC_IN_IRQHandler+0x712>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002efe:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4413      	add	r3, r2
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	440b      	add	r3, r1
 8002f0e:	3364      	adds	r3, #100	@ 0x64
 8002f10:	781a      	ldrb	r2, [r3, #0]
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	4619      	mov	r1, r3
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f008 fdf8 	bl	800bb0c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f1c:	e09f      	b.n	800305e <HCD_HC_IN_IRQHandler+0x870>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f004 fb79 	bl	800761e <USB_ReadChInterrupts>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f32:	2b40      	cmp	r3, #64	@ 0x40
 8002f34:	d124      	bne.n	8002f80 <HCD_HC_IN_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f36:	78fb      	ldrb	r3, [r7, #3]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f42:	461a      	mov	r2, r3
 8002f44:	2340      	movs	r3, #64	@ 0x40
 8002f46:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	4413      	add	r3, r2
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	440b      	add	r3, r1
 8002f56:	3365      	adds	r3, #101	@ 0x65
 8002f58:	2205      	movs	r2, #5
 8002f5a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	4413      	add	r3, r2
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	440b      	add	r3, r1
 8002f6a:	3360      	adds	r3, #96	@ 0x60
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	4611      	mov	r1, r2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f004 ff12 	bl	8007da2 <USB_HC_Halt>
 8002f7e:	e06e      	b.n	800305e <HCD_HC_IN_IRQHandler+0x870>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	4611      	mov	r1, r2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f004 fb48 	bl	800761e <USB_ReadChInterrupts>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	2b10      	cmp	r3, #16
 8002f96:	d162      	bne.n	800305e <HCD_HC_IN_IRQHandler+0x870>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	4413      	add	r3, r2
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	440b      	add	r3, r1
 8002fa6:	3340      	adds	r3, #64	@ 0x40
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d11b      	bne.n	8002fe6 <HCD_HC_IN_IRQHandler+0x7f8>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002fae:	78fa      	ldrb	r2, [r7, #3]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4413      	add	r3, r2
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	440b      	add	r3, r1
 8002fbc:	3360      	adds	r3, #96	@ 0x60
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002fc2:	78fa      	ldrb	r2, [r7, #3]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4413      	add	r3, r2
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	440b      	add	r3, r1
 8002fd0:	3365      	adds	r3, #101	@ 0x65
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f004 fedf 	bl	8007da2 <USB_HC_Halt>
 8002fe4:	e030      	b.n	8003048 <HCD_HC_IN_IRQHandler+0x85a>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4413      	add	r3, r2
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3340      	adds	r3, #64	@ 0x40
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00a      	beq.n	8003012 <HCD_HC_IN_IRQHandler+0x824>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ffc:	78fa      	ldrb	r2, [r7, #3]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4413      	add	r3, r2
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	440b      	add	r3, r1
 800300a:	3340      	adds	r3, #64	@ 0x40
 800300c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800300e:	2b02      	cmp	r3, #2
 8003010:	d11a      	bne.n	8003048 <HCD_HC_IN_IRQHandler+0x85a>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	4413      	add	r3, r2
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	440b      	add	r3, r1
 8003020:	3360      	adds	r3, #96	@ 0x60
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003026:	78fa      	ldrb	r2, [r7, #3]
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	4413      	add	r3, r2
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	440b      	add	r3, r1
 8003034:	3365      	adds	r3, #101	@ 0x65
 8003036:	2204      	movs	r2, #4
 8003038:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f004 fead 	bl	8007da2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4413      	add	r3, r2
 8003050:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003054:	461a      	mov	r2, r3
 8003056:	2310      	movs	r3, #16
 8003058:	6093      	str	r3, [r2, #8]
 800305a:	e000      	b.n	800305e <HCD_HC_IN_IRQHandler+0x870>
        return;
 800305c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f004 facb 	bl	800761e <USB_ReadChInterrupts>
 8003088:	4603      	mov	r3, r0
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	2b04      	cmp	r3, #4
 8003090:	d11a      	bne.n	80030c8 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	015a      	lsls	r2, r3, #5
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4413      	add	r3, r2
 800309a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800309e:	461a      	mov	r2, r3
 80030a0:	2304      	movs	r3, #4
 80030a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80030a4:	78fa      	ldrb	r2, [r7, #3]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4413      	add	r3, r2
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	440b      	add	r3, r1
 80030b2:	3365      	adds	r3, #101	@ 0x65
 80030b4:	2207      	movs	r2, #7
 80030b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	4611      	mov	r1, r2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f004 fe6e 	bl	8007da2 <USB_HC_Halt>
 80030c6:	e2a0      	b.n	800360a <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	78fa      	ldrb	r2, [r7, #3]
 80030ce:	4611      	mov	r1, r2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f004 faa4 	bl	800761e <USB_ReadChInterrupts>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b20      	cmp	r3, #32
 80030de:	d109      	bne.n	80030f4 <HCD_HC_OUT_IRQHandler+0x90>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ec:	461a      	mov	r2, r3
 80030ee:	2320      	movs	r3, #32
 80030f0:	6093      	str	r3, [r2, #8]
 80030f2:	e28a      	b.n	800360a <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	4611      	mov	r1, r2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f004 fa8e 	bl	800761e <USB_ReadChInterrupts>
 8003102:	4603      	mov	r3, r0
 8003104:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003108:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800310c:	d111      	bne.n	8003132 <HCD_HC_OUT_IRQHandler+0xce>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	015a      	lsls	r2, r3, #5
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4413      	add	r3, r2
 8003116:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800311a:	461a      	mov	r2, r3
 800311c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003120:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	4611      	mov	r1, r2
 800312a:	4618      	mov	r0, r3
 800312c:	f004 fe39 	bl	8007da2 <USB_HC_Halt>
 8003130:	e26b      	b.n	800360a <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f004 fa6f 	bl	800761e <USB_ReadChInterrupts>
 8003140:	4603      	mov	r3, r0
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b01      	cmp	r3, #1
 8003148:	d124      	bne.n	8003194 <HCD_HC_OUT_IRQHandler+0x130>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	440b      	add	r3, r1
 8003158:	3360      	adds	r3, #96	@ 0x60
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4413      	add	r3, r2
 8003166:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800316a:	461a      	mov	r2, r3
 800316c:	2301      	movs	r3, #1
 800316e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	4413      	add	r3, r2
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	440b      	add	r3, r1
 800317e:	3365      	adds	r3, #101	@ 0x65
 8003180:	2201      	movs	r2, #1
 8003182:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	4611      	mov	r1, r2
 800318c:	4618      	mov	r0, r3
 800318e:	f004 fe08 	bl	8007da2 <USB_HC_Halt>
 8003192:	e23a      	b.n	800360a <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	78fa      	ldrb	r2, [r7, #3]
 800319a:	4611      	mov	r1, r2
 800319c:	4618      	mov	r0, r3
 800319e:	f004 fa3e 	bl	800761e <USB_ReadChInterrupts>
 80031a2:	4603      	mov	r3, r0
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d11a      	bne.n	80031e2 <HCD_HC_OUT_IRQHandler+0x17e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031b8:	461a      	mov	r2, r3
 80031ba:	2308      	movs	r3, #8
 80031bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	4413      	add	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	440b      	add	r3, r1
 80031cc:	3365      	adds	r3, #101	@ 0x65
 80031ce:	2206      	movs	r2, #6
 80031d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	4611      	mov	r1, r2
 80031da:	4618      	mov	r0, r3
 80031dc:	f004 fde1 	bl	8007da2 <USB_HC_Halt>
 80031e0:	e213      	b.n	800360a <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	78fa      	ldrb	r2, [r7, #3]
 80031e8:	4611      	mov	r1, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f004 fa17 	bl	800761e <USB_ReadChInterrupts>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b10      	cmp	r3, #16
 80031f8:	d124      	bne.n	8003244 <HCD_HC_OUT_IRQHandler+0x1e0>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80031fa:	78fa      	ldrb	r2, [r7, #3]
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	4413      	add	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	440b      	add	r3, r1
 8003208:	3360      	adds	r3, #96	@ 0x60
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800320e:	78fa      	ldrb	r2, [r7, #3]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	4413      	add	r3, r2
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	440b      	add	r3, r1
 800321c:	3365      	adds	r3, #101	@ 0x65
 800321e:	2204      	movs	r2, #4
 8003220:	701a      	strb	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	4611      	mov	r1, r2
 800322a:	4618      	mov	r0, r3
 800322c:	f004 fdb9 	bl	8007da2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4413      	add	r3, r2
 8003238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800323c:	461a      	mov	r2, r3
 800323e:	2310      	movs	r3, #16
 8003240:	6093      	str	r3, [r2, #8]
 8003242:	e1e2      	b.n	800360a <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	78fa      	ldrb	r2, [r7, #3]
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f004 f9e6 	bl	800761e <USB_ReadChInterrupts>
 8003252:	4603      	mov	r3, r0
 8003254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003258:	2b80      	cmp	r3, #128	@ 0x80
 800325a:	d11a      	bne.n	8003292 <HCD_HC_OUT_IRQHandler+0x22e>
  {
    hhcd->hc[chnum].state = HC_XACTERR;
 800325c:	78fa      	ldrb	r2, [r7, #3]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4413      	add	r3, r2
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	440b      	add	r3, r1
 800326a:	3365      	adds	r3, #101	@ 0x65
 800326c:	2207      	movs	r2, #7
 800326e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	78fa      	ldrb	r2, [r7, #3]
 8003276:	4611      	mov	r1, r2
 8003278:	4618      	mov	r0, r3
 800327a:	f004 fd92 	bl	8007da2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4413      	add	r3, r2
 8003286:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800328a:	461a      	mov	r2, r3
 800328c:	2380      	movs	r3, #128	@ 0x80
 800328e:	6093      	str	r3, [r2, #8]
 8003290:	e1bb      	b.n	800360a <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	4611      	mov	r1, r2
 800329a:	4618      	mov	r0, r3
 800329c:	f004 f9bf 	bl	800761e <USB_ReadChInterrupts>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032aa:	d11b      	bne.n	80032e4 <HCD_HC_OUT_IRQHandler+0x280>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4413      	add	r3, r2
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	440b      	add	r3, r1
 80032ba:	3365      	adds	r3, #101	@ 0x65
 80032bc:	2209      	movs	r2, #9
 80032be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	4611      	mov	r1, r2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f004 fd6a 	bl	8007da2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80032ce:	78fb      	ldrb	r3, [r7, #3]
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032da:	461a      	mov	r2, r3
 80032dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032e0:	6093      	str	r3, [r2, #8]
 80032e2:	e192      	b.n	800360a <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	78fa      	ldrb	r2, [r7, #3]
 80032ea:	4611      	mov	r1, r2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f004 f996 	bl	800761e <USB_ReadChInterrupts>
 80032f2:	4603      	mov	r3, r0
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	f040 8183 	bne.w	8003604 <HCD_HC_OUT_IRQHandler+0x5a0>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80032fe:	78fb      	ldrb	r3, [r7, #3]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4413      	add	r3, r2
 8003306:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800330a:	461a      	mov	r2, r3
 800330c:	2302      	movs	r3, #2
 800330e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	4413      	add	r3, r2
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	440b      	add	r3, r1
 800331e:	3365      	adds	r3, #101	@ 0x65
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b01      	cmp	r3, #1
 8003324:	f040 8093 	bne.w	800344e <HCD_HC_OUT_IRQHandler+0x3ea>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	4413      	add	r3, r2
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	440b      	add	r3, r1
 8003336:	3365      	adds	r3, #101	@ 0x65
 8003338:	2202      	movs	r2, #2
 800333a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	4413      	add	r3, r2
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	440b      	add	r3, r1
 800334a:	3364      	adds	r3, #100	@ 0x64
 800334c:	2201      	movs	r2, #1
 800334e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003350:	78fa      	ldrb	r2, [r7, #3]
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	4413      	add	r3, r2
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	440b      	add	r3, r1
 800335e:	3340      	adds	r3, #64	@ 0x40
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d00b      	beq.n	800337e <HCD_HC_OUT_IRQHandler+0x31a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003366:	78fa      	ldrb	r2, [r7, #3]
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	4413      	add	r3, r2
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	440b      	add	r3, r1
 8003374:	3340      	adds	r3, #64	@ 0x40
 8003376:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003378:	2b03      	cmp	r3, #3
 800337a:	f040 8134 	bne.w	80035e6 <HCD_HC_OUT_IRQHandler+0x582>
      {
        if (hhcd->Init.dma_enable == 0U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d115      	bne.n	80033b2 <HCD_HC_OUT_IRQHandler+0x34e>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003386:	78fa      	ldrb	r2, [r7, #3]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	4413      	add	r3, r2
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	440b      	add	r3, r1
 8003394:	3359      	adds	r3, #89	@ 0x59
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	78fa      	ldrb	r2, [r7, #3]
 800339a:	f083 0301 	eor.w	r3, r3, #1
 800339e:	b2d8      	uxtb	r0, r3
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	4413      	add	r3, r2
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	440b      	add	r3, r1
 80033ac:	3359      	adds	r3, #89	@ 0x59
 80033ae:	4602      	mov	r2, r0
 80033b0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	f040 8115 	bne.w	80035e6 <HCD_HC_OUT_IRQHandler+0x582>
 80033bc:	78fa      	ldrb	r2, [r7, #3]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	4413      	add	r3, r2
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	440b      	add	r3, r1
 80033ca:	3350      	adds	r3, #80	@ 0x50
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8109 	beq.w	80035e6 <HCD_HC_OUT_IRQHandler+0x582>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	4413      	add	r3, r2
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	440b      	add	r3, r1
 80033e2:	3350      	adds	r3, #80	@ 0x50
 80033e4:	6819      	ldr	r1, [r3, #0]
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	4413      	add	r3, r2
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	4403      	add	r3, r0
 80033f4:	3342      	adds	r3, #66	@ 0x42
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	440b      	add	r3, r1
 80033fa:	1e59      	subs	r1, r3, #1
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	4413      	add	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	4403      	add	r3, r0
 800340a:	3342      	adds	r3, #66	@ 0x42
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003412:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 80e3 	beq.w	80035e6 <HCD_HC_OUT_IRQHandler+0x582>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	4413      	add	r3, r2
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	440b      	add	r3, r1
 800342e:	3359      	adds	r3, #89	@ 0x59
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	f083 0301 	eor.w	r3, r3, #1
 8003438:	b2d8      	uxtb	r0, r3
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4413      	add	r3, r2
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	440b      	add	r3, r1
 8003446:	3359      	adds	r3, #89	@ 0x59
 8003448:	4602      	mov	r2, r0
 800344a:	701a      	strb	r2, [r3, #0]
 800344c:	e0cb      	b.n	80035e6 <HCD_HC_OUT_IRQHandler+0x582>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800344e:	78fa      	ldrb	r2, [r7, #3]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	4413      	add	r3, r2
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	440b      	add	r3, r1
 800345c:	3365      	adds	r3, #101	@ 0x65
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b03      	cmp	r3, #3
 8003462:	d10a      	bne.n	800347a <HCD_HC_OUT_IRQHandler+0x416>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	440b      	add	r3, r1
 8003472:	3365      	adds	r3, #101	@ 0x65
 8003474:	2202      	movs	r2, #2
 8003476:	701a      	strb	r2, [r3, #0]
 8003478:	e0b5      	b.n	80035e6 <HCD_HC_OUT_IRQHandler+0x582>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	4413      	add	r3, r2
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	440b      	add	r3, r1
 8003488:	3365      	adds	r3, #101	@ 0x65
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b04      	cmp	r3, #4
 800348e:	d114      	bne.n	80034ba <HCD_HC_OUT_IRQHandler+0x456>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	4413      	add	r3, r2
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	440b      	add	r3, r1
 800349e:	3365      	adds	r3, #101	@ 0x65
 80034a0:	2202      	movs	r2, #2
 80034a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	4413      	add	r3, r2
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	440b      	add	r3, r1
 80034b2:	3364      	adds	r3, #100	@ 0x64
 80034b4:	2202      	movs	r2, #2
 80034b6:	701a      	strb	r2, [r3, #0]
 80034b8:	e095      	b.n	80035e6 <HCD_HC_OUT_IRQHandler+0x582>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	4413      	add	r3, r2
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	440b      	add	r3, r1
 80034c8:	3365      	adds	r3, #101	@ 0x65
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b06      	cmp	r3, #6
 80034ce:	d114      	bne.n	80034fa <HCD_HC_OUT_IRQHandler+0x496>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4413      	add	r3, r2
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	440b      	add	r3, r1
 80034de:	3365      	adds	r3, #101	@ 0x65
 80034e0:	2202      	movs	r2, #2
 80034e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4413      	add	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	440b      	add	r3, r1
 80034f2:	3364      	adds	r3, #100	@ 0x64
 80034f4:	2205      	movs	r2, #5
 80034f6:	701a      	strb	r2, [r3, #0]
 80034f8:	e075      	b.n	80035e6 <HCD_HC_OUT_IRQHandler+0x582>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80034fa:	78fa      	ldrb	r2, [r7, #3]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	4413      	add	r3, r2
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	440b      	add	r3, r1
 8003508:	3365      	adds	r3, #101	@ 0x65
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b07      	cmp	r3, #7
 800350e:	d00a      	beq.n	8003526 <HCD_HC_OUT_IRQHandler+0x4c2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	4413      	add	r3, r2
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	440b      	add	r3, r1
 800351e:	3365      	adds	r3, #101	@ 0x65
 8003520:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003522:	2b09      	cmp	r3, #9
 8003524:	d170      	bne.n	8003608 <HCD_HC_OUT_IRQHandler+0x5a4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003526:	78fa      	ldrb	r2, [r7, #3]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	440b      	add	r3, r1
 8003534:	3365      	adds	r3, #101	@ 0x65
 8003536:	2202      	movs	r2, #2
 8003538:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800353a:	78fa      	ldrb	r2, [r7, #3]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	4413      	add	r3, r2
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	440b      	add	r3, r1
 8003548:	3360      	adds	r3, #96	@ 0x60
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	1c59      	adds	r1, r3, #1
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4413      	add	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	4403      	add	r3, r0
 800355a:	3360      	adds	r3, #96	@ 0x60
 800355c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	4413      	add	r3, r2
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	440b      	add	r3, r1
 800356c:	3360      	adds	r3, #96	@ 0x60
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d914      	bls.n	800359e <HCD_HC_OUT_IRQHandler+0x53a>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	4413      	add	r3, r2
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	440b      	add	r3, r1
 8003582:	3360      	adds	r3, #96	@ 0x60
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	4413      	add	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	440b      	add	r3, r1
 8003596:	3364      	adds	r3, #100	@ 0x64
 8003598:	2204      	movs	r2, #4
 800359a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800359c:	e022      	b.n	80035e4 <HCD_HC_OUT_IRQHandler+0x580>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800359e:	78fa      	ldrb	r2, [r7, #3]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	4413      	add	r3, r2
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	440b      	add	r3, r1
 80035ac:	3364      	adds	r3, #100	@ 0x64
 80035ae:	2202      	movs	r2, #2
 80035b0:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80035b2:	78fb      	ldrb	r3, [r7, #3]
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035c8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035d0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80035d2:	78fb      	ldrb	r3, [r7, #3]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035de:	461a      	mov	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035e4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80035e6:	78fa      	ldrb	r2, [r7, #3]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	4413      	add	r3, r2
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	440b      	add	r3, r1
 80035f4:	3364      	adds	r3, #100	@ 0x64
 80035f6:	781a      	ldrb	r2, [r3, #0]
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	4619      	mov	r1, r3
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f008 fa85 	bl	800bb0c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003602:	e002      	b.n	800360a <HCD_HC_OUT_IRQHandler+0x5a6>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003604:	bf00      	nop
 8003606:	e000      	b.n	800360a <HCD_HC_OUT_IRQHandler+0x5a6>
      return;
 8003608:	bf00      	nop
  }
}
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08a      	sub	sp, #40	@ 0x28
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003620:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	f003 030f 	and.w	r3, r3, #15
 8003630:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	0c5b      	lsrs	r3, r3, #17
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	091b      	lsrs	r3, r3, #4
 8003640:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003644:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d004      	beq.n	8003656 <HCD_RXQLVL_IRQHandler+0x46>
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b05      	cmp	r3, #5
 8003650:	f000 80b6 	beq.w	80037c0 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003654:	e0b7      	b.n	80037c6 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 80b3 	beq.w	80037c4 <HCD_RXQLVL_IRQHandler+0x1b4>
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4613      	mov	r3, r2
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	4413      	add	r3, r2
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	440b      	add	r3, r1
 800366c:	3348      	adds	r3, #72	@ 0x48
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 80a7 	beq.w	80037c4 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4613      	mov	r3, r2
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	4413      	add	r3, r2
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	440b      	add	r3, r1
 8003684:	3354      	adds	r3, #84	@ 0x54
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	18d1      	adds	r1, r2, r3
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4613      	mov	r3, r2
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	4413      	add	r3, r2
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	4403      	add	r3, r0
 800369a:	3350      	adds	r3, #80	@ 0x50
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4299      	cmp	r1, r3
 80036a0:	f200 8083 	bhi.w	80037aa <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6818      	ldr	r0, [r3, #0]
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4613      	mov	r3, r2
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	4413      	add	r3, r2
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	440b      	add	r3, r1
 80036b6:	3348      	adds	r3, #72	@ 0x48
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	b292      	uxth	r2, r2
 80036be:	4619      	mov	r1, r3
 80036c0:	f003 ff42 	bl	8007548 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4613      	mov	r3, r2
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	4413      	add	r3, r2
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	440b      	add	r3, r1
 80036d2:	3348      	adds	r3, #72	@ 0x48
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	18d1      	adds	r1, r2, r3
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4613      	mov	r3, r2
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	4413      	add	r3, r2
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	4403      	add	r3, r0
 80036e8:	3348      	adds	r3, #72	@ 0x48
 80036ea:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4613      	mov	r3, r2
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	4413      	add	r3, r2
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	440b      	add	r3, r1
 80036fa:	3354      	adds	r3, #84	@ 0x54
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	18d1      	adds	r1, r2, r3
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4613      	mov	r3, r2
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	4413      	add	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	4403      	add	r3, r0
 8003710:	3354      	adds	r3, #84	@ 0x54
 8003712:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	4413      	add	r3, r2
 800371c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	0cdb      	lsrs	r3, r3, #19
 8003724:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003728:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4613      	mov	r3, r2
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	4413      	add	r3, r2
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	440b      	add	r3, r1
 8003738:	3342      	adds	r3, #66	@ 0x42
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	4293      	cmp	r3, r2
 8003742:	d13f      	bne.n	80037c4 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d03c      	beq.n	80037c4 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	4413      	add	r3, r2
 8003752:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003760:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003768:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	4413      	add	r3, r2
 8003772:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003776:	461a      	mov	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4613      	mov	r3, r2
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4413      	add	r3, r2
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	440b      	add	r3, r1
 800378a:	3358      	adds	r3, #88	@ 0x58
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	f083 0301 	eor.w	r3, r3, #1
 8003792:	b2d8      	uxtb	r0, r3
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4613      	mov	r3, r2
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4413      	add	r3, r2
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	440b      	add	r3, r1
 80037a2:	3358      	adds	r3, #88	@ 0x58
 80037a4:	4602      	mov	r2, r0
 80037a6:	701a      	strb	r2, [r3, #0]
      break;
 80037a8:	e00c      	b.n	80037c4 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4613      	mov	r3, r2
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	4413      	add	r3, r2
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	440b      	add	r3, r1
 80037b8:	3364      	adds	r3, #100	@ 0x64
 80037ba:	2204      	movs	r2, #4
 80037bc:	701a      	strb	r2, [r3, #0]
      break;
 80037be:	e001      	b.n	80037c4 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80037c0:	bf00      	nop
 80037c2:	e000      	b.n	80037c6 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80037c4:	bf00      	nop
  }
}
 80037c6:	bf00      	nop
 80037c8:	3728      	adds	r7, #40	@ 0x28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b086      	sub	sp, #24
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80037fa:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b02      	cmp	r3, #2
 8003804:	d10b      	bne.n	800381e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b01      	cmp	r3, #1
 800380e:	d102      	bne.n	8003816 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f008 f95f 	bl	800bad4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f043 0302 	orr.w	r3, r3, #2
 800381c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b08      	cmp	r3, #8
 8003826:	d132      	bne.n	800388e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f043 0308 	orr.w	r3, r3, #8
 800382e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	2b04      	cmp	r3, #4
 8003838:	d126      	bne.n	8003888 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d113      	bne.n	800386a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003848:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800384c:	d106      	bne.n	800385c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2102      	movs	r1, #2
 8003854:	4618      	mov	r0, r3
 8003856:	f003 ffc7 	bl	80077e8 <USB_InitFSLSPClkSel>
 800385a:	e011      	b.n	8003880 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2101      	movs	r1, #1
 8003862:	4618      	mov	r0, r3
 8003864:	f003 ffc0 	bl	80077e8 <USB_InitFSLSPClkSel>
 8003868:	e00a      	b.n	8003880 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d106      	bne.n	8003880 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003878:	461a      	mov	r2, r3
 800387a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800387e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f008 f951 	bl	800bb28 <HAL_HCD_PortEnabled_Callback>
 8003886:	e002      	b.n	800388e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f008 f95b 	bl	800bb44 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b20      	cmp	r3, #32
 8003896:	d103      	bne.n	80038a0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f043 0320 	orr.w	r3, r3, #32
 800389e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80038a6:	461a      	mov	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	6013      	str	r3, [r2, #0]
}
 80038ac:	bf00      	nop
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038b8:	4b05      	ldr	r3, [pc, #20]	@ (80038d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a04      	ldr	r2, [pc, #16]	@ (80038d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038c2:	6013      	str	r3, [r2, #0]
}
 80038c4:	bf00      	nop
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40007000 	.word	0x40007000

080038d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038d8:	4b04      	ldr	r3, [pc, #16]	@ (80038ec <HAL_PWREx_GetVoltageRange+0x18>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40007000 	.word	0x40007000

080038f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038fe:	d130      	bne.n	8003962 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003900:	4b23      	ldr	r3, [pc, #140]	@ (8003990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800390c:	d038      	beq.n	8003980 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800390e:	4b20      	ldr	r3, [pc, #128]	@ (8003990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003916:	4a1e      	ldr	r2, [pc, #120]	@ (8003990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003918:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800391c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800391e:	4b1d      	ldr	r3, [pc, #116]	@ (8003994 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2232      	movs	r2, #50	@ 0x32
 8003924:	fb02 f303 	mul.w	r3, r2, r3
 8003928:	4a1b      	ldr	r2, [pc, #108]	@ (8003998 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800392a:	fba2 2303 	umull	r2, r3, r2, r3
 800392e:	0c9b      	lsrs	r3, r3, #18
 8003930:	3301      	adds	r3, #1
 8003932:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003934:	e002      	b.n	800393c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	3b01      	subs	r3, #1
 800393a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800393c:	4b14      	ldr	r3, [pc, #80]	@ (8003990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003944:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003948:	d102      	bne.n	8003950 <HAL_PWREx_ControlVoltageScaling+0x60>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1f2      	bne.n	8003936 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003950:	4b0f      	ldr	r3, [pc, #60]	@ (8003990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003958:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800395c:	d110      	bne.n	8003980 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e00f      	b.n	8003982 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003962:	4b0b      	ldr	r3, [pc, #44]	@ (8003990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800396a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800396e:	d007      	beq.n	8003980 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003970:	4b07      	ldr	r3, [pc, #28]	@ (8003990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003978:	4a05      	ldr	r2, [pc, #20]	@ (8003990 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800397a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800397e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	40007000 	.word	0x40007000
 8003994:	20000010 	.word	0x20000010
 8003998:	431bde83 	.word	0x431bde83

0800399c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80039a0:	4b05      	ldr	r3, [pc, #20]	@ (80039b8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	4a04      	ldr	r2, [pc, #16]	@ (80039b8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80039a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039aa:	6053      	str	r3, [r2, #4]
}
 80039ac:	bf00      	nop
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40007000 	.word	0x40007000

080039bc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80039c0:	4b05      	ldr	r3, [pc, #20]	@ (80039d8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4a04      	ldr	r2, [pc, #16]	@ (80039d8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80039c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039ca:	6053      	str	r3, [r2, #4]
}
 80039cc:	bf00      	nop
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40007000 	.word	0x40007000

080039dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d102      	bne.n	80039f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	f000 bc08 	b.w	8004200 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039f0:	4b96      	ldr	r3, [pc, #600]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 030c 	and.w	r3, r3, #12
 80039f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039fa:	4b94      	ldr	r3, [pc, #592]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 80e4 	beq.w	8003bda <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d007      	beq.n	8003a28 <HAL_RCC_OscConfig+0x4c>
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2b0c      	cmp	r3, #12
 8003a1c:	f040 808b 	bne.w	8003b36 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	f040 8087 	bne.w	8003b36 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a28:	4b88      	ldr	r3, [pc, #544]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_OscConfig+0x64>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e3df      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1a      	ldr	r2, [r3, #32]
 8003a44:	4b81      	ldr	r3, [pc, #516]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d004      	beq.n	8003a5a <HAL_RCC_OscConfig+0x7e>
 8003a50:	4b7e      	ldr	r3, [pc, #504]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a58:	e005      	b.n	8003a66 <HAL_RCC_OscConfig+0x8a>
 8003a5a:	4b7c      	ldr	r3, [pc, #496]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a60:	091b      	lsrs	r3, r3, #4
 8003a62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d223      	bcs.n	8003ab2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fd92 	bl	8004598 <RCC_SetFlashLatencyFromMSIRange>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e3c0      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a7e:	4b73      	ldr	r3, [pc, #460]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a72      	ldr	r2, [pc, #456]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003a84:	f043 0308 	orr.w	r3, r3, #8
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	4b70      	ldr	r3, [pc, #448]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	496d      	ldr	r1, [pc, #436]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a9c:	4b6b      	ldr	r3, [pc, #428]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	021b      	lsls	r3, r3, #8
 8003aaa:	4968      	ldr	r1, [pc, #416]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	604b      	str	r3, [r1, #4]
 8003ab0:	e025      	b.n	8003afe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ab2:	4b66      	ldr	r3, [pc, #408]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a65      	ldr	r2, [pc, #404]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003ab8:	f043 0308 	orr.w	r3, r3, #8
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	4b63      	ldr	r3, [pc, #396]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	4960      	ldr	r1, [pc, #384]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ad0:	4b5e      	ldr	r3, [pc, #376]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	495b      	ldr	r1, [pc, #364]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d109      	bne.n	8003afe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fd52 	bl	8004598 <RCC_SetFlashLatencyFromMSIRange>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e380      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003afe:	f000 fc87 	bl	8004410 <HAL_RCC_GetSysClockFreq>
 8003b02:	4602      	mov	r2, r0
 8003b04:	4b51      	ldr	r3, [pc, #324]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	4950      	ldr	r1, [pc, #320]	@ (8003c50 <HAL_RCC_OscConfig+0x274>)
 8003b10:	5ccb      	ldrb	r3, [r1, r3]
 8003b12:	f003 031f 	and.w	r3, r3, #31
 8003b16:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1a:	4a4e      	ldr	r2, [pc, #312]	@ (8003c54 <HAL_RCC_OscConfig+0x278>)
 8003b1c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b1e:	4b4e      	ldr	r3, [pc, #312]	@ (8003c58 <HAL_RCC_OscConfig+0x27c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fd fe42 	bl	80017ac <HAL_InitTick>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d052      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	e364      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d032      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b3e:	4b43      	ldr	r3, [pc, #268]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a42      	ldr	r2, [pc, #264]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b4a:	f7fd fe7f 	bl	800184c <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b52:	f7fd fe7b 	bl	800184c <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e34d      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b64:	4b39      	ldr	r3, [pc, #228]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0f0      	beq.n	8003b52 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b70:	4b36      	ldr	r3, [pc, #216]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a35      	ldr	r2, [pc, #212]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003b76:	f043 0308 	orr.w	r3, r3, #8
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	4b33      	ldr	r3, [pc, #204]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	4930      	ldr	r1, [pc, #192]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	021b      	lsls	r3, r3, #8
 8003b9c:	492b      	ldr	r1, [pc, #172]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	604b      	str	r3, [r1, #4]
 8003ba2:	e01a      	b.n	8003bda <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ba4:	4b29      	ldr	r3, [pc, #164]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a28      	ldr	r2, [pc, #160]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003baa:	f023 0301 	bic.w	r3, r3, #1
 8003bae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bb0:	f7fd fe4c 	bl	800184c <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bb8:	f7fd fe48 	bl	800184c <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e31a      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bca:	4b20      	ldr	r3, [pc, #128]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x1dc>
 8003bd6:	e000      	b.n	8003bda <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bd8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d073      	beq.n	8003cce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d005      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x21c>
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	2b0c      	cmp	r3, #12
 8003bf0:	d10e      	bne.n	8003c10 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d10b      	bne.n	8003c10 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf8:	4b14      	ldr	r3, [pc, #80]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d063      	beq.n	8003ccc <HAL_RCC_OscConfig+0x2f0>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d15f      	bne.n	8003ccc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e2f7      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c18:	d106      	bne.n	8003c28 <HAL_RCC_OscConfig+0x24c>
 8003c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a0b      	ldr	r2, [pc, #44]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	e025      	b.n	8003c74 <HAL_RCC_OscConfig+0x298>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c30:	d114      	bne.n	8003c5c <HAL_RCC_OscConfig+0x280>
 8003c32:	4b06      	ldr	r3, [pc, #24]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a05      	ldr	r2, [pc, #20]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003c38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	4b03      	ldr	r3, [pc, #12]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a02      	ldr	r2, [pc, #8]	@ (8003c4c <HAL_RCC_OscConfig+0x270>)
 8003c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	e013      	b.n	8003c74 <HAL_RCC_OscConfig+0x298>
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	0800cb0c 	.word	0x0800cb0c
 8003c54:	20000010 	.word	0x20000010
 8003c58:	20000014 	.word	0x20000014
 8003c5c:	4ba0      	ldr	r3, [pc, #640]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a9f      	ldr	r2, [pc, #636]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003c62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	4b9d      	ldr	r3, [pc, #628]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a9c      	ldr	r2, [pc, #624]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003c6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d013      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fd fde6 	bl	800184c <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c84:	f7fd fde2 	bl	800184c <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b64      	cmp	r3, #100	@ 0x64
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e2b4      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c96:	4b92      	ldr	r3, [pc, #584]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0x2a8>
 8003ca2:	e014      	b.n	8003cce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca4:	f7fd fdd2 	bl	800184c <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cac:	f7fd fdce 	bl	800184c <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b64      	cmp	r3, #100	@ 0x64
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e2a0      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cbe:	4b88      	ldr	r3, [pc, #544]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x2d0>
 8003cca:	e000      	b.n	8003cce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d060      	beq.n	8003d9c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d005      	beq.n	8003cec <HAL_RCC_OscConfig+0x310>
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2b0c      	cmp	r3, #12
 8003ce4:	d119      	bne.n	8003d1a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d116      	bne.n	8003d1a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cec:	4b7c      	ldr	r3, [pc, #496]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_RCC_OscConfig+0x328>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e27d      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d04:	4b76      	ldr	r3, [pc, #472]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	061b      	lsls	r3, r3, #24
 8003d12:	4973      	ldr	r1, [pc, #460]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d18:	e040      	b.n	8003d9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d023      	beq.n	8003d6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d22:	4b6f      	ldr	r3, [pc, #444]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a6e      	ldr	r2, [pc, #440]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003d28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2e:	f7fd fd8d 	bl	800184c <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d36:	f7fd fd89 	bl	800184c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e25b      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d48:	4b65      	ldr	r3, [pc, #404]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f0      	beq.n	8003d36 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d54:	4b62      	ldr	r3, [pc, #392]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	061b      	lsls	r3, r3, #24
 8003d62:	495f      	ldr	r1, [pc, #380]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	604b      	str	r3, [r1, #4]
 8003d68:	e018      	b.n	8003d9c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d6a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a5c      	ldr	r2, [pc, #368]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003d70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d76:	f7fd fd69 	bl	800184c <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d7e:	f7fd fd65 	bl	800184c <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e237      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d90:	4b53      	ldr	r3, [pc, #332]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1f0      	bne.n	8003d7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d03c      	beq.n	8003e22 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01c      	beq.n	8003dea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003db0:	4b4b      	ldr	r3, [pc, #300]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003db6:	4a4a      	ldr	r2, [pc, #296]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003db8:	f043 0301 	orr.w	r3, r3, #1
 8003dbc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc0:	f7fd fd44 	bl	800184c <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc8:	f7fd fd40 	bl	800184c <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e212      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dda:	4b41      	ldr	r3, [pc, #260]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0ef      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x3ec>
 8003de8:	e01b      	b.n	8003e22 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dea:	4b3d      	ldr	r3, [pc, #244]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003df0:	4a3b      	ldr	r2, [pc, #236]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003df2:	f023 0301 	bic.w	r3, r3, #1
 8003df6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfa:	f7fd fd27 	bl	800184c <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e02:	f7fd fd23 	bl	800184c <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e1f5      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e14:	4b32      	ldr	r3, [pc, #200]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1ef      	bne.n	8003e02 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 80a6 	beq.w	8003f7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e30:	2300      	movs	r3, #0
 8003e32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e34:	4b2a      	ldr	r3, [pc, #168]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10d      	bne.n	8003e5c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e40:	4b27      	ldr	r3, [pc, #156]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e44:	4a26      	ldr	r2, [pc, #152]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003e46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e4c:	4b24      	ldr	r3, [pc, #144]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e5c:	4b21      	ldr	r3, [pc, #132]	@ (8003ee4 <HAL_RCC_OscConfig+0x508>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d118      	bne.n	8003e9a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e68:	4b1e      	ldr	r3, [pc, #120]	@ (8003ee4 <HAL_RCC_OscConfig+0x508>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ee4 <HAL_RCC_OscConfig+0x508>)
 8003e6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e74:	f7fd fcea 	bl	800184c <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7c:	f7fd fce6 	bl	800184c <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e1b8      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e8e:	4b15      	ldr	r3, [pc, #84]	@ (8003ee4 <HAL_RCC_OscConfig+0x508>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d108      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x4d8>
 8003ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003eb2:	e029      	b.n	8003f08 <HAL_RCC_OscConfig+0x52c>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2b05      	cmp	r3, #5
 8003eba:	d115      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x50c>
 8003ebc:	4b08      	ldr	r3, [pc, #32]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec2:	4a07      	ldr	r2, [pc, #28]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003ec4:	f043 0304 	orr.w	r3, r3, #4
 8003ec8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ecc:	4b04      	ldr	r3, [pc, #16]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed2:	4a03      	ldr	r2, [pc, #12]	@ (8003ee0 <HAL_RCC_OscConfig+0x504>)
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003edc:	e014      	b.n	8003f08 <HAL_RCC_OscConfig+0x52c>
 8003ede:	bf00      	nop
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	40007000 	.word	0x40007000
 8003ee8:	4b9d      	ldr	r3, [pc, #628]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 8003eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eee:	4a9c      	ldr	r2, [pc, #624]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 8003ef0:	f023 0301 	bic.w	r3, r3, #1
 8003ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ef8:	4b99      	ldr	r3, [pc, #612]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003efe:	4a98      	ldr	r2, [pc, #608]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 8003f00:	f023 0304 	bic.w	r3, r3, #4
 8003f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d016      	beq.n	8003f3e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f10:	f7fd fc9c 	bl	800184c <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f16:	e00a      	b.n	8003f2e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f18:	f7fd fc98 	bl	800184c <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e168      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f2e:	4b8c      	ldr	r3, [pc, #560]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 8003f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0ed      	beq.n	8003f18 <HAL_RCC_OscConfig+0x53c>
 8003f3c:	e015      	b.n	8003f6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3e:	f7fd fc85 	bl	800184c <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f44:	e00a      	b.n	8003f5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f46:	f7fd fc81 	bl	800184c <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e151      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f5c:	4b80      	ldr	r3, [pc, #512]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 8003f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1ed      	bne.n	8003f46 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f6a:	7ffb      	ldrb	r3, [r7, #31]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d105      	bne.n	8003f7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f70:	4b7b      	ldr	r3, [pc, #492]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 8003f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f74:	4a7a      	ldr	r2, [pc, #488]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 8003f76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f7a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0320 	and.w	r3, r3, #32
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d03c      	beq.n	8004002 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d01c      	beq.n	8003fca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f90:	4b73      	ldr	r3, [pc, #460]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 8003f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f96:	4a72      	ldr	r2, [pc, #456]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 8003f98:	f043 0301 	orr.w	r3, r3, #1
 8003f9c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa0:	f7fd fc54 	bl	800184c <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fa8:	f7fd fc50 	bl	800184c <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e122      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fba:	4b69      	ldr	r3, [pc, #420]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 8003fbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0ef      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x5cc>
 8003fc8:	e01b      	b.n	8004002 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fca:	4b65      	ldr	r3, [pc, #404]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 8003fcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fd0:	4a63      	ldr	r2, [pc, #396]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 8003fd2:	f023 0301 	bic.w	r3, r3, #1
 8003fd6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fda:	f7fd fc37 	bl	800184c <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fe2:	f7fd fc33 	bl	800184c <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e105      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ff4:	4b5a      	ldr	r3, [pc, #360]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 8003ff6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1ef      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 80f9 	beq.w	80041fe <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004010:	2b02      	cmp	r3, #2
 8004012:	f040 80cf 	bne.w	80041b4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004016:	4b52      	ldr	r3, [pc, #328]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f003 0203 	and.w	r2, r3, #3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004026:	429a      	cmp	r2, r3
 8004028:	d12c      	bne.n	8004084 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004034:	3b01      	subs	r3, #1
 8004036:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004038:	429a      	cmp	r2, r3
 800403a:	d123      	bne.n	8004084 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004046:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004048:	429a      	cmp	r2, r3
 800404a:	d11b      	bne.n	8004084 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004056:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004058:	429a      	cmp	r2, r3
 800405a:	d113      	bne.n	8004084 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004066:	085b      	lsrs	r3, r3, #1
 8004068:	3b01      	subs	r3, #1
 800406a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800406c:	429a      	cmp	r2, r3
 800406e:	d109      	bne.n	8004084 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407a:	085b      	lsrs	r3, r3, #1
 800407c:	3b01      	subs	r3, #1
 800407e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004080:	429a      	cmp	r2, r3
 8004082:	d071      	beq.n	8004168 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	2b0c      	cmp	r3, #12
 8004088:	d068      	beq.n	800415c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800408a:	4b35      	ldr	r3, [pc, #212]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d105      	bne.n	80040a2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004096:	4b32      	ldr	r3, [pc, #200]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e0ac      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80040a6:	4b2e      	ldr	r3, [pc, #184]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a2d      	ldr	r2, [pc, #180]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 80040ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040b2:	f7fd fbcb 	bl	800184c <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ba:	f7fd fbc7 	bl	800184c <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e099      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040cc:	4b24      	ldr	r3, [pc, #144]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1f0      	bne.n	80040ba <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040d8:	4b21      	ldr	r3, [pc, #132]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	4b21      	ldr	r3, [pc, #132]	@ (8004164 <HAL_RCC_OscConfig+0x788>)
 80040de:	4013      	ands	r3, r2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80040e8:	3a01      	subs	r2, #1
 80040ea:	0112      	lsls	r2, r2, #4
 80040ec:	4311      	orrs	r1, r2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80040f2:	0212      	lsls	r2, r2, #8
 80040f4:	4311      	orrs	r1, r2
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040fa:	0852      	lsrs	r2, r2, #1
 80040fc:	3a01      	subs	r2, #1
 80040fe:	0552      	lsls	r2, r2, #21
 8004100:	4311      	orrs	r1, r2
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004106:	0852      	lsrs	r2, r2, #1
 8004108:	3a01      	subs	r2, #1
 800410a:	0652      	lsls	r2, r2, #25
 800410c:	4311      	orrs	r1, r2
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004112:	06d2      	lsls	r2, r2, #27
 8004114:	430a      	orrs	r2, r1
 8004116:	4912      	ldr	r1, [pc, #72]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 8004118:	4313      	orrs	r3, r2
 800411a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800411c:	4b10      	ldr	r3, [pc, #64]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a0f      	ldr	r2, [pc, #60]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 8004122:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004126:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004128:	4b0d      	ldr	r3, [pc, #52]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4a0c      	ldr	r2, [pc, #48]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 800412e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004132:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004134:	f7fd fb8a 	bl	800184c <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800413c:	f7fd fb86 	bl	800184c <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e058      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800414e:	4b04      	ldr	r3, [pc, #16]	@ (8004160 <HAL_RCC_OscConfig+0x784>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0f0      	beq.n	800413c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800415a:	e050      	b.n	80041fe <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e04f      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
 8004160:	40021000 	.word	0x40021000
 8004164:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004168:	4b27      	ldr	r3, [pc, #156]	@ (8004208 <HAL_RCC_OscConfig+0x82c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d144      	bne.n	80041fe <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004174:	4b24      	ldr	r3, [pc, #144]	@ (8004208 <HAL_RCC_OscConfig+0x82c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a23      	ldr	r2, [pc, #140]	@ (8004208 <HAL_RCC_OscConfig+0x82c>)
 800417a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800417e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004180:	4b21      	ldr	r3, [pc, #132]	@ (8004208 <HAL_RCC_OscConfig+0x82c>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	4a20      	ldr	r2, [pc, #128]	@ (8004208 <HAL_RCC_OscConfig+0x82c>)
 8004186:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800418a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800418c:	f7fd fb5e 	bl	800184c <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004194:	f7fd fb5a 	bl	800184c <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e02c      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041a6:	4b18      	ldr	r3, [pc, #96]	@ (8004208 <HAL_RCC_OscConfig+0x82c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0f0      	beq.n	8004194 <HAL_RCC_OscConfig+0x7b8>
 80041b2:	e024      	b.n	80041fe <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	2b0c      	cmp	r3, #12
 80041b8:	d01f      	beq.n	80041fa <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ba:	4b13      	ldr	r3, [pc, #76]	@ (8004208 <HAL_RCC_OscConfig+0x82c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a12      	ldr	r2, [pc, #72]	@ (8004208 <HAL_RCC_OscConfig+0x82c>)
 80041c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c6:	f7fd fb41 	bl	800184c <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041cc:	e008      	b.n	80041e0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ce:	f7fd fb3d 	bl	800184c <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e00f      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041e0:	4b09      	ldr	r3, [pc, #36]	@ (8004208 <HAL_RCC_OscConfig+0x82c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1f0      	bne.n	80041ce <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80041ec:	4b06      	ldr	r3, [pc, #24]	@ (8004208 <HAL_RCC_OscConfig+0x82c>)
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	4905      	ldr	r1, [pc, #20]	@ (8004208 <HAL_RCC_OscConfig+0x82c>)
 80041f2:	4b06      	ldr	r3, [pc, #24]	@ (800420c <HAL_RCC_OscConfig+0x830>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	60cb      	str	r3, [r1, #12]
 80041f8:	e001      	b.n	80041fe <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3720      	adds	r7, #32
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40021000 	.word	0x40021000
 800420c:	feeefffc 	.word	0xfeeefffc

08004210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e0e7      	b.n	80043f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004224:	4b75      	ldr	r3, [pc, #468]	@ (80043fc <HAL_RCC_ClockConfig+0x1ec>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d910      	bls.n	8004254 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004232:	4b72      	ldr	r3, [pc, #456]	@ (80043fc <HAL_RCC_ClockConfig+0x1ec>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f023 0207 	bic.w	r2, r3, #7
 800423a:	4970      	ldr	r1, [pc, #448]	@ (80043fc <HAL_RCC_ClockConfig+0x1ec>)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	4313      	orrs	r3, r2
 8004240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004242:	4b6e      	ldr	r3, [pc, #440]	@ (80043fc <HAL_RCC_ClockConfig+0x1ec>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d001      	beq.n	8004254 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0cf      	b.n	80043f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d010      	beq.n	8004282 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	4b66      	ldr	r3, [pc, #408]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800426c:	429a      	cmp	r2, r3
 800426e:	d908      	bls.n	8004282 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004270:	4b63      	ldr	r3, [pc, #396]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	4960      	ldr	r1, [pc, #384]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d04c      	beq.n	8004328 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b03      	cmp	r3, #3
 8004294:	d107      	bne.n	80042a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004296:	4b5a      	ldr	r3, [pc, #360]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d121      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e0a6      	b.n	80043f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d107      	bne.n	80042be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ae:	4b54      	ldr	r3, [pc, #336]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d115      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e09a      	b.n	80043f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d107      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042c6:	4b4e      	ldr	r3, [pc, #312]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e08e      	b.n	80043f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e086      	b.n	80043f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042e6:	4b46      	ldr	r3, [pc, #280]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f023 0203 	bic.w	r2, r3, #3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	4943      	ldr	r1, [pc, #268]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f8:	f7fd faa8 	bl	800184c <HAL_GetTick>
 80042fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fe:	e00a      	b.n	8004316 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004300:	f7fd faa4 	bl	800184c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800430e:	4293      	cmp	r3, r2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e06e      	b.n	80043f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004316:	4b3a      	ldr	r3, [pc, #232]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 020c 	and.w	r2, r3, #12
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	429a      	cmp	r2, r3
 8004326:	d1eb      	bne.n	8004300 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d010      	beq.n	8004356 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	4b31      	ldr	r3, [pc, #196]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004340:	429a      	cmp	r2, r3
 8004342:	d208      	bcs.n	8004356 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004344:	4b2e      	ldr	r3, [pc, #184]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	492b      	ldr	r1, [pc, #172]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 8004352:	4313      	orrs	r3, r2
 8004354:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004356:	4b29      	ldr	r3, [pc, #164]	@ (80043fc <HAL_RCC_ClockConfig+0x1ec>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d210      	bcs.n	8004386 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004364:	4b25      	ldr	r3, [pc, #148]	@ (80043fc <HAL_RCC_ClockConfig+0x1ec>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f023 0207 	bic.w	r2, r3, #7
 800436c:	4923      	ldr	r1, [pc, #140]	@ (80043fc <HAL_RCC_ClockConfig+0x1ec>)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	4313      	orrs	r3, r2
 8004372:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004374:	4b21      	ldr	r3, [pc, #132]	@ (80043fc <HAL_RCC_ClockConfig+0x1ec>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d001      	beq.n	8004386 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e036      	b.n	80043f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b00      	cmp	r3, #0
 8004390:	d008      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004392:	4b1b      	ldr	r3, [pc, #108]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	4918      	ldr	r1, [pc, #96]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d009      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043b0:	4b13      	ldr	r3, [pc, #76]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	4910      	ldr	r1, [pc, #64]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043c4:	f000 f824 	bl	8004410 <HAL_RCC_GetSysClockFreq>
 80043c8:	4602      	mov	r2, r0
 80043ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004400 <HAL_RCC_ClockConfig+0x1f0>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	091b      	lsrs	r3, r3, #4
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	490b      	ldr	r1, [pc, #44]	@ (8004404 <HAL_RCC_ClockConfig+0x1f4>)
 80043d6:	5ccb      	ldrb	r3, [r1, r3]
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
 80043e0:	4a09      	ldr	r2, [pc, #36]	@ (8004408 <HAL_RCC_ClockConfig+0x1f8>)
 80043e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043e4:	4b09      	ldr	r3, [pc, #36]	@ (800440c <HAL_RCC_ClockConfig+0x1fc>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fd f9df 	bl	80017ac <HAL_InitTick>
 80043ee:	4603      	mov	r3, r0
 80043f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80043f2:	7afb      	ldrb	r3, [r7, #11]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40022000 	.word	0x40022000
 8004400:	40021000 	.word	0x40021000
 8004404:	0800cb0c 	.word	0x0800cb0c
 8004408:	20000010 	.word	0x20000010
 800440c:	20000014 	.word	0x20000014

08004410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004410:	b480      	push	{r7}
 8004412:	b089      	sub	sp, #36	@ 0x24
 8004414:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	61fb      	str	r3, [r7, #28]
 800441a:	2300      	movs	r3, #0
 800441c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800441e:	4b3e      	ldr	r3, [pc, #248]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x108>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004428:	4b3b      	ldr	r3, [pc, #236]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x108>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 0303 	and.w	r3, r3, #3
 8004430:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <HAL_RCC_GetSysClockFreq+0x34>
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	2b0c      	cmp	r3, #12
 800443c:	d121      	bne.n	8004482 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d11e      	bne.n	8004482 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004444:	4b34      	ldr	r3, [pc, #208]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x108>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d107      	bne.n	8004460 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004450:	4b31      	ldr	r3, [pc, #196]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x108>)
 8004452:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004456:	0a1b      	lsrs	r3, r3, #8
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	61fb      	str	r3, [r7, #28]
 800445e:	e005      	b.n	800446c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004460:	4b2d      	ldr	r3, [pc, #180]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x108>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	091b      	lsrs	r3, r3, #4
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800446c:	4a2b      	ldr	r2, [pc, #172]	@ (800451c <HAL_RCC_GetSysClockFreq+0x10c>)
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004474:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10d      	bne.n	8004498 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004480:	e00a      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	2b04      	cmp	r3, #4
 8004486:	d102      	bne.n	800448e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004488:	4b25      	ldr	r3, [pc, #148]	@ (8004520 <HAL_RCC_GetSysClockFreq+0x110>)
 800448a:	61bb      	str	r3, [r7, #24]
 800448c:	e004      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2b08      	cmp	r3, #8
 8004492:	d101      	bne.n	8004498 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004494:	4b23      	ldr	r3, [pc, #140]	@ (8004524 <HAL_RCC_GetSysClockFreq+0x114>)
 8004496:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	2b0c      	cmp	r3, #12
 800449c:	d134      	bne.n	8004508 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800449e:	4b1e      	ldr	r3, [pc, #120]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x108>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d003      	beq.n	80044b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b03      	cmp	r3, #3
 80044b2:	d003      	beq.n	80044bc <HAL_RCC_GetSysClockFreq+0xac>
 80044b4:	e005      	b.n	80044c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044b6:	4b1a      	ldr	r3, [pc, #104]	@ (8004520 <HAL_RCC_GetSysClockFreq+0x110>)
 80044b8:	617b      	str	r3, [r7, #20]
      break;
 80044ba:	e005      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044bc:	4b19      	ldr	r3, [pc, #100]	@ (8004524 <HAL_RCC_GetSysClockFreq+0x114>)
 80044be:	617b      	str	r3, [r7, #20]
      break;
 80044c0:	e002      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	617b      	str	r3, [r7, #20]
      break;
 80044c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044c8:	4b13      	ldr	r3, [pc, #76]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	091b      	lsrs	r3, r3, #4
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	3301      	adds	r3, #1
 80044d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044d6:	4b10      	ldr	r3, [pc, #64]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x108>)
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	0a1b      	lsrs	r3, r3, #8
 80044dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	fb03 f202 	mul.w	r2, r3, r2
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x108>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	0e5b      	lsrs	r3, r3, #25
 80044f4:	f003 0303 	and.w	r3, r3, #3
 80044f8:	3301      	adds	r3, #1
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	fbb2 f3f3 	udiv	r3, r2, r3
 8004506:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004508:	69bb      	ldr	r3, [r7, #24]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3724      	adds	r7, #36	@ 0x24
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40021000 	.word	0x40021000
 800451c:	0800cb24 	.word	0x0800cb24
 8004520:	00f42400 	.word	0x00f42400
 8004524:	003d0900 	.word	0x003d0900

08004528 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800452c:	4b03      	ldr	r3, [pc, #12]	@ (800453c <HAL_RCC_GetHCLKFreq+0x14>)
 800452e:	681b      	ldr	r3, [r3, #0]
}
 8004530:	4618      	mov	r0, r3
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	20000010 	.word	0x20000010

08004540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004544:	f7ff fff0 	bl	8004528 <HAL_RCC_GetHCLKFreq>
 8004548:	4602      	mov	r2, r0
 800454a:	4b06      	ldr	r3, [pc, #24]	@ (8004564 <HAL_RCC_GetPCLK1Freq+0x24>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	0a1b      	lsrs	r3, r3, #8
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	4904      	ldr	r1, [pc, #16]	@ (8004568 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004556:	5ccb      	ldrb	r3, [r1, r3]
 8004558:	f003 031f 	and.w	r3, r3, #31
 800455c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004560:	4618      	mov	r0, r3
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40021000 	.word	0x40021000
 8004568:	0800cb1c 	.word	0x0800cb1c

0800456c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004570:	f7ff ffda 	bl	8004528 <HAL_RCC_GetHCLKFreq>
 8004574:	4602      	mov	r2, r0
 8004576:	4b06      	ldr	r3, [pc, #24]	@ (8004590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	0adb      	lsrs	r3, r3, #11
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	4904      	ldr	r1, [pc, #16]	@ (8004594 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004582:	5ccb      	ldrb	r3, [r1, r3]
 8004584:	f003 031f 	and.w	r3, r3, #31
 8004588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800458c:	4618      	mov	r0, r3
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40021000 	.word	0x40021000
 8004594:	0800cb1c 	.word	0x0800cb1c

08004598 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045a0:	2300      	movs	r3, #0
 80045a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045a4:	4b2a      	ldr	r3, [pc, #168]	@ (8004650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045b0:	f7ff f990 	bl	80038d4 <HAL_PWREx_GetVoltageRange>
 80045b4:	6178      	str	r0, [r7, #20]
 80045b6:	e014      	b.n	80045e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045b8:	4b25      	ldr	r3, [pc, #148]	@ (8004650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045bc:	4a24      	ldr	r2, [pc, #144]	@ (8004650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80045c4:	4b22      	ldr	r3, [pc, #136]	@ (8004650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045d0:	f7ff f980 	bl	80038d4 <HAL_PWREx_GetVoltageRange>
 80045d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045da:	4a1d      	ldr	r2, [pc, #116]	@ (8004650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045e8:	d10b      	bne.n	8004602 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b80      	cmp	r3, #128	@ 0x80
 80045ee:	d919      	bls.n	8004624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2ba0      	cmp	r3, #160	@ 0xa0
 80045f4:	d902      	bls.n	80045fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045f6:	2302      	movs	r3, #2
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	e013      	b.n	8004624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045fc:	2301      	movs	r3, #1
 80045fe:	613b      	str	r3, [r7, #16]
 8004600:	e010      	b.n	8004624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b80      	cmp	r3, #128	@ 0x80
 8004606:	d902      	bls.n	800460e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004608:	2303      	movs	r3, #3
 800460a:	613b      	str	r3, [r7, #16]
 800460c:	e00a      	b.n	8004624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b80      	cmp	r3, #128	@ 0x80
 8004612:	d102      	bne.n	800461a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004614:	2302      	movs	r3, #2
 8004616:	613b      	str	r3, [r7, #16]
 8004618:	e004      	b.n	8004624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b70      	cmp	r3, #112	@ 0x70
 800461e:	d101      	bne.n	8004624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004620:	2301      	movs	r3, #1
 8004622:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004624:	4b0b      	ldr	r3, [pc, #44]	@ (8004654 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f023 0207 	bic.w	r2, r3, #7
 800462c:	4909      	ldr	r1, [pc, #36]	@ (8004654 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004634:	4b07      	ldr	r3, [pc, #28]	@ (8004654 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	429a      	cmp	r2, r3
 8004640:	d001      	beq.n	8004646 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	40021000 	.word	0x40021000
 8004654:	40022000 	.word	0x40022000

08004658 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004660:	2300      	movs	r3, #0
 8004662:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004664:	2300      	movs	r3, #0
 8004666:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004670:	2b00      	cmp	r3, #0
 8004672:	d041      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004678:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800467c:	d02a      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800467e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004682:	d824      	bhi.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004684:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004688:	d008      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800468a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800468e:	d81e      	bhi.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00a      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004694:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004698:	d010      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800469a:	e018      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800469c:	4b86      	ldr	r3, [pc, #536]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4a85      	ldr	r2, [pc, #532]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046a8:	e015      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3304      	adds	r3, #4
 80046ae:	2100      	movs	r1, #0
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fadd 	bl	8004c70 <RCCEx_PLLSAI1_Config>
 80046b6:	4603      	mov	r3, r0
 80046b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046ba:	e00c      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3320      	adds	r3, #32
 80046c0:	2100      	movs	r1, #0
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fbc6 	bl	8004e54 <RCCEx_PLLSAI2_Config>
 80046c8:	4603      	mov	r3, r0
 80046ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046cc:	e003      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	74fb      	strb	r3, [r7, #19]
      break;
 80046d2:	e000      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80046d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046d6:	7cfb      	ldrb	r3, [r7, #19]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10b      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046dc:	4b76      	ldr	r3, [pc, #472]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046ea:	4973      	ldr	r1, [pc, #460]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80046f2:	e001      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f4:	7cfb      	ldrb	r3, [r7, #19]
 80046f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d041      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004708:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800470c:	d02a      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800470e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004712:	d824      	bhi.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004714:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004718:	d008      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800471a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800471e:	d81e      	bhi.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004724:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004728:	d010      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800472a:	e018      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800472c:	4b62      	ldr	r3, [pc, #392]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	4a61      	ldr	r2, [pc, #388]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004732:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004736:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004738:	e015      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	3304      	adds	r3, #4
 800473e:	2100      	movs	r1, #0
 8004740:	4618      	mov	r0, r3
 8004742:	f000 fa95 	bl	8004c70 <RCCEx_PLLSAI1_Config>
 8004746:	4603      	mov	r3, r0
 8004748:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800474a:	e00c      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3320      	adds	r3, #32
 8004750:	2100      	movs	r1, #0
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fb7e 	bl	8004e54 <RCCEx_PLLSAI2_Config>
 8004758:	4603      	mov	r3, r0
 800475a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800475c:	e003      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	74fb      	strb	r3, [r7, #19]
      break;
 8004762:	e000      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004766:	7cfb      	ldrb	r3, [r7, #19]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10b      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800476c:	4b52      	ldr	r3, [pc, #328]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004772:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800477a:	494f      	ldr	r1, [pc, #316]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004782:	e001      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004784:	7cfb      	ldrb	r3, [r7, #19]
 8004786:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 80a0 	beq.w	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004796:	2300      	movs	r3, #0
 8004798:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800479a:	4b47      	ldr	r3, [pc, #284]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800479c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800479e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80047aa:	2300      	movs	r3, #0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00d      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b0:	4b41      	ldr	r3, [pc, #260]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b4:	4a40      	ldr	r2, [pc, #256]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80047bc:	4b3e      	ldr	r3, [pc, #248]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047c4:	60bb      	str	r3, [r7, #8]
 80047c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047c8:	2301      	movs	r3, #1
 80047ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047cc:	4b3b      	ldr	r3, [pc, #236]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a3a      	ldr	r2, [pc, #232]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047d8:	f7fd f838 	bl	800184c <HAL_GetTick>
 80047dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047de:	e009      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e0:	f7fd f834 	bl	800184c <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d902      	bls.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	74fb      	strb	r3, [r7, #19]
        break;
 80047f2:	e005      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047f4:	4b31      	ldr	r3, [pc, #196]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0ef      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004800:	7cfb      	ldrb	r3, [r7, #19]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d15c      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004806:	4b2c      	ldr	r3, [pc, #176]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800480c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004810:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d01f      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	429a      	cmp	r2, r3
 8004822:	d019      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004824:	4b24      	ldr	r3, [pc, #144]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800482a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800482e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004830:	4b21      	ldr	r3, [pc, #132]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004836:	4a20      	ldr	r2, [pc, #128]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800483c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004840:	4b1d      	ldr	r3, [pc, #116]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004846:	4a1c      	ldr	r2, [pc, #112]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004848:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800484c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004850:	4a19      	ldr	r2, [pc, #100]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d016      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004862:	f7fc fff3 	bl	800184c <HAL_GetTick>
 8004866:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004868:	e00b      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486a:	f7fc ffef 	bl	800184c <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004878:	4293      	cmp	r3, r2
 800487a:	d902      	bls.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	74fb      	strb	r3, [r7, #19]
            break;
 8004880:	e006      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004882:	4b0d      	ldr	r3, [pc, #52]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0ec      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004890:	7cfb      	ldrb	r3, [r7, #19]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10c      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004896:	4b08      	ldr	r3, [pc, #32]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800489c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a6:	4904      	ldr	r1, [pc, #16]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80048ae:	e009      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048b0:	7cfb      	ldrb	r3, [r7, #19]
 80048b2:	74bb      	strb	r3, [r7, #18]
 80048b4:	e006      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80048b6:	bf00      	nop
 80048b8:	40021000 	.word	0x40021000
 80048bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c0:	7cfb      	ldrb	r3, [r7, #19]
 80048c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048c4:	7c7b      	ldrb	r3, [r7, #17]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d105      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ca:	4ba6      	ldr	r3, [pc, #664]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ce:	4aa5      	ldr	r2, [pc, #660]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048e2:	4ba0      	ldr	r3, [pc, #640]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e8:	f023 0203 	bic.w	r2, r3, #3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f0:	499c      	ldr	r1, [pc, #624]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004904:	4b97      	ldr	r3, [pc, #604]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800490a:	f023 020c 	bic.w	r2, r3, #12
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004912:	4994      	ldr	r1, [pc, #592]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0304 	and.w	r3, r3, #4
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004926:	4b8f      	ldr	r3, [pc, #572]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800492c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004934:	498b      	ldr	r1, [pc, #556]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0308 	and.w	r3, r3, #8
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004948:	4b86      	ldr	r3, [pc, #536]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800494a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800494e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004956:	4983      	ldr	r1, [pc, #524]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0310 	and.w	r3, r3, #16
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800496a:	4b7e      	ldr	r3, [pc, #504]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800496c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004970:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004978:	497a      	ldr	r1, [pc, #488]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0320 	and.w	r3, r3, #32
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800498c:	4b75      	ldr	r3, [pc, #468]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800498e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004992:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800499a:	4972      	ldr	r1, [pc, #456]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049ae:	4b6d      	ldr	r3, [pc, #436]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049bc:	4969      	ldr	r1, [pc, #420]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049d0:	4b64      	ldr	r3, [pc, #400]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049de:	4961      	ldr	r1, [pc, #388]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049f2:	4b5c      	ldr	r3, [pc, #368]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80049f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a00:	4958      	ldr	r1, [pc, #352]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a14:	4b53      	ldr	r3, [pc, #332]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a22:	4950      	ldr	r1, [pc, #320]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00a      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a36:	4b4b      	ldr	r3, [pc, #300]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a44:	4947      	ldr	r1, [pc, #284]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00a      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a58:	4b42      	ldr	r3, [pc, #264]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a5e:	f023 0203 	bic.w	r2, r3, #3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a66:	493f      	ldr	r1, [pc, #252]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d028      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a7a:	4b3a      	ldr	r3, [pc, #232]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a80:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a88:	4936      	ldr	r1, [pc, #216]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a98:	d106      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a9a:	4b32      	ldr	r3, [pc, #200]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	4a31      	ldr	r2, [pc, #196]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004aa0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004aa4:	60d3      	str	r3, [r2, #12]
 8004aa6:	e011      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ab0:	d10c      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 f8d9 	bl	8004c70 <RCCEx_PLLSAI1_Config>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ac2:	7cfb      	ldrb	r3, [r7, #19]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004ac8:	7cfb      	ldrb	r3, [r7, #19]
 8004aca:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d028      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ad8:	4b22      	ldr	r3, [pc, #136]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ade:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ae6:	491f      	ldr	r1, [pc, #124]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004af2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004af6:	d106      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004af8:	4b1a      	ldr	r3, [pc, #104]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	4a19      	ldr	r2, [pc, #100]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004afe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b02:	60d3      	str	r3, [r2, #12]
 8004b04:	e011      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b0e:	d10c      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3304      	adds	r3, #4
 8004b14:	2101      	movs	r1, #1
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 f8aa 	bl	8004c70 <RCCEx_PLLSAI1_Config>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b20:	7cfb      	ldrb	r3, [r7, #19]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8004b26:	7cfb      	ldrb	r3, [r7, #19]
 8004b28:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d02a      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b36:	4b0b      	ldr	r3, [pc, #44]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b44:	4907      	ldr	r1, [pc, #28]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b54:	d108      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b56:	4b03      	ldr	r3, [pc, #12]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	4a02      	ldr	r2, [pc, #8]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004b5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b60:	60d3      	str	r3, [r2, #12]
 8004b62:	e013      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004b64:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b70:	d10c      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	3304      	adds	r3, #4
 8004b76:	2101      	movs	r1, #1
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 f879 	bl	8004c70 <RCCEx_PLLSAI1_Config>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b82:	7cfb      	ldrb	r3, [r7, #19]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004b88:	7cfb      	ldrb	r3, [r7, #19]
 8004b8a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d02f      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b98:	4b2c      	ldr	r3, [pc, #176]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ba6:	4929      	ldr	r1, [pc, #164]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bb6:	d10d      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3304      	adds	r3, #4
 8004bbc:	2102      	movs	r1, #2
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 f856 	bl	8004c70 <RCCEx_PLLSAI1_Config>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bc8:	7cfb      	ldrb	r3, [r7, #19]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d014      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004bce:	7cfb      	ldrb	r3, [r7, #19]
 8004bd0:	74bb      	strb	r3, [r7, #18]
 8004bd2:	e011      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bdc:	d10c      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3320      	adds	r3, #32
 8004be2:	2102      	movs	r1, #2
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 f935 	bl	8004e54 <RCCEx_PLLSAI2_Config>
 8004bea:	4603      	mov	r3, r0
 8004bec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bee:	7cfb      	ldrb	r3, [r7, #19]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004bf4:	7cfb      	ldrb	r3, [r7, #19]
 8004bf6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00b      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c04:	4b11      	ldr	r3, [pc, #68]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c0a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c14:	490d      	ldr	r1, [pc, #52]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00b      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c28:	4b08      	ldr	r3, [pc, #32]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c38:	4904      	ldr	r1, [pc, #16]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c40:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40021000 	.word	0x40021000

08004c50 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004c54:	4b05      	ldr	r3, [pc, #20]	@ (8004c6c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a04      	ldr	r2, [pc, #16]	@ (8004c6c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004c5a:	f043 0304 	orr.w	r3, r3, #4
 8004c5e:	6013      	str	r3, [r2, #0]
}
 8004c60:	bf00      	nop
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40021000 	.word	0x40021000

08004c70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c7e:	4b74      	ldr	r3, [pc, #464]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d018      	beq.n	8004cbc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c8a:	4b71      	ldr	r3, [pc, #452]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f003 0203 	and.w	r2, r3, #3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d10d      	bne.n	8004cb6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
       ||
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d009      	beq.n	8004cb6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ca2:	4b6b      	ldr	r3, [pc, #428]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	091b      	lsrs	r3, r3, #4
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
       ||
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d047      	beq.n	8004d46 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	73fb      	strb	r3, [r7, #15]
 8004cba:	e044      	b.n	8004d46 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b03      	cmp	r3, #3
 8004cc2:	d018      	beq.n	8004cf6 <RCCEx_PLLSAI1_Config+0x86>
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d825      	bhi.n	8004d14 <RCCEx_PLLSAI1_Config+0xa4>
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d002      	beq.n	8004cd2 <RCCEx_PLLSAI1_Config+0x62>
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d009      	beq.n	8004ce4 <RCCEx_PLLSAI1_Config+0x74>
 8004cd0:	e020      	b.n	8004d14 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cd2:	4b5f      	ldr	r3, [pc, #380]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d11d      	bne.n	8004d1a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ce2:	e01a      	b.n	8004d1a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ce4:	4b5a      	ldr	r3, [pc, #360]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d116      	bne.n	8004d1e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cf4:	e013      	b.n	8004d1e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cf6:	4b56      	ldr	r3, [pc, #344]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10f      	bne.n	8004d22 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d02:	4b53      	ldr	r3, [pc, #332]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d109      	bne.n	8004d22 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d12:	e006      	b.n	8004d22 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	73fb      	strb	r3, [r7, #15]
      break;
 8004d18:	e004      	b.n	8004d24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d1a:	bf00      	nop
 8004d1c:	e002      	b.n	8004d24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d1e:	bf00      	nop
 8004d20:	e000      	b.n	8004d24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d22:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10d      	bne.n	8004d46 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d2a:	4b49      	ldr	r3, [pc, #292]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6819      	ldr	r1, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	430b      	orrs	r3, r1
 8004d40:	4943      	ldr	r1, [pc, #268]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d17c      	bne.n	8004e46 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d4c:	4b40      	ldr	r3, [pc, #256]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a3f      	ldr	r2, [pc, #252]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d58:	f7fc fd78 	bl	800184c <HAL_GetTick>
 8004d5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d5e:	e009      	b.n	8004d74 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d60:	f7fc fd74 	bl	800184c <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d902      	bls.n	8004d74 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	73fb      	strb	r3, [r7, #15]
        break;
 8004d72:	e005      	b.n	8004d80 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d74:	4b36      	ldr	r3, [pc, #216]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1ef      	bne.n	8004d60 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d15f      	bne.n	8004e46 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d110      	bne.n	8004dae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d8c:	4b30      	ldr	r3, [pc, #192]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004d94:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6892      	ldr	r2, [r2, #8]
 8004d9c:	0211      	lsls	r1, r2, #8
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	68d2      	ldr	r2, [r2, #12]
 8004da2:	06d2      	lsls	r2, r2, #27
 8004da4:	430a      	orrs	r2, r1
 8004da6:	492a      	ldr	r1, [pc, #168]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	610b      	str	r3, [r1, #16]
 8004dac:	e027      	b.n	8004dfe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d112      	bne.n	8004dda <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004db4:	4b26      	ldr	r3, [pc, #152]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004dbc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6892      	ldr	r2, [r2, #8]
 8004dc4:	0211      	lsls	r1, r2, #8
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	6912      	ldr	r2, [r2, #16]
 8004dca:	0852      	lsrs	r2, r2, #1
 8004dcc:	3a01      	subs	r2, #1
 8004dce:	0552      	lsls	r2, r2, #21
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	491f      	ldr	r1, [pc, #124]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	610b      	str	r3, [r1, #16]
 8004dd8:	e011      	b.n	8004dfe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dda:	4b1d      	ldr	r3, [pc, #116]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004de2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6892      	ldr	r2, [r2, #8]
 8004dea:	0211      	lsls	r1, r2, #8
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6952      	ldr	r2, [r2, #20]
 8004df0:	0852      	lsrs	r2, r2, #1
 8004df2:	3a01      	subs	r2, #1
 8004df4:	0652      	lsls	r2, r2, #25
 8004df6:	430a      	orrs	r2, r1
 8004df8:	4915      	ldr	r1, [pc, #84]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004dfe:	4b14      	ldr	r3, [pc, #80]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a13      	ldr	r2, [pc, #76]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e04:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e08:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e0a:	f7fc fd1f 	bl	800184c <HAL_GetTick>
 8004e0e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e10:	e009      	b.n	8004e26 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e12:	f7fc fd1b 	bl	800184c <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d902      	bls.n	8004e26 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	73fb      	strb	r3, [r7, #15]
          break;
 8004e24:	e005      	b.n	8004e32 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e26:	4b0a      	ldr	r3, [pc, #40]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0ef      	beq.n	8004e12 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e38:	4b05      	ldr	r3, [pc, #20]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	4903      	ldr	r1, [pc, #12]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	40021000 	.word	0x40021000

08004e54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e62:	4b69      	ldr	r3, [pc, #420]	@ (8005008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d018      	beq.n	8004ea0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e6e:	4b66      	ldr	r3, [pc, #408]	@ (8005008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f003 0203 	and.w	r2, r3, #3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d10d      	bne.n	8004e9a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
       ||
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d009      	beq.n	8004e9a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004e86:	4b60      	ldr	r3, [pc, #384]	@ (8005008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	091b      	lsrs	r3, r3, #4
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
       ||
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d047      	beq.n	8004f2a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	73fb      	strb	r3, [r7, #15]
 8004e9e:	e044      	b.n	8004f2a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	d018      	beq.n	8004eda <RCCEx_PLLSAI2_Config+0x86>
 8004ea8:	2b03      	cmp	r3, #3
 8004eaa:	d825      	bhi.n	8004ef8 <RCCEx_PLLSAI2_Config+0xa4>
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d002      	beq.n	8004eb6 <RCCEx_PLLSAI2_Config+0x62>
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d009      	beq.n	8004ec8 <RCCEx_PLLSAI2_Config+0x74>
 8004eb4:	e020      	b.n	8004ef8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004eb6:	4b54      	ldr	r3, [pc, #336]	@ (8005008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d11d      	bne.n	8004efe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ec6:	e01a      	b.n	8004efe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ec8:	4b4f      	ldr	r3, [pc, #316]	@ (8005008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d116      	bne.n	8004f02 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ed8:	e013      	b.n	8004f02 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004eda:	4b4b      	ldr	r3, [pc, #300]	@ (8005008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10f      	bne.n	8004f06 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ee6:	4b48      	ldr	r3, [pc, #288]	@ (8005008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d109      	bne.n	8004f06 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ef6:	e006      	b.n	8004f06 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
      break;
 8004efc:	e004      	b.n	8004f08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004efe:	bf00      	nop
 8004f00:	e002      	b.n	8004f08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f02:	bf00      	nop
 8004f04:	e000      	b.n	8004f08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f06:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10d      	bne.n	8004f2a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8005008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6819      	ldr	r1, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	011b      	lsls	r3, r3, #4
 8004f22:	430b      	orrs	r3, r1
 8004f24:	4938      	ldr	r1, [pc, #224]	@ (8005008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d166      	bne.n	8004ffe <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f30:	4b35      	ldr	r3, [pc, #212]	@ (8005008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a34      	ldr	r2, [pc, #208]	@ (8005008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f3c:	f7fc fc86 	bl	800184c <HAL_GetTick>
 8004f40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f42:	e009      	b.n	8004f58 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f44:	f7fc fc82 	bl	800184c <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d902      	bls.n	8004f58 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	73fb      	strb	r3, [r7, #15]
        break;
 8004f56:	e005      	b.n	8004f64 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f58:	4b2b      	ldr	r3, [pc, #172]	@ (8005008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1ef      	bne.n	8004f44 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d149      	bne.n	8004ffe <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d110      	bne.n	8004f92 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f70:	4b25      	ldr	r3, [pc, #148]	@ (8005008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004f78:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6892      	ldr	r2, [r2, #8]
 8004f80:	0211      	lsls	r1, r2, #8
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	68d2      	ldr	r2, [r2, #12]
 8004f86:	06d2      	lsls	r2, r2, #27
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	491f      	ldr	r1, [pc, #124]	@ (8005008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	614b      	str	r3, [r1, #20]
 8004f90:	e011      	b.n	8004fb6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f92:	4b1d      	ldr	r3, [pc, #116]	@ (8005008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004f9a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6892      	ldr	r2, [r2, #8]
 8004fa2:	0211      	lsls	r1, r2, #8
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6912      	ldr	r2, [r2, #16]
 8004fa8:	0852      	lsrs	r2, r2, #1
 8004faa:	3a01      	subs	r2, #1
 8004fac:	0652      	lsls	r2, r2, #25
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	4915      	ldr	r1, [pc, #84]	@ (8005008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004fb6:	4b14      	ldr	r3, [pc, #80]	@ (8005008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a13      	ldr	r2, [pc, #76]	@ (8005008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fc0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc2:	f7fc fc43 	bl	800184c <HAL_GetTick>
 8004fc6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fc8:	e009      	b.n	8004fde <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fca:	f7fc fc3f 	bl	800184c <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d902      	bls.n	8004fde <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	73fb      	strb	r3, [r7, #15]
          break;
 8004fdc:	e005      	b.n	8004fea <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fde:	4b0a      	ldr	r3, [pc, #40]	@ (8005008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0ef      	beq.n	8004fca <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d106      	bne.n	8004ffe <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ff0:	4b05      	ldr	r3, [pc, #20]	@ (8005008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ff2:	695a      	ldr	r2, [r3, #20]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	4903      	ldr	r1, [pc, #12]	@ (8005008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40021000 	.word	0x40021000

0800500c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e095      	b.n	800514a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005022:	2b00      	cmp	r3, #0
 8005024:	d108      	bne.n	8005038 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800502e:	d009      	beq.n	8005044 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	61da      	str	r2, [r3, #28]
 8005036:	e005      	b.n	8005044 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d106      	bne.n	8005064 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7fc fa70 	bl	8001544 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800507a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005084:	d902      	bls.n	800508c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	e002      	b.n	8005092 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800508c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005090:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800509a:	d007      	beq.n	80050ac <HAL_SPI_Init+0xa0>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80050a4:	d002      	beq.n	80050ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	431a      	orrs	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	431a      	orrs	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050e4:	431a      	orrs	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ee:	ea42 0103 	orr.w	r1, r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	0c1b      	lsrs	r3, r3, #16
 8005108:	f003 0204 	and.w	r2, r3, #4
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005110:	f003 0310 	and.w	r3, r3, #16
 8005114:	431a      	orrs	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800511a:	f003 0308 	and.w	r3, r3, #8
 800511e:	431a      	orrs	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005128:	ea42 0103 	orr.w	r1, r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b088      	sub	sp, #32
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	603b      	str	r3, [r7, #0]
 800515e:	4613      	mov	r3, r2
 8005160:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_SPI_Transmit+0x22>
 8005170:	2302      	movs	r3, #2
 8005172:	e15f      	b.n	8005434 <HAL_SPI_Transmit+0x2e2>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800517c:	f7fc fb66 	bl	800184c <HAL_GetTick>
 8005180:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b01      	cmp	r3, #1
 8005190:	d002      	beq.n	8005198 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005192:	2302      	movs	r3, #2
 8005194:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005196:	e148      	b.n	800542a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <HAL_SPI_Transmit+0x52>
 800519e:	88fb      	ldrh	r3, [r7, #6]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d102      	bne.n	80051aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051a8:	e13f      	b.n	800542a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2203      	movs	r2, #3
 80051ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	88fa      	ldrh	r2, [r7, #6]
 80051c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	88fa      	ldrh	r2, [r7, #6]
 80051c8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051f4:	d10f      	bne.n	8005216 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005204:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005214:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005220:	2b40      	cmp	r3, #64	@ 0x40
 8005222:	d007      	beq.n	8005234 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005232:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800523c:	d94f      	bls.n	80052de <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <HAL_SPI_Transmit+0xfa>
 8005246:	8afb      	ldrh	r3, [r7, #22]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d142      	bne.n	80052d2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005250:	881a      	ldrh	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525c:	1c9a      	adds	r2, r3, #2
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005270:	e02f      	b.n	80052d2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b02      	cmp	r3, #2
 800527e:	d112      	bne.n	80052a6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005284:	881a      	ldrh	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005290:	1c9a      	adds	r2, r3, #2
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800529a:	b29b      	uxth	r3, r3
 800529c:	3b01      	subs	r3, #1
 800529e:	b29a      	uxth	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80052a4:	e015      	b.n	80052d2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052a6:	f7fc fad1 	bl	800184c <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d803      	bhi.n	80052be <HAL_SPI_Transmit+0x16c>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052bc:	d102      	bne.n	80052c4 <HAL_SPI_Transmit+0x172>
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d106      	bne.n	80052d2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80052d0:	e0ab      	b.n	800542a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1ca      	bne.n	8005272 <HAL_SPI_Transmit+0x120>
 80052dc:	e080      	b.n	80053e0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <HAL_SPI_Transmit+0x19a>
 80052e6:	8afb      	ldrh	r3, [r7, #22]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d174      	bne.n	80053d6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d912      	bls.n	800531c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fa:	881a      	ldrh	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005306:	1c9a      	adds	r2, r3, #2
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005310:	b29b      	uxth	r3, r3
 8005312:	3b02      	subs	r3, #2
 8005314:	b29a      	uxth	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800531a:	e05c      	b.n	80053d6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	330c      	adds	r3, #12
 8005326:	7812      	ldrb	r2, [r2, #0]
 8005328:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005338:	b29b      	uxth	r3, r3
 800533a:	3b01      	subs	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005342:	e048      	b.n	80053d6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b02      	cmp	r3, #2
 8005350:	d12b      	bne.n	80053aa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005356:	b29b      	uxth	r3, r3
 8005358:	2b01      	cmp	r3, #1
 800535a:	d912      	bls.n	8005382 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005360:	881a      	ldrh	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536c:	1c9a      	adds	r2, r3, #2
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005376:	b29b      	uxth	r3, r3
 8005378:	3b02      	subs	r3, #2
 800537a:	b29a      	uxth	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005380:	e029      	b.n	80053d6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	330c      	adds	r3, #12
 800538c:	7812      	ldrb	r2, [r2, #0]
 800538e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3b01      	subs	r3, #1
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80053a8:	e015      	b.n	80053d6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053aa:	f7fc fa4f 	bl	800184c <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d803      	bhi.n	80053c2 <HAL_SPI_Transmit+0x270>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c0:	d102      	bne.n	80053c8 <HAL_SPI_Transmit+0x276>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d106      	bne.n	80053d6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80053d4:	e029      	b.n	800542a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053da:	b29b      	uxth	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1b1      	bne.n	8005344 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	6839      	ldr	r1, [r7, #0]
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 fb69 	bl	8005abc <SPI_EndRxTxTransaction>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d002      	beq.n	80053f6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2220      	movs	r2, #32
 80053f4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10a      	bne.n	8005414 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053fe:	2300      	movs	r3, #0
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	613b      	str	r3, [r7, #16]
 8005412:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	77fb      	strb	r3, [r7, #31]
 8005420:	e003      	b.n	800542a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005432:	7ffb      	ldrb	r3, [r7, #31]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3720      	adds	r7, #32
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08a      	sub	sp, #40	@ 0x28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800544a:	2301      	movs	r3, #1
 800544c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800544e:	2300      	movs	r3, #0
 8005450:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800545a:	2b01      	cmp	r3, #1
 800545c:	d101      	bne.n	8005462 <HAL_SPI_TransmitReceive+0x26>
 800545e:	2302      	movs	r3, #2
 8005460:	e20a      	b.n	8005878 <HAL_SPI_TransmitReceive+0x43c>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800546a:	f7fc f9ef 	bl	800184c <HAL_GetTick>
 800546e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005476:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800547e:	887b      	ldrh	r3, [r7, #2]
 8005480:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005482:	887b      	ldrh	r3, [r7, #2]
 8005484:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005486:	7efb      	ldrb	r3, [r7, #27]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d00e      	beq.n	80054aa <HAL_SPI_TransmitReceive+0x6e>
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005492:	d106      	bne.n	80054a2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d102      	bne.n	80054a2 <HAL_SPI_TransmitReceive+0x66>
 800549c:	7efb      	ldrb	r3, [r7, #27]
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d003      	beq.n	80054aa <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80054a2:	2302      	movs	r3, #2
 80054a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80054a8:	e1e0      	b.n	800586c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d005      	beq.n	80054bc <HAL_SPI_TransmitReceive+0x80>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <HAL_SPI_TransmitReceive+0x80>
 80054b6:	887b      	ldrh	r3, [r7, #2]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d103      	bne.n	80054c4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80054c2:	e1d3      	b.n	800586c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d003      	beq.n	80054d8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2205      	movs	r2, #5
 80054d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	887a      	ldrh	r2, [r7, #2]
 80054e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	887a      	ldrh	r2, [r7, #2]
 80054f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	887a      	ldrh	r2, [r7, #2]
 80054fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	887a      	ldrh	r2, [r7, #2]
 8005504:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800551a:	d802      	bhi.n	8005522 <HAL_SPI_TransmitReceive+0xe6>
 800551c:	8a3b      	ldrh	r3, [r7, #16]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d908      	bls.n	8005534 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005530:	605a      	str	r2, [r3, #4]
 8005532:	e007      	b.n	8005544 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005542:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800554e:	2b40      	cmp	r3, #64	@ 0x40
 8005550:	d007      	beq.n	8005562 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005560:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800556a:	f240 8081 	bls.w	8005670 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <HAL_SPI_TransmitReceive+0x140>
 8005576:	8a7b      	ldrh	r3, [r7, #18]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d16d      	bne.n	8005658 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005580:	881a      	ldrh	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558c:	1c9a      	adds	r2, r3, #2
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005596:	b29b      	uxth	r3, r3
 8005598:	3b01      	subs	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055a0:	e05a      	b.n	8005658 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d11b      	bne.n	80055e8 <HAL_SPI_TransmitReceive+0x1ac>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d016      	beq.n	80055e8 <HAL_SPI_TransmitReceive+0x1ac>
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d113      	bne.n	80055e8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c4:	881a      	ldrh	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d0:	1c9a      	adds	r2, r3, #2
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d11c      	bne.n	8005630 <HAL_SPI_TransmitReceive+0x1f4>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d016      	beq.n	8005630 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560c:	b292      	uxth	r2, r2
 800560e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005614:	1c9a      	adds	r2, r3, #2
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005620:	b29b      	uxth	r3, r3
 8005622:	3b01      	subs	r3, #1
 8005624:	b29a      	uxth	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800562c:	2301      	movs	r3, #1
 800562e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005630:	f7fc f90c 	bl	800184c <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800563c:	429a      	cmp	r2, r3
 800563e:	d80b      	bhi.n	8005658 <HAL_SPI_TransmitReceive+0x21c>
 8005640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005646:	d007      	beq.n	8005658 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005656:	e109      	b.n	800586c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d19f      	bne.n	80055a2 <HAL_SPI_TransmitReceive+0x166>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005668:	b29b      	uxth	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d199      	bne.n	80055a2 <HAL_SPI_TransmitReceive+0x166>
 800566e:	e0e3      	b.n	8005838 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <HAL_SPI_TransmitReceive+0x244>
 8005678:	8a7b      	ldrh	r3, [r7, #18]
 800567a:	2b01      	cmp	r3, #1
 800567c:	f040 80cf 	bne.w	800581e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005684:	b29b      	uxth	r3, r3
 8005686:	2b01      	cmp	r3, #1
 8005688:	d912      	bls.n	80056b0 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800568e:	881a      	ldrh	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569a:	1c9a      	adds	r2, r3, #2
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	3b02      	subs	r3, #2
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056ae:	e0b6      	b.n	800581e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	330c      	adds	r3, #12
 80056ba:	7812      	ldrb	r2, [r2, #0]
 80056bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c2:	1c5a      	adds	r2, r3, #1
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	3b01      	subs	r3, #1
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056d6:	e0a2      	b.n	800581e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d134      	bne.n	8005750 <HAL_SPI_TransmitReceive+0x314>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d02f      	beq.n	8005750 <HAL_SPI_TransmitReceive+0x314>
 80056f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d12c      	bne.n	8005750 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d912      	bls.n	8005726 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005704:	881a      	ldrh	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005710:	1c9a      	adds	r2, r3, #2
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b02      	subs	r3, #2
 800571e:	b29a      	uxth	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005724:	e012      	b.n	800574c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	330c      	adds	r3, #12
 8005730:	7812      	ldrb	r2, [r2, #0]
 8005732:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b01      	cmp	r3, #1
 800575c:	d148      	bne.n	80057f0 <HAL_SPI_TransmitReceive+0x3b4>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005764:	b29b      	uxth	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d042      	beq.n	80057f0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005770:	b29b      	uxth	r3, r3
 8005772:	2b01      	cmp	r3, #1
 8005774:	d923      	bls.n	80057be <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005780:	b292      	uxth	r2, r2
 8005782:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005788:	1c9a      	adds	r2, r3, #2
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005794:	b29b      	uxth	r3, r3
 8005796:	3b02      	subs	r3, #2
 8005798:	b29a      	uxth	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d81f      	bhi.n	80057ec <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80057ba:	605a      	str	r2, [r3, #4]
 80057bc:	e016      	b.n	80057ec <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f103 020c 	add.w	r2, r3, #12
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ca:	7812      	ldrb	r2, [r2, #0]
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	3b01      	subs	r3, #1
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057ec:	2301      	movs	r3, #1
 80057ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057f0:	f7fc f82c 	bl	800184c <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d803      	bhi.n	8005808 <HAL_SPI_TransmitReceive+0x3cc>
 8005800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005806:	d102      	bne.n	800580e <HAL_SPI_TransmitReceive+0x3d2>
 8005808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580a:	2b00      	cmp	r3, #0
 800580c:	d107      	bne.n	800581e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800581c:	e026      	b.n	800586c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005822:	b29b      	uxth	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	f47f af57 	bne.w	80056d8 <HAL_SPI_TransmitReceive+0x29c>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	f47f af50 	bne.w	80056d8 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005838:	69fa      	ldr	r2, [r7, #28]
 800583a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 f93d 	bl	8005abc <SPI_EndRxTxTransaction>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d005      	beq.n	8005854 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2220      	movs	r2, #32
 8005852:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005862:	e003      	b.n	800586c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005874:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005878:	4618      	mov	r0, r3
 800587a:	3728      	adds	r7, #40	@ 0x28
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	603b      	str	r3, [r7, #0]
 800588c:	4613      	mov	r3, r2
 800588e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005890:	f7fb ffdc 	bl	800184c <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005898:	1a9b      	subs	r3, r3, r2
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	4413      	add	r3, r2
 800589e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058a0:	f7fb ffd4 	bl	800184c <HAL_GetTick>
 80058a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058a6:	4b39      	ldr	r3, [pc, #228]	@ (800598c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	015b      	lsls	r3, r3, #5
 80058ac:	0d1b      	lsrs	r3, r3, #20
 80058ae:	69fa      	ldr	r2, [r7, #28]
 80058b0:	fb02 f303 	mul.w	r3, r2, r3
 80058b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058b6:	e054      	b.n	8005962 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058be:	d050      	beq.n	8005962 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058c0:	f7fb ffc4 	bl	800184c <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	69fa      	ldr	r2, [r7, #28]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d902      	bls.n	80058d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d13d      	bne.n	8005952 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80058e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058ee:	d111      	bne.n	8005914 <SPI_WaitFlagStateUntilTimeout+0x94>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058f8:	d004      	beq.n	8005904 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005902:	d107      	bne.n	8005914 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005912:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005918:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800591c:	d10f      	bne.n	800593e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800593c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e017      	b.n	8005982 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	3b01      	subs	r3, #1
 8005960:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4013      	ands	r3, r2
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	429a      	cmp	r2, r3
 8005970:	bf0c      	ite	eq
 8005972:	2301      	moveq	r3, #1
 8005974:	2300      	movne	r3, #0
 8005976:	b2db      	uxtb	r3, r3
 8005978:	461a      	mov	r2, r3
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	429a      	cmp	r2, r3
 800597e:	d19b      	bne.n	80058b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3720      	adds	r7, #32
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20000010 	.word	0x20000010

08005990 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b08a      	sub	sp, #40	@ 0x28
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800599e:	2300      	movs	r3, #0
 80059a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80059a2:	f7fb ff53 	bl	800184c <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059aa:	1a9b      	subs	r3, r3, r2
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	4413      	add	r3, r2
 80059b0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80059b2:	f7fb ff4b 	bl	800184c <HAL_GetTick>
 80059b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	330c      	adds	r3, #12
 80059be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80059c0:	4b3d      	ldr	r3, [pc, #244]	@ (8005ab8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	4613      	mov	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	00da      	lsls	r2, r3, #3
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	0d1b      	lsrs	r3, r3, #20
 80059d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059d2:	fb02 f303 	mul.w	r3, r2, r3
 80059d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80059d8:	e060      	b.n	8005a9c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80059e0:	d107      	bne.n	80059f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d104      	bne.n	80059f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80059f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f8:	d050      	beq.n	8005a9c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059fa:	f7fb ff27 	bl	800184c <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d902      	bls.n	8005a10 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d13d      	bne.n	8005a8c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005a1e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a28:	d111      	bne.n	8005a4e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a32:	d004      	beq.n	8005a3e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a3c:	d107      	bne.n	8005a4e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a4c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a56:	d10f      	bne.n	8005a78 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e010      	b.n	8005aae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d196      	bne.n	80059da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3728      	adds	r7, #40	@ 0x28
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	20000010 	.word	0x20000010

08005abc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af02      	add	r7, sp, #8
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f7ff ff5b 	bl	8005990 <SPI_WaitFifoStateUntilTimeout>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d007      	beq.n	8005af0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ae4:	f043 0220 	orr.w	r2, r3, #32
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e027      	b.n	8005b40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2200      	movs	r2, #0
 8005af8:	2180      	movs	r1, #128	@ 0x80
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f7ff fec0 	bl	8005880 <SPI_WaitFlagStateUntilTimeout>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d007      	beq.n	8005b16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b0a:	f043 0220 	orr.w	r2, r3, #32
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e014      	b.n	8005b40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f7ff ff34 	bl	8005990 <SPI_WaitFifoStateUntilTimeout>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d007      	beq.n	8005b3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b32:	f043 0220 	orr.w	r2, r3, #32
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e000      	b.n	8005b40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e040      	b.n	8005bdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d106      	bne.n	8005b70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7fb fc34 	bl	80013d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2224      	movs	r2, #36	@ 0x24
 8005b74:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0201 	bic.w	r2, r2, #1
 8005b84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fec0 	bl	8006914 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 fc05 	bl	80063a4 <UART_SetConfig>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d101      	bne.n	8005ba4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e01b      	b.n	8005bdc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005bc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0201 	orr.w	r2, r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 ff3f 	bl	8006a58 <UART_CheckIdleState>
 8005bda:	4603      	mov	r3, r0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08a      	sub	sp, #40	@ 0x28
 8005be8:	af02      	add	r7, sp, #8
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	603b      	str	r3, [r7, #0]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bf8:	2b20      	cmp	r3, #32
 8005bfa:	d177      	bne.n	8005cec <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <HAL_UART_Transmit+0x24>
 8005c02:	88fb      	ldrh	r3, [r7, #6]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e070      	b.n	8005cee <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2221      	movs	r2, #33	@ 0x21
 8005c18:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c1a:	f7fb fe17 	bl	800184c <HAL_GetTick>
 8005c1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	88fa      	ldrh	r2, [r7, #6]
 8005c24:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	88fa      	ldrh	r2, [r7, #6]
 8005c2c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c38:	d108      	bne.n	8005c4c <HAL_UART_Transmit+0x68>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d104      	bne.n	8005c4c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	61bb      	str	r3, [r7, #24]
 8005c4a:	e003      	b.n	8005c54 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c50:	2300      	movs	r3, #0
 8005c52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c54:	e02f      	b.n	8005cb6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	2180      	movs	r1, #128	@ 0x80
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 ffa1 	bl	8006ba8 <UART_WaitOnFlagUntilTimeout>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d004      	beq.n	8005c76 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e03b      	b.n	8005cee <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10b      	bne.n	8005c94 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	881a      	ldrh	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c88:	b292      	uxth	r2, r2
 8005c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	3302      	adds	r3, #2
 8005c90:	61bb      	str	r3, [r7, #24]
 8005c92:	e007      	b.n	8005ca4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	781a      	ldrb	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	3b01      	subs	r3, #1
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1c9      	bne.n	8005c56 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	2140      	movs	r1, #64	@ 0x40
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 ff6b 	bl	8006ba8 <UART_WaitOnFlagUntilTimeout>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d004      	beq.n	8005ce2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e005      	b.n	8005cee <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	e000      	b.n	8005cee <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005cec:	2302      	movs	r3, #2
  }
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3720      	adds	r7, #32
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
	...

08005cf8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b08a      	sub	sp, #40	@ 0x28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	4613      	mov	r3, r2
 8005d04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d0c:	2b20      	cmp	r3, #32
 8005d0e:	d137      	bne.n	8005d80 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <HAL_UART_Receive_IT+0x24>
 8005d16:	88fb      	ldrh	r3, [r7, #6]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e030      	b.n	8005d82 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a18      	ldr	r2, [pc, #96]	@ (8005d8c <HAL_UART_Receive_IT+0x94>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d01f      	beq.n	8005d70 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d018      	beq.n	8005d70 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	e853 3f00 	ldrex	r3, [r3]
 8005d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5c:	623b      	str	r3, [r7, #32]
 8005d5e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	69f9      	ldr	r1, [r7, #28]
 8005d62:	6a3a      	ldr	r2, [r7, #32]
 8005d64:	e841 2300 	strex	r3, r2, [r1]
 8005d68:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1e6      	bne.n	8005d3e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d70:	88fb      	ldrh	r3, [r7, #6]
 8005d72:	461a      	mov	r2, r3
 8005d74:	68b9      	ldr	r1, [r7, #8]
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 ff7e 	bl	8006c78 <UART_Start_Receive_IT>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	e000      	b.n	8005d82 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d80:	2302      	movs	r3, #2
  }
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3728      	adds	r7, #40	@ 0x28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	40008000 	.word	0x40008000

08005d90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b0ba      	sub	sp, #232	@ 0xe8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005db6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005dba:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005dc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d115      	bne.n	8005df8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dd0:	f003 0320 	and.w	r3, r3, #32
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00f      	beq.n	8005df8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ddc:	f003 0320 	and.w	r3, r3, #32
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d009      	beq.n	8005df8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 82ae 	beq.w	800634a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	4798      	blx	r3
      }
      return;
 8005df6:	e2a8      	b.n	800634a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005df8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 8117 	beq.w	8006030 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d106      	bne.n	8005e1c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005e12:	4b85      	ldr	r3, [pc, #532]	@ (8006028 <HAL_UART_IRQHandler+0x298>)
 8005e14:	4013      	ands	r3, r2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 810a 	beq.w	8006030 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d011      	beq.n	8005e4c <HAL_UART_IRQHandler+0xbc>
 8005e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00b      	beq.n	8005e4c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e42:	f043 0201 	orr.w	r2, r3, #1
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d011      	beq.n	8005e7c <HAL_UART_IRQHandler+0xec>
 8005e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00b      	beq.n	8005e7c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2202      	movs	r2, #2
 8005e6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e72:	f043 0204 	orr.w	r2, r3, #4
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d011      	beq.n	8005eac <HAL_UART_IRQHandler+0x11c>
 8005e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00b      	beq.n	8005eac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2204      	movs	r2, #4
 8005e9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ea2:	f043 0202 	orr.w	r2, r3, #2
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eb0:	f003 0308 	and.w	r3, r3, #8
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d017      	beq.n	8005ee8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ebc:	f003 0320 	and.w	r3, r3, #32
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d105      	bne.n	8005ed0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005ec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ec8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00b      	beq.n	8005ee8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2208      	movs	r2, #8
 8005ed6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ede:	f043 0208 	orr.w	r2, r3, #8
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d012      	beq.n	8005f1a <HAL_UART_IRQHandler+0x18a>
 8005ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ef8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00c      	beq.n	8005f1a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f10:	f043 0220 	orr.w	r2, r3, #32
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 8214 	beq.w	800634e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f2a:	f003 0320 	and.w	r3, r3, #32
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00d      	beq.n	8005f4e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d007      	beq.n	8005f4e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f62:	2b40      	cmp	r3, #64	@ 0x40
 8005f64:	d005      	beq.n	8005f72 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f6a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d04f      	beq.n	8006012 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 ff46 	bl	8006e04 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f82:	2b40      	cmp	r3, #64	@ 0x40
 8005f84:	d141      	bne.n	800600a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3308      	adds	r3, #8
 8005f8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3308      	adds	r3, #8
 8005fae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005fb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005fbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1d9      	bne.n	8005f86 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d013      	beq.n	8006002 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fde:	4a13      	ldr	r2, [pc, #76]	@ (800602c <HAL_UART_IRQHandler+0x29c>)
 8005fe0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fb fdaf 	bl	8001b4a <HAL_DMA_Abort_IT>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d017      	beq.n	8006022 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006000:	e00f      	b.n	8006022 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f9b8 	bl	8006378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006008:	e00b      	b.n	8006022 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f9b4 	bl	8006378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006010:	e007      	b.n	8006022 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f9b0 	bl	8006378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006020:	e195      	b.n	800634e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006022:	bf00      	nop
    return;
 8006024:	e193      	b.n	800634e <HAL_UART_IRQHandler+0x5be>
 8006026:	bf00      	nop
 8006028:	04000120 	.word	0x04000120
 800602c:	08006ecd 	.word	0x08006ecd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006034:	2b01      	cmp	r3, #1
 8006036:	f040 814e 	bne.w	80062d6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800603a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800603e:	f003 0310 	and.w	r3, r3, #16
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 8147 	beq.w	80062d6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800604c:	f003 0310 	and.w	r3, r3, #16
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 8140 	beq.w	80062d6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2210      	movs	r2, #16
 800605c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006068:	2b40      	cmp	r3, #64	@ 0x40
 800606a:	f040 80b8 	bne.w	80061de <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800607a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 8167 	beq.w	8006352 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800608a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800608e:	429a      	cmp	r2, r3
 8006090:	f080 815f 	bcs.w	8006352 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800609a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0320 	and.w	r3, r3, #32
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f040 8086 	bne.w	80061bc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80060bc:	e853 3f00 	ldrex	r3, [r3]
 80060c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80060c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	461a      	mov	r2, r3
 80060d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80060da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80060de:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80060e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80060f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1da      	bne.n	80060b0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3308      	adds	r3, #8
 8006100:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006102:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006104:	e853 3f00 	ldrex	r3, [r3]
 8006108:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800610a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800610c:	f023 0301 	bic.w	r3, r3, #1
 8006110:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	3308      	adds	r3, #8
 800611a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800611e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006122:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006124:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006126:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800612a:	e841 2300 	strex	r3, r2, [r1]
 800612e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006130:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1e1      	bne.n	80060fa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3308      	adds	r3, #8
 800613c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006140:	e853 3f00 	ldrex	r3, [r3]
 8006144:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006148:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800614c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3308      	adds	r3, #8
 8006156:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800615a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800615c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006160:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006168:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e3      	bne.n	8006136 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2220      	movs	r2, #32
 8006172:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006184:	e853 3f00 	ldrex	r3, [r3]
 8006188:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800618a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800618c:	f023 0310 	bic.w	r3, r3, #16
 8006190:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	461a      	mov	r2, r3
 800619a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800619e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80061a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061a6:	e841 2300 	strex	r3, r2, [r1]
 80061aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80061ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1e4      	bne.n	800617c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fb fc89 	bl	8001ace <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	4619      	mov	r1, r3
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f8d8 	bl	800638c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061dc:	e0b9      	b.n	8006352 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 80ab 	beq.w	8006356 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8006200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 80a6 	beq.w	8006356 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006212:	e853 3f00 	ldrex	r3, [r3]
 8006216:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800621a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800621e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800622c:	647b      	str	r3, [r7, #68]	@ 0x44
 800622e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006230:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006232:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006234:	e841 2300 	strex	r3, r2, [r1]
 8006238:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800623a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1e4      	bne.n	800620a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3308      	adds	r3, #8
 8006246:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624a:	e853 3f00 	ldrex	r3, [r3]
 800624e:	623b      	str	r3, [r7, #32]
   return(result);
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	f023 0301 	bic.w	r3, r3, #1
 8006256:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3308      	adds	r3, #8
 8006260:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006264:	633a      	str	r2, [r7, #48]	@ 0x30
 8006266:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006268:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800626a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800626c:	e841 2300 	strex	r3, r2, [r1]
 8006270:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1e3      	bne.n	8006240 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2220      	movs	r2, #32
 800627c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	e853 3f00 	ldrex	r3, [r3]
 8006298:	60fb      	str	r3, [r7, #12]
   return(result);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f023 0310 	bic.w	r3, r3, #16
 80062a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	461a      	mov	r2, r3
 80062aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80062ae:	61fb      	str	r3, [r7, #28]
 80062b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b2:	69b9      	ldr	r1, [r7, #24]
 80062b4:	69fa      	ldr	r2, [r7, #28]
 80062b6:	e841 2300 	strex	r3, r2, [r1]
 80062ba:	617b      	str	r3, [r7, #20]
   return(result);
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1e4      	bne.n	800628c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2202      	movs	r2, #2
 80062c6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062cc:	4619      	mov	r1, r3
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f85c 	bl	800638c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062d4:	e03f      	b.n	8006356 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80062d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00e      	beq.n	8006300 <HAL_UART_IRQHandler+0x570>
 80062e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d008      	beq.n	8006300 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80062f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 ffe3 	bl	80072c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062fe:	e02d      	b.n	800635c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00e      	beq.n	800632a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800630c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006314:	2b00      	cmp	r3, #0
 8006316:	d008      	beq.n	800632a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800631c:	2b00      	cmp	r3, #0
 800631e:	d01c      	beq.n	800635a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	4798      	blx	r3
    }
    return;
 8006328:	e017      	b.n	800635a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800632a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800632e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006332:	2b00      	cmp	r3, #0
 8006334:	d012      	beq.n	800635c <HAL_UART_IRQHandler+0x5cc>
 8006336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800633a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00c      	beq.n	800635c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fdd8 	bl	8006ef8 <UART_EndTransmit_IT>
    return;
 8006348:	e008      	b.n	800635c <HAL_UART_IRQHandler+0x5cc>
      return;
 800634a:	bf00      	nop
 800634c:	e006      	b.n	800635c <HAL_UART_IRQHandler+0x5cc>
    return;
 800634e:	bf00      	nop
 8006350:	e004      	b.n	800635c <HAL_UART_IRQHandler+0x5cc>
      return;
 8006352:	bf00      	nop
 8006354:	e002      	b.n	800635c <HAL_UART_IRQHandler+0x5cc>
      return;
 8006356:	bf00      	nop
 8006358:	e000      	b.n	800635c <HAL_UART_IRQHandler+0x5cc>
    return;
 800635a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800635c:	37e8      	adds	r7, #232	@ 0xe8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop

08006364 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	460b      	mov	r3, r1
 8006396:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063a8:	b08a      	sub	sp, #40	@ 0x28
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	431a      	orrs	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	431a      	orrs	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	69db      	ldr	r3, [r3, #28]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	4ba4      	ldr	r3, [pc, #656]	@ (8006664 <UART_SetConfig+0x2c0>)
 80063d4:	4013      	ands	r3, r2
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	6812      	ldr	r2, [r2, #0]
 80063da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063dc:	430b      	orrs	r3, r1
 80063de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a99      	ldr	r2, [pc, #612]	@ (8006668 <UART_SetConfig+0x2c4>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d004      	beq.n	8006410 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800640c:	4313      	orrs	r3, r2
 800640e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006420:	430a      	orrs	r2, r1
 8006422:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a90      	ldr	r2, [pc, #576]	@ (800666c <UART_SetConfig+0x2c8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d126      	bne.n	800647c <UART_SetConfig+0xd8>
 800642e:	4b90      	ldr	r3, [pc, #576]	@ (8006670 <UART_SetConfig+0x2cc>)
 8006430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006434:	f003 0303 	and.w	r3, r3, #3
 8006438:	2b03      	cmp	r3, #3
 800643a:	d81b      	bhi.n	8006474 <UART_SetConfig+0xd0>
 800643c:	a201      	add	r2, pc, #4	@ (adr r2, 8006444 <UART_SetConfig+0xa0>)
 800643e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006442:	bf00      	nop
 8006444:	08006455 	.word	0x08006455
 8006448:	08006465 	.word	0x08006465
 800644c:	0800645d 	.word	0x0800645d
 8006450:	0800646d 	.word	0x0800646d
 8006454:	2301      	movs	r3, #1
 8006456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800645a:	e116      	b.n	800668a <UART_SetConfig+0x2e6>
 800645c:	2302      	movs	r3, #2
 800645e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006462:	e112      	b.n	800668a <UART_SetConfig+0x2e6>
 8006464:	2304      	movs	r3, #4
 8006466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800646a:	e10e      	b.n	800668a <UART_SetConfig+0x2e6>
 800646c:	2308      	movs	r3, #8
 800646e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006472:	e10a      	b.n	800668a <UART_SetConfig+0x2e6>
 8006474:	2310      	movs	r3, #16
 8006476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800647a:	e106      	b.n	800668a <UART_SetConfig+0x2e6>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a7c      	ldr	r2, [pc, #496]	@ (8006674 <UART_SetConfig+0x2d0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d138      	bne.n	80064f8 <UART_SetConfig+0x154>
 8006486:	4b7a      	ldr	r3, [pc, #488]	@ (8006670 <UART_SetConfig+0x2cc>)
 8006488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800648c:	f003 030c 	and.w	r3, r3, #12
 8006490:	2b0c      	cmp	r3, #12
 8006492:	d82d      	bhi.n	80064f0 <UART_SetConfig+0x14c>
 8006494:	a201      	add	r2, pc, #4	@ (adr r2, 800649c <UART_SetConfig+0xf8>)
 8006496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649a:	bf00      	nop
 800649c:	080064d1 	.word	0x080064d1
 80064a0:	080064f1 	.word	0x080064f1
 80064a4:	080064f1 	.word	0x080064f1
 80064a8:	080064f1 	.word	0x080064f1
 80064ac:	080064e1 	.word	0x080064e1
 80064b0:	080064f1 	.word	0x080064f1
 80064b4:	080064f1 	.word	0x080064f1
 80064b8:	080064f1 	.word	0x080064f1
 80064bc:	080064d9 	.word	0x080064d9
 80064c0:	080064f1 	.word	0x080064f1
 80064c4:	080064f1 	.word	0x080064f1
 80064c8:	080064f1 	.word	0x080064f1
 80064cc:	080064e9 	.word	0x080064e9
 80064d0:	2300      	movs	r3, #0
 80064d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064d6:	e0d8      	b.n	800668a <UART_SetConfig+0x2e6>
 80064d8:	2302      	movs	r3, #2
 80064da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064de:	e0d4      	b.n	800668a <UART_SetConfig+0x2e6>
 80064e0:	2304      	movs	r3, #4
 80064e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064e6:	e0d0      	b.n	800668a <UART_SetConfig+0x2e6>
 80064e8:	2308      	movs	r3, #8
 80064ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ee:	e0cc      	b.n	800668a <UART_SetConfig+0x2e6>
 80064f0:	2310      	movs	r3, #16
 80064f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064f6:	e0c8      	b.n	800668a <UART_SetConfig+0x2e6>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a5e      	ldr	r2, [pc, #376]	@ (8006678 <UART_SetConfig+0x2d4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d125      	bne.n	800654e <UART_SetConfig+0x1aa>
 8006502:	4b5b      	ldr	r3, [pc, #364]	@ (8006670 <UART_SetConfig+0x2cc>)
 8006504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006508:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800650c:	2b30      	cmp	r3, #48	@ 0x30
 800650e:	d016      	beq.n	800653e <UART_SetConfig+0x19a>
 8006510:	2b30      	cmp	r3, #48	@ 0x30
 8006512:	d818      	bhi.n	8006546 <UART_SetConfig+0x1a2>
 8006514:	2b20      	cmp	r3, #32
 8006516:	d00a      	beq.n	800652e <UART_SetConfig+0x18a>
 8006518:	2b20      	cmp	r3, #32
 800651a:	d814      	bhi.n	8006546 <UART_SetConfig+0x1a2>
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <UART_SetConfig+0x182>
 8006520:	2b10      	cmp	r3, #16
 8006522:	d008      	beq.n	8006536 <UART_SetConfig+0x192>
 8006524:	e00f      	b.n	8006546 <UART_SetConfig+0x1a2>
 8006526:	2300      	movs	r3, #0
 8006528:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800652c:	e0ad      	b.n	800668a <UART_SetConfig+0x2e6>
 800652e:	2302      	movs	r3, #2
 8006530:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006534:	e0a9      	b.n	800668a <UART_SetConfig+0x2e6>
 8006536:	2304      	movs	r3, #4
 8006538:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800653c:	e0a5      	b.n	800668a <UART_SetConfig+0x2e6>
 800653e:	2308      	movs	r3, #8
 8006540:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006544:	e0a1      	b.n	800668a <UART_SetConfig+0x2e6>
 8006546:	2310      	movs	r3, #16
 8006548:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800654c:	e09d      	b.n	800668a <UART_SetConfig+0x2e6>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a4a      	ldr	r2, [pc, #296]	@ (800667c <UART_SetConfig+0x2d8>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d125      	bne.n	80065a4 <UART_SetConfig+0x200>
 8006558:	4b45      	ldr	r3, [pc, #276]	@ (8006670 <UART_SetConfig+0x2cc>)
 800655a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800655e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006562:	2bc0      	cmp	r3, #192	@ 0xc0
 8006564:	d016      	beq.n	8006594 <UART_SetConfig+0x1f0>
 8006566:	2bc0      	cmp	r3, #192	@ 0xc0
 8006568:	d818      	bhi.n	800659c <UART_SetConfig+0x1f8>
 800656a:	2b80      	cmp	r3, #128	@ 0x80
 800656c:	d00a      	beq.n	8006584 <UART_SetConfig+0x1e0>
 800656e:	2b80      	cmp	r3, #128	@ 0x80
 8006570:	d814      	bhi.n	800659c <UART_SetConfig+0x1f8>
 8006572:	2b00      	cmp	r3, #0
 8006574:	d002      	beq.n	800657c <UART_SetConfig+0x1d8>
 8006576:	2b40      	cmp	r3, #64	@ 0x40
 8006578:	d008      	beq.n	800658c <UART_SetConfig+0x1e8>
 800657a:	e00f      	b.n	800659c <UART_SetConfig+0x1f8>
 800657c:	2300      	movs	r3, #0
 800657e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006582:	e082      	b.n	800668a <UART_SetConfig+0x2e6>
 8006584:	2302      	movs	r3, #2
 8006586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800658a:	e07e      	b.n	800668a <UART_SetConfig+0x2e6>
 800658c:	2304      	movs	r3, #4
 800658e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006592:	e07a      	b.n	800668a <UART_SetConfig+0x2e6>
 8006594:	2308      	movs	r3, #8
 8006596:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800659a:	e076      	b.n	800668a <UART_SetConfig+0x2e6>
 800659c:	2310      	movs	r3, #16
 800659e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065a2:	e072      	b.n	800668a <UART_SetConfig+0x2e6>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a35      	ldr	r2, [pc, #212]	@ (8006680 <UART_SetConfig+0x2dc>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d12a      	bne.n	8006604 <UART_SetConfig+0x260>
 80065ae:	4b30      	ldr	r3, [pc, #192]	@ (8006670 <UART_SetConfig+0x2cc>)
 80065b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065bc:	d01a      	beq.n	80065f4 <UART_SetConfig+0x250>
 80065be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065c2:	d81b      	bhi.n	80065fc <UART_SetConfig+0x258>
 80065c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065c8:	d00c      	beq.n	80065e4 <UART_SetConfig+0x240>
 80065ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065ce:	d815      	bhi.n	80065fc <UART_SetConfig+0x258>
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d003      	beq.n	80065dc <UART_SetConfig+0x238>
 80065d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065d8:	d008      	beq.n	80065ec <UART_SetConfig+0x248>
 80065da:	e00f      	b.n	80065fc <UART_SetConfig+0x258>
 80065dc:	2300      	movs	r3, #0
 80065de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065e2:	e052      	b.n	800668a <UART_SetConfig+0x2e6>
 80065e4:	2302      	movs	r3, #2
 80065e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ea:	e04e      	b.n	800668a <UART_SetConfig+0x2e6>
 80065ec:	2304      	movs	r3, #4
 80065ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065f2:	e04a      	b.n	800668a <UART_SetConfig+0x2e6>
 80065f4:	2308      	movs	r3, #8
 80065f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065fa:	e046      	b.n	800668a <UART_SetConfig+0x2e6>
 80065fc:	2310      	movs	r3, #16
 80065fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006602:	e042      	b.n	800668a <UART_SetConfig+0x2e6>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a17      	ldr	r2, [pc, #92]	@ (8006668 <UART_SetConfig+0x2c4>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d13a      	bne.n	8006684 <UART_SetConfig+0x2e0>
 800660e:	4b18      	ldr	r3, [pc, #96]	@ (8006670 <UART_SetConfig+0x2cc>)
 8006610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006614:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006618:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800661c:	d01a      	beq.n	8006654 <UART_SetConfig+0x2b0>
 800661e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006622:	d81b      	bhi.n	800665c <UART_SetConfig+0x2b8>
 8006624:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006628:	d00c      	beq.n	8006644 <UART_SetConfig+0x2a0>
 800662a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800662e:	d815      	bhi.n	800665c <UART_SetConfig+0x2b8>
 8006630:	2b00      	cmp	r3, #0
 8006632:	d003      	beq.n	800663c <UART_SetConfig+0x298>
 8006634:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006638:	d008      	beq.n	800664c <UART_SetConfig+0x2a8>
 800663a:	e00f      	b.n	800665c <UART_SetConfig+0x2b8>
 800663c:	2300      	movs	r3, #0
 800663e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006642:	e022      	b.n	800668a <UART_SetConfig+0x2e6>
 8006644:	2302      	movs	r3, #2
 8006646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800664a:	e01e      	b.n	800668a <UART_SetConfig+0x2e6>
 800664c:	2304      	movs	r3, #4
 800664e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006652:	e01a      	b.n	800668a <UART_SetConfig+0x2e6>
 8006654:	2308      	movs	r3, #8
 8006656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800665a:	e016      	b.n	800668a <UART_SetConfig+0x2e6>
 800665c:	2310      	movs	r3, #16
 800665e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006662:	e012      	b.n	800668a <UART_SetConfig+0x2e6>
 8006664:	efff69f3 	.word	0xefff69f3
 8006668:	40008000 	.word	0x40008000
 800666c:	40013800 	.word	0x40013800
 8006670:	40021000 	.word	0x40021000
 8006674:	40004400 	.word	0x40004400
 8006678:	40004800 	.word	0x40004800
 800667c:	40004c00 	.word	0x40004c00
 8006680:	40005000 	.word	0x40005000
 8006684:	2310      	movs	r3, #16
 8006686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a9f      	ldr	r2, [pc, #636]	@ (800690c <UART_SetConfig+0x568>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d17a      	bne.n	800678a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006694:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006698:	2b08      	cmp	r3, #8
 800669a:	d824      	bhi.n	80066e6 <UART_SetConfig+0x342>
 800669c:	a201      	add	r2, pc, #4	@ (adr r2, 80066a4 <UART_SetConfig+0x300>)
 800669e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a2:	bf00      	nop
 80066a4:	080066c9 	.word	0x080066c9
 80066a8:	080066e7 	.word	0x080066e7
 80066ac:	080066d1 	.word	0x080066d1
 80066b0:	080066e7 	.word	0x080066e7
 80066b4:	080066d7 	.word	0x080066d7
 80066b8:	080066e7 	.word	0x080066e7
 80066bc:	080066e7 	.word	0x080066e7
 80066c0:	080066e7 	.word	0x080066e7
 80066c4:	080066df 	.word	0x080066df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066c8:	f7fd ff3a 	bl	8004540 <HAL_RCC_GetPCLK1Freq>
 80066cc:	61f8      	str	r0, [r7, #28]
        break;
 80066ce:	e010      	b.n	80066f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066d0:	4b8f      	ldr	r3, [pc, #572]	@ (8006910 <UART_SetConfig+0x56c>)
 80066d2:	61fb      	str	r3, [r7, #28]
        break;
 80066d4:	e00d      	b.n	80066f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066d6:	f7fd fe9b 	bl	8004410 <HAL_RCC_GetSysClockFreq>
 80066da:	61f8      	str	r0, [r7, #28]
        break;
 80066dc:	e009      	b.n	80066f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066e2:	61fb      	str	r3, [r7, #28]
        break;
 80066e4:	e005      	b.n	80066f2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80066f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 80fb 	beq.w	80068f0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	4613      	mov	r3, r2
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	4413      	add	r3, r2
 8006704:	69fa      	ldr	r2, [r7, #28]
 8006706:	429a      	cmp	r2, r3
 8006708:	d305      	bcc.n	8006716 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006710:	69fa      	ldr	r2, [r7, #28]
 8006712:	429a      	cmp	r2, r3
 8006714:	d903      	bls.n	800671e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800671c:	e0e8      	b.n	80068f0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	2200      	movs	r2, #0
 8006722:	461c      	mov	r4, r3
 8006724:	4615      	mov	r5, r2
 8006726:	f04f 0200 	mov.w	r2, #0
 800672a:	f04f 0300 	mov.w	r3, #0
 800672e:	022b      	lsls	r3, r5, #8
 8006730:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006734:	0222      	lsls	r2, r4, #8
 8006736:	68f9      	ldr	r1, [r7, #12]
 8006738:	6849      	ldr	r1, [r1, #4]
 800673a:	0849      	lsrs	r1, r1, #1
 800673c:	2000      	movs	r0, #0
 800673e:	4688      	mov	r8, r1
 8006740:	4681      	mov	r9, r0
 8006742:	eb12 0a08 	adds.w	sl, r2, r8
 8006746:	eb43 0b09 	adc.w	fp, r3, r9
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	603b      	str	r3, [r7, #0]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006758:	4650      	mov	r0, sl
 800675a:	4659      	mov	r1, fp
 800675c:	f7f9 fda0 	bl	80002a0 <__aeabi_uldivmod>
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	4613      	mov	r3, r2
 8006766:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800676e:	d308      	bcc.n	8006782 <UART_SetConfig+0x3de>
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006776:	d204      	bcs.n	8006782 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	60da      	str	r2, [r3, #12]
 8006780:	e0b6      	b.n	80068f0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006788:	e0b2      	b.n	80068f0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006792:	d15e      	bne.n	8006852 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006794:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006798:	2b08      	cmp	r3, #8
 800679a:	d828      	bhi.n	80067ee <UART_SetConfig+0x44a>
 800679c:	a201      	add	r2, pc, #4	@ (adr r2, 80067a4 <UART_SetConfig+0x400>)
 800679e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a2:	bf00      	nop
 80067a4:	080067c9 	.word	0x080067c9
 80067a8:	080067d1 	.word	0x080067d1
 80067ac:	080067d9 	.word	0x080067d9
 80067b0:	080067ef 	.word	0x080067ef
 80067b4:	080067df 	.word	0x080067df
 80067b8:	080067ef 	.word	0x080067ef
 80067bc:	080067ef 	.word	0x080067ef
 80067c0:	080067ef 	.word	0x080067ef
 80067c4:	080067e7 	.word	0x080067e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067c8:	f7fd feba 	bl	8004540 <HAL_RCC_GetPCLK1Freq>
 80067cc:	61f8      	str	r0, [r7, #28]
        break;
 80067ce:	e014      	b.n	80067fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067d0:	f7fd fecc 	bl	800456c <HAL_RCC_GetPCLK2Freq>
 80067d4:	61f8      	str	r0, [r7, #28]
        break;
 80067d6:	e010      	b.n	80067fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067d8:	4b4d      	ldr	r3, [pc, #308]	@ (8006910 <UART_SetConfig+0x56c>)
 80067da:	61fb      	str	r3, [r7, #28]
        break;
 80067dc:	e00d      	b.n	80067fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067de:	f7fd fe17 	bl	8004410 <HAL_RCC_GetSysClockFreq>
 80067e2:	61f8      	str	r0, [r7, #28]
        break;
 80067e4:	e009      	b.n	80067fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067ea:	61fb      	str	r3, [r7, #28]
        break;
 80067ec:	e005      	b.n	80067fa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80067ee:	2300      	movs	r3, #0
 80067f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80067f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d077      	beq.n	80068f0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	005a      	lsls	r2, r3, #1
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	085b      	lsrs	r3, r3, #1
 800680a:	441a      	add	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	fbb2 f3f3 	udiv	r3, r2, r3
 8006814:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	2b0f      	cmp	r3, #15
 800681a:	d916      	bls.n	800684a <UART_SetConfig+0x4a6>
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006822:	d212      	bcs.n	800684a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	b29b      	uxth	r3, r3
 8006828:	f023 030f 	bic.w	r3, r3, #15
 800682c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	085b      	lsrs	r3, r3, #1
 8006832:	b29b      	uxth	r3, r3
 8006834:	f003 0307 	and.w	r3, r3, #7
 8006838:	b29a      	uxth	r2, r3
 800683a:	8afb      	ldrh	r3, [r7, #22]
 800683c:	4313      	orrs	r3, r2
 800683e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	8afa      	ldrh	r2, [r7, #22]
 8006846:	60da      	str	r2, [r3, #12]
 8006848:	e052      	b.n	80068f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006850:	e04e      	b.n	80068f0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006852:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006856:	2b08      	cmp	r3, #8
 8006858:	d827      	bhi.n	80068aa <UART_SetConfig+0x506>
 800685a:	a201      	add	r2, pc, #4	@ (adr r2, 8006860 <UART_SetConfig+0x4bc>)
 800685c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006860:	08006885 	.word	0x08006885
 8006864:	0800688d 	.word	0x0800688d
 8006868:	08006895 	.word	0x08006895
 800686c:	080068ab 	.word	0x080068ab
 8006870:	0800689b 	.word	0x0800689b
 8006874:	080068ab 	.word	0x080068ab
 8006878:	080068ab 	.word	0x080068ab
 800687c:	080068ab 	.word	0x080068ab
 8006880:	080068a3 	.word	0x080068a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006884:	f7fd fe5c 	bl	8004540 <HAL_RCC_GetPCLK1Freq>
 8006888:	61f8      	str	r0, [r7, #28]
        break;
 800688a:	e014      	b.n	80068b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800688c:	f7fd fe6e 	bl	800456c <HAL_RCC_GetPCLK2Freq>
 8006890:	61f8      	str	r0, [r7, #28]
        break;
 8006892:	e010      	b.n	80068b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006894:	4b1e      	ldr	r3, [pc, #120]	@ (8006910 <UART_SetConfig+0x56c>)
 8006896:	61fb      	str	r3, [r7, #28]
        break;
 8006898:	e00d      	b.n	80068b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800689a:	f7fd fdb9 	bl	8004410 <HAL_RCC_GetSysClockFreq>
 800689e:	61f8      	str	r0, [r7, #28]
        break;
 80068a0:	e009      	b.n	80068b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068a6:	61fb      	str	r3, [r7, #28]
        break;
 80068a8:	e005      	b.n	80068b6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80068b4:	bf00      	nop
    }

    if (pclk != 0U)
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d019      	beq.n	80068f0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	085a      	lsrs	r2, r3, #1
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	441a      	add	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	2b0f      	cmp	r3, #15
 80068d4:	d909      	bls.n	80068ea <UART_SetConfig+0x546>
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068dc:	d205      	bcs.n	80068ea <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	60da      	str	r2, [r3, #12]
 80068e8:	e002      	b.n	80068f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80068fc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006900:	4618      	mov	r0, r3
 8006902:	3728      	adds	r7, #40	@ 0x28
 8006904:	46bd      	mov	sp, r7
 8006906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800690a:	bf00      	nop
 800690c:	40008000 	.word	0x40008000
 8006910:	00f42400 	.word	0x00f42400

08006914 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006920:	f003 0308 	and.w	r3, r3, #8
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00a      	beq.n	800693e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00a      	beq.n	8006960 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00a      	beq.n	8006982 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	430a      	orrs	r2, r1
 8006980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006986:	f003 0304 	and.w	r3, r3, #4
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00a      	beq.n	80069a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a8:	f003 0310 	and.w	r3, r3, #16
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00a      	beq.n	80069c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ca:	f003 0320 	and.w	r3, r3, #32
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00a      	beq.n	80069e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d01a      	beq.n	8006a2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a12:	d10a      	bne.n	8006a2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	605a      	str	r2, [r3, #4]
  }
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b098      	sub	sp, #96	@ 0x60
 8006a5c:	af02      	add	r7, sp, #8
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a68:	f7fa fef0 	bl	800184c <HAL_GetTick>
 8006a6c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0308 	and.w	r3, r3, #8
 8006a78:	2b08      	cmp	r3, #8
 8006a7a:	d12e      	bne.n	8006ada <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a80:	9300      	str	r3, [sp, #0]
 8006a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a84:	2200      	movs	r2, #0
 8006a86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f88c 	bl	8006ba8 <UART_WaitOnFlagUntilTimeout>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d021      	beq.n	8006ada <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aaa:	653b      	str	r3, [r7, #80]	@ 0x50
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ab4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ab6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006aba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e6      	bne.n	8006a96 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2220      	movs	r2, #32
 8006acc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e062      	b.n	8006ba0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	2b04      	cmp	r3, #4
 8006ae6:	d149      	bne.n	8006b7c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ae8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006af0:	2200      	movs	r2, #0
 8006af2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f856 	bl	8006ba8 <UART_WaitOnFlagUntilTimeout>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d03c      	beq.n	8006b7c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0a:	e853 3f00 	ldrex	r3, [r3]
 8006b0e:	623b      	str	r3, [r7, #32]
   return(result);
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b20:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b22:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b28:	e841 2300 	strex	r3, r2, [r1]
 8006b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1e6      	bne.n	8006b02 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3308      	adds	r3, #8
 8006b3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	e853 3f00 	ldrex	r3, [r3]
 8006b42:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0301 	bic.w	r3, r3, #1
 8006b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	3308      	adds	r3, #8
 8006b52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b54:	61fa      	str	r2, [r7, #28]
 8006b56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b58:	69b9      	ldr	r1, [r7, #24]
 8006b5a:	69fa      	ldr	r2, [r7, #28]
 8006b5c:	e841 2300 	strex	r3, r2, [r1]
 8006b60:	617b      	str	r3, [r7, #20]
   return(result);
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1e5      	bne.n	8006b34 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e011      	b.n	8006ba0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2220      	movs	r2, #32
 8006b86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3758      	adds	r7, #88	@ 0x58
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	603b      	str	r3, [r7, #0]
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bb8:	e049      	b.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc0:	d045      	beq.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bc2:	f7fa fe43 	bl	800184c <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d302      	bcc.n	8006bd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d101      	bne.n	8006bdc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e048      	b.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0304 	and.w	r3, r3, #4
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d031      	beq.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	f003 0308 	and.w	r3, r3, #8
 8006bf4:	2b08      	cmp	r3, #8
 8006bf6:	d110      	bne.n	8006c1a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2208      	movs	r2, #8
 8006bfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 f8ff 	bl	8006e04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2208      	movs	r2, #8
 8006c0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e029      	b.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c28:	d111      	bne.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 f8e5 	bl	8006e04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e00f      	b.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	69da      	ldr	r2, [r3, #28]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	4013      	ands	r3, r2
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	bf0c      	ite	eq
 8006c5e:	2301      	moveq	r3, #1
 8006c60:	2300      	movne	r3, #0
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	461a      	mov	r2, r3
 8006c66:	79fb      	ldrb	r3, [r7, #7]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d0a6      	beq.n	8006bba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
	...

08006c78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b097      	sub	sp, #92	@ 0x5c
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	4613      	mov	r3, r2
 8006c84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	88fa      	ldrh	r2, [r7, #6]
 8006c90:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	88fa      	ldrh	r2, [r7, #6]
 8006c98:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006caa:	d10e      	bne.n	8006cca <UART_Start_Receive_IT+0x52>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d105      	bne.n	8006cc0 <UART_Start_Receive_IT+0x48>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006cba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006cbe:	e02d      	b.n	8006d1c <UART_Start_Receive_IT+0xa4>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	22ff      	movs	r2, #255	@ 0xff
 8006cc4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006cc8:	e028      	b.n	8006d1c <UART_Start_Receive_IT+0xa4>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10d      	bne.n	8006cee <UART_Start_Receive_IT+0x76>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d104      	bne.n	8006ce4 <UART_Start_Receive_IT+0x6c>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	22ff      	movs	r2, #255	@ 0xff
 8006cde:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006ce2:	e01b      	b.n	8006d1c <UART_Start_Receive_IT+0xa4>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	227f      	movs	r2, #127	@ 0x7f
 8006ce8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006cec:	e016      	b.n	8006d1c <UART_Start_Receive_IT+0xa4>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cf6:	d10d      	bne.n	8006d14 <UART_Start_Receive_IT+0x9c>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d104      	bne.n	8006d0a <UART_Start_Receive_IT+0x92>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	227f      	movs	r2, #127	@ 0x7f
 8006d04:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d08:	e008      	b.n	8006d1c <UART_Start_Receive_IT+0xa4>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	223f      	movs	r2, #63	@ 0x3f
 8006d0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006d12:	e003      	b.n	8006d1c <UART_Start_Receive_IT+0xa4>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2222      	movs	r2, #34	@ 0x22
 8006d28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3308      	adds	r3, #8
 8006d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d36:	e853 3f00 	ldrex	r3, [r3]
 8006d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3e:	f043 0301 	orr.w	r3, r3, #1
 8006d42:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	3308      	adds	r3, #8
 8006d4a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d4c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006d4e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d50:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006d52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d54:	e841 2300 	strex	r3, r2, [r1]
 8006d58:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006d5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1e5      	bne.n	8006d2c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d68:	d107      	bne.n	8006d7a <UART_Start_Receive_IT+0x102>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d103      	bne.n	8006d7a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4a21      	ldr	r2, [pc, #132]	@ (8006dfc <UART_Start_Receive_IT+0x184>)
 8006d76:	669a      	str	r2, [r3, #104]	@ 0x68
 8006d78:	e002      	b.n	8006d80 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4a20      	ldr	r2, [pc, #128]	@ (8006e00 <UART_Start_Receive_IT+0x188>)
 8006d7e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d019      	beq.n	8006dbc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d90:	e853 3f00 	ldrex	r3, [r3]
 8006d94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d98:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006d9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006da8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006daa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006dac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006dae:	e841 2300 	strex	r3, r2, [r1]
 8006db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1e6      	bne.n	8006d88 <UART_Start_Receive_IT+0x110>
 8006dba:	e018      	b.n	8006dee <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	e853 3f00 	ldrex	r3, [r3]
 8006dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	f043 0320 	orr.w	r3, r3, #32
 8006dd0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dda:	623b      	str	r3, [r7, #32]
 8006ddc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dde:	69f9      	ldr	r1, [r7, #28]
 8006de0:	6a3a      	ldr	r2, [r7, #32]
 8006de2:	e841 2300 	strex	r3, r2, [r1]
 8006de6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1e6      	bne.n	8006dbc <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	375c      	adds	r7, #92	@ 0x5c
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	08007109 	.word	0x08007109
 8006e00:	08006f4d 	.word	0x08006f4d

08006e04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b095      	sub	sp, #84	@ 0x54
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e14:	e853 3f00 	ldrex	r3, [r3]
 8006e18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	461a      	mov	r2, r3
 8006e28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e32:	e841 2300 	strex	r3, r2, [r1]
 8006e36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1e6      	bne.n	8006e0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3308      	adds	r3, #8
 8006e44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	e853 3f00 	ldrex	r3, [r3]
 8006e4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	f023 0301 	bic.w	r3, r3, #1
 8006e54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3308      	adds	r3, #8
 8006e5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e66:	e841 2300 	strex	r3, r2, [r1]
 8006e6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1e5      	bne.n	8006e3e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d118      	bne.n	8006eac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	e853 3f00 	ldrex	r3, [r3]
 8006e86:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f023 0310 	bic.w	r3, r3, #16
 8006e8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	461a      	mov	r2, r3
 8006e96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e98:	61bb      	str	r3, [r7, #24]
 8006e9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9c:	6979      	ldr	r1, [r7, #20]
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	e841 2300 	strex	r3, r2, [r1]
 8006ea4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e6      	bne.n	8006e7a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006ec0:	bf00      	nop
 8006ec2:	3754      	adds	r7, #84	@ 0x54
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f7ff fa44 	bl	8006378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ef0:	bf00      	nop
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b088      	sub	sp, #32
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	e853 3f00 	ldrex	r3, [r3]
 8006f0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f14:	61fb      	str	r3, [r7, #28]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	61bb      	str	r3, [r7, #24]
 8006f20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f22:	6979      	ldr	r1, [r7, #20]
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	e841 2300 	strex	r3, r2, [r1]
 8006f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1e6      	bne.n	8006f00 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2220      	movs	r2, #32
 8006f36:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7ff fa10 	bl	8006364 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f44:	bf00      	nop
 8006f46:	3720      	adds	r7, #32
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b09c      	sub	sp, #112	@ 0x70
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f5a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f64:	2b22      	cmp	r3, #34	@ 0x22
 8006f66:	f040 80be 	bne.w	80070e6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006f70:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f74:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006f78:	b2d9      	uxtb	r1, r3
 8006f7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f84:	400a      	ands	r2, r1
 8006f86:	b2d2      	uxtb	r2, r2
 8006f88:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f8e:	1c5a      	adds	r2, r3, #1
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f040 80a3 	bne.w	80070fa <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fbc:	e853 3f00 	ldrex	r3, [r3]
 8006fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006fc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006fd2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fd4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006fd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006fda:	e841 2300 	strex	r3, r2, [r1]
 8006fde:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006fe0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1e6      	bne.n	8006fb4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3308      	adds	r3, #8
 8006fec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff8:	f023 0301 	bic.w	r3, r3, #1
 8006ffc:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3308      	adds	r3, #8
 8007004:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007006:	647a      	str	r2, [r7, #68]	@ 0x44
 8007008:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800700c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800700e:	e841 2300 	strex	r3, r2, [r1]
 8007012:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1e5      	bne.n	8006fe6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2220      	movs	r2, #32
 800701e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a34      	ldr	r2, [pc, #208]	@ (8007104 <UART_RxISR_8BIT+0x1b8>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d01f      	beq.n	8007078 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d018      	beq.n	8007078 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704e:	e853 3f00 	ldrex	r3, [r3]
 8007052:	623b      	str	r3, [r7, #32]
   return(result);
 8007054:	6a3b      	ldr	r3, [r7, #32]
 8007056:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800705a:	663b      	str	r3, [r7, #96]	@ 0x60
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	461a      	mov	r2, r3
 8007062:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007064:	633b      	str	r3, [r7, #48]	@ 0x30
 8007066:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007068:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800706a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800706c:	e841 2300 	strex	r3, r2, [r1]
 8007070:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1e6      	bne.n	8007046 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800707c:	2b01      	cmp	r3, #1
 800707e:	d12e      	bne.n	80070de <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	e853 3f00 	ldrex	r3, [r3]
 8007092:	60fb      	str	r3, [r7, #12]
   return(result);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0310 	bic.w	r3, r3, #16
 800709a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	461a      	mov	r2, r3
 80070a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070a4:	61fb      	str	r3, [r7, #28]
 80070a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a8:	69b9      	ldr	r1, [r7, #24]
 80070aa:	69fa      	ldr	r2, [r7, #28]
 80070ac:	e841 2300 	strex	r3, r2, [r1]
 80070b0:	617b      	str	r3, [r7, #20]
   return(result);
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1e6      	bne.n	8007086 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	69db      	ldr	r3, [r3, #28]
 80070be:	f003 0310 	and.w	r3, r3, #16
 80070c2:	2b10      	cmp	r3, #16
 80070c4:	d103      	bne.n	80070ce <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2210      	movs	r2, #16
 80070cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80070d4:	4619      	mov	r1, r3
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7ff f958 	bl	800638c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070dc:	e00d      	b.n	80070fa <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7f9 fa90 	bl	8000604 <HAL_UART_RxCpltCallback>
}
 80070e4:	e009      	b.n	80070fa <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	8b1b      	ldrh	r3, [r3, #24]
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f042 0208 	orr.w	r2, r2, #8
 80070f6:	b292      	uxth	r2, r2
 80070f8:	831a      	strh	r2, [r3, #24]
}
 80070fa:	bf00      	nop
 80070fc:	3770      	adds	r7, #112	@ 0x70
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	40008000 	.word	0x40008000

08007108 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b09c      	sub	sp, #112	@ 0x70
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007116:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007120:	2b22      	cmp	r3, #34	@ 0x22
 8007122:	f040 80be 	bne.w	80072a2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800712c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007134:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007136:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800713a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800713e:	4013      	ands	r3, r2
 8007140:	b29a      	uxth	r2, r3
 8007142:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007144:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800714a:	1c9a      	adds	r2, r3, #2
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007156:	b29b      	uxth	r3, r3
 8007158:	3b01      	subs	r3, #1
 800715a:	b29a      	uxth	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007168:	b29b      	uxth	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	f040 80a3 	bne.w	80072b6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007178:	e853 3f00 	ldrex	r3, [r3]
 800717c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800717e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007180:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007184:	667b      	str	r3, [r7, #100]	@ 0x64
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800718e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007190:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007194:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800719c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e6      	bne.n	8007170 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3308      	adds	r3, #8
 80071a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ac:	e853 3f00 	ldrex	r3, [r3]
 80071b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b4:	f023 0301 	bic.w	r3, r3, #1
 80071b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3308      	adds	r3, #8
 80071c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80071c2:	643a      	str	r2, [r7, #64]	@ 0x40
 80071c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071ca:	e841 2300 	strex	r3, r2, [r1]
 80071ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1e5      	bne.n	80071a2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2220      	movs	r2, #32
 80071da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a34      	ldr	r2, [pc, #208]	@ (80072c0 <UART_RxISR_16BIT+0x1b8>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d01f      	beq.n	8007234 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d018      	beq.n	8007234 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	e853 3f00 	ldrex	r3, [r3]
 800720e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007216:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	461a      	mov	r2, r3
 800721e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007220:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007222:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007224:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007226:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007228:	e841 2300 	strex	r3, r2, [r1]
 800722c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800722e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1e6      	bne.n	8007202 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007238:	2b01      	cmp	r3, #1
 800723a:	d12e      	bne.n	800729a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	e853 3f00 	ldrex	r3, [r3]
 800724e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f023 0310 	bic.w	r3, r3, #16
 8007256:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	461a      	mov	r2, r3
 800725e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007260:	61bb      	str	r3, [r7, #24]
 8007262:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007264:	6979      	ldr	r1, [r7, #20]
 8007266:	69ba      	ldr	r2, [r7, #24]
 8007268:	e841 2300 	strex	r3, r2, [r1]
 800726c:	613b      	str	r3, [r7, #16]
   return(result);
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1e6      	bne.n	8007242 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	f003 0310 	and.w	r3, r3, #16
 800727e:	2b10      	cmp	r3, #16
 8007280:	d103      	bne.n	800728a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2210      	movs	r2, #16
 8007288:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007290:	4619      	mov	r1, r3
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7ff f87a 	bl	800638c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007298:	e00d      	b.n	80072b6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7f9 f9b2 	bl	8000604 <HAL_UART_RxCpltCallback>
}
 80072a0:	e009      	b.n	80072b6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	8b1b      	ldrh	r3, [r3, #24]
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f042 0208 	orr.w	r2, r2, #8
 80072b2:	b292      	uxth	r2, r2
 80072b4:	831a      	strh	r2, [r3, #24]
}
 80072b6:	bf00      	nop
 80072b8:	3770      	adds	r7, #112	@ 0x70
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	40008000 	.word	0x40008000

080072c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072d8:	b084      	sub	sp, #16
 80072da:	b580      	push	{r7, lr}
 80072dc:	b084      	sub	sp, #16
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	f107 001c 	add.w	r0, r7, #28
 80072e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f9c0 	bl	800767c <USB_CoreReset>
 80072fc:	4603      	mov	r3, r0
 80072fe:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007300:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007302:	2b00      	cmp	r3, #0
 8007304:	d106      	bne.n	8007314 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800730a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	639a      	str	r2, [r3, #56]	@ 0x38
 8007312:	e005      	b.n	8007320 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007318:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8007320:	7bfb      	ldrb	r3, [r7, #15]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800732c:	b004      	add	sp, #16
 800732e:	4770      	bx	lr

08007330 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f043 0201 	orr.w	r2, r3, #1
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	370c      	adds	r7, #12
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007352:	b480      	push	{r7}
 8007354:	b083      	sub	sp, #12
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f023 0201 	bic.w	r2, r3, #1
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	460b      	mov	r3, r1
 800737e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007380:	2300      	movs	r3, #0
 8007382:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007390:	78fb      	ldrb	r3, [r7, #3]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d115      	bne.n	80073c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80073a2:	2001      	movs	r0, #1
 80073a4:	f7fa fa5e 	bl	8001864 <HAL_Delay>
      ms++;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	3301      	adds	r3, #1
 80073ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f956 	bl	8007660 <USB_GetMode>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d01e      	beq.n	80073f8 <USB_SetCurrentMode+0x84>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2b31      	cmp	r3, #49	@ 0x31
 80073be:	d9f0      	bls.n	80073a2 <USB_SetCurrentMode+0x2e>
 80073c0:	e01a      	b.n	80073f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80073c2:	78fb      	ldrb	r3, [r7, #3]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d115      	bne.n	80073f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80073d4:	2001      	movs	r0, #1
 80073d6:	f7fa fa45 	bl	8001864 <HAL_Delay>
      ms++;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	3301      	adds	r3, #1
 80073de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f93d 	bl	8007660 <USB_GetMode>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d005      	beq.n	80073f8 <USB_SetCurrentMode+0x84>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2b31      	cmp	r3, #49	@ 0x31
 80073f0:	d9f0      	bls.n	80073d4 <USB_SetCurrentMode+0x60>
 80073f2:	e001      	b.n	80073f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e005      	b.n	8007404 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2b32      	cmp	r3, #50	@ 0x32
 80073fc:	d101      	bne.n	8007402 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e000      	b.n	8007404 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007416:	2300      	movs	r3, #0
 8007418:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	3301      	adds	r3, #1
 800741e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	4a13      	ldr	r2, [pc, #76]	@ (8007470 <USB_FlushTxFifo+0x64>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d901      	bls.n	800742c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e01b      	b.n	8007464 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	2b00      	cmp	r3, #0
 8007432:	daf2      	bge.n	800741a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	019b      	lsls	r3, r3, #6
 800743c:	f043 0220 	orr.w	r2, r3, #32
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	3301      	adds	r3, #1
 8007448:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	4a08      	ldr	r2, [pc, #32]	@ (8007470 <USB_FlushTxFifo+0x64>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d901      	bls.n	8007456 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e006      	b.n	8007464 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	f003 0320 	and.w	r3, r3, #32
 800745e:	2b20      	cmp	r3, #32
 8007460:	d0f0      	beq.n	8007444 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	00030d40 	.word	0x00030d40

08007474 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800747c:	2300      	movs	r3, #0
 800747e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	3301      	adds	r3, #1
 8007484:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	4a11      	ldr	r2, [pc, #68]	@ (80074d0 <USB_FlushRxFifo+0x5c>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d901      	bls.n	8007492 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e018      	b.n	80074c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	2b00      	cmp	r3, #0
 8007498:	daf2      	bge.n	8007480 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800749a:	2300      	movs	r3, #0
 800749c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2210      	movs	r2, #16
 80074a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	3301      	adds	r3, #1
 80074a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	4a08      	ldr	r2, [pc, #32]	@ (80074d0 <USB_FlushRxFifo+0x5c>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d901      	bls.n	80074b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e006      	b.n	80074c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	f003 0310 	and.w	r3, r3, #16
 80074be:	2b10      	cmp	r3, #16
 80074c0:	d0f0      	beq.n	80074a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	00030d40 	.word	0x00030d40

080074d4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b089      	sub	sp, #36	@ 0x24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	4611      	mov	r1, r2
 80074e0:	461a      	mov	r2, r3
 80074e2:	460b      	mov	r3, r1
 80074e4:	71fb      	strb	r3, [r7, #7]
 80074e6:	4613      	mov	r3, r2
 80074e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80074f2:	88bb      	ldrh	r3, [r7, #4]
 80074f4:	3303      	adds	r3, #3
 80074f6:	089b      	lsrs	r3, r3, #2
 80074f8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80074fa:	2300      	movs	r3, #0
 80074fc:	61bb      	str	r3, [r7, #24]
 80074fe:	e018      	b.n	8007532 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007500:	79fb      	ldrb	r3, [r7, #7]
 8007502:	031a      	lsls	r2, r3, #12
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	4413      	add	r3, r2
 8007508:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800750c:	461a      	mov	r2, r3
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	3301      	adds	r3, #1
 8007518:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	3301      	adds	r3, #1
 800751e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	3301      	adds	r3, #1
 8007524:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	3301      	adds	r3, #1
 800752a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	3301      	adds	r3, #1
 8007530:	61bb      	str	r3, [r7, #24]
 8007532:	69ba      	ldr	r2, [r7, #24]
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	429a      	cmp	r2, r3
 8007538:	d3e2      	bcc.n	8007500 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3724      	adds	r7, #36	@ 0x24
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007548:	b480      	push	{r7}
 800754a:	b08b      	sub	sp, #44	@ 0x2c
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	4613      	mov	r3, r2
 8007554:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800755e:	88fb      	ldrh	r3, [r7, #6]
 8007560:	089b      	lsrs	r3, r3, #2
 8007562:	b29b      	uxth	r3, r3
 8007564:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007566:	88fb      	ldrh	r3, [r7, #6]
 8007568:	f003 0303 	and.w	r3, r3, #3
 800756c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800756e:	2300      	movs	r3, #0
 8007570:	623b      	str	r3, [r7, #32]
 8007572:	e014      	b.n	800759e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007582:	3301      	adds	r3, #1
 8007584:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007588:	3301      	adds	r3, #1
 800758a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800758c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758e:	3301      	adds	r3, #1
 8007590:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007594:	3301      	adds	r3, #1
 8007596:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	3301      	adds	r3, #1
 800759c:	623b      	str	r3, [r7, #32]
 800759e:	6a3a      	ldr	r2, [r7, #32]
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d3e6      	bcc.n	8007574 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80075a6:	8bfb      	ldrh	r3, [r7, #30]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d01e      	beq.n	80075ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80075ac:	2300      	movs	r3, #0
 80075ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075b6:	461a      	mov	r2, r3
 80075b8:	f107 0310 	add.w	r3, r7, #16
 80075bc:	6812      	ldr	r2, [r2, #0]
 80075be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80075c0:	693a      	ldr	r2, [r7, #16]
 80075c2:	6a3b      	ldr	r3, [r7, #32]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	fa22 f303 	lsr.w	r3, r2, r3
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d0:	701a      	strb	r2, [r3, #0]
      i++;
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	3301      	adds	r3, #1
 80075d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80075d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075da:	3301      	adds	r3, #1
 80075dc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80075de:	8bfb      	ldrh	r3, [r7, #30]
 80075e0:	3b01      	subs	r3, #1
 80075e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80075e4:	8bfb      	ldrh	r3, [r7, #30]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1ea      	bne.n	80075c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80075ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	372c      	adds	r7, #44	@ 0x2c
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	4013      	ands	r3, r2
 800760e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007610:	68fb      	ldr	r3, [r7, #12]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800761e:	b480      	push	{r7}
 8007620:	b085      	sub	sp, #20
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	460b      	mov	r3, r1
 8007628:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800762e:	78fb      	ldrb	r3, [r7, #3]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	4413      	add	r3, r2
 8007636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800763e:	78fb      	ldrb	r3, [r7, #3]
 8007640:	015a      	lsls	r2, r3, #5
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4413      	add	r3, r2
 8007646:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	4013      	ands	r3, r2
 8007650:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007652:	68bb      	ldr	r3, [r7, #8]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	f003 0301 	and.w	r3, r3, #1
}
 8007670:	4618      	mov	r0, r3
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007684:	2300      	movs	r3, #0
 8007686:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	3301      	adds	r3, #1
 800768c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	4a13      	ldr	r2, [pc, #76]	@ (80076e0 <USB_CoreReset+0x64>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d901      	bls.n	800769a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e01b      	b.n	80076d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	daf2      	bge.n	8007688 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80076a2:	2300      	movs	r3, #0
 80076a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	f043 0201 	orr.w	r2, r3, #1
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3301      	adds	r3, #1
 80076b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	4a09      	ldr	r2, [pc, #36]	@ (80076e0 <USB_CoreReset+0x64>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d901      	bls.n	80076c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e006      	b.n	80076d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	f003 0301 	and.w	r3, r3, #1
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d0f0      	beq.n	80076b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	00030d40 	.word	0x00030d40

080076e4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076e4:	b084      	sub	sp, #16
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b086      	sub	sp, #24
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80076f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007704:	461a      	mov	r2, r3
 8007706:	2300      	movs	r3, #0
 8007708:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800770e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800771a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007730:	f023 0304 	bic.w	r3, r3, #4
 8007734:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007736:	2110      	movs	r1, #16
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7ff fe67 	bl	800740c <USB_FlushTxFifo>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7ff fe93 	bl	8007474 <USB_FlushRxFifo>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007758:	2300      	movs	r3, #0
 800775a:	613b      	str	r3, [r7, #16]
 800775c:	e015      	b.n	800778a <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	015a      	lsls	r2, r3, #5
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	4413      	add	r3, r2
 8007766:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800776a:	461a      	mov	r2, r3
 800776c:	f04f 33ff 	mov.w	r3, #4294967295
 8007770:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	015a      	lsls	r2, r3, #5
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	4413      	add	r3, r2
 800777a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800777e:	461a      	mov	r2, r3
 8007780:	2300      	movs	r3, #0
 8007782:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	3301      	adds	r3, #1
 8007788:	613b      	str	r3, [r7, #16]
 800778a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	429a      	cmp	r2, r3
 8007790:	d3e5      	bcc.n	800775e <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f04f 32ff 	mov.w	r2, #4294967295
 800779e:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2280      	movs	r2, #128	@ 0x80
 80077a4:	625a      	str	r2, [r3, #36]	@ 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a0c      	ldr	r2, [pc, #48]	@ (80077dc <USB_HostInit+0xf8>)
 80077aa:	629a      	str	r2, [r3, #40]	@ 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a0c      	ldr	r2, [pc, #48]	@ (80077e0 <USB_HostInit+0xfc>)
 80077b0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	f043 0210 	orr.w	r2, r3, #16
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	699a      	ldr	r2, [r3, #24]
 80077c4:	4b07      	ldr	r3, [pc, #28]	@ (80077e4 <USB_HostInit+0x100>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80077cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077d8:	b004      	add	sp, #16
 80077da:	4770      	bx	lr
 80077dc:	00600080 	.word	0x00600080
 80077e0:	004000e0 	.word	0x004000e0
 80077e4:	a3200008 	.word	0xa3200008

080077e8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007806:	f023 0303 	bic.w	r3, r3, #3
 800780a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	78fb      	ldrb	r3, [r7, #3]
 8007816:	f003 0303 	and.w	r3, r3, #3
 800781a:	68f9      	ldr	r1, [r7, #12]
 800781c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007820:	4313      	orrs	r3, r2
 8007822:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007824:	78fb      	ldrb	r3, [r7, #3]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d107      	bne.n	800783a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007830:	461a      	mov	r2, r3
 8007832:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007836:	6053      	str	r3, [r2, #4]
 8007838:	e00c      	b.n	8007854 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800783a:	78fb      	ldrb	r3, [r7, #3]
 800783c:	2b02      	cmp	r3, #2
 800783e:	d107      	bne.n	8007850 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007846:	461a      	mov	r2, r3
 8007848:	f241 7370 	movw	r3, #6000	@ 0x1770
 800784c:	6053      	str	r3, [r2, #4]
 800784e:	e001      	b.n	8007854 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	e000      	b.n	8007856 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3714      	adds	r7, #20
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b084      	sub	sp, #16
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800786e:	2300      	movs	r3, #0
 8007870:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007882:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800788c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007890:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007892:	2064      	movs	r0, #100	@ 0x64
 8007894:	f7f9 ffe6 	bl	8001864 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80078a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078a4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80078a6:	200a      	movs	r0, #10
 80078a8:	f7f9 ffdc 	bl	8001864 <HAL_Delay>

  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b085      	sub	sp, #20
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	460b      	mov	r3, r1
 80078c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80078da:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d109      	bne.n	80078fa <USB_DriveVbus+0x44>
 80078e6:	78fb      	ldrb	r3, [r7, #3]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d106      	bne.n	80078fa <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80078f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80078f8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007900:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007904:	d109      	bne.n	800791a <USB_DriveVbus+0x64>
 8007906:	78fb      	ldrb	r3, [r7, #3]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d106      	bne.n	800791a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007914:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007918:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007934:	2300      	movs	r3, #0
 8007936:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	0c5b      	lsrs	r3, r3, #17
 8007946:	f003 0303 	and.w	r3, r3, #3
}
 800794a:	4618      	mov	r0, r3
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007956:	b480      	push	{r7}
 8007958:	b085      	sub	sp, #20
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	b29b      	uxth	r3, r3
}
 800796c:	4618      	mov	r0, r3
 800796e:	3714      	adds	r7, #20
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b088      	sub	sp, #32
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	4608      	mov	r0, r1
 8007982:	4611      	mov	r1, r2
 8007984:	461a      	mov	r2, r3
 8007986:	4603      	mov	r3, r0
 8007988:	70fb      	strb	r3, [r7, #3]
 800798a:	460b      	mov	r3, r1
 800798c:	70bb      	strb	r3, [r7, #2]
 800798e:	4613      	mov	r3, r2
 8007990:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007992:	2300      	movs	r3, #0
 8007994:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800799a:	78fb      	ldrb	r3, [r7, #3]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079a6:	461a      	mov	r2, r3
 80079a8:	f04f 33ff 	mov.w	r3, #4294967295
 80079ac:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80079ae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d867      	bhi.n	8007a86 <USB_HC_Init+0x10e>
 80079b6:	a201      	add	r2, pc, #4	@ (adr r2, 80079bc <USB_HC_Init+0x44>)
 80079b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079bc:	080079cd 	.word	0x080079cd
 80079c0:	08007a49 	.word	0x08007a49
 80079c4:	080079cd 	.word	0x080079cd
 80079c8:	08007a0b 	.word	0x08007a0b
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80079cc:	78fb      	ldrb	r3, [r7, #3]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079d8:	461a      	mov	r2, r3
 80079da:	f240 439d 	movw	r3, #1181	@ 0x49d
 80079de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80079e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	da51      	bge.n	8007a8c <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80079e8:	78fb      	ldrb	r3, [r7, #3]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	78fa      	ldrb	r2, [r7, #3]
 80079f8:	0151      	lsls	r1, r2, #5
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	440a      	add	r2, r1
 80079fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a06:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007a08:	e040      	b.n	8007a8c <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a0a:	78fb      	ldrb	r3, [r7, #3]
 8007a0c:	015a      	lsls	r2, r3, #5
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a16:	461a      	mov	r2, r3
 8007a18:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007a1c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007a1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	da34      	bge.n	8007a90 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007a26:	78fb      	ldrb	r3, [r7, #3]
 8007a28:	015a      	lsls	r2, r3, #5
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	78fa      	ldrb	r2, [r7, #3]
 8007a36:	0151      	lsls	r1, r2, #5
 8007a38:	693a      	ldr	r2, [r7, #16]
 8007a3a:	440a      	add	r2, r1
 8007a3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a44:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007a46:	e023      	b.n	8007a90 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a48:	78fb      	ldrb	r3, [r7, #3]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a54:	461a      	mov	r2, r3
 8007a56:	f240 2325 	movw	r3, #549	@ 0x225
 8007a5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007a5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	da17      	bge.n	8007a94 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007a64:	78fb      	ldrb	r3, [r7, #3]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	78fa      	ldrb	r2, [r7, #3]
 8007a74:	0151      	lsls	r1, r2, #5
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	440a      	add	r2, r1
 8007a7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a7e:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007a82:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007a84:	e006      	b.n	8007a94 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	77fb      	strb	r3, [r7, #31]
      break;
 8007a8a:	e004      	b.n	8007a96 <USB_HC_Init+0x11e>
      break;
 8007a8c:	bf00      	nop
 8007a8e:	e002      	b.n	8007a96 <USB_HC_Init+0x11e>
      break;
 8007a90:	bf00      	nop
 8007a92:	e000      	b.n	8007a96 <USB_HC_Init+0x11e>
      break;
 8007a94:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007a96:	78fb      	ldrb	r3, [r7, #3]
 8007a98:	015a      	lsls	r2, r3, #5
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	78fa      	ldrb	r2, [r7, #3]
 8007aa6:	0151      	lsls	r1, r2, #5
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	440a      	add	r2, r1
 8007aac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ab0:	f043 0302 	orr.w	r3, r3, #2
 8007ab4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007abc:	699a      	ldr	r2, [r3, #24]
 8007abe:	78fb      	ldrb	r3, [r7, #3]
 8007ac0:	f003 030f 	and.w	r3, r3, #15
 8007ac4:	2101      	movs	r1, #1
 8007ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8007aca:	6939      	ldr	r1, [r7, #16]
 8007acc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007ae0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	da03      	bge.n	8007af0 <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007ae8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007aec:	61bb      	str	r3, [r7, #24]
 8007aee:	e001      	b.n	8007af4 <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7ff ff17 	bl	8007928 <USB_GetHostSpeed>
 8007afa:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007afc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d106      	bne.n	8007b12 <USB_HC_Init+0x19a>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d003      	beq.n	8007b12 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007b0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007b0e:	617b      	str	r3, [r7, #20]
 8007b10:	e001      	b.n	8007b16 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007b12:	2300      	movs	r3, #0
 8007b14:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b16:	787b      	ldrb	r3, [r7, #1]
 8007b18:	059b      	lsls	r3, r3, #22
 8007b1a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007b1e:	78bb      	ldrb	r3, [r7, #2]
 8007b20:	02db      	lsls	r3, r3, #11
 8007b22:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b26:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007b28:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007b2c:	049b      	lsls	r3, r3, #18
 8007b2e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007b32:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007b34:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007b36:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007b3a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	431a      	orrs	r2, r3
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b44:	78fa      	ldrb	r2, [r7, #3]
 8007b46:	0151      	lsls	r1, r2, #5
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	440a      	add	r2, r1
 8007b4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007b50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b54:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007b56:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	d003      	beq.n	8007b66 <USB_HC_Init+0x1ee>
 8007b5e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d10f      	bne.n	8007b86 <USB_HC_Init+0x20e>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007b66:	78fb      	ldrb	r3, [r7, #3]
 8007b68:	015a      	lsls	r2, r3, #5
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	78fa      	ldrb	r2, [r7, #3]
 8007b76:	0151      	lsls	r1, r2, #5
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	440a      	add	r2, r1
 8007b7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007b84:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007b86:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3720      	adds	r7, #32
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b088      	sub	sp, #32
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	785b      	ldrb	r3, [r3, #1]
 8007ba2:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007ba4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007ba8:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d018      	beq.n	8007be4 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	8952      	ldrh	r2, [r2, #10]
 8007bba:	4413      	add	r3, r2
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	8952      	ldrh	r2, [r2, #10]
 8007bc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bc6:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8007bc8:	8bfa      	ldrh	r2, [r7, #30]
 8007bca:	8a7b      	ldrh	r3, [r7, #18]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d90b      	bls.n	8007be8 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8007bd0:	8a7b      	ldrh	r3, [r7, #18]
 8007bd2:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007bd4:	8bfb      	ldrh	r3, [r7, #30]
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	8952      	ldrh	r2, [r2, #10]
 8007bda:	fb03 f202 	mul.w	r2, r3, r2
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	615a      	str	r2, [r3, #20]
 8007be2:	e001      	b.n	8007be8 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8007be4:	2301      	movs	r3, #1
 8007be6:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	78db      	ldrb	r3, [r3, #3]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d007      	beq.n	8007c00 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007bf0:	8bfb      	ldrh	r3, [r7, #30]
 8007bf2:	683a      	ldr	r2, [r7, #0]
 8007bf4:	8952      	ldrh	r2, [r2, #10]
 8007bf6:	fb03 f202 	mul.w	r2, r3, r2
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	615a      	str	r2, [r3, #20]
 8007bfe:	e003      	b.n	8007c08 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	699a      	ldr	r2, [r3, #24]
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	615a      	str	r2, [r3, #20]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007c10:	8bfb      	ldrh	r3, [r7, #30]
 8007c12:	04d9      	lsls	r1, r3, #19
 8007c14:	4b59      	ldr	r3, [pc, #356]	@ (8007d7c <USB_HC_StartXfer+0x1ec>)
 8007c16:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c18:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	7b1b      	ldrb	r3, [r3, #12]
 8007c1e:	075b      	lsls	r3, r3, #29
 8007c20:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c24:	6979      	ldr	r1, [r7, #20]
 8007c26:	0148      	lsls	r0, r1, #5
 8007c28:	69b9      	ldr	r1, [r7, #24]
 8007c2a:	4401      	add	r1, r0
 8007c2c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007c30:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c32:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f003 0301 	and.w	r3, r3, #1
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	bf0c      	ite	eq
 8007c44:	2301      	moveq	r3, #1
 8007c46:	2300      	movne	r3, #0
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	015a      	lsls	r2, r3, #5
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	4413      	add	r3, r2
 8007c54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	697a      	ldr	r2, [r7, #20]
 8007c5c:	0151      	lsls	r1, r2, #5
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	440a      	add	r2, r1
 8007c62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c66:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007c6a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	015a      	lsls	r2, r3, #5
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	4413      	add	r3, r2
 8007c74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	7c7b      	ldrb	r3, [r7, #17]
 8007c7c:	075b      	lsls	r3, r3, #29
 8007c7e:	6979      	ldr	r1, [r7, #20]
 8007c80:	0148      	lsls	r0, r1, #5
 8007c82:	69b9      	ldr	r1, [r7, #24]
 8007c84:	4401      	add	r1, r0
 8007c86:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	015a      	lsls	r2, r3, #5
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	4413      	add	r3, r2
 8007c96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007ca4:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	78db      	ldrb	r3, [r3, #3]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d004      	beq.n	8007cb8 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cb4:	60bb      	str	r3, [r7, #8]
 8007cb6:	e003      	b.n	8007cc0 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007cbe:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007cc6:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	78db      	ldrb	r3, [r3, #3]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d147      	bne.n	8007d72 <USB_HC_StartXfer+0x1e2>
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d043      	beq.n	8007d72 <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	7a1b      	ldrb	r3, [r3, #8]
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	d830      	bhi.n	8007d54 <USB_HC_StartXfer+0x1c4>
 8007cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf8 <USB_HC_StartXfer+0x168>)
 8007cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf8:	08007d09 	.word	0x08007d09
 8007cfc:	08007d2d 	.word	0x08007d2d
 8007d00:	08007d09 	.word	0x08007d09
 8007d04:	08007d2d 	.word	0x08007d2d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	3303      	adds	r3, #3
 8007d0e:	089b      	lsrs	r3, r3, #2
 8007d10:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007d12:	89fa      	ldrh	r2, [r7, #14]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d91c      	bls.n	8007d58 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	f043 0220 	orr.w	r2, r3, #32
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	619a      	str	r2, [r3, #24]
        }
        break;
 8007d2a:	e015      	b.n	8007d58 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	3303      	adds	r3, #3
 8007d32:	089b      	lsrs	r3, r3, #2
 8007d34:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007d36:	89fa      	ldrh	r2, [r7, #14]
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d90a      	bls.n	8007d5c <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	699b      	ldr	r3, [r3, #24]
 8007d4a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	619a      	str	r2, [r3, #24]
        }
        break;
 8007d52:	e003      	b.n	8007d5c <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8007d54:	bf00      	nop
 8007d56:	e002      	b.n	8007d5e <USB_HC_StartXfer+0x1ce>
        break;
 8007d58:	bf00      	nop
 8007d5a:	e000      	b.n	8007d5e <USB_HC_StartXfer+0x1ce>
        break;
 8007d5c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	6919      	ldr	r1, [r3, #16]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	785a      	ldrb	r2, [r3, #1]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7ff fbb1 	bl	80074d4 <USB_WritePacket>
  }

  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3720      	adds	r7, #32
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	1ff80000 	.word	0x1ff80000

08007d80 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d92:	695b      	ldr	r3, [r3, #20]
 8007d94:	b29b      	uxth	r3, r3
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b089      	sub	sp, #36	@ 0x24
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	460b      	mov	r3, r1
 8007dac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007db2:	78fb      	ldrb	r3, [r7, #3]
 8007db4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007db6:	2300      	movs	r3, #0
 8007db8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	015a      	lsls	r2, r3, #5
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	0c9b      	lsrs	r3, r3, #18
 8007dca:	f003 0303 	and.w	r3, r3, #3
 8007dce:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	015a      	lsls	r2, r3, #5
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	0fdb      	lsrs	r3, r3, #31
 8007de0:	f003 0301 	and.w	r3, r3, #1
 8007de4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	015a      	lsls	r2, r3, #5
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	4413      	add	r3, r2
 8007dee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	0fdb      	lsrs	r3, r3, #31
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	f003 0320 	and.w	r3, r3, #32
 8007e04:	2b20      	cmp	r3, #32
 8007e06:	d10d      	bne.n	8007e24 <USB_HC_Halt+0x82>
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10a      	bne.n	8007e24 <USB_HC_Halt+0x82>
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d005      	beq.n	8007e20 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d002      	beq.n	8007e20 <USB_HC_Halt+0x7e>
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2b03      	cmp	r3, #3
 8007e1e:	d101      	bne.n	8007e24 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	e0d8      	b.n	8007fd6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <USB_HC_Halt+0x8e>
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d173      	bne.n	8007f18 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	015a      	lsls	r2, r3, #5
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	4413      	add	r3, r2
 8007e38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	69ba      	ldr	r2, [r7, #24]
 8007e40:	0151      	lsls	r1, r2, #5
 8007e42:	69fa      	ldr	r2, [r7, #28]
 8007e44:	440a      	add	r2, r1
 8007e46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e4e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	f003 0320 	and.w	r3, r3, #32
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d14a      	bne.n	8007ef2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d133      	bne.n	8007ed0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	69ba      	ldr	r2, [r7, #24]
 8007e78:	0151      	lsls	r1, r2, #5
 8007e7a:	69fa      	ldr	r2, [r7, #28]
 8007e7c:	440a      	add	r2, r1
 8007e7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e86:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	015a      	lsls	r2, r3, #5
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	4413      	add	r3, r2
 8007e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	69ba      	ldr	r2, [r7, #24]
 8007e98:	0151      	lsls	r1, r2, #5
 8007e9a:	69fa      	ldr	r2, [r7, #28]
 8007e9c:	440a      	add	r2, r1
 8007e9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ea2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ea6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007eb4:	d82e      	bhi.n	8007f14 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	015a      	lsls	r2, r3, #5
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ecc:	d0ec      	beq.n	8007ea8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ece:	e081      	b.n	8007fd4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	015a      	lsls	r2, r3, #5
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	0151      	lsls	r1, r2, #5
 8007ee2:	69fa      	ldr	r2, [r7, #28]
 8007ee4:	440a      	add	r2, r1
 8007ee6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007eea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007eee:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ef0:	e070      	b.n	8007fd4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	015a      	lsls	r2, r3, #5
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	0151      	lsls	r1, r2, #5
 8007f04:	69fa      	ldr	r2, [r7, #28]
 8007f06:	440a      	add	r2, r1
 8007f08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f10:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f12:	e05f      	b.n	8007fd4 <USB_HC_Halt+0x232>
            break;
 8007f14:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f16:	e05d      	b.n	8007fd4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	015a      	lsls	r2, r3, #5
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	4413      	add	r3, r2
 8007f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	0151      	lsls	r1, r2, #5
 8007f2a:	69fa      	ldr	r2, [r7, #28]
 8007f2c:	440a      	add	r2, r1
 8007f2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f36:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d133      	bne.n	8007fb0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	69ba      	ldr	r2, [r7, #24]
 8007f58:	0151      	lsls	r1, r2, #5
 8007f5a:	69fa      	ldr	r2, [r7, #28]
 8007f5c:	440a      	add	r2, r1
 8007f5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f66:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	015a      	lsls	r2, r3, #5
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	69ba      	ldr	r2, [r7, #24]
 8007f78:	0151      	lsls	r1, r2, #5
 8007f7a:	69fa      	ldr	r2, [r7, #28]
 8007f7c:	440a      	add	r2, r1
 8007f7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f86:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f94:	d81d      	bhi.n	8007fd2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	015a      	lsls	r2, r3, #5
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007fa8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fac:	d0ec      	beq.n	8007f88 <USB_HC_Halt+0x1e6>
 8007fae:	e011      	b.n	8007fd4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	69ba      	ldr	r2, [r7, #24]
 8007fc0:	0151      	lsls	r1, r2, #5
 8007fc2:	69fa      	ldr	r2, [r7, #28]
 8007fc4:	440a      	add	r2, r1
 8007fc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007fce:	6013      	str	r3, [r2, #0]
 8007fd0:	e000      	b.n	8007fd4 <USB_HC_Halt+0x232>
          break;
 8007fd2:	bf00      	nop
    }
  }

  return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3724      	adds	r7, #36	@ 0x24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b088      	sub	sp, #32
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7ff f9ab 	bl	8007352 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ffc:	2110      	movs	r1, #16
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f7ff fa04 	bl	800740c <USB_FlushTxFifo>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7ff fa30 	bl	8007474 <USB_FlushRxFifo>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d001      	beq.n	800801e <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800801e:	2300      	movs	r3, #0
 8008020:	61bb      	str	r3, [r7, #24]
 8008022:	e01f      	b.n	8008064 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	4413      	add	r3, r2
 800802c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800803a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008042:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800804a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	015a      	lsls	r2, r3, #5
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	4413      	add	r3, r2
 8008054:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008058:	461a      	mov	r2, r3
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	3301      	adds	r3, #1
 8008062:	61bb      	str	r3, [r7, #24]
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	2b0f      	cmp	r3, #15
 8008068:	d9dc      	bls.n	8008024 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800806a:	2300      	movs	r3, #0
 800806c:	61bb      	str	r3, [r7, #24]
 800806e:	e034      	b.n	80080da <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	4413      	add	r3, r2
 8008078:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008086:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800808e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008096:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	015a      	lsls	r2, r3, #5
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	4413      	add	r3, r2
 80080a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080a4:	461a      	mov	r2, r3
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	3301      	adds	r3, #1
 80080ae:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80080b6:	d80c      	bhi.n	80080d2 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	015a      	lsls	r2, r3, #5
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	4413      	add	r3, r2
 80080c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080ce:	d0ec      	beq.n	80080aa <USB_StopHost+0xc8>
 80080d0:	e000      	b.n	80080d4 <USB_StopHost+0xf2>
        break;
 80080d2:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	3301      	adds	r3, #1
 80080d8:	61bb      	str	r3, [r7, #24]
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	2b0f      	cmp	r3, #15
 80080de:	d9c7      	bls.n	8008070 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080e6:	461a      	mov	r2, r3
 80080e8:	f04f 33ff 	mov.w	r3, #4294967295
 80080ec:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f04f 32ff 	mov.w	r2, #4294967295
 80080f4:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7ff f91a 	bl	8007330 <USB_EnableGlobalInt>

  return ret;
 80080fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3720      	adds	r7, #32
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <USBH_AUDIO_InterfaceInit>:
  *         The function init the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008106:	b590      	push	{r4, r7, lr}
 8008108:	b08b      	sub	sp, #44	@ 0x2c
 800810a:	af04      	add	r7, sp, #16
 800810c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef out_status, in_status;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  uint8_t  interface, index;
  uint16_t ep_size_out = 0U;
 800810e:	2300      	movs	r3, #0
 8008110:	82bb      	strh	r3, [r7, #20]
  uint16_t ep_size_in = 0U;
 8008112:	2300      	movs	r3, #0
 8008114:	827b      	strh	r3, [r7, #18]

  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 8008116:	2300      	movs	r3, #0
 8008118:	2201      	movs	r2, #1
 800811a:	2101      	movs	r1, #1
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f001 ffb6 	bl	800a08e <USBH_FindInterface>
 8008122:	4603      	mov	r3, r0
 8008124:	747b      	strb	r3, [r7, #17]

  if (interface == 0xFFU) /* Not Valid Interface */
 8008126:	7c7b      	ldrb	r3, [r7, #17]
 8008128:	2bff      	cmp	r3, #255	@ 0xff
 800812a:	d101      	bne.n	8008130 <USBH_AUDIO_InterfaceInit+0x2a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800812c:	2302      	movs	r3, #2
 800812e:	e1a5      	b.n	800847c <USBH_AUDIO_InterfaceInit+0x376>
  }

  phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc(sizeof(AUDIO_HandleTypeDef));
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 444c 	ldr.w	r4, [r3, #1100]	@ 0x44c
 8008136:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 800813a:	f003 fef5 	bl	800bf28 <malloc>
 800813e:	4603      	mov	r3, r0
 8008140:	61e3      	str	r3, [r4, #28]
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008148:	69db      	ldr	r3, [r3, #28]
 800814a:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle == NULL)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <USBH_AUDIO_InterfaceInit+0x50>
  {
    USBH_DbgLog("Cannot allocate memory for AUDIO Handle");
    return USBH_FAIL;
 8008152:	2302      	movs	r3, #2
 8008154:	e192      	b.n	800847c <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* Initialize audio handler */
  (void)USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 8008156:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 800815a:	2100      	movs	r1, #0
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f003 ffc3 	bl	800c0e8 <memset>

  /* 1st Step:  Find Audio Interfaces */
  out_status = USBH_AUDIO_FindAudioStreamingIN(phost);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fc0f 	bl	8008986 <USBH_AUDIO_FindAudioStreamingIN>
 8008168:	4603      	mov	r3, r0
 800816a:	72fb      	strb	r3, [r7, #11]

  in_status = USBH_AUDIO_FindAudioStreamingOUT(phost);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fcc9 	bl	8008b04 <USBH_AUDIO_FindAudioStreamingOUT>
 8008172:	4603      	mov	r3, r0
 8008174:	72bb      	strb	r3, [r7, #10]

  if ((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 8008176:	7afb      	ldrb	r3, [r7, #11]
 8008178:	2b02      	cmp	r3, #2
 800817a:	d104      	bne.n	8008186 <USBH_AUDIO_InterfaceInit+0x80>
 800817c:	7abb      	ldrb	r3, [r7, #10]
 800817e:	2b02      	cmp	r3, #2
 8008180:	d101      	bne.n	8008186 <USBH_AUDIO_InterfaceInit+0x80>
  {
    USBH_DbgLog("%s class configuration not supported.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008182:	2302      	movs	r3, #2
 8008184:	e17a      	b.n	800847c <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* 2nd Step:  Select Audio Streaming Interfaces with largest endpoint size : default behavior */
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8008186:	2300      	movs	r3, #0
 8008188:	75fb      	strb	r3, [r7, #23]
 800818a:	e0c6      	b.n	800831a <USBH_AUDIO_InterfaceInit+0x214>
  {
    if (AUDIO_Handle->stream_out[index].valid == 1U)
 800818c:	7dfa      	ldrb	r2, [r7, #23]
 800818e:	68f9      	ldr	r1, [r7, #12]
 8008190:	4613      	mov	r3, r2
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	4413      	add	r3, r2
 8008196:	005b      	lsls	r3, r3, #1
 8008198:	440b      	add	r3, r1
 800819a:	333e      	adds	r3, #62	@ 0x3e
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d156      	bne.n	8008250 <USBH_AUDIO_InterfaceInit+0x14a>
    {
      if (ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 80081a2:	7dfa      	ldrb	r2, [r7, #23]
 80081a4:	68f9      	ldr	r1, [r7, #12]
 80081a6:	4613      	mov	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4413      	add	r3, r2
 80081ac:	005b      	lsls	r3, r3, #1
 80081ae:	440b      	add	r3, r1
 80081b0:	333a      	adds	r3, #58	@ 0x3a
 80081b2:	881b      	ldrh	r3, [r3, #0]
 80081b4:	8aba      	ldrh	r2, [r7, #20]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d24a      	bcs.n	8008250 <USBH_AUDIO_InterfaceInit+0x14a>
      {
        ep_size_out = AUDIO_Handle->stream_out[index].EpSize;
 80081ba:	7dfa      	ldrb	r2, [r7, #23]
 80081bc:	68f9      	ldr	r1, [r7, #12]
 80081be:	4613      	mov	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	005b      	lsls	r3, r3, #1
 80081c6:	440b      	add	r3, r1
 80081c8:	333a      	adds	r3, #58	@ 0x3a
 80081ca:	881b      	ldrh	r3, [r3, #0]
 80081cc:	82bb      	strh	r3, [r7, #20]
        AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 80081ce:	7dfa      	ldrb	r2, [r7, #23]
 80081d0:	68f9      	ldr	r1, [r7, #12]
 80081d2:	4613      	mov	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	005b      	lsls	r3, r3, #1
 80081da:	440b      	add	r3, r1
 80081dc:	333d      	adds	r3, #61	@ 0x3d
 80081de:	781a      	ldrb	r2, [r3, #0]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
        AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;
 80081e6:	7dfa      	ldrb	r2, [r7, #23]
 80081e8:	68f9      	ldr	r1, [r7, #12]
 80081ea:	4613      	mov	r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	4413      	add	r3, r2
 80081f0:	005b      	lsls	r3, r3, #1
 80081f2:	440b      	add	r3, r1
 80081f4:	333c      	adds	r3, #60	@ 0x3c
 80081f6:	781a      	ldrb	r2, [r3, #0]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
        AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 80081fe:	7dfa      	ldrb	r2, [r7, #23]
 8008200:	68f9      	ldr	r1, [r7, #12]
 8008202:	4613      	mov	r3, r2
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	4413      	add	r3, r2
 8008208:	005b      	lsls	r3, r3, #1
 800820a:	440b      	add	r3, r1
 800820c:	3338      	adds	r3, #56	@ 0x38
 800820e:	781a      	ldrb	r2, [r3, #0]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
        AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize;
 8008216:	7dfa      	ldrb	r2, [r7, #23]
 8008218:	68f9      	ldr	r1, [r7, #12]
 800821a:	4613      	mov	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4413      	add	r3, r2
 8008220:	005b      	lsls	r3, r3, #1
 8008222:	440b      	add	r3, r1
 8008224:	333a      	adds	r3, #58	@ 0x3a
 8008226:	881a      	ldrh	r2, [r3, #0]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f8a3 20f6 	strh.w	r2, [r3, #246]	@ 0xf6
        AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 800822e:	7dfa      	ldrb	r2, [r7, #23]
 8008230:	68f9      	ldr	r1, [r7, #12]
 8008232:	4613      	mov	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4413      	add	r3, r2
 8008238:	005b      	lsls	r3, r3, #1
 800823a:	440b      	add	r3, r1
 800823c:	3340      	adds	r3, #64	@ 0x40
 800823e:	881b      	ldrh	r3, [r3, #0]
 8008240:	b2da      	uxtb	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f883 20fc 	strb.w	r2, [r3, #252]	@ 0xfc
        AUDIO_Handle->headphone.supported = 1U;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 20fa 	strb.w	r2, [r3, #250]	@ 0xfa
      }
    }

    if (AUDIO_Handle->stream_in[index].valid == 1U)
 8008250:	7dfa      	ldrb	r2, [r7, #23]
 8008252:	68f9      	ldr	r1, [r7, #12]
 8008254:	4613      	mov	r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	4413      	add	r3, r2
 800825a:	005b      	lsls	r3, r3, #1
 800825c:	440b      	add	r3, r1
 800825e:	330c      	adds	r3, #12
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d156      	bne.n	8008314 <USBH_AUDIO_InterfaceInit+0x20e>
    {
      if (ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 8008266:	7dfa      	ldrb	r2, [r7, #23]
 8008268:	68f9      	ldr	r1, [r7, #12]
 800826a:	4613      	mov	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	005b      	lsls	r3, r3, #1
 8008272:	440b      	add	r3, r1
 8008274:	3308      	adds	r3, #8
 8008276:	881b      	ldrh	r3, [r3, #0]
 8008278:	8a7a      	ldrh	r2, [r7, #18]
 800827a:	429a      	cmp	r2, r3
 800827c:	d24a      	bcs.n	8008314 <USBH_AUDIO_InterfaceInit+0x20e>
      {
        ep_size_in = AUDIO_Handle->stream_in[index].EpSize;
 800827e:	7dfa      	ldrb	r2, [r7, #23]
 8008280:	68f9      	ldr	r1, [r7, #12]
 8008282:	4613      	mov	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4413      	add	r3, r2
 8008288:	005b      	lsls	r3, r3, #1
 800828a:	440b      	add	r3, r1
 800828c:	3308      	adds	r3, #8
 800828e:	881b      	ldrh	r3, [r3, #0]
 8008290:	827b      	strh	r3, [r7, #18]
        AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 8008292:	7dfa      	ldrb	r2, [r7, #23]
 8008294:	68f9      	ldr	r1, [r7, #12]
 8008296:	4613      	mov	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4413      	add	r3, r2
 800829c:	005b      	lsls	r3, r3, #1
 800829e:	440b      	add	r3, r1
 80082a0:	330b      	adds	r3, #11
 80082a2:	781a      	ldrb	r2, [r3, #0]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f883 2140 	strb.w	r2, [r3, #320]	@ 0x140
        AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;
 80082aa:	7dfa      	ldrb	r2, [r7, #23]
 80082ac:	68f9      	ldr	r1, [r7, #12]
 80082ae:	4613      	mov	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	005b      	lsls	r3, r3, #1
 80082b6:	440b      	add	r3, r1
 80082b8:	330a      	adds	r3, #10
 80082ba:	781a      	ldrb	r2, [r3, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f883 2141 	strb.w	r2, [r3, #321]	@ 0x141
        AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 80082c2:	7dfa      	ldrb	r2, [r7, #23]
 80082c4:	68f9      	ldr	r1, [r7, #12]
 80082c6:	4613      	mov	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	005b      	lsls	r3, r3, #1
 80082ce:	440b      	add	r3, r1
 80082d0:	3306      	adds	r3, #6
 80082d2:	781a      	ldrb	r2, [r3, #0]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
        AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 80082da:	7dfa      	ldrb	r2, [r7, #23]
 80082dc:	68f9      	ldr	r1, [r7, #12]
 80082de:	4613      	mov	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	005b      	lsls	r3, r3, #1
 80082e6:	440b      	add	r3, r1
 80082e8:	3308      	adds	r3, #8
 80082ea:	881a      	ldrh	r2, [r3, #0]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f8a3 213e 	strh.w	r2, [r3, #318]	@ 0x13e
        AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 80082f2:	7dfa      	ldrb	r2, [r7, #23]
 80082f4:	68f9      	ldr	r1, [r7, #12]
 80082f6:	4613      	mov	r3, r2
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4413      	add	r3, r2
 80082fc:	005b      	lsls	r3, r3, #1
 80082fe:	440b      	add	r3, r1
 8008300:	3340      	adds	r3, #64	@ 0x40
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	b2da      	uxtb	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
        AUDIO_Handle->microphone.supported = 1U;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2142 	strb.w	r2, [r3, #322]	@ 0x142
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8008314:	7dfb      	ldrb	r3, [r7, #23]
 8008316:	3301      	adds	r3, #1
 8008318:	75fb      	strb	r3, [r7, #23]
 800831a:	7dfb      	ldrb	r3, [r7, #23]
 800831c:	2b04      	cmp	r3, #4
 800831e:	f67f af35 	bls.w	800818c <USBH_AUDIO_InterfaceInit+0x86>
      }
    }
  }

  if (USBH_AUDIO_FindHIDControl(phost) == USBH_OK)
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fcad 	bl	8008c82 <USBH_AUDIO_FindHIDControl>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d103      	bne.n	8008336 <USBH_AUDIO_InterfaceInit+0x230>
  {
    AUDIO_Handle->control.supported = 1U;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
  }

  /* 3rd Step:  Find and Parse Audio interfaces */
  (void)USBH_AUDIO_ParseCSDescriptors(phost);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fd25 	bl	8008d86 <USBH_AUDIO_ParseCSDescriptors>


  /* 4th Step:  Open the Audio streaming pipes*/
  if (AUDIO_Handle->headphone.supported == 1U)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 8008342:	2b01      	cmp	r3, #1
 8008344:	d12e      	bne.n	80083a4 <USBH_AUDIO_InterfaceInit+0x29e>
  {
    (void)USBH_AUDIO_BuildHeadphonePath(phost);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 ff60 	bl	800920c <USBH_AUDIO_BuildHeadphonePath>

    AUDIO_Handle->headphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 8008352:	4619      	mov	r1, r3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f003 fa57 	bl	800b808 <USBH_AllocPipe>
 800835a:	4603      	mov	r3, r0
 800835c:	461a      	mov	r2, r3
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f883 20fb 	strb.w	r2, [r3, #251]	@ 0xfb

    /* Open pipe for IN endpoint */
    (void)USBH_OpenPipe(phost,
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f893 10fb 	ldrb.w	r1, [r3, #251]	@ 0xfb
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f893 00f4 	ldrb.w	r0, [r3, #244]	@ 0xf4
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	@ 0xf6
 8008382:	9202      	str	r2, [sp, #8]
 8008384:	2201      	movs	r2, #1
 8008386:	9201      	str	r2, [sp, #4]
 8008388:	9300      	str	r3, [sp, #0]
 800838a:	4623      	mov	r3, r4
 800838c:	4602      	mov	r2, r0
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f003 fa0b 	bl	800b7aa <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_ISOC,
                        AUDIO_Handle->headphone.EpSize);

    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->headphone.Pipe, 0U);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 800839a:	2200      	movs	r2, #0
 800839c:	4619      	mov	r1, r3
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f003 fd3b 	bl	800be1a <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d12e      	bne.n	800840c <USBH_AUDIO_InterfaceInit+0x306>
  {
    (void)USBH_AUDIO_BuildMicrophonePath(phost);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fea4 	bl	80090fc <USBH_AUDIO_BuildMicrophonePath>
    AUDIO_Handle->microphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 80083ba:	4619      	mov	r1, r3
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f003 fa23 	bl	800b808 <USBH_AllocPipe>
 80083c2:	4603      	mov	r3, r0
 80083c4:	461a      	mov	r2, r3
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f883 2143 	strb.w	r2, [r3, #323]	@ 0x143

    /* Open pipe for IN endpoint */
    (void)USBH_OpenPipe(phost,
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f893 1143 	ldrb.w	r1, [r3, #323]	@ 0x143
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f893 013c 	ldrb.w	r0, [r3, #316]	@ 0x13c
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	f8b2 213e 	ldrh.w	r2, [r2, #318]	@ 0x13e
 80083ea:	9202      	str	r2, [sp, #8]
 80083ec:	2201      	movs	r2, #1
 80083ee:	9201      	str	r2, [sp, #4]
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	4623      	mov	r3, r4
 80083f4:	4602      	mov	r2, r0
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f003 f9d7 	bl	800b7aa <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_ISOC,
                        AUDIO_Handle->microphone.EpSize);

    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->microphone.Pipe, 0U);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 8008402:	2200      	movs	r2, #0
 8008404:	4619      	mov	r1, r3
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f003 fd07 	bl	800be1a <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->control.supported == 1U)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8008412:	2b01      	cmp	r3, #1
 8008414:	d12b      	bne.n	800846e <USBH_AUDIO_InterfaceInit+0x368>
  {
    AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 800841c:	4619      	mov	r1, r3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f003 f9f2 	bl	800b808 <USBH_AllocPipe>
 8008424:	4603      	mov	r3, r0
 8008426:	461a      	mov	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f883 218a 	strb.w	r2, [r3, #394]	@ 0x18a

    /* Open pipe for IN endpoint */
    (void)USBH_OpenPipe(phost,
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f893 118a 	ldrb.w	r1, [r3, #394]	@ 0x18a
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f893 0184 	ldrb.w	r0, [r3, #388]	@ 0x184
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	f8b2 2186 	ldrh.w	r2, [r2, #390]	@ 0x186
 800844c:	9202      	str	r2, [sp, #8]
 800844e:	2203      	movs	r2, #3
 8008450:	9201      	str	r2, [sp, #4]
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	4623      	mov	r3, r4
 8008456:	4602      	mov	r2, r0
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f003 f9a6 	bl	800b7aa <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_INTR,
                        AUDIO_Handle->control.EpSize);

    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->control.Pipe, 0U);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8008464:	2200      	movs	r2, #0
 8008466:	4619      	mov	r1, r3
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f003 fcd6 	bl	800be1a <USBH_LL_SetToggle>

  }

  AUDIO_Handle->req_state = AUDIO_REQ_INIT;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2201      	movs	r2, #1
 8008472:	701a      	strb	r2, [r3, #0]
  AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2201      	movs	r2, #1
 8008478:	70da      	strb	r2, [r3, #3]

  return USBH_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	371c      	adds	r7, #28
 8008480:	46bd      	mov	sp, r7
 8008482:	bd90      	pop	{r4, r7, pc}

08008484 <USBH_AUDIO_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008492:	69db      	ldr	r3, [r3, #28]
 8008494:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle->microphone.Pipe != 0x00U)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 800849c:	2b00      	cmp	r3, #0
 800849e:	d011      	beq.n	80084c4 <USBH_AUDIO_InterfaceDeInit+0x40>
  {
    (void)USBH_ClosePipe(phost, AUDIO_Handle->microphone.Pipe);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 80084a6:	4619      	mov	r1, r3
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f003 f99d 	bl	800b7e8 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, AUDIO_Handle->microphone.Pipe);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f003 f9c8 	bl	800b84c <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0U;     /* Reset the pipe as Free */
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 2143 	strb.w	r2, [r3, #323]	@ 0x143
  }

  if (AUDIO_Handle->headphone.Pipe != 0x00U)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d011      	beq.n	80084f2 <USBH_AUDIO_InterfaceDeInit+0x6e>
  {
    (void)USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 80084d4:	4619      	mov	r1, r3
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f003 f986 	bl	800b7e8 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost,  AUDIO_Handle->headphone.Pipe);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 80084e2:	4619      	mov	r1, r3
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f003 f9b1 	bl	800b84c <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0U;     /* Reset the pipe as Free */
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 20fb 	strb.w	r2, [r3, #251]	@ 0xfb
  }

  if (AUDIO_Handle->control.Pipe != 0x00U)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d011      	beq.n	8008520 <USBH_AUDIO_InterfaceDeInit+0x9c>
  {
    (void)USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8008502:	4619      	mov	r1, r3
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f003 f96f 	bl	800b7e8 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost,  AUDIO_Handle->control.Pipe);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8008510:	4619      	mov	r1, r3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f003 f99a 	bl	800b84c <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0U;     /* Reset the pipe as Free */
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 218a 	strb.w	r2, [r3, #394]	@ 0x18a
  }

  if ((phost->pActiveClass->pData) != 0U)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008526:	69db      	ldr	r3, [r3, #28]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00b      	beq.n	8008544 <USBH_AUDIO_InterfaceDeInit+0xc0>
  {
    USBH_free(phost->pActiveClass->pData);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008532:	69db      	ldr	r3, [r3, #28]
 8008534:	4618      	mov	r0, r3
 8008536:	f003 fcff 	bl	800bf38 <free>
    phost->pActiveClass->pData = 0U;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008540:	2200      	movs	r2, #0
 8008542:	61da      	str	r2, [r3, #28]
  }
  return USBH_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
	...

08008550 <USBH_AUDIO_ClassRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800855e:	69db      	ldr	r3, [r3, #28]
 8008560:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008562:	2301      	movs	r3, #1
 8008564:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8008566:	2301      	movs	r3, #1
 8008568:	73fb      	strb	r3, [r7, #15]

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->req_state)
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	3b01      	subs	r3, #1
 8008570:	2b06      	cmp	r3, #6
 8008572:	f200 80be 	bhi.w	80086f2 <USBH_AUDIO_ClassRequest+0x1a2>
 8008576:	a201      	add	r2, pc, #4	@ (adr r2, 800857c <USBH_AUDIO_ClassRequest+0x2c>)
 8008578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800857c:	08008599 	.word	0x08008599
 8008580:	080086db 	.word	0x080086db
 8008584:	08008599 	.word	0x08008599
 8008588:	080085db 	.word	0x080085db
 800858c:	08008653 	.word	0x08008653
 8008590:	08008697 	.word	0x08008697
 8008594:	0800863f 	.word	0x0800863f
  {
    case AUDIO_REQ_INIT:
    case AUDIO_REQ_SET_DEFAULT_IN_INTERFACE:
      if (AUDIO_Handle->microphone.supported == 1U)
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d117      	bne.n	80085d2 <USBH_AUDIO_ClassRequest+0x82>
      {
        req_status = USBH_SetInterface(phost,
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	f893 3140 	ldrb.w	r3, [r3, #320]	@ 0x140
 80085a8:	2200      	movs	r2, #0
 80085aa:	4619      	mov	r1, r3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f002 fb57 	bl	800ac60 <USBH_SetInterface>
 80085b2:	4603      	mov	r3, r0
 80085b4:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->microphone.interface,
                                       0U);

        if (req_status == USBH_OK)
 80085b6:	7bfb      	ldrb	r3, [r7, #15]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d103      	bne.n	80085c4 <USBH_AUDIO_ClassRequest+0x74>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	2204      	movs	r2, #4
 80085c0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80085c2:	e098      	b.n	80086f6 <USBH_AUDIO_ClassRequest+0x1a6>
        else if (req_status == USBH_NOT_SUPPORTED)
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	f040 8095 	bne.w	80086f6 <USBH_AUDIO_ClassRequest+0x1a6>
          status = USBH_FAIL;
 80085cc:	2302      	movs	r3, #2
 80085ce:	75fb      	strb	r3, [r7, #23]
      break;
 80085d0:	e091      	b.n	80086f6 <USBH_AUDIO_ClassRequest+0x1a6>
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	2204      	movs	r2, #4
 80085d6:	701a      	strb	r2, [r3, #0]
      break;
 80085d8:	e08d      	b.n	80086f6 <USBH_AUDIO_ClassRequest+0x1a6>

    case AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE:
      if (AUDIO_Handle->headphone.supported == 1U)
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d125      	bne.n	8008630 <USBH_AUDIO_ClassRequest+0xe0>
      {
        req_status = USBH_SetInterface(phost,
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 80085ea:	2200      	movs	r2, #0
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f002 fb36 	bl	800ac60 <USBH_SetInterface>
 80085f4:	4603      	mov	r3, r0
 80085f6:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->headphone.interface,
                                       0U);

        if (req_status == USBH_OK)
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d112      	bne.n	8008624 <USBH_AUDIO_ClassRequest+0xd4>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	2207      	movs	r2, #7
 8008602:	701a      	strb	r2, [r3, #0]
          AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	2206      	movs	r2, #6
 8008608:	705a      	strb	r2, [r3, #1]

          AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
          AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008622:	e06a      	b.n	80086fa <USBH_AUDIO_ClassRequest+0x1aa>
        else if (req_status == USBH_NOT_SUPPORTED)
 8008624:	7bfb      	ldrb	r3, [r7, #15]
 8008626:	2b03      	cmp	r3, #3
 8008628:	d167      	bne.n	80086fa <USBH_AUDIO_ClassRequest+0x1aa>
          status = USBH_FAIL;
 800862a:	2302      	movs	r3, #2
 800862c:	75fb      	strb	r3, [r7, #23]
      break;
 800862e:	e064      	b.n	80086fa <USBH_AUDIO_ClassRequest+0x1aa>
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	2207      	movs	r2, #7
 8008634:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	2206      	movs	r2, #6
 800863a:	705a      	strb	r2, [r3, #1]
      break;
 800863c:	e05d      	b.n	80086fa <USBH_AUDIO_ClassRequest+0x1aa>

    case AUDIO_REQ_CS_REQUESTS:
      if (USBH_AUDIO_HandleCSRequest(phost) == USBH_OK)
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f938 	bl	80088b4 <USBH_AUDIO_HandleCSRequest>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d159      	bne.n	80086fe <USBH_AUDIO_ClassRequest+0x1ae>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	2205      	movs	r2, #5
 800864e:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008650:	e055      	b.n	80086fe <USBH_AUDIO_ClassRequest+0x1ae>

    case AUDIO_REQ_SET_IN_INTERFACE:
      if (AUDIO_Handle->microphone.supported == 1U)
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 8008658:	2b01      	cmp	r3, #1
 800865a:	d118      	bne.n	800868e <USBH_AUDIO_ClassRequest+0x13e>
      {
        req_status = USBH_SetInterface(phost,
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	f893 1140 	ldrb.w	r1, [r3, #320]	@ 0x140
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	f893 3141 	ldrb.w	r3, [r3, #321]	@ 0x141
 8008668:	461a      	mov	r2, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f002 faf8 	bl	800ac60 <USBH_SetInterface>
 8008670:	4603      	mov	r3, r0
 8008672:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->microphone.interface,
                                       AUDIO_Handle->microphone.AltSettings);

        if (req_status == USBH_OK)
 8008674:	7bfb      	ldrb	r3, [r7, #15]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d103      	bne.n	8008682 <USBH_AUDIO_ClassRequest+0x132>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	2206      	movs	r2, #6
 800867e:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008680:	e03f      	b.n	8008702 <USBH_AUDIO_ClassRequest+0x1b2>
        else if (req_status == USBH_NOT_SUPPORTED)
 8008682:	7bfb      	ldrb	r3, [r7, #15]
 8008684:	2b03      	cmp	r3, #3
 8008686:	d13c      	bne.n	8008702 <USBH_AUDIO_ClassRequest+0x1b2>
          status = USBH_FAIL;
 8008688:	2302      	movs	r3, #2
 800868a:	75fb      	strb	r3, [r7, #23]
      break;
 800868c:	e039      	b.n	8008702 <USBH_AUDIO_ClassRequest+0x1b2>
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	2206      	movs	r2, #6
 8008692:	701a      	strb	r2, [r3, #0]
      break;
 8008694:	e035      	b.n	8008702 <USBH_AUDIO_ClassRequest+0x1b2>
    case AUDIO_REQ_SET_OUT_INTERFACE:
      if (AUDIO_Handle->headphone.supported == 1U)
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 800869c:	2b01      	cmp	r3, #1
 800869e:	d118      	bne.n	80086d2 <USBH_AUDIO_ClassRequest+0x182>
      {
        req_status = USBH_SetInterface(phost,
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	f893 10f8 	ldrb.w	r1, [r3, #248]	@ 0xf8
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 80086ac:	461a      	mov	r2, r3
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f002 fad6 	bl	800ac60 <USBH_SetInterface>
 80086b4:	4603      	mov	r3, r0
 80086b6:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->headphone.interface,
                                       AUDIO_Handle->headphone.AltSettings);

        if (req_status == USBH_OK)
 80086b8:	7bfb      	ldrb	r3, [r7, #15]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d103      	bne.n	80086c6 <USBH_AUDIO_ClassRequest+0x176>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	2202      	movs	r2, #2
 80086c2:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80086c4:	e01f      	b.n	8008706 <USBH_AUDIO_ClassRequest+0x1b6>
        else if (req_status == USBH_NOT_SUPPORTED)
 80086c6:	7bfb      	ldrb	r3, [r7, #15]
 80086c8:	2b03      	cmp	r3, #3
 80086ca:	d11c      	bne.n	8008706 <USBH_AUDIO_ClassRequest+0x1b6>
          status = USBH_FAIL;
 80086cc:	2302      	movs	r3, #2
 80086ce:	75fb      	strb	r3, [r7, #23]
      break;
 80086d0:	e019      	b.n	8008706 <USBH_AUDIO_ClassRequest+0x1b6>
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	2202      	movs	r2, #2
 80086d6:	701a      	strb	r2, [r3, #0]
      break;
 80086d8:	e015      	b.n	8008706 <USBH_AUDIO_ClassRequest+0x1b6>
    case AUDIO_REQ_IDLE:
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	2201      	movs	r2, #1
 80086de:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 80086e6:	2102      	movs	r1, #2
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	4798      	blx	r3
      status  = USBH_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80086f0:	e00a      	b.n	8008708 <USBH_AUDIO_ClassRequest+0x1b8>

    default:
      break;
 80086f2:	bf00      	nop
 80086f4:	e008      	b.n	8008708 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 80086f6:	bf00      	nop
 80086f8:	e006      	b.n	8008708 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 80086fa:	bf00      	nop
 80086fc:	e004      	b.n	8008708 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 80086fe:	bf00      	nop
 8008700:	e002      	b.n	8008708 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 8008702:	bf00      	nop
 8008704:	e000      	b.n	8008708 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 8008706:	bf00      	nop
  }
  return status;
 8008708:	7dfb      	ldrb	r3, [r7, #23]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3718      	adds	r7, #24
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop

08008714 <USBH_AUDIO_CSRequest>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_CSRequest(USBH_HandleTypeDef *phost,
                                               uint8_t feature, uint8_t channel)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b088      	sub	sp, #32
 8008718:	af02      	add	r7, sp, #8
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	70fb      	strb	r3, [r7, #3]
 8008720:	4613      	mov	r3, r2
 8008722:	70bb      	strb	r3, [r7, #2]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800872a:	69db      	ldr	r3, [r3, #28]
 800872c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 800872e:	2301      	movs	r3, #1
 8008730:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8008732:	2301      	movs	r3, #1
 8008734:	73fb      	strb	r3, [r7, #15]
  uint16_t VolumeCtl, ResolutionCtl;

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->cs_req_state)
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	785b      	ldrb	r3, [r3, #1]
 800873a:	3b04      	subs	r3, #4
 800873c:	2b04      	cmp	r3, #4
 800873e:	f200 80aa 	bhi.w	8008896 <USBH_AUDIO_CSRequest+0x182>
 8008742:	a201      	add	r2, pc, #4	@ (adr r2, 8008748 <USBH_AUDIO_CSRequest+0x34>)
 8008744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008748:	080087a5 	.word	0x080087a5
 800874c:	080087eb 	.word	0x080087eb
 8008750:	0800875d 	.word	0x0800875d
 8008754:	0800884b 	.word	0x0800884b
 8008758:	08008891 	.word	0x08008891
  {
    case AUDIO_REQ_GET_VOLUME:
      req_status = USBH_AC_GetCur(phost,
 800875c:	78fa      	ldrb	r2, [r7, #3]
 800875e:	2302      	movs	r3, #2
 8008760:	9301      	str	r3, [sp, #4]
 8008762:	78bb      	ldrb	r3, [r7, #2]
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	2302      	movs	r3, #2
 8008768:	2106      	movs	r1, #6
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fe8a 	bl	8009484 <USBH_AC_GetCur>
 8008770:	4603      	mov	r3, r0
 8008772:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8008774:	7bfb      	ldrb	r3, [r7, #15]
 8008776:	2b01      	cmp	r3, #1
 8008778:	f000 808f 	beq.w	800889a <USBH_AUDIO_CSRequest+0x186>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	2204      	movs	r2, #4
 8008780:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800878e:	3302      	adds	r3, #2
 8008790:	881b      	ldrh	r3, [r3, #0]
 8008792:	021b      	lsls	r3, r3, #8
 8008794:	b29b      	uxth	r3, r3
 8008796:	4313      	orrs	r3, r2
 8008798:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volume = (uint32_t)VolumeCtl;
 800879a:	897a      	ldrh	r2, [r7, #10]
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
      }
      break;
 80087a2:	e07a      	b.n	800889a <USBH_AUDIO_CSRequest+0x186>

    case AUDIO_REQ_GET_MIN_VOLUME:
      req_status = USBH_AC_GetMin(phost,
 80087a4:	78fa      	ldrb	r2, [r7, #3]
 80087a6:	2302      	movs	r3, #2
 80087a8:	9301      	str	r3, [sp, #4]
 80087aa:	78bb      	ldrb	r3, [r7, #2]
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	2302      	movs	r3, #2
 80087b0:	2106      	movs	r1, #6
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f001 f82b 	bl	800980e <USBH_AC_GetMin>
 80087b8:	4603      	mov	r3, r0
 80087ba:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d06d      	beq.n	800889e <USBH_AUDIO_CSRequest+0x18a>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	2205      	movs	r2, #5
 80087c6:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80087d4:	3302      	adds	r3, #2
 80087d6:	881b      	ldrh	r3, [r3, #0]
 80087d8:	021b      	lsls	r3, r3, #8
 80087da:	b29b      	uxth	r3, r3
 80087dc:	4313      	orrs	r3, r2
 80087de:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMin = (uint32_t)VolumeCtl;
 80087e0:	897a      	ldrh	r2, [r7, #10]
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
      }
      break;
 80087e8:	e059      	b.n	800889e <USBH_AUDIO_CSRequest+0x18a>

    case AUDIO_REQ_GET_MAX_VOLUME:
      req_status = USBH_AC_GetMax(phost,
 80087ea:	78fa      	ldrb	r2, [r7, #3]
 80087ec:	2302      	movs	r3, #2
 80087ee:	9301      	str	r3, [sp, #4]
 80087f0:	78bb      	ldrb	r3, [r7, #2]
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	2302      	movs	r3, #2
 80087f6:	2106      	movs	r1, #6
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 feda 	bl	80095b2 <USBH_AC_GetMax>
 80087fe:	4603      	mov	r3, r0
 8008800:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8008802:	7bfb      	ldrb	r3, [r7, #15]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d04c      	beq.n	80088a2 <USBH_AUDIO_CSRequest+0x18e>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	2207      	movs	r2, #7
 800880c:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800881a:	3302      	adds	r3, #2
 800881c:	881b      	ldrh	r3, [r3, #0]
 800881e:	021b      	lsls	r3, r3, #8
 8008820:	b29b      	uxth	r3, r3
 8008822:	4313      	orrs	r3, r2
 8008824:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 8008826:	897a      	ldrh	r2, [r7, #10]
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800883a:	429a      	cmp	r2, r3
 800883c:	d231      	bcs.n	80088a2 <USBH_AUDIO_CSRequest+0x18e>
        {
          AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00U;
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8008844:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        }
      }
      break;
 8008848:	e02b      	b.n	80088a2 <USBH_AUDIO_CSRequest+0x18e>

    case AUDIO_REQ_GET_RESOLUTION:
      req_status = USBH_AC_GetRes(phost,
 800884a:	78fa      	ldrb	r2, [r7, #3]
 800884c:	2302      	movs	r3, #2
 800884e:	9301      	str	r3, [sp, #4]
 8008850:	78bb      	ldrb	r3, [r7, #2]
 8008852:	9300      	str	r3, [sp, #0]
 8008854:	2302      	movs	r3, #2
 8008856:	2106      	movs	r1, #6
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 ff41 	bl	80096e0 <USBH_AC_GetRes>
 800885e:	4603      	mov	r3, r0
 8008860:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);                /* length   */
      if (req_status != USBH_BUSY)
 8008862:	7bfb      	ldrb	r3, [r7, #15]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d01e      	beq.n	80088a6 <USBH_AUDIO_CSRequest+0x192>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	2208      	movs	r2, #8
 800886c:	705a      	strb	r2, [r3, #1]
        ResolutionCtl = LE16(&AUDIO_Handle->mem[0]);
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800887a:	3302      	adds	r3, #2
 800887c:	881b      	ldrh	r3, [r3, #0]
 800887e:	021b      	lsls	r3, r3, #8
 8008880:	b29b      	uxth	r3, r3
 8008882:	4313      	orrs	r3, r2
 8008884:	81bb      	strh	r3, [r7, #12]
        AUDIO_Handle->headphone.attribute.resolution = (uint32_t)ResolutionCtl;
 8008886:	89ba      	ldrh	r2, [r7, #12]
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
      }
      break;
 800888e:	e00a      	b.n	80088a6 <USBH_AUDIO_CSRequest+0x192>


    case AUDIO_REQ_CS_IDLE:
      status = USBH_OK;
 8008890:	2300      	movs	r3, #0
 8008892:	75fb      	strb	r3, [r7, #23]
      break;
 8008894:	e008      	b.n	80088a8 <USBH_AUDIO_CSRequest+0x194>

    default:
      break;
 8008896:	bf00      	nop
 8008898:	e006      	b.n	80088a8 <USBH_AUDIO_CSRequest+0x194>
      break;
 800889a:	bf00      	nop
 800889c:	e004      	b.n	80088a8 <USBH_AUDIO_CSRequest+0x194>
      break;
 800889e:	bf00      	nop
 80088a0:	e002      	b.n	80088a8 <USBH_AUDIO_CSRequest+0x194>
      break;
 80088a2:	bf00      	nop
 80088a4:	e000      	b.n	80088a8 <USBH_AUDIO_CSRequest+0x194>
      break;
 80088a6:	bf00      	nop
  }
  return status;
 80088a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3718      	adds	r7, #24
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop

080088b4 <USBH_AUDIO_HandleCSRequest>:
  *         and associated channels for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_HandleCSRequest(USBH_HandleTypeDef *phost)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_BUSY;
 80088bc:	2301      	movs	r3, #1
 80088be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef cs_status = USBH_BUSY;
 80088c0:	2301      	movs	r3, #1
 80088c2:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 80088ca:	69db      	ldr	r3, [r3, #28]
 80088cc:	60bb      	str	r3, [r7, #8]

  cs_status = USBH_AUDIO_CSRequest(phost,
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	f893 11a0 	ldrb.w	r1, [r3, #416]	@ 0x1a0
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 80088da:	461a      	mov	r2, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f7ff ff19 	bl	8008714 <USBH_AUDIO_CSRequest>
 80088e2:	4603      	mov	r3, r0
 80088e4:	73bb      	strb	r3, [r7, #14]
                                   AUDIO_Handle->temp_feature,
                                   AUDIO_Handle->temp_channels);

  if (cs_status != USBH_BUSY)
 80088e6:	7bbb      	ldrb	r3, [r7, #14]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d01c      	beq.n	8008926 <USBH_AUDIO_HandleCSRequest+0x72>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d10c      	bne.n	8008910 <USBH_AUDIO_HandleCSRequest+0x5c>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
      AUDIO_Handle->temp_channels = 0U;
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
      status = USBH_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	73fb      	strb	r3, [r7, #15]
 800890e:	e007      	b.n	8008920 <USBH_AUDIO_HandleCSRequest+0x6c>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 8008916:	3b01      	subs	r3, #1
 8008918:	b2da      	uxtb	r2, r3
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	2206      	movs	r2, #6
 8008924:	705a      	strb	r2, [r3, #1]
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }

  return status;
 8008926:	7bfb      	ldrb	r3, [r7, #15]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBH_AUDIO_Process>:
  *         The function is for managing state machine for Audio data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Process(USBH_HandleTypeDef *phost)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008938:	2301      	movs	r3, #1
 800893a:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008942:	69db      	ldr	r3, [r3, #28]
 8008944:	60bb      	str	r3, [r7, #8]

  if (AUDIO_Handle->headphone.supported == 1U)
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 800894c:	2b01      	cmp	r3, #1
 800894e:	d102      	bne.n	8008956 <USBH_AUDIO_Process+0x26>
  {
    (void)USBH_AUDIO_OutputStream(phost);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f001 f8dd 	bl	8009b10 <USBH_AUDIO_OutputStream>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 800895c:	2b01      	cmp	r3, #1
 800895e:	d102      	bne.n	8008966 <USBH_AUDIO_Process+0x36>
  {
    (void)USBH_AUDIO_InputStream(phost);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f001 f813 	bl	800998c <USBH_AUDIO_InputStream>
  }

  return status;
 8008966:	7bfb      	ldrb	r3, [r7, #15]
}
 8008968:	4618      	mov	r0, r3
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <USBH_AUDIO_SOFProcess>:
  *         The function is for managing the SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	370c      	adds	r7, #12
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <USBH_AUDIO_FindAudioStreamingIN>:
  * @brief  Find IN Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingIN(USBH_HandleTypeDef *phost)
{
 8008986:	b480      	push	{r7}
 8008988:	b085      	sub	sp, #20
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL;
 800898e:	2302      	movs	r3, #2
 8008990:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008998:	69db      	ldr	r3, [r3, #28]
 800899a:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 800899c:	2300      	movs	r3, #0
 800899e:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80089a0:	2300      	movs	r3, #0
 80089a2:	73fb      	strb	r3, [r7, #15]
 80089a4:	e09e      	b.n	8008ae4 <USBH_AUDIO_FindAudioStreamingIN+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 80089a6:	7bfb      	ldrb	r3, [r7, #15]
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	211a      	movs	r1, #26
 80089ac:	fb01 f303 	mul.w	r3, r1, r3
 80089b0:	4413      	add	r3, r2
 80089b2:	f203 3347 	addw	r3, r3, #839	@ 0x347
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	f040 8090 	bne.w	8008ade <USBH_AUDIO_FindAudioStreamingIN+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 80089be:	7bfb      	ldrb	r3, [r7, #15]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	211a      	movs	r1, #26
 80089c4:	fb01 f303 	mul.w	r3, r1, r3
 80089c8:	4413      	add	r3, r2
 80089ca:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 80089ce:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	f040 8084 	bne.w	8008ade <USBH_AUDIO_FindAudioStreamingIN+0x158>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U) &&
 80089d6:	7bfb      	ldrb	r3, [r7, #15]
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	211a      	movs	r1, #26
 80089dc:	fb01 f303 	mul.w	r3, r1, r3
 80089e0:	4413      	add	r3, r2
 80089e2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	b25b      	sxtb	r3, r3
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	da77      	bge.n	8008ade <USBH_AUDIO_FindAudioStreamingIN+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 80089ee:	7bfb      	ldrb	r3, [r7, #15]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	211a      	movs	r1, #26
 80089f4:	fb01 f303 	mul.w	r3, r1, r3
 80089f8:	4413      	add	r3, r2
 80089fa:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80089fe:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U) &&
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d06c      	beq.n	8008ade <USBH_AUDIO_FindAudioStreamingIN+0x158>
      {
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	7bba      	ldrb	r2, [r7, #14]
 8008a08:	6879      	ldr	r1, [r7, #4]
 8008a0a:	201a      	movs	r0, #26
 8008a0c:	fb00 f303 	mul.w	r3, r0, r3
 8008a10:	440b      	add	r3, r1
 8008a12:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008a16:	7818      	ldrb	r0, [r3, #0]
 8008a18:	68b9      	ldr	r1, [r7, #8]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4413      	add	r3, r2
 8008a20:	005b      	lsls	r3, r3, #1
 8008a22:	440b      	add	r3, r1
 8008a24:	3306      	adds	r3, #6
 8008a26:	4602      	mov	r2, r0
 8008a28:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008a2a:	7bfb      	ldrb	r3, [r7, #15]
 8008a2c:	7bba      	ldrb	r2, [r7, #14]
 8008a2e:	6879      	ldr	r1, [r7, #4]
 8008a30:	201a      	movs	r0, #26
 8008a32:	fb00 f303 	mul.w	r3, r0, r3
 8008a36:	440b      	add	r3, r1
 8008a38:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008a3c:	8818      	ldrh	r0, [r3, #0]
 8008a3e:	68b9      	ldr	r1, [r7, #8]
 8008a40:	4613      	mov	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	005b      	lsls	r3, r3, #1
 8008a48:	440b      	add	r3, r1
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
 8008a52:	7bba      	ldrb	r2, [r7, #14]
 8008a54:	6879      	ldr	r1, [r7, #4]
 8008a56:	201a      	movs	r0, #26
 8008a58:	fb00 f303 	mul.w	r3, r0, r3
 8008a5c:	440b      	add	r3, r1
 8008a5e:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8008a62:	7818      	ldrb	r0, [r3, #0]
 8008a64:	68b9      	ldr	r1, [r7, #8]
 8008a66:	4613      	mov	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	005b      	lsls	r3, r3, #1
 8008a6e:	440b      	add	r3, r1
 8008a70:	330b      	adds	r3, #11
 8008a72:	4602      	mov	r2, r0
 8008a74:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8008a76:	7bfb      	ldrb	r3, [r7, #15]
 8008a78:	7bba      	ldrb	r2, [r7, #14]
 8008a7a:	6879      	ldr	r1, [r7, #4]
 8008a7c:	201a      	movs	r0, #26
 8008a7e:	fb00 f303 	mul.w	r3, r0, r3
 8008a82:	440b      	add	r3, r1
 8008a84:	f203 3345 	addw	r3, r3, #837	@ 0x345
 8008a88:	7818      	ldrb	r0, [r3, #0]
 8008a8a:	68b9      	ldr	r1, [r7, #8]
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	005b      	lsls	r3, r3, #1
 8008a94:	440b      	add	r3, r1
 8008a96:	330a      	adds	r3, #10
 8008a98:	4602      	mov	r2, r0
 8008a9a:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	211a      	movs	r1, #26
 8008aa2:	fb01 f303 	mul.w	r3, r1, r3
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f203 3352 	addw	r3, r3, #850	@ 0x352
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	7bba      	ldrb	r2, [r7, #14]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	68b9      	ldr	r1, [r7, #8]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	4413      	add	r3, r2
 8008aba:	005b      	lsls	r3, r3, #1
 8008abc:	440b      	add	r3, r1
 8008abe:	330e      	adds	r3, #14
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].valid = 1U;
 8008ac4:	7bba      	ldrb	r2, [r7, #14]
 8008ac6:	68b9      	ldr	r1, [r7, #8]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4413      	add	r3, r2
 8008ace:	005b      	lsls	r3, r3, #1
 8008ad0:	440b      	add	r3, r1
 8008ad2:	330c      	adds	r3, #12
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8008ad8:	7bbb      	ldrb	r3, [r7, #14]
 8008ada:	3301      	adds	r3, #1
 8008adc:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	73fb      	strb	r3, [r7, #15]
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
 8008ae6:	2b09      	cmp	r3, #9
 8008ae8:	f67f af5d 	bls.w	80089a6 <USBH_AUDIO_FindAudioStreamingIN+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 8008aec:	7bbb      	ldrb	r3, [r7, #14]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d001      	beq.n	8008af6 <USBH_AUDIO_FindAudioStreamingIN+0x170>
  {
    status = USBH_OK;
 8008af2:	2300      	movs	r3, #0
 8008af4:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8008af6:	7b7b      	ldrb	r3, [r7, #13]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <USBH_AUDIO_FindAudioStreamingOUT>:
  * @brief  Find OUT Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingOUT(USBH_HandleTypeDef *phost)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL;
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008b16:	69db      	ldr	r3, [r3, #28]
 8008b18:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8008b1e:	2300      	movs	r3, #0
 8008b20:	73fb      	strb	r3, [r7, #15]
 8008b22:	e09e      	b.n	8008c62 <USBH_AUDIO_FindAudioStreamingOUT+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8008b24:	7bfb      	ldrb	r3, [r7, #15]
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	211a      	movs	r1, #26
 8008b2a:	fb01 f303 	mul.w	r3, r1, r3
 8008b2e:	4413      	add	r3, r2
 8008b30:	f203 3347 	addw	r3, r3, #839	@ 0x347
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	f040 8090 	bne.w	8008c5c <USBH_AUDIO_FindAudioStreamingOUT+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	211a      	movs	r1, #26
 8008b42:	fb01 f303 	mul.w	r3, r1, r3
 8008b46:	4413      	add	r3, r2
 8008b48:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8008b4c:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	f040 8084 	bne.w	8008c5c <USBH_AUDIO_FindAudioStreamingOUT+0x158>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 8008b54:	7bfb      	ldrb	r3, [r7, #15]
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	211a      	movs	r1, #26
 8008b5a:	fb01 f303 	mul.w	r3, r1, r3
 8008b5e:	4413      	add	r3, r2
 8008b60:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	b25b      	sxtb	r3, r3
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	db77      	blt.n	8008c5c <USBH_AUDIO_FindAudioStreamingOUT+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	211a      	movs	r1, #26
 8008b72:	fb01 f303 	mul.w	r3, r1, r3
 8008b76:	4413      	add	r3, r2
 8008b78:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008b7c:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d06c      	beq.n	8008c5c <USBH_AUDIO_FindAudioStreamingOUT+0x158>
      {
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008b82:	7bfb      	ldrb	r3, [r7, #15]
 8008b84:	7bba      	ldrb	r2, [r7, #14]
 8008b86:	6879      	ldr	r1, [r7, #4]
 8008b88:	201a      	movs	r0, #26
 8008b8a:	fb00 f303 	mul.w	r3, r0, r3
 8008b8e:	440b      	add	r3, r1
 8008b90:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008b94:	7818      	ldrb	r0, [r3, #0]
 8008b96:	68b9      	ldr	r1, [r7, #8]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	005b      	lsls	r3, r3, #1
 8008ba0:	440b      	add	r3, r1
 8008ba2:	3338      	adds	r3, #56	@ 0x38
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ba8:	7bfb      	ldrb	r3, [r7, #15]
 8008baa:	7bba      	ldrb	r2, [r7, #14]
 8008bac:	6879      	ldr	r1, [r7, #4]
 8008bae:	201a      	movs	r0, #26
 8008bb0:	fb00 f303 	mul.w	r3, r0, r3
 8008bb4:	440b      	add	r3, r1
 8008bb6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008bba:	8818      	ldrh	r0, [r3, #0]
 8008bbc:	68b9      	ldr	r1, [r7, #8]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	005b      	lsls	r3, r3, #1
 8008bc6:	440b      	add	r3, r1
 8008bc8:	333a      	adds	r3, #58	@ 0x3a
 8008bca:	4602      	mov	r2, r0
 8008bcc:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
 8008bd0:	7bba      	ldrb	r2, [r7, #14]
 8008bd2:	6879      	ldr	r1, [r7, #4]
 8008bd4:	201a      	movs	r0, #26
 8008bd6:	fb00 f303 	mul.w	r3, r0, r3
 8008bda:	440b      	add	r3, r1
 8008bdc:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8008be0:	7818      	ldrb	r0, [r3, #0]
 8008be2:	68b9      	ldr	r1, [r7, #8]
 8008be4:	4613      	mov	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	005b      	lsls	r3, r3, #1
 8008bec:	440b      	add	r3, r1
 8008bee:	333d      	adds	r3, #61	@ 0x3d
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8008bf4:	7bfb      	ldrb	r3, [r7, #15]
 8008bf6:	7bba      	ldrb	r2, [r7, #14]
 8008bf8:	6879      	ldr	r1, [r7, #4]
 8008bfa:	201a      	movs	r0, #26
 8008bfc:	fb00 f303 	mul.w	r3, r0, r3
 8008c00:	440b      	add	r3, r1
 8008c02:	f203 3345 	addw	r3, r3, #837	@ 0x345
 8008c06:	7818      	ldrb	r0, [r3, #0]
 8008c08:	68b9      	ldr	r1, [r7, #8]
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4413      	add	r3, r2
 8008c10:	005b      	lsls	r3, r3, #1
 8008c12:	440b      	add	r3, r1
 8008c14:	333c      	adds	r3, #60	@ 0x3c
 8008c16:	4602      	mov	r2, r0
 8008c18:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	211a      	movs	r1, #26
 8008c20:	fb01 f303 	mul.w	r3, r1, r3
 8008c24:	4413      	add	r3, r2
 8008c26:	f203 3352 	addw	r3, r3, #850	@ 0x352
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	7bba      	ldrb	r2, [r7, #14]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	68b9      	ldr	r1, [r7, #8]
 8008c32:	4613      	mov	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4413      	add	r3, r2
 8008c38:	005b      	lsls	r3, r3, #1
 8008c3a:	440b      	add	r3, r1
 8008c3c:	3340      	adds	r3, #64	@ 0x40
 8008c3e:	4602      	mov	r2, r0
 8008c40:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].valid = 1U;
 8008c42:	7bba      	ldrb	r2, [r7, #14]
 8008c44:	68b9      	ldr	r1, [r7, #8]
 8008c46:	4613      	mov	r3, r2
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	4413      	add	r3, r2
 8008c4c:	005b      	lsls	r3, r3, #1
 8008c4e:	440b      	add	r3, r1
 8008c50:	333e      	adds	r3, #62	@ 0x3e
 8008c52:	2201      	movs	r2, #1
 8008c54:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8008c56:	7bbb      	ldrb	r3, [r7, #14]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8008c5c:	7bfb      	ldrb	r3, [r7, #15]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	73fb      	strb	r3, [r7, #15]
 8008c62:	7bfb      	ldrb	r3, [r7, #15]
 8008c64:	2b09      	cmp	r3, #9
 8008c66:	f67f af5d 	bls.w	8008b24 <USBH_AUDIO_FindAudioStreamingOUT+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 8008c6a:	7bbb      	ldrb	r3, [r7, #14]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <USBH_AUDIO_FindAudioStreamingOUT+0x170>
  {
    status = USBH_OK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8008c74:	7b7b      	ldrb	r3, [r7, #13]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr

08008c82 <USBH_AUDIO_FindHIDControl>:
  * @brief  Find HID Control interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindHIDControl(USBH_HandleTypeDef *phost)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b084      	sub	sp, #16
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
  uint8_t interface;
  USBH_StatusTypeDef status = USBH_FAIL;
 8008c8a:	2302      	movs	r3, #2
 8008c8c:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008c94:	69db      	ldr	r3, [r3, #28]
 8008c96:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOCONTROL  interface */
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFFU);
 8008c98:	23ff      	movs	r3, #255	@ 0xff
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	2101      	movs	r1, #1
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f001 f9f5 	bl	800a08e <USBH_FindInterface>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES))
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
 8008caa:	2bff      	cmp	r3, #255	@ 0xff
 8008cac:	d002      	beq.n	8008cb4 <USBH_AUDIO_FindHIDControl+0x32>
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
 8008cb0:	2b09      	cmp	r3, #9
 8008cb2:	d901      	bls.n	8008cb8 <USBH_AUDIO_FindHIDControl+0x36>
  {
    return USBH_FAIL;
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	e062      	b.n	8008d7e <USBH_AUDIO_FindHIDControl+0xfc>
  }

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8008cb8:	2300      	movs	r3, #0
 8008cba:	73fb      	strb	r3, [r7, #15]
 8008cbc:	e05b      	b.n	8008d76 <USBH_AUDIO_FindHIDControl+0xf4>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8008cbe:	7bfb      	ldrb	r3, [r7, #15]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	211a      	movs	r1, #26
 8008cc4:	fb01 f303 	mul.w	r3, r1, r3
 8008cc8:	4413      	add	r3, r2
 8008cca:	f203 3347 	addw	r3, r3, #839	@ 0x347
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	2b03      	cmp	r3, #3
 8008cd2:	d14d      	bne.n	8008d70 <USBH_AUDIO_FindHIDControl+0xee>
        (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	211a      	movs	r1, #26
 8008cda:	fb01 f303 	mul.w	r3, r1, r3
 8008cde:	4413      	add	r3, r2
 8008ce0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008ce4:	881b      	ldrh	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d042      	beq.n	8008d70 <USBH_AUDIO_FindHIDControl+0xee>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x80U)
 8008cea:	7bfb      	ldrb	r3, [r7, #15]
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	211a      	movs	r1, #26
 8008cf0:	fb01 f303 	mul.w	r3, r1, r3
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	b25b      	sxtb	r3, r3
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	da36      	bge.n	8008d70 <USBH_AUDIO_FindHIDControl+0xee>
      {
        AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008d02:	7bfb      	ldrb	r3, [r7, #15]
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	211a      	movs	r1, #26
 8008d08:	fb01 f303 	mul.w	r3, r1, r3
 8008d0c:	4413      	add	r3, r2
 8008d0e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008d12:	781a      	ldrb	r2, [r3, #0]
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
        AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	211a      	movs	r1, #26
 8008d20:	fb01 f303 	mul.w	r3, r1, r3
 8008d24:	4413      	add	r3, r2
 8008d26:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008d2a:	881a      	ldrh	r2, [r3, #0]
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	f8a3 2186 	strh.w	r2, [r3, #390]	@ 0x186
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	211a      	movs	r1, #26
 8008d38:	fb01 f303 	mul.w	r3, r1, r3
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8008d42:	781a      	ldrb	r2, [r3, #0]
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
        AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8008d4a:	7bfb      	ldrb	r3, [r7, #15]
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	211a      	movs	r1, #26
 8008d50:	fb01 f303 	mul.w	r3, r1, r3
 8008d54:	4413      	add	r3, r2
 8008d56:	f203 3352 	addw	r3, r3, #850	@ 0x352
 8008d5a:	781a      	ldrb	r2, [r3, #0]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	f883 218b 	strb.w	r2, [r3, #395]	@ 0x18b
        AUDIO_Handle->control.supported = 1U;
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
        status = USBH_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	73bb      	strb	r3, [r7, #14]
        break;
 8008d6e:	e005      	b.n	8008d7c <USBH_AUDIO_FindHIDControl+0xfa>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
 8008d72:	3301      	adds	r3, #1
 8008d74:	73fb      	strb	r3, [r7, #15]
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
 8008d78:	2b09      	cmp	r3, #9
 8008d7a:	d9a0      	bls.n	8008cbe <USBH_AUDIO_FindHIDControl+0x3c>
      }
    }
  }

  return status;
 8008d7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <USBH_AUDIO_ParseCSDescriptors>:
  * @brief  Parse AC and interfaces Descriptors
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ParseCSDescriptors(USBH_HandleTypeDef *phost)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b088      	sub	sp, #32
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	77fb      	strb	r3, [r7, #31]
  USBH_DescHeader_t            *pdesc;
  uint16_t                      ptr;
  uint8_t                       itf_index = 0U;
 8008d92:	2300      	movs	r3, #0
 8008d94:	75fb      	strb	r3, [r7, #23]
  uint8_t                       itf_number = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	75bb      	strb	r3, [r7, #22]
  uint8_t                       alt_setting;
  AUDIO_HandleTypeDef           *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008da0:	69db      	ldr	r3, [r3, #28]
 8008da2:	613b      	str	r3, [r7, #16]
  pdesc   = (USBH_DescHeader_t *)(void *)(phost->device.CfgDesc_Raw);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	331c      	adds	r3, #28
 8008da8:	61bb      	str	r3, [r7, #24]
  ptr = USB_LEN_CFG_DESC;
 8008daa:	2309      	movs	r3, #9
 8008dac:	81bb      	strh	r3, [r7, #12]

  AUDIO_Handle->class_desc.FeatureUnitNum = 0U;
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
  AUDIO_Handle->class_desc.InputTerminalNum = 0U;
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f8a3 20ea 	strh.w	r2, [r3, #234]	@ 0xea
  AUDIO_Handle->class_desc.OutputTerminalNum = 0U;
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
  AUDIO_Handle->class_desc.ASNum = 0U;
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8

  while (ptr < phost->device.CfgDesc.wTotalLength)
 8008dce:	e03c      	b.n	8008e4a <USBH_AUDIO_ParseCSDescriptors+0xc4>
  {
    pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008dd0:	f107 030c 	add.w	r3, r7, #12
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	69b8      	ldr	r0, [r7, #24]
 8008dd8:	f002 fa85 	bl	800b2e6 <USBH_GetNextDesc>
 8008ddc:	61b8      	str	r0, [r7, #24]

    switch (pdesc->bDescriptorType)
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	785b      	ldrb	r3, [r3, #1]
 8008de2:	2b04      	cmp	r3, #4
 8008de4:	d002      	beq.n	8008dec <USBH_AUDIO_ParseCSDescriptors+0x66>
 8008de6:	2b24      	cmp	r3, #36	@ 0x24
 8008de8:	d00f      	beq.n	8008e0a <USBH_AUDIO_ParseCSDescriptors+0x84>
          }
        }
        break;

      default:
        break;
 8008dea:	e02e      	b.n	8008e4a <USBH_AUDIO_ParseCSDescriptors+0xc4>
        itf_number = *((uint8_t *)(void *)pdesc + 2U);
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	789b      	ldrb	r3, [r3, #2]
 8008df0:	75bb      	strb	r3, [r7, #22]
        alt_setting = *((uint8_t *)(void *)pdesc + 3U);
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	78db      	ldrb	r3, [r3, #3]
 8008df6:	73fb      	strb	r3, [r7, #15]
        itf_index = USBH_FindInterfaceIndex(phost, itf_number, alt_setting);
 8008df8:	7bfa      	ldrb	r2, [r7, #15]
 8008dfa:	7dbb      	ldrb	r3, [r7, #22]
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f001 f98b 	bl	800a11a <USBH_FindInterfaceIndex>
 8008e04:	4603      	mov	r3, r0
 8008e06:	75fb      	strb	r3, [r7, #23]
        break;
 8008e08:	e01f      	b.n	8008e4a <USBH_AUDIO_ParseCSDescriptors+0xc4>
        if (itf_number <= phost->device.CfgDesc.bNumInterfaces)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008e10:	7dba      	ldrb	r2, [r7, #22]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d818      	bhi.n	8008e48 <USBH_AUDIO_ParseCSDescriptors+0xc2>
          if ((itf_index == 0xFFU) || (itf_index >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008e16:	7dfb      	ldrb	r3, [r7, #23]
 8008e18:	2bff      	cmp	r3, #255	@ 0xff
 8008e1a:	d002      	beq.n	8008e22 <USBH_AUDIO_ParseCSDescriptors+0x9c>
 8008e1c:	7dfb      	ldrb	r3, [r7, #23]
 8008e1e:	2b09      	cmp	r3, #9
 8008e20:	d902      	bls.n	8008e28 <USBH_AUDIO_ParseCSDescriptors+0xa2>
            status = USBH_FAIL;
 8008e22:	2302      	movs	r3, #2
 8008e24:	77fb      	strb	r3, [r7, #31]
        break;
 8008e26:	e00f      	b.n	8008e48 <USBH_AUDIO_ParseCSDescriptors+0xc2>
            (void)ParseCSDescriptors(&AUDIO_Handle->class_desc,
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8008e2e:	7dfb      	ldrb	r3, [r7, #23]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	211a      	movs	r1, #26
 8008e34:	fb01 f303 	mul.w	r3, r1, r3
 8008e38:	4413      	add	r3, r2
 8008e3a:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	69ba      	ldr	r2, [r7, #24]
 8008e42:	4619      	mov	r1, r3
 8008e44:	f000 f80c 	bl	8008e60 <ParseCSDescriptors>
        break;
 8008e48:	bf00      	nop
  while (ptr < phost->device.CfgDesc.wTotalLength)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8b3 233a 	ldrh.w	r2, [r3, #826]	@ 0x33a
 8008e50:	89bb      	ldrh	r3, [r7, #12]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d8bc      	bhi.n	8008dd0 <USBH_AUDIO_ParseCSDescriptors+0x4a>
    }
  }

  return status;
 8008e56:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3720      	adds	r7, #32
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <ParseCSDescriptors>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef ParseCSDescriptors(AUDIO_ClassSpecificDescTypedef *class_desc,
                                             uint8_t ac_subclass,
                                             uint8_t *pdesc)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	607a      	str	r2, [r7, #4]
 8008e6c:	72fb      	strb	r3, [r7, #11]
  if (ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 8008e6e:	7afb      	ldrb	r3, [r7, #11]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d163      	bne.n	8008f3c <ParseCSDescriptors+0xdc>
  {
    switch (pdesc[2])
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	3302      	adds	r3, #2
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	2b05      	cmp	r3, #5
 8008e7e:	f200 8081 	bhi.w	8008f84 <ParseCSDescriptors+0x124>
 8008e82:	a201      	add	r2, pc, #4	@ (adr r2, 8008e88 <ParseCSDescriptors+0x28>)
 8008e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e88:	08008ea1 	.word	0x08008ea1
 8008e8c:	08008ea9 	.word	0x08008ea9
 8008e90:	08008ec5 	.word	0x08008ec5
 8008e94:	08008f1f 	.word	0x08008f1f
 8008e98:	08008f01 	.word	0x08008f01
 8008e9c:	08008ee3 	.word	0x08008ee3
    {
      case UAC_HEADER:
        class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)(void *)pdesc;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	601a      	str	r2, [r3, #0]
        break;
 8008ea6:	e06e      	b.n	8008f86 <ParseCSDescriptors+0x126>

      case UAC_INPUT_TERMINAL:
        class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef *)(void *)pdesc;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 8008eae:	1c5a      	adds	r2, r3, #1
 8008eb0:	b291      	uxth	r1, r2
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	f8a2 107e 	strh.w	r1, [r2, #126]	@ 0x7e
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	4413      	add	r3, r2
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	605a      	str	r2, [r3, #4]
        break;
 8008ec2:	e060      	b.n	8008f86 <ParseCSDescriptors+0x126>

      case UAC_OUTPUT_TERMINAL:
        class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef *)(void *)pdesc;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8008eca:	1c5a      	adds	r2, r3, #1
 8008ecc:	b291      	uxth	r1, r2
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	f8a2 1080 	strh.w	r1, [r2, #128]	@ 0x80
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	3304      	adds	r3, #4
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4413      	add	r3, r2
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	605a      	str	r2, [r3, #4]
        break;
 8008ee0:	e051      	b.n	8008f86 <ParseCSDescriptors+0x126>

      case UAC_FEATURE_UNIT:
        class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef *)(void *)pdesc;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8008ee8:	1c5a      	adds	r2, r3, #1
 8008eea:	b291      	uxth	r1, r2
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	f8a2 1082 	strh.w	r1, [r2, #130]	@ 0x82
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	4413      	add	r3, r2
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	605a      	str	r2, [r3, #4]
        break;
 8008efe:	e042      	b.n	8008f86 <ParseCSDescriptors+0x126>

      case UAC_SELECTOR_UNIT:
        class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef *)(void *)pdesc;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8008f06:	1c5a      	adds	r2, r3, #1
 8008f08:	b291      	uxth	r1, r2
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	f8a2 1084 	strh.w	r1, [r2, #132]	@ 0x84
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	3310      	adds	r3, #16
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4413      	add	r3, r2
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	605a      	str	r2, [r3, #4]
        break;
 8008f1c:	e033      	b.n	8008f86 <ParseCSDescriptors+0x126>

      case UAC_MIXER_UNIT:
        class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef *)(void *)pdesc;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8008f24:	1c5a      	adds	r2, r3, #1
 8008f26:	b291      	uxth	r1, r2
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	f8a2 1086 	strh.w	r1, [r2, #134]	@ 0x86
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	330c      	adds	r3, #12
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4413      	add	r3, r2
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	605a      	str	r2, [r3, #4]
        break;
 8008f3a:	e024      	b.n	8008f86 <ParseCSDescriptors+0x126>
        break;
    }
  }
  else
  {
    if (ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 8008f3c:	7afb      	ldrb	r3, [r7, #11]
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d121      	bne.n	8008f86 <ParseCSDescriptors+0x126>
    {
      switch (pdesc[2])
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	3302      	adds	r3, #2
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d002      	beq.n	8008f52 <ParseCSDescriptors+0xf2>
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d00a      	beq.n	8008f66 <ParseCSDescriptors+0x106>
          break;
        case UAC_FORMAT_TYPE:
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
          break;
        default:
          break;
 8008f50:	e019      	b.n	8008f86 <ParseCSDescriptors+0x126>
          class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef *)(void *)pdesc;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	330a      	adds	r3, #10
 8008f5c:	00db      	lsls	r3, r3, #3
 8008f5e:	4413      	add	r3, r2
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	605a      	str	r2, [r3, #4]
          break;
 8008f64:	e00f      	b.n	8008f86 <ParseCSDescriptors+0x126>
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8008f6c:	1c5a      	adds	r2, r3, #1
 8008f6e:	b291      	uxth	r1, r2
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	f8a2 107c 	strh.w	r1, [r2, #124]	@ 0x7c
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	330a      	adds	r3, #10
 8008f7a:	00db      	lsls	r3, r3, #3
 8008f7c:	4413      	add	r3, r2
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	609a      	str	r2, [r3, #8]
          break;
 8008f82:	e000      	b.n	8008f86 <ParseCSDescriptors+0x126>
        break;
 8008f84:	bf00      	nop
      }
    }
  }

  return USBH_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3714      	adds	r7, #20
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <USBH_AUDIO_FindLinkedUnit>:
  * @param  phost: Host handle
  * @param  UnitID: Unit identifier
  * @retval UnitID, Index and Type of the associated Unit
  */
static uint32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	70fb      	strb	r3, [r7, #3]
  uint8_t Index;
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008fa6:	69db      	ldr	r3, [r3, #28]
 8008fa8:	60bb      	str	r3, [r7, #8]

  /* Find Feature Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 8008faa:	2300      	movs	r3, #0
 8008fac:	73fb      	strb	r3, [r7, #15]
 8008fae:	e01b      	b.n	8008fe8 <USBH_AUDIO_FindLinkedUnit+0x54>
  {
    if (AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 8008fb0:	7bfb      	ldrb	r3, [r7, #15]
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	3322      	adds	r3, #34	@ 0x22
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	4413      	add	r3, r2
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	791b      	ldrb	r3, [r3, #4]
 8008fbe:	78fa      	ldrb	r2, [r7, #3]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d10e      	bne.n	8008fe2 <USBH_AUDIO_FindLinkedUnit+0x4e>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bUnitID;
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	3322      	adds	r3, #34	@ 0x22
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	4413      	add	r3, r2
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	78db      	ldrb	r3, [r3, #3]
 8008fd2:	70fb      	strb	r3, [r7, #3]

      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
 8008fd4:	78fb      	ldrb	r3, [r7, #3]
 8008fd6:	041a      	lsls	r2, r3, #16
 8008fd8:	7bfb      	ldrb	r3, [r7, #15]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008fe0:	e086      	b.n	80090f0 <USBH_AUDIO_FindLinkedUnit+0x15c>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	73fb      	strb	r3, [r7, #15]
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	@ 0xee
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d3dc      	bcc.n	8008fb0 <USBH_AUDIO_FindLinkedUnit+0x1c>
    }
  }

  /* Find Mixer Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	73fb      	strb	r3, [r7, #15]
 8008ffa:	e025      	b.n	8009048 <USBH_AUDIO_FindLinkedUnit+0xb4>
  {
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 8008ffc:	7bfb      	ldrb	r3, [r7, #15]
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	3326      	adds	r3, #38	@ 0x26
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4413      	add	r3, r2
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	795b      	ldrb	r3, [r3, #5]
 800900a:	78fa      	ldrb	r2, [r7, #3]
 800900c:	429a      	cmp	r2, r3
 800900e:	d009      	beq.n	8009024 <USBH_AUDIO_FindLinkedUnit+0x90>
        (AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID1 == UnitID))
 8009010:	7bfb      	ldrb	r3, [r7, #15]
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	3326      	adds	r3, #38	@ 0x26
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	4413      	add	r3, r2
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	799b      	ldrb	r3, [r3, #6]
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 800901e:	78fa      	ldrb	r2, [r7, #3]
 8009020:	429a      	cmp	r2, r3
 8009022:	d10e      	bne.n	8009042 <USBH_AUDIO_FindLinkedUnit+0xae>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bUnitID;
 8009024:	7bfb      	ldrb	r3, [r7, #15]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	3326      	adds	r3, #38	@ 0x26
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	4413      	add	r3, r2
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	78db      	ldrb	r3, [r3, #3]
 8009032:	70fb      	strb	r3, [r7, #3]

      return (uint32_t)((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
 8009034:	78fb      	ldrb	r3, [r7, #3]
 8009036:	041a      	lsls	r2, r3, #16
 8009038:	7bfb      	ldrb	r3, [r7, #15]
 800903a:	4313      	orrs	r3, r2
 800903c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009040:	e056      	b.n	80090f0 <USBH_AUDIO_FindLinkedUnit+0x15c>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8009042:	7bfb      	ldrb	r3, [r7, #15]
 8009044:	3301      	adds	r3, #1
 8009046:	73fb      	strb	r3, [r7, #15]
 8009048:	7bfb      	ldrb	r3, [r7, #15]
 800904a:	b29a      	uxth	r2, r3
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 8009052:	429a      	cmp	r2, r3
 8009054:	d3d2      	bcc.n	8008ffc <USBH_AUDIO_FindLinkedUnit+0x68>
    }
  }

  /* Find Selector Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8009056:	2300      	movs	r3, #0
 8009058:	73fb      	strb	r3, [r7, #15]
 800905a:	e01b      	b.n	8009094 <USBH_AUDIO_FindLinkedUnit+0x100>
  {
    if (AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 800905c:	7bfb      	ldrb	r3, [r7, #15]
 800905e:	68ba      	ldr	r2, [r7, #8]
 8009060:	332a      	adds	r3, #42	@ 0x2a
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	4413      	add	r3, r2
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	795b      	ldrb	r3, [r3, #5]
 800906a:	78fa      	ldrb	r2, [r7, #3]
 800906c:	429a      	cmp	r2, r3
 800906e:	d10e      	bne.n	800908e <USBH_AUDIO_FindLinkedUnit+0xfa>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bUnitID;
 8009070:	7bfb      	ldrb	r3, [r7, #15]
 8009072:	68ba      	ldr	r2, [r7, #8]
 8009074:	332a      	adds	r3, #42	@ 0x2a
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	4413      	add	r3, r2
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	78db      	ldrb	r3, [r3, #3]
 800907e:	70fb      	strb	r3, [r7, #3]

      return (uint32_t)((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
 8009080:	78fb      	ldrb	r3, [r7, #3]
 8009082:	041a      	lsls	r2, r3, #16
 8009084:	7bfb      	ldrb	r3, [r7, #15]
 8009086:	4313      	orrs	r3, r2
 8009088:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800908c:	e030      	b.n	80090f0 <USBH_AUDIO_FindLinkedUnit+0x15c>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 800908e:	7bfb      	ldrb	r3, [r7, #15]
 8009090:	3301      	adds	r3, #1
 8009092:	73fb      	strb	r3, [r7, #15]
 8009094:	7bfb      	ldrb	r3, [r7, #15]
 8009096:	b29a      	uxth	r2, r3
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 800909e:	429a      	cmp	r2, r3
 80090a0:	d3dc      	bcc.n	800905c <USBH_AUDIO_FindLinkedUnit+0xc8>
    }
  }

  /* Find Output Terminal Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 80090a2:	2300      	movs	r3, #0
 80090a4:	73fb      	strb	r3, [r7, #15]
 80090a6:	e01b      	b.n	80090e0 <USBH_AUDIO_FindLinkedUnit+0x14c>
  {
    if (AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 80090a8:	7bfb      	ldrb	r3, [r7, #15]
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	331e      	adds	r3, #30
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4413      	add	r3, r2
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	79db      	ldrb	r3, [r3, #7]
 80090b6:	78fa      	ldrb	r2, [r7, #3]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d10e      	bne.n	80090da <USBH_AUDIO_FindLinkedUnit+0x146>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bTerminalID;
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	331e      	adds	r3, #30
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	4413      	add	r3, r2
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	78db      	ldrb	r3, [r3, #3]
 80090ca:	70fb      	strb	r3, [r7, #3]

      return (uint32_t)((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
 80090cc:	78fb      	ldrb	r3, [r7, #3]
 80090ce:	041a      	lsls	r2, r3, #16
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80090d8:	e00a      	b.n	80090f0 <USBH_AUDIO_FindLinkedUnit+0x15c>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 80090da:	7bfb      	ldrb	r3, [r7, #15]
 80090dc:	3301      	adds	r3, #1
 80090de:	73fb      	strb	r3, [r7, #15]
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d3dc      	bcc.n	80090a8 <USBH_AUDIO_FindLinkedUnit+0x114>
    }
  }

  /* No associated Unit found return undefined ID 0x00*/
  return 0U;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <USBH_AUDIO_BuildMicrophonePath>:
  * @brief  Build full path for Microphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildMicrophonePath(USBH_HandleTypeDef *phost)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b086      	sub	sp, #24
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8009104:	2300      	movs	r3, #0
 8009106:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	757b      	strb	r3, [r7, #21]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8009112:	69db      	ldr	r3, [r3, #28]
 8009114:	613b      	str	r3, [r7, #16]

  /*Find microphone IT*/
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8009116:	2300      	movs	r3, #0
 8009118:	75bb      	strb	r3, [r7, #22]
 800911a:	e02b      	b.n	8009174 <USBH_AUDIO_BuildMicrophonePath+0x78>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201U)
 800911c:	7dbb      	ldrb	r3, [r7, #22]
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	331a      	adds	r3, #26
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	791b      	ldrb	r3, [r3, #4]
 800912a:	4619      	mov	r1, r3
 800912c:	7dbb      	ldrb	r3, [r7, #22]
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	331a      	adds	r3, #26
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4413      	add	r3, r2
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	795b      	ldrb	r3, [r3, #5]
 800913a:	021b      	lsls	r3, r3, #8
 800913c:	b29b      	uxth	r3, r3
 800913e:	430b      	orrs	r3, r1
 8009140:	f240 2201 	movw	r2, #513	@ 0x201
 8009144:	4293      	cmp	r3, r2
 8009146:	d112      	bne.n	800916e <USBH_AUDIO_BuildMicrophonePath+0x72>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8009148:	7dbb      	ldrb	r3, [r7, #22]
 800914a:	693a      	ldr	r2, [r7, #16]
 800914c:	331a      	adds	r3, #26
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4413      	add	r3, r2
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	78db      	ldrb	r3, [r3, #3]
 8009156:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8009158:	7dbb      	ldrb	r3, [r7, #22]
 800915a:	693a      	ldr	r2, [r7, #16]
 800915c:	331a      	adds	r3, #26
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	79da      	ldrb	r2, [r3, #7]
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
      break;
 800916c:	e009      	b.n	8009182 <USBH_AUDIO_BuildMicrophonePath+0x86>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 800916e:	7dbb      	ldrb	r3, [r7, #22]
 8009170:	3301      	adds	r3, #1
 8009172:	75bb      	strb	r3, [r7, #22]
 8009174:	7dbb      	ldrb	r3, [r7, #22]
 8009176:	b29a      	uxth	r2, r3
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	@ 0xea
 800917e:	429a      	cmp	r2, r3
 8009180:	d3cc      	bcc.n	800911c <USBH_AUDIO_BuildMicrophonePath+0x20>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8009182:	7dfb      	ldrb	r3, [r7, #23]
 8009184:	4619      	mov	r1, r3
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7ff ff04 	bl	8008f94 <USBH_AUDIO_FindLinkedUnit>
 800918c:	60f8      	str	r0, [r7, #12]

    if (value == 0U)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d101      	bne.n	8009198 <USBH_AUDIO_BuildMicrophonePath+0x9c>
    {
      return USBH_FAIL;
 8009194:	2302      	movs	r3, #2
 8009196:	e035      	b.n	8009204 <USBH_AUDIO_BuildMicrophonePath+0x108>
    }

    Index = (uint8_t)(value & 0xFFU);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	72fb      	strb	r3, [r7, #11]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	0a1b      	lsrs	r3, r3, #8
 80091a0:	72bb      	strb	r3, [r7, #10]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	0c1b      	lsrs	r3, r3, #16
 80091a6:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 80091a8:	7abb      	ldrb	r3, [r7, #10]
 80091aa:	3b03      	subs	r3, #3
 80091ac:	2b03      	cmp	r3, #3
 80091ae:	d81f      	bhi.n	80091f0 <USBH_AUDIO_BuildMicrophonePath+0xf4>
 80091b0:	a201      	add	r2, pc, #4	@ (adr r2, 80091b8 <USBH_AUDIO_BuildMicrophonePath+0xbc>)
 80091b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b6:	bf00      	nop
 80091b8:	080091e7 	.word	0x080091e7
 80091bc:	080091d3 	.word	0x080091d3
 80091c0:	080091dd 	.word	0x080091dd
 80091c4:	080091c9 	.word	0x080091c9
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->microphone.asociated_feature = Index;
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	7afa      	ldrb	r2, [r7, #11]
 80091cc:	f883 214f 	strb.w	r2, [r3, #335]	@ 0x14f
        break;
 80091d0:	e011      	b.n	80091f6 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->microphone.asociated_mixer = Index;
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	7afa      	ldrb	r2, [r7, #11]
 80091d6:	f883 214d 	strb.w	r2, [r3, #333]	@ 0x14d
        break;
 80091da:	e00c      	b.n	80091f6 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->microphone.asociated_selector = Index;
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	7afa      	ldrb	r2, [r7, #11]
 80091e0:	f883 214e 	strb.w	r2, [r3, #334]	@ 0x14e
        break;
 80091e4:	e007      	b.n	80091f6 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->microphone.asociated_terminal = Index;
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	7afa      	ldrb	r2, [r7, #11]
 80091ea:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150
        break;
 80091ee:	e002      	b.n	80091f6 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      default:
        ret = USBH_FAIL;
 80091f0:	2302      	movs	r3, #2
 80091f2:	757b      	strb	r3, [r7, #21]
        break;
 80091f4:	bf00      	nop
    }
  } while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 80091f6:	7abb      	ldrb	r3, [r7, #10]
 80091f8:	2b03      	cmp	r3, #3
 80091fa:	d002      	beq.n	8009202 <USBH_AUDIO_BuildMicrophonePath+0x106>
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d1bf      	bne.n	8009182 <USBH_AUDIO_BuildMicrophonePath+0x86>

  return ret;
 8009202:	7d7b      	ldrb	r3, [r7, #21]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3718      	adds	r7, #24
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <USBH_AUDIO_BuildHeadphonePath>:
  * @brief  Build full path for Headphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildHeadphonePath(USBH_HandleTypeDef *phost)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b086      	sub	sp, #24
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8009214:	2300      	movs	r3, #0
 8009216:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8009218:	2300      	movs	r3, #0
 800921a:	753b      	strb	r3, [r7, #20]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8009222:	69db      	ldr	r3, [r3, #28]
 8009224:	613b      	str	r3, [r7, #16]

  /* Find association between audio streaming and microphone */
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8009226:	2300      	movs	r3, #0
 8009228:	757b      	strb	r3, [r7, #21]
 800922a:	e02b      	b.n	8009284 <USBH_AUDIO_BuildHeadphonePath+0x78>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101U)
 800922c:	7d7b      	ldrb	r3, [r7, #21]
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	331a      	adds	r3, #26
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	4413      	add	r3, r2
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	791b      	ldrb	r3, [r3, #4]
 800923a:	4619      	mov	r1, r3
 800923c:	7d7b      	ldrb	r3, [r7, #21]
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	331a      	adds	r3, #26
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	4413      	add	r3, r2
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	795b      	ldrb	r3, [r3, #5]
 800924a:	021b      	lsls	r3, r3, #8
 800924c:	b29b      	uxth	r3, r3
 800924e:	430b      	orrs	r3, r1
 8009250:	f240 1201 	movw	r2, #257	@ 0x101
 8009254:	4293      	cmp	r3, r2
 8009256:	d112      	bne.n	800927e <USBH_AUDIO_BuildHeadphonePath+0x72>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8009258:	7d7b      	ldrb	r3, [r7, #21]
 800925a:	693a      	ldr	r2, [r7, #16]
 800925c:	331a      	adds	r3, #26
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4413      	add	r3, r2
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	78db      	ldrb	r3, [r3, #3]
 8009266:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8009268:	7d7b      	ldrb	r3, [r7, #21]
 800926a:	693a      	ldr	r2, [r7, #16]
 800926c:	331a      	adds	r3, #26
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	4413      	add	r3, r2
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	79da      	ldrb	r2, [r3, #7]
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
      break;
 800927c:	e009      	b.n	8009292 <USBH_AUDIO_BuildHeadphonePath+0x86>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 800927e:	7d7b      	ldrb	r3, [r7, #21]
 8009280:	3301      	adds	r3, #1
 8009282:	757b      	strb	r3, [r7, #21]
 8009284:	7d7b      	ldrb	r3, [r7, #21]
 8009286:	b29a      	uxth	r2, r3
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	@ 0xea
 800928e:	429a      	cmp	r2, r3
 8009290:	d3cc      	bcc.n	800922c <USBH_AUDIO_BuildHeadphonePath+0x20>
    }
  }

  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 8009292:	2300      	movs	r3, #0
 8009294:	75bb      	strb	r3, [r7, #22]
 8009296:	e011      	b.n	80092bc <USBH_AUDIO_BuildHeadphonePath+0xb0>
  {
    if (AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 8009298:	7dbb      	ldrb	r3, [r7, #22]
 800929a:	693a      	ldr	r2, [r7, #16]
 800929c:	3317      	adds	r3, #23
 800929e:	00db      	lsls	r3, r3, #3
 80092a0:	4413      	add	r3, r2
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	78db      	ldrb	r3, [r3, #3]
 80092a6:	7dfa      	ldrb	r2, [r7, #23]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d104      	bne.n	80092b6 <USBH_AUDIO_BuildHeadphonePath+0xaa>
    {
      AUDIO_Handle->headphone.asociated_as = Index;
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	7dba      	ldrb	r2, [r7, #22]
 80092b0:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
      break;
 80092b4:	e009      	b.n	80092ca <USBH_AUDIO_BuildHeadphonePath+0xbe>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 80092b6:	7dbb      	ldrb	r3, [r7, #22]
 80092b8:	3301      	adds	r3, #1
 80092ba:	75bb      	strb	r3, [r7, #22]
 80092bc:	7dbb      	ldrb	r3, [r7, #22]
 80092be:	b29a      	uxth	r2, r3
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	@ 0xe8
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d3e6      	bcc.n	8009298 <USBH_AUDIO_BuildHeadphonePath+0x8c>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 80092ca:	7dfb      	ldrb	r3, [r7, #23]
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7ff fe60 	bl	8008f94 <USBH_AUDIO_FindLinkedUnit>
 80092d4:	60f8      	str	r0, [r7, #12]

    if (value == 0U)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d101      	bne.n	80092e0 <USBH_AUDIO_BuildHeadphonePath+0xd4>
    {
      return USBH_FAIL;
 80092dc:	2302      	movs	r3, #2
 80092de:	e053      	b.n	8009388 <USBH_AUDIO_BuildHeadphonePath+0x17c>
    }

    Index = (uint8_t)(value & 0xFFU);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	75bb      	strb	r3, [r7, #22]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	0a1b      	lsrs	r3, r3, #8
 80092e8:	72fb      	strb	r3, [r7, #11]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	0c1b      	lsrs	r3, r3, #16
 80092ee:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 80092f0:	7afb      	ldrb	r3, [r7, #11]
 80092f2:	3b03      	subs	r3, #3
 80092f4:	2b03      	cmp	r3, #3
 80092f6:	d83c      	bhi.n	8009372 <USBH_AUDIO_BuildHeadphonePath+0x166>
 80092f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009300 <USBH_AUDIO_BuildHeadphonePath+0xf4>)
 80092fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092fe:	bf00      	nop
 8009300:	0800932f 	.word	0x0800932f
 8009304:	0800931b 	.word	0x0800931b
 8009308:	08009325 	.word	0x08009325
 800930c:	08009311 	.word	0x08009311
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->headphone.asociated_feature = Index;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	7dba      	ldrb	r2, [r7, #22]
 8009314:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
        break;
 8009318:	e02f      	b.n	800937a <USBH_AUDIO_BuildHeadphonePath+0x16e>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->headphone.asociated_mixer = Index;
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	7dba      	ldrb	r2, [r7, #22]
 800931e:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
        break;
 8009322:	e02a      	b.n	800937a <USBH_AUDIO_BuildHeadphonePath+0x16e>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->headphone.asociated_selector = Index;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	7dba      	ldrb	r2, [r7, #22]
 8009328:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
        break;
 800932c:	e025      	b.n	800937a <USBH_AUDIO_BuildHeadphonePath+0x16e>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->headphone.asociated_terminal = Index;
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	7dba      	ldrb	r2, [r7, #22]
 8009332:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
        if (Index < AUDIO_MAX_NUM_OUT_TERMINAL)
 8009336:	7dbb      	ldrb	r3, [r7, #22]
 8009338:	2b03      	cmp	r3, #3
 800933a:	d817      	bhi.n	800936c <USBH_AUDIO_BuildHeadphonePath+0x160>
        {
          if (LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103U)
 800933c:	7dbb      	ldrb	r3, [r7, #22]
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	331e      	adds	r3, #30
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4413      	add	r3, r2
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	791b      	ldrb	r3, [r3, #4]
 800934a:	4619      	mov	r1, r3
 800934c:	7dbb      	ldrb	r3, [r7, #22]
 800934e:	693a      	ldr	r2, [r7, #16]
 8009350:	331e      	adds	r3, #30
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	4413      	add	r3, r2
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	795b      	ldrb	r3, [r3, #5]
 800935a:	021b      	lsls	r3, r3, #8
 800935c:	b29b      	uxth	r3, r3
 800935e:	430b      	orrs	r3, r1
 8009360:	f240 1203 	movw	r2, #259	@ 0x103
 8009364:	4293      	cmp	r3, r2
 8009366:	d007      	beq.n	8009378 <USBH_AUDIO_BuildHeadphonePath+0x16c>
          {
            return  USBH_OK;
 8009368:	2300      	movs	r3, #0
 800936a:	e00d      	b.n	8009388 <USBH_AUDIO_BuildHeadphonePath+0x17c>
          }
        }
        else
        {
          ret = USBH_FAIL;
 800936c:	2302      	movs	r3, #2
 800936e:	753b      	strb	r3, [r7, #20]
        }
        break;
 8009370:	e002      	b.n	8009378 <USBH_AUDIO_BuildHeadphonePath+0x16c>

      default:
        ret = USBH_FAIL;
 8009372:	2302      	movs	r3, #2
 8009374:	753b      	strb	r3, [r7, #20]
        break;
 8009376:	e000      	b.n	800937a <USBH_AUDIO_BuildHeadphonePath+0x16e>
        break;
 8009378:	bf00      	nop
    }
  } while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 800937a:	7afb      	ldrb	r3, [r7, #11]
 800937c:	2b03      	cmp	r3, #3
 800937e:	d002      	beq.n	8009386 <USBH_AUDIO_BuildHeadphonePath+0x17a>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1a1      	bne.n	80092ca <USBH_AUDIO_BuildHeadphonePath+0xbe>

  return ret;
 8009386:	7d3b      	ldrb	r3, [r7, #20]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3718      	adds	r7, #24
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <USBH_AC_SetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	4608      	mov	r0, r1
 800939a:	4611      	mov	r1, r2
 800939c:	461a      	mov	r2, r3
 800939e:	4603      	mov	r3, r0
 80093a0:	70fb      	strb	r3, [r7, #3]
 80093a2:	460b      	mov	r3, r1
 80093a4:	70bb      	strb	r3, [r7, #2]
 80093a6:	4613      	mov	r3, r2
 80093a8:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80093aa:	2300      	movs	r3, #0
 80093ac:	82fb      	strh	r3, [r7, #22]
 80093ae:	2300      	movs	r3, #0
 80093b0:	82bb      	strh	r3, [r7, #20]
 80093b2:	2300      	movs	r3, #0
 80093b4:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID, InterfaceNum;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef ret = USBH_OK;
 80093c0:	2300      	movs	r3, #0
 80093c2:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 80093c4:	78fb      	ldrb	r3, [r7, #3]
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d002      	beq.n	80093d0 <USBH_AC_SetCur+0x40>
 80093ca:	2b06      	cmp	r3, #6
 80093cc:	d018      	beq.n	8009400 <USBH_AC_SetCur+0x70>
 80093ce:	e035      	b.n	800943c <USBH_AC_SetCur+0xac>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093d4:	78db      	ldrb	r3, [r3, #3]
 80093d6:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80093d8:	2300      	movs	r3, #0
 80093da:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80093dc:	7afb      	ldrb	r3, [r7, #11]
 80093de:	b29b      	uxth	r3, r3
 80093e0:	021b      	lsls	r3, r3, #8
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	7abb      	ldrb	r3, [r7, #10]
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	4313      	orrs	r3, r2
 80093ea:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80093ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80093f0:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 80093fa:	2301      	movs	r3, #1
 80093fc:	827b      	strh	r3, [r7, #18]
      break;
 80093fe:	e020      	b.n	8009442 <USBH_AC_SetCur+0xb2>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8009400:	78bb      	ldrb	r3, [r7, #2]
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	3322      	adds	r3, #34	@ 0x22
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	4413      	add	r3, r2
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	78db      	ldrb	r3, [r3, #3]
 800940e:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8009410:	2300      	movs	r3, #0
 8009412:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8009414:	7afb      	ldrb	r3, [r7, #11]
 8009416:	b29b      	uxth	r3, r3
 8009418:	021b      	lsls	r3, r3, #8
 800941a:	b29a      	uxth	r2, r3
 800941c:	7abb      	ldrb	r3, [r7, #10]
 800941e:	b29b      	uxth	r3, r3
 8009420:	4313      	orrs	r3, r2
 8009422:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8009424:	787b      	ldrb	r3, [r7, #1]
 8009426:	b29b      	uxth	r3, r3
 8009428:	021b      	lsls	r3, r3, #8
 800942a:	b29a      	uxth	r2, r3
 800942c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009430:	b29b      	uxth	r3, r3
 8009432:	4313      	orrs	r3, r2
 8009434:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8009436:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009438:	827b      	strh	r3, [r7, #18]
      break;
 800943a:	e002      	b.n	8009442 <USBH_AC_SetCur+0xb2>

    default:
      ret = USBH_FAIL;
 800943c:	2302      	movs	r3, #2
 800943e:	747b      	strb	r3, [r7, #17]
      break;
 8009440:	bf00      	nop
  }

  if (ret != USBH_OK)
 8009442:	7c7b      	ldrb	r3, [r7, #17]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d001      	beq.n	800944c <USBH_AC_SetCur+0xbc>
  {
    return ret;
 8009448:	7c7b      	ldrb	r3, [r7, #17]
 800944a:	e017      	b.n	800947c <USBH_AC_SetCur+0xec>
  }

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2221      	movs	r2, #33	@ 0x21
 8009450:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2201      	movs	r2, #1
 8009456:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	8afa      	ldrh	r2, [r7, #22]
 800945c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	8aba      	ldrh	r2, [r7, #20]
 8009462:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	8a7a      	ldrh	r2, [r7, #18]
 8009468:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8009470:	8a7a      	ldrh	r2, [r7, #18]
 8009472:	4619      	mov	r1, r3
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f001 ff50 	bl	800b31a <USBH_CtlReq>
 800947a:	4603      	mov	r3, r0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3718      	adds	r7, #24
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <USBH_AC_GetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	4608      	mov	r0, r1
 800948e:	4611      	mov	r1, r2
 8009490:	461a      	mov	r2, r3
 8009492:	4603      	mov	r3, r0
 8009494:	70fb      	strb	r3, [r7, #3]
 8009496:	460b      	mov	r3, r1
 8009498:	70bb      	strb	r3, [r7, #2]
 800949a:	4613      	mov	r3, r2
 800949c:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 800949e:	2300      	movs	r3, #0
 80094a0:	82fb      	strh	r3, [r7, #22]
 80094a2:	2300      	movs	r3, #0
 80094a4:	82bb      	strh	r3, [r7, #20]
 80094a6:	2300      	movs	r3, #0
 80094a8:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 80094aa:	2300      	movs	r3, #0
 80094ac:	743b      	strb	r3, [r7, #16]
 80094ae:	2300      	movs	r3, #0
 80094b0:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 80094b8:	69db      	ldr	r3, [r3, #28]
 80094ba:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 80094bc:	2300      	movs	r3, #0
 80094be:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 80094c0:	78fb      	ldrb	r3, [r7, #3]
 80094c2:	2b06      	cmp	r3, #6
 80094c4:	d01e      	beq.n	8009504 <USBH_AC_GetCur+0x80>
 80094c6:	2b06      	cmp	r3, #6
 80094c8:	dc4f      	bgt.n	800956a <USBH_AC_GetCur+0xe6>
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d002      	beq.n	80094d4 <USBH_AC_GetCur+0x50>
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	d036      	beq.n	8009540 <USBH_AC_GetCur+0xbc>
 80094d2:	e04a      	b.n	800956a <USBH_AC_GetCur+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094d8:	78db      	ldrb	r3, [r3, #3]
 80094da:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80094dc:	2300      	movs	r3, #0
 80094de:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80094e0:	7c3b      	ldrb	r3, [r7, #16]
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	021b      	lsls	r3, r3, #8
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	7bfb      	ldrb	r3, [r7, #15]
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	4313      	orrs	r3, r2
 80094ee:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80094f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80094f4:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 80094fe:	2301      	movs	r3, #1
 8009500:	827b      	strh	r3, [r7, #18]
      break;
 8009502:	e035      	b.n	8009570 <USBH_AC_GetCur+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8009504:	78bb      	ldrb	r3, [r7, #2]
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	3322      	adds	r3, #34	@ 0x22
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	4413      	add	r3, r2
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	78db      	ldrb	r3, [r3, #3]
 8009512:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8009514:	2300      	movs	r3, #0
 8009516:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8009518:	7c3b      	ldrb	r3, [r7, #16]
 800951a:	b29b      	uxth	r3, r3
 800951c:	021b      	lsls	r3, r3, #8
 800951e:	b29a      	uxth	r2, r3
 8009520:	7bfb      	ldrb	r3, [r7, #15]
 8009522:	b29b      	uxth	r3, r3
 8009524:	4313      	orrs	r3, r2
 8009526:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8009528:	787b      	ldrb	r3, [r7, #1]
 800952a:	b29b      	uxth	r3, r3
 800952c:	021b      	lsls	r3, r3, #8
 800952e:	b29a      	uxth	r2, r3
 8009530:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009534:	b29b      	uxth	r3, r3
 8009536:	4313      	orrs	r3, r2
 8009538:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 800953a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800953c:	827b      	strh	r3, [r7, #18]
      break;
 800953e:	e017      	b.n	8009570 <USBH_AC_GetCur+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009546:	78db      	ldrb	r3, [r3, #3]
 8009548:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800954a:	2300      	movs	r3, #0
 800954c:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800954e:	7c3b      	ldrb	r3, [r7, #16]
 8009550:	b29b      	uxth	r3, r3
 8009552:	021b      	lsls	r3, r3, #8
 8009554:	b29a      	uxth	r2, r3
 8009556:	7bfb      	ldrb	r3, [r7, #15]
 8009558:	b29b      	uxth	r3, r3
 800955a:	4313      	orrs	r3, r2
 800955c:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 800955e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009562:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8009564:	2301      	movs	r3, #1
 8009566:	827b      	strh	r3, [r7, #18]
      break;
 8009568:	e002      	b.n	8009570 <USBH_AC_GetCur+0xec>

    default:
      ret = USBH_FAIL;
 800956a:	2302      	movs	r3, #2
 800956c:	747b      	strb	r3, [r7, #17]
      break;
 800956e:	bf00      	nop
  }

  if (ret != USBH_OK)
 8009570:	7c7b      	ldrb	r3, [r7, #17]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <USBH_AC_GetCur+0xf6>
  {
    return ret;
 8009576:	7c7b      	ldrb	r3, [r7, #17]
 8009578:	e017      	b.n	80095aa <USBH_AC_GetCur+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	22a1      	movs	r2, #161	@ 0xa1
 800957e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2281      	movs	r2, #129	@ 0x81
 8009584:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	8afa      	ldrh	r2, [r7, #22]
 800958a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	8aba      	ldrh	r2, [r7, #20]
 8009590:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	8a7a      	ldrh	r2, [r7, #18]
 8009596:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800959e:	8a7a      	ldrh	r2, [r7, #18]
 80095a0:	4619      	mov	r1, r3
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f001 feb9 	bl	800b31a <USBH_CtlReq>
 80095a8:	4603      	mov	r3, r0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3718      	adds	r7, #24
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <USBH_AC_GetMax>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b086      	sub	sp, #24
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	4608      	mov	r0, r1
 80095bc:	4611      	mov	r1, r2
 80095be:	461a      	mov	r2, r3
 80095c0:	4603      	mov	r3, r0
 80095c2:	70fb      	strb	r3, [r7, #3]
 80095c4:	460b      	mov	r3, r1
 80095c6:	70bb      	strb	r3, [r7, #2]
 80095c8:	4613      	mov	r3, r2
 80095ca:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80095cc:	2300      	movs	r3, #0
 80095ce:	82fb      	strh	r3, [r7, #22]
 80095d0:	2300      	movs	r3, #0
 80095d2:	82bb      	strh	r3, [r7, #20]
 80095d4:	2300      	movs	r3, #0
 80095d6:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 80095d8:	2300      	movs	r3, #0
 80095da:	743b      	strb	r3, [r7, #16]
 80095dc:	2300      	movs	r3, #0
 80095de:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 80095e6:	69db      	ldr	r3, [r3, #28]
 80095e8:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 80095ea:	2300      	movs	r3, #0
 80095ec:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 80095ee:	78fb      	ldrb	r3, [r7, #3]
 80095f0:	2b06      	cmp	r3, #6
 80095f2:	d01e      	beq.n	8009632 <USBH_AC_GetMax+0x80>
 80095f4:	2b06      	cmp	r3, #6
 80095f6:	dc4f      	bgt.n	8009698 <USBH_AC_GetMax+0xe6>
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	d002      	beq.n	8009602 <USBH_AC_GetMax+0x50>
 80095fc:	2b03      	cmp	r3, #3
 80095fe:	d036      	beq.n	800966e <USBH_AC_GetMax+0xbc>
 8009600:	e04a      	b.n	8009698 <USBH_AC_GetMax+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009606:	78db      	ldrb	r3, [r3, #3]
 8009608:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800960a:	2300      	movs	r3, #0
 800960c:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800960e:	7c3b      	ldrb	r3, [r7, #16]
 8009610:	b29b      	uxth	r3, r3
 8009612:	021b      	lsls	r3, r3, #8
 8009614:	b29a      	uxth	r2, r3
 8009616:	7bfb      	ldrb	r3, [r7, #15]
 8009618:	b29b      	uxth	r3, r3
 800961a:	4313      	orrs	r3, r2
 800961c:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 800961e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009622:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	2200      	movs	r2, #0
 8009628:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 800962c:	2301      	movs	r3, #1
 800962e:	827b      	strh	r3, [r7, #18]
      break;
 8009630:	e035      	b.n	800969e <USBH_AC_GetMax+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8009632:	78bb      	ldrb	r3, [r7, #2]
 8009634:	68ba      	ldr	r2, [r7, #8]
 8009636:	3322      	adds	r3, #34	@ 0x22
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4413      	add	r3, r2
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	78db      	ldrb	r3, [r3, #3]
 8009640:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8009642:	2300      	movs	r3, #0
 8009644:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8009646:	7c3b      	ldrb	r3, [r7, #16]
 8009648:	b29b      	uxth	r3, r3
 800964a:	021b      	lsls	r3, r3, #8
 800964c:	b29a      	uxth	r2, r3
 800964e:	7bfb      	ldrb	r3, [r7, #15]
 8009650:	b29b      	uxth	r3, r3
 8009652:	4313      	orrs	r3, r2
 8009654:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8009656:	787b      	ldrb	r3, [r7, #1]
 8009658:	b29b      	uxth	r3, r3
 800965a:	021b      	lsls	r3, r3, #8
 800965c:	b29a      	uxth	r2, r3
 800965e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009662:	b29b      	uxth	r3, r3
 8009664:	4313      	orrs	r3, r2
 8009666:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8009668:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800966a:	827b      	strh	r3, [r7, #18]
      break;
 800966c:	e017      	b.n	800969e <USBH_AC_GetMax+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009674:	78db      	ldrb	r3, [r3, #3]
 8009676:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8009678:	2300      	movs	r3, #0
 800967a:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800967c:	7c3b      	ldrb	r3, [r7, #16]
 800967e:	b29b      	uxth	r3, r3
 8009680:	021b      	lsls	r3, r3, #8
 8009682:	b29a      	uxth	r2, r3
 8009684:	7bfb      	ldrb	r3, [r7, #15]
 8009686:	b29b      	uxth	r3, r3
 8009688:	4313      	orrs	r3, r2
 800968a:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 800968c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009690:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8009692:	2301      	movs	r3, #1
 8009694:	827b      	strh	r3, [r7, #18]
      break;
 8009696:	e002      	b.n	800969e <USBH_AC_GetMax+0xec>

    default:
      ret = USBH_FAIL;
 8009698:	2302      	movs	r3, #2
 800969a:	747b      	strb	r3, [r7, #17]
      break;
 800969c:	bf00      	nop
  }

  if (ret != USBH_OK)
 800969e:	7c7b      	ldrb	r3, [r7, #17]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <USBH_AC_GetMax+0xf6>
  {
    return ret;
 80096a4:	7c7b      	ldrb	r3, [r7, #17]
 80096a6:	e017      	b.n	80096d8 <USBH_AC_GetMax+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	22a1      	movs	r2, #161	@ 0xa1
 80096ac:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2283      	movs	r2, #131	@ 0x83
 80096b2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	8afa      	ldrh	r2, [r7, #22]
 80096b8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	8aba      	ldrh	r2, [r7, #20]
 80096be:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	8a7a      	ldrh	r2, [r7, #18]
 80096c4:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80096cc:	8a7a      	ldrh	r2, [r7, #18]
 80096ce:	4619      	mov	r1, r3
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f001 fe22 	bl	800b31a <USBH_CtlReq>
 80096d6:	4603      	mov	r3, r0

}
 80096d8:	4618      	mov	r0, r3
 80096da:	3718      	adds	r7, #24
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <USBH_AC_GetRes>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	4608      	mov	r0, r1
 80096ea:	4611      	mov	r1, r2
 80096ec:	461a      	mov	r2, r3
 80096ee:	4603      	mov	r3, r0
 80096f0:	70fb      	strb	r3, [r7, #3]
 80096f2:	460b      	mov	r3, r1
 80096f4:	70bb      	strb	r3, [r7, #2]
 80096f6:	4613      	mov	r3, r2
 80096f8:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80096fa:	2300      	movs	r3, #0
 80096fc:	82fb      	strh	r3, [r7, #22]
 80096fe:	2300      	movs	r3, #0
 8009700:	82bb      	strh	r3, [r7, #20]
 8009702:	2300      	movs	r3, #0
 8009704:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8009706:	2300      	movs	r3, #0
 8009708:	743b      	strb	r3, [r7, #16]
 800970a:	2300      	movs	r3, #0
 800970c:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8009714:	69db      	ldr	r3, [r3, #28]
 8009716:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8009718:	2300      	movs	r3, #0
 800971a:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 800971c:	78fb      	ldrb	r3, [r7, #3]
 800971e:	2b06      	cmp	r3, #6
 8009720:	d01e      	beq.n	8009760 <USBH_AC_GetRes+0x80>
 8009722:	2b06      	cmp	r3, #6
 8009724:	dc4f      	bgt.n	80097c6 <USBH_AC_GetRes+0xe6>
 8009726:	2b02      	cmp	r3, #2
 8009728:	d002      	beq.n	8009730 <USBH_AC_GetRes+0x50>
 800972a:	2b03      	cmp	r3, #3
 800972c:	d036      	beq.n	800979c <USBH_AC_GetRes+0xbc>
 800972e:	e04a      	b.n	80097c6 <USBH_AC_GetRes+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009734:	78db      	ldrb	r3, [r3, #3]
 8009736:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8009738:	2300      	movs	r3, #0
 800973a:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800973c:	7c3b      	ldrb	r3, [r7, #16]
 800973e:	b29b      	uxth	r3, r3
 8009740:	021b      	lsls	r3, r3, #8
 8009742:	b29a      	uxth	r2, r3
 8009744:	7bfb      	ldrb	r3, [r7, #15]
 8009746:	b29b      	uxth	r3, r3
 8009748:	4313      	orrs	r3, r2
 800974a:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 800974c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009750:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	2200      	movs	r2, #0
 8009756:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 800975a:	2301      	movs	r3, #1
 800975c:	827b      	strh	r3, [r7, #18]
      break;
 800975e:	e035      	b.n	80097cc <USBH_AC_GetRes+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8009760:	78bb      	ldrb	r3, [r7, #2]
 8009762:	68ba      	ldr	r2, [r7, #8]
 8009764:	3322      	adds	r3, #34	@ 0x22
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	78db      	ldrb	r3, [r3, #3]
 800976e:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8009770:	2300      	movs	r3, #0
 8009772:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8009774:	7c3b      	ldrb	r3, [r7, #16]
 8009776:	b29b      	uxth	r3, r3
 8009778:	021b      	lsls	r3, r3, #8
 800977a:	b29a      	uxth	r2, r3
 800977c:	7bfb      	ldrb	r3, [r7, #15]
 800977e:	b29b      	uxth	r3, r3
 8009780:	4313      	orrs	r3, r2
 8009782:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8009784:	787b      	ldrb	r3, [r7, #1]
 8009786:	b29b      	uxth	r3, r3
 8009788:	021b      	lsls	r3, r3, #8
 800978a:	b29a      	uxth	r2, r3
 800978c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009790:	b29b      	uxth	r3, r3
 8009792:	4313      	orrs	r3, r2
 8009794:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8009796:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009798:	827b      	strh	r3, [r7, #18]
      break;
 800979a:	e017      	b.n	80097cc <USBH_AC_GetRes+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097a2:	78db      	ldrb	r3, [r3, #3]
 80097a4:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80097a6:	2300      	movs	r3, #0
 80097a8:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80097aa:	7c3b      	ldrb	r3, [r7, #16]
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	021b      	lsls	r3, r3, #8
 80097b0:	b29a      	uxth	r2, r3
 80097b2:	7bfb      	ldrb	r3, [r7, #15]
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	4313      	orrs	r3, r2
 80097b8:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80097ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80097be:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 80097c0:	2301      	movs	r3, #1
 80097c2:	827b      	strh	r3, [r7, #18]
      break;
 80097c4:	e002      	b.n	80097cc <USBH_AC_GetRes+0xec>

    default:
      ret = USBH_FAIL;
 80097c6:	2302      	movs	r3, #2
 80097c8:	747b      	strb	r3, [r7, #17]
      break;
 80097ca:	bf00      	nop
  }

  if (ret != USBH_OK)
 80097cc:	7c7b      	ldrb	r3, [r7, #17]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <USBH_AC_GetRes+0xf6>
  {
    return ret;
 80097d2:	7c7b      	ldrb	r3, [r7, #17]
 80097d4:	e017      	b.n	8009806 <USBH_AC_GetRes+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	22a1      	movs	r2, #161	@ 0xa1
 80097da:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_RES;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2284      	movs	r2, #132	@ 0x84
 80097e0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	8afa      	ldrh	r2, [r7, #22]
 80097e6:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	8aba      	ldrh	r2, [r7, #20]
 80097ec:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	8a7a      	ldrh	r2, [r7, #18]
 80097f2:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80097fa:	8a7a      	ldrh	r2, [r7, #18]
 80097fc:	4619      	mov	r1, r3
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f001 fd8b 	bl	800b31a <USBH_CtlReq>
 8009804:	4603      	mov	r3, r0

}
 8009806:	4618      	mov	r0, r3
 8009808:	3718      	adds	r7, #24
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <USBH_AC_GetMin>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b086      	sub	sp, #24
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	4608      	mov	r0, r1
 8009818:	4611      	mov	r1, r2
 800981a:	461a      	mov	r2, r3
 800981c:	4603      	mov	r3, r0
 800981e:	70fb      	strb	r3, [r7, #3]
 8009820:	460b      	mov	r3, r1
 8009822:	70bb      	strb	r3, [r7, #2]
 8009824:	4613      	mov	r3, r2
 8009826:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8009828:	2300      	movs	r3, #0
 800982a:	82fb      	strh	r3, [r7, #22]
 800982c:	2300      	movs	r3, #0
 800982e:	82bb      	strh	r3, [r7, #20]
 8009830:	2300      	movs	r3, #0
 8009832:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8009834:	2300      	movs	r3, #0
 8009836:	743b      	strb	r3, [r7, #16]
 8009838:	2300      	movs	r3, #0
 800983a:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8009842:	69db      	ldr	r3, [r3, #28]
 8009844:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8009846:	2300      	movs	r3, #0
 8009848:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 800984a:	78fb      	ldrb	r3, [r7, #3]
 800984c:	2b06      	cmp	r3, #6
 800984e:	d01e      	beq.n	800988e <USBH_AC_GetMin+0x80>
 8009850:	2b06      	cmp	r3, #6
 8009852:	dc4f      	bgt.n	80098f4 <USBH_AC_GetMin+0xe6>
 8009854:	2b02      	cmp	r3, #2
 8009856:	d002      	beq.n	800985e <USBH_AC_GetMin+0x50>
 8009858:	2b03      	cmp	r3, #3
 800985a:	d036      	beq.n	80098ca <USBH_AC_GetMin+0xbc>
 800985c:	e04a      	b.n	80098f4 <USBH_AC_GetMin+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009862:	78db      	ldrb	r3, [r3, #3]
 8009864:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8009866:	2300      	movs	r3, #0
 8009868:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800986a:	7c3b      	ldrb	r3, [r7, #16]
 800986c:	b29b      	uxth	r3, r3
 800986e:	021b      	lsls	r3, r3, #8
 8009870:	b29a      	uxth	r2, r3
 8009872:	7bfb      	ldrb	r3, [r7, #15]
 8009874:	b29b      	uxth	r3, r3
 8009876:	4313      	orrs	r3, r2
 8009878:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 800987a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800987e:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	2200      	movs	r2, #0
 8009884:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 8009888:	2301      	movs	r3, #1
 800988a:	827b      	strh	r3, [r7, #18]
      break;
 800988c:	e035      	b.n	80098fa <USBH_AC_GetMin+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 800988e:	78bb      	ldrb	r3, [r7, #2]
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	3322      	adds	r3, #34	@ 0x22
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	4413      	add	r3, r2
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	78db      	ldrb	r3, [r3, #3]
 800989c:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800989e:	2300      	movs	r3, #0
 80098a0:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80098a2:	7c3b      	ldrb	r3, [r7, #16]
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	021b      	lsls	r3, r3, #8
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	7bfb      	ldrb	r3, [r7, #15]
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	4313      	orrs	r3, r2
 80098b0:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 80098b2:	787b      	ldrb	r3, [r7, #1]
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	021b      	lsls	r3, r3, #8
 80098b8:	b29a      	uxth	r2, r3
 80098ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80098be:	b29b      	uxth	r3, r3
 80098c0:	4313      	orrs	r3, r2
 80098c2:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 80098c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80098c6:	827b      	strh	r3, [r7, #18]
      break;
 80098c8:	e017      	b.n	80098fa <USBH_AC_GetMin+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098d0:	78db      	ldrb	r3, [r3, #3]
 80098d2:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80098d4:	2300      	movs	r3, #0
 80098d6:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80098d8:	7c3b      	ldrb	r3, [r7, #16]
 80098da:	b29b      	uxth	r3, r3
 80098dc:	021b      	lsls	r3, r3, #8
 80098de:	b29a      	uxth	r2, r3
 80098e0:	7bfb      	ldrb	r3, [r7, #15]
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	4313      	orrs	r3, r2
 80098e6:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80098e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80098ec:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 80098ee:	2301      	movs	r3, #1
 80098f0:	827b      	strh	r3, [r7, #18]
      break;
 80098f2:	e002      	b.n	80098fa <USBH_AC_GetMin+0xec>

    default:
      ret = USBH_FAIL;
 80098f4:	2302      	movs	r3, #2
 80098f6:	747b      	strb	r3, [r7, #17]
      break;
 80098f8:	bf00      	nop
  }

  if (ret != USBH_OK)
 80098fa:	7c7b      	ldrb	r3, [r7, #17]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d001      	beq.n	8009904 <USBH_AC_GetMin+0xf6>
  {
    return ret;
 8009900:	7c7b      	ldrb	r3, [r7, #17]
 8009902:	e017      	b.n	8009934 <USBH_AC_GetMin+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	22a1      	movs	r2, #161	@ 0xa1
 8009908:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2282      	movs	r2, #130	@ 0x82
 800990e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	8afa      	ldrh	r2, [r7, #22]
 8009914:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	8aba      	ldrh	r2, [r7, #20]
 800991a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	8a7a      	ldrh	r2, [r7, #18]
 8009920:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8009928:	8a7a      	ldrh	r2, [r7, #18]
 800992a:	4619      	mov	r1, r3
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f001 fcf4 	bl	800b31a <USBH_CtlReq>
 8009932:	4603      	mov	r3, r0

}
 8009934:	4618      	mov	r0, r3
 8009936:	3718      	adds	r7, #24
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <USBH_AUDIO_SetEndpointControls>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetEndpointControls(USBH_HandleTypeDef *phost,
                                                         uint8_t  Ep,
                                                         uint8_t *buff)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b086      	sub	sp, #24
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	460b      	mov	r3, r1
 8009946:	607a      	str	r2, [r7, #4]
 8009948:	72fb      	strb	r3, [r7, #11]
  uint16_t wValue, wIndex, wLength;

  wValue = SAMPLING_FREQ_CONTROL << 8U;
 800994a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800994e:	82fb      	strh	r3, [r7, #22]
  wIndex = Ep;
 8009950:	7afb      	ldrb	r3, [r7, #11]
 8009952:	82bb      	strh	r3, [r7, #20]
  wLength = 3U; /*length of the frequency parameter*/
 8009954:	2303      	movs	r3, #3
 8009956:	827b      	strh	r3, [r7, #18]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2222      	movs	r2, #34	@ 0x22
 800995c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2201      	movs	r2, #1
 8009962:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	8afa      	ldrh	r2, [r7, #22]
 8009968:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	8aba      	ldrh	r2, [r7, #20]
 800996e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	8a7a      	ldrh	r2, [r7, #18]
 8009974:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 8009976:	8a7b      	ldrh	r3, [r7, #18]
 8009978:	461a      	mov	r2, r3
 800997a:	6879      	ldr	r1, [r7, #4]
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f001 fccc 	bl	800b31a <USBH_CtlReq>
 8009982:	4603      	mov	r3, r0

}
 8009984:	4618      	mov	r0, r3
 8009986:	3718      	adds	r7, #24
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <USBH_AUDIO_InputStream>:
  * @brief  Handle Input stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InputStream(USBH_HandleTypeDef *phost)
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  USBH_StatusTypeDef status = USBH_BUSY;
 8009994:	2301      	movs	r3, #1
 8009996:	73fb      	strb	r3, [r7, #15]

  return status;
 8009998:	7bfb      	ldrb	r3, [r7, #15]
}
 800999a:	4618      	mov	r0, r3
 800999c:	3714      	adds	r7, #20
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
	...

080099a8 <USBH_AUDIO_Control>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Control(USBH_HandleTypeDef *phost)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80099b0:	2301      	movs	r3, #1
 80099b2:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 80099ba:	69db      	ldr	r3, [r3, #28]
 80099bc:	613b      	str	r3, [r7, #16]
  uint16_t attribute  = 0U;
 80099be:	2300      	movs	r3, #0
 80099c0:	81fb      	strh	r3, [r7, #14]

  switch (AUDIO_Handle->control_state)
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	78db      	ldrb	r3, [r3, #3]
 80099c6:	3b01      	subs	r3, #1
 80099c8:	2b04      	cmp	r3, #4
 80099ca:	f200 8090 	bhi.w	8009aee <USBH_AUDIO_Control+0x146>
 80099ce:	a201      	add	r2, pc, #4	@ (adr r2, 80099d4 <USBH_AUDIO_Control+0x2c>)
 80099d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d4:	080099e9 	.word	0x080099e9
 80099d8:	08009a3d 	.word	0x08009a3d
 80099dc:	08009aef 	.word	0x08009aef
 80099e0:	08009abb 	.word	0x08009abb
 80099e4:	08009ad5 	.word	0x08009ad5
  {
    case AUDIO_CONTROL_INIT:
      if ((phost->Timer & 1U) == 0U)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 80099ee:	f003 0301 	and.w	r3, r3, #1
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d17d      	bne.n	8009af2 <USBH_AUDIO_Control+0x14a>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
        (void)USBH_InterruptReceiveData(phost,
                                        (uint8_t *)(void *)(AUDIO_Handle->mem),
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	f503 71c8 	add.w	r1, r3, #400	@ 0x190
                                        (uint8_t)AUDIO_Handle->control.EpSize,
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	f8b3 3186 	ldrh.w	r3, [r3, #390]	@ 0x186
        (void)USBH_InterruptReceiveData(phost,
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f001 fe8d 	bl	800b736 <USBH_InterruptReceiveData>
                                        AUDIO_Handle->control.Pipe);

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1

        AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE;
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	2202      	movs	r2, #2
 8009a38:	70da      	strb	r2, [r3, #3]
      }
      break;
 8009a3a:	e05a      	b.n	8009af2 <USBH_AUDIO_Control+0x14a>

    case AUDIO_CONTROL_CHANGE:
      if (USBH_LL_GetURBState(phost, AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8009a42:	4619      	mov	r1, r3
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f002 f9be 	bl	800bdc6 <USBH_LL_GetURBState>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d114      	bne.n	8009a7a <USBH_AUDIO_Control+0xd2>
      {
        attribute = LE16(&AUDIO_Handle->mem[0]);
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8009a5c:	3302      	adds	r3, #2
 8009a5e:	881b      	ldrh	r3, [r3, #0]
 8009a60:	021b      	lsls	r3, r3, #8
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	4313      	orrs	r3, r2
 8009a66:	81fb      	strh	r3, [r7, #14]
        if (USBH_AUDIO_SetControlAttribute(phost, (uint8_t)attribute) == USBH_BUSY)
 8009a68:	89fb      	ldrh	r3, [r7, #14]
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f97a 	bl	8009d68 <USBH_AUDIO_SetControlAttribute>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d03d      	beq.n	8009af6 <USBH_AUDIO_Control+0x14e>
        {
          break;
        }
      }

      if ((phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	693a      	ldr	r2, [r7, #16]
 8009a8a:	f892 218b 	ldrb.w	r2, [r2, #395]	@ 0x18b
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d333      	bcc.n	8009afa <USBH_AUDIO_Control+0x152>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c

        (void)USBH_InterruptReceiveData(phost,
                                        (uint8_t *)(void *)(AUDIO_Handle->mem),
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	f503 71c8 	add.w	r1, r3, #400	@ 0x190
                                        (uint8_t)AUDIO_Handle->control.EpSize,
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	f8b3 3186 	ldrh.w	r3, [r3, #390]	@ 0x186
        (void)USBH_InterruptReceiveData(phost,
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f001 fe3f 	bl	800b736 <USBH_InterruptReceiveData>
                                        AUDIO_Handle->control.Pipe);

      }
      break;
 8009ab8:	e01f      	b.n	8009afa <USBH_AUDIO_Control+0x152>

    case AUDIO_CONTROL_VOLUME_UP:
      if (USBH_AUDIO_SetControlAttribute(phost, 1U) == USBH_OK)
 8009aba:	2101      	movs	r1, #1
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 f953 	bl	8009d68 <USBH_AUDIO_SetControlAttribute>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d11a      	bne.n	8009afe <USBH_AUDIO_Control+0x156>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	2201      	movs	r2, #1
 8009acc:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009ad2:	e014      	b.n	8009afe <USBH_AUDIO_Control+0x156>

    case AUDIO_CONTROL_VOLUME_DOWN:
      if (USBH_AUDIO_SetControlAttribute(phost, 2U) == USBH_OK)
 8009ad4:	2102      	movs	r1, #2
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 f946 	bl	8009d68 <USBH_AUDIO_SetControlAttribute>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d10f      	bne.n	8009b02 <USBH_AUDIO_Control+0x15a>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009aec:	e009      	b.n	8009b02 <USBH_AUDIO_Control+0x15a>

    case AUDIO_CONTROL_IDLE:
    default:
      break;
 8009aee:	bf00      	nop
 8009af0:	e008      	b.n	8009b04 <USBH_AUDIO_Control+0x15c>
      break;
 8009af2:	bf00      	nop
 8009af4:	e006      	b.n	8009b04 <USBH_AUDIO_Control+0x15c>
          break;
 8009af6:	bf00      	nop
 8009af8:	e004      	b.n	8009b04 <USBH_AUDIO_Control+0x15c>
      break;
 8009afa:	bf00      	nop
 8009afc:	e002      	b.n	8009b04 <USBH_AUDIO_Control+0x15c>
      break;
 8009afe:	bf00      	nop
 8009b00:	e000      	b.n	8009b04 <USBH_AUDIO_Control+0x15c>
      break;
 8009b02:	bf00      	nop
  }

  return status;
 8009b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3718      	adds	r7, #24
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop

08009b10 <USBH_AUDIO_OutputStream>:
  * @brief  Handle Output stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_OutputStream(USBH_HandleTypeDef *phost)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8009b22:	69db      	ldr	r3, [r3, #28]
 8009b24:	613b      	str	r3, [r7, #16]
  uint8_t *buff;


  switch (AUDIO_Handle->play_state)
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	789b      	ldrb	r3, [r3, #2]
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	2b04      	cmp	r3, #4
 8009b2e:	d85c      	bhi.n	8009bea <USBH_AUDIO_OutputStream+0xda>
 8009b30:	a201      	add	r2, pc, #4	@ (adr r2, 8009b38 <USBH_AUDIO_OutputStream+0x28>)
 8009b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b36:	bf00      	nop
 8009b38:	08009b4d 	.word	0x08009b4d
 8009b3c:	08009ba9 	.word	0x08009ba9
 8009b40:	08009b73 	.word	0x08009b73
 8009b44:	08009bdf 	.word	0x08009bdf
 8009b48:	08009bd9 	.word	0x08009bd9
  {
    case AUDIO_PLAYBACK_INIT:

      if (AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8009b52:	693a      	ldr	r2, [r7, #16]
 8009b54:	3317      	adds	r3, #23
 8009b56:	00db      	lsls	r3, r3, #3
 8009b58:	4413      	add	r3, r2
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	79db      	ldrb	r3, [r3, #7]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d103      	bne.n	8009b6a <USBH_AUDIO_OutputStream+0x5a>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP_FREQ;
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	2203      	movs	r2, #3
 8009b66:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009b68:	e044      	b.n	8009bf4 <USBH_AUDIO_OutputStream+0xe4>
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	2202      	movs	r2, #2
 8009b6e:	709a      	strb	r2, [r3, #2]
      break;
 8009b70:	e040      	b.n	8009bf4 <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_SET_EP_FREQ:

      buff = (uint8_t *)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	3317      	adds	r3, #23
 8009b7c:	00db      	lsls	r3, r3, #3
 8009b7e:	4413      	add	r3, r2
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	3308      	adds	r3, #8
 8009b84:	60fb      	str	r3, [r7, #12]

      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	4619      	mov	r1, r3
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f7ff fed3 	bl	800993c <USBH_AUDIO_SetEndpointControls>
 8009b96:	4603      	mov	r3, r0
 8009b98:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009b9a:	7dfb      	ldrb	r3, [r7, #23]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d126      	bne.n	8009bee <USBH_AUDIO_OutputStream+0xde>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	2205      	movs	r2, #5
 8009ba4:	709a      	strb	r2, [r3, #2]
      }
      break;
 8009ba6:	e022      	b.n	8009bee <USBH_AUDIO_OutputStream+0xde>

    case AUDIO_PLAYBACK_SET_EP:
      buff = (uint8_t *)(void *)&AUDIO_Handle->headphone.frequency;
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8009bae:	60fb      	str	r3, [r7, #12]
      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	4619      	mov	r1, r3
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7ff febe 	bl	800993c <USBH_AUDIO_SetEndpointControls>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009bc4:	7dfb      	ldrb	r3, [r7, #23]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d113      	bne.n	8009bf2 <USBH_AUDIO_OutputStream+0xe2>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	2205      	movs	r2, #5
 8009bce:	709a      	strb	r2, [r3, #2]
        USBH_AUDIO_FrequencySet(phost);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 f96e 	bl	8009eb2 <USBH_AUDIO_FrequencySet>
      }
      break;
 8009bd6:	e00c      	b.n	8009bf2 <USBH_AUDIO_OutputStream+0xe2>

    case AUDIO_PLAYBACK_IDLE:
      status = USBH_OK;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009bdc:	e00a      	b.n	8009bf4 <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_PLAY:
      (void)USBH_AUDIO_Transmit(phost);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f80e 	bl	8009c00 <USBH_AUDIO_Transmit>
      status = USBH_OK;
 8009be4:	2300      	movs	r3, #0
 8009be6:	75fb      	strb	r3, [r7, #23]
      break;
 8009be8:	e004      	b.n	8009bf4 <USBH_AUDIO_OutputStream+0xe4>

    default:
      break;
 8009bea:	bf00      	nop
 8009bec:	e002      	b.n	8009bf4 <USBH_AUDIO_OutputStream+0xe4>
      break;
 8009bee:	bf00      	nop
 8009bf0:	e000      	b.n	8009bf4 <USBH_AUDIO_OutputStream+0xe4>
      break;
 8009bf2:	bf00      	nop
  }

  return status;
 8009bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3718      	adds	r7, #24
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop

08009c00 <USBH_AUDIO_Transmit>:
  * @brief  Handle Transmission process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Transmit(USBH_HandleTypeDef *phost)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8009c12:	69db      	ldr	r3, [r3, #28]
 8009c14:	60bb      	str	r3, [r7, #8]

  switch (AUDIO_Handle->processing_state)
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	791b      	ldrb	r3, [r3, #4]
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d002      	beq.n	8009c24 <USBH_AUDIO_Transmit+0x24>
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d033      	beq.n	8009c8a <USBH_AUDIO_Transmit+0x8a>
 8009c22:	e096      	b.n	8009d52 <USBH_AUDIO_Transmit+0x152>
  {
    case AUDIO_DATA_START_OUT:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) == 0U)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	f040 8092 	bne.w	8009d58 <USBH_AUDIO_Transmit+0x158>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	2202      	movs	r2, #2
 8009c44:	711a      	strb	r2, [r3, #4]
        (void)USBH_IsocSendData(phost,
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	f8d3 1110 	ldr.w	r1, [r3, #272]	@ 0x110
                                AUDIO_Handle->headphone.buf,
                                (uint32_t)AUDIO_Handle->headphone.frame_length,
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
        (void)USBH_IsocSendData(phost,
 8009c52:	461a      	mov	r2, r3
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f001 fd8a 	bl	800b774 <USBH_IsocSendData>
                                AUDIO_Handle->headphone.Pipe);

        AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length;
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 8009c66:	461a      	mov	r2, r3
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length;
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 8009c74:	461a      	mov	r2, r3
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009c88:	e066      	b.n	8009d58 <USBH_AUDIO_Transmit+0x158>

    case AUDIO_DATA_OUT:
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 8009c90:	4619      	mov	r1, r3
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f002 f897 	bl	800bdc6 <USBH_LL_GetURBState>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d15e      	bne.n	8009d5c <USBH_AUDIO_Transmit+0x15c>
          ((phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8009caa:	1ad3      	subs	r3, r2, r3
 8009cac:	68ba      	ldr	r2, [r7, #8]
 8009cae:	f892 20fc 	ldrb.w	r2, [r2, #252]	@ 0xfc
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d352      	bcc.n	8009d5c <USBH_AUDIO_Transmit+0x15c>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

        if (AUDIO_Handle->control.supported == 1U)
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d102      	bne.n	8009cd2 <USBH_AUDIO_Transmit+0xd2>
        {
          (void)USBH_AUDIO_Control(phost);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7ff fe6b 	bl	80099a8 <USBH_AUDIO_Control>
        }

        if (AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d82b      	bhi.n	8009d3a <USBH_AUDIO_Transmit+0x13a>
        {
          (void)USBH_IsocSendData(phost,
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
                                  AUDIO_Handle->headphone.cbuf,
                                  (uint32_t)AUDIO_Handle->headphone.frame_length,
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
          (void)USBH_IsocSendData(phost,
 8009cee:	461a      	mov	r2, r3
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f001 fd3c 	bl	800b774 <USBH_IsocSendData>
                                  AUDIO_Handle->headphone.Pipe);

          AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	f8b2 2120 	ldrh.w	r2, [r2, #288]	@ 0x120
 8009d08:	441a      	add	r2, r3
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
          AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	f8b2 2120 	ldrh.w	r2, [r2, #288]	@ 0x120
 8009d1c:	441a      	add	r2, r3
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
          AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	f8b2 2120 	ldrh.w	r2, [r2, #288]	@ 0x120
 8009d30:	441a      	add	r2, r3
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
          USBH_AUDIO_BufferEmptyCallback(phost);
        }
      }
      break;
 8009d38:	e010      	b.n	8009d5c <USBH_AUDIO_Transmit+0x15c>
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d40:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	2205      	movs	r2, #5
 8009d48:	709a      	strb	r2, [r3, #2]
          USBH_AUDIO_BufferEmptyCallback(phost);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f8bb 	bl	8009ec6 <USBH_AUDIO_BufferEmptyCallback>
      break;
 8009d50:	e004      	b.n	8009d5c <USBH_AUDIO_Transmit+0x15c>

    default:
      status = USBH_FAIL;
 8009d52:	2302      	movs	r3, #2
 8009d54:	73fb      	strb	r3, [r7, #15]
      break;
 8009d56:	e002      	b.n	8009d5e <USBH_AUDIO_Transmit+0x15e>
      break;
 8009d58:	bf00      	nop
 8009d5a:	e000      	b.n	8009d5e <USBH_AUDIO_Transmit+0x15e>
      break;
 8009d5c:	bf00      	nop
  }
  return status;
 8009d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute(USBH_HandleTypeDef *phost, uint8_t attrib)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	460b      	mov	r3, r1
 8009d72:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009d74:	2301      	movs	r3, #1
 8009d76:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8009d7e:	69db      	ldr	r3, [r3, #28]
 8009d80:	60bb      	str	r3, [r7, #8]

  switch (attrib)
 8009d82:	78fb      	ldrb	r3, [r7, #3]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d002      	beq.n	8009d8e <USBH_AUDIO_SetControlAttribute+0x26>
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	d00b      	beq.n	8009da4 <USBH_AUDIO_SetControlAttribute+0x3c>
 8009d8c:	e015      	b.n	8009dba <USBH_AUDIO_SetControlAttribute+0x52>
  {
    case 0x01:
      AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8009d9a:	441a      	add	r2, r3
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
      break;
 8009da2:	e00d      	b.n	8009dc0 <USBH_AUDIO_SetControlAttribute+0x58>

    case 0x02:
      AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8009db0:	1ad2      	subs	r2, r2, r3
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
      break;
 8009db8:	e002      	b.n	8009dc0 <USBH_AUDIO_SetControlAttribute+0x58>

    default :
      status = USBH_FAIL;
 8009dba:	2302      	movs	r3, #2
 8009dbc:	73fb      	strb	r3, [r7, #15]
      break;
 8009dbe:	bf00      	nop
  }

  if (AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d905      	bls.n	8009ddc <USBH_AUDIO_SetControlAttribute+0x74>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMax;
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
  }

  if (AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d205      	bcs.n	8009df8 <USBH_AUDIO_SetControlAttribute+0x90>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMin;
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
  }

  if (AUDIO_SetVolume(phost,
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	f893 11a0 	ldrb.w	r1, [r3, #416]	@ 0x1a0
                      AUDIO_Handle->temp_feature,
                      (uint8_t)AUDIO_Handle->temp_channels,
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	f893 21a1 	ldrb.w	r2, [r3, #417]	@ 0x1a1
                      (uint16_t)AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
  if (AUDIO_SetVolume(phost,
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f827 	bl	8009e60 <AUDIO_SetVolume>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d01e      	beq.n	8009e56 <USBH_AUDIO_SetControlAttribute+0xee>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d10e      	bne.n	8009e40 <USBH_AUDIO_SetControlAttribute+0xd8>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
      status = USBH_OK;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	73fb      	strb	r3, [r7, #15]
 8009e3e:	e007      	b.n	8009e50 <USBH_AUDIO_SetControlAttribute+0xe8>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 8009e46:	3b01      	subs	r3, #1
 8009e48:	b2da      	uxtb	r2, r3
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	2206      	movs	r2, #6
 8009e54:	705a      	strb	r2, [r3, #1]
  }


  return status;
 8009e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <AUDIO_SetVolume>:
  * @param  channel: channel index
  * @param  volume: new volume
  * @retval USBH Status
  */
static USBH_StatusTypeDef AUDIO_SetVolume(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel, uint16_t volume)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b086      	sub	sp, #24
 8009e64:	af02      	add	r7, sp, #8
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	4608      	mov	r0, r1
 8009e6a:	4611      	mov	r1, r2
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	4603      	mov	r3, r0
 8009e70:	70fb      	strb	r3, [r7, #3]
 8009e72:	460b      	mov	r3, r1
 8009e74:	70bb      	strb	r3, [r7, #2]
 8009e76:	4613      	mov	r3, r2
 8009e78:	803b      	strh	r3, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8009e84:	69db      	ldr	r3, [r3, #28]
 8009e86:	60bb      	str	r3, [r7, #8]

  AUDIO_Handle->mem[0] = volume;
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	883a      	ldrh	r2, [r7, #0]
 8009e8c:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

  status = USBH_AC_SetCur(phost, UAC_FEATURE_UNIT, feature,
 8009e90:	78fa      	ldrb	r2, [r7, #3]
 8009e92:	2302      	movs	r3, #2
 8009e94:	9301      	str	r3, [sp, #4]
 8009e96:	78bb      	ldrb	r3, [r7, #2]
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	2302      	movs	r3, #2
 8009e9c:	2106      	movs	r1, #6
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7ff fa76 	bl	8009390 <USBH_AC_SetCur>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	73fb      	strb	r3, [r7, #15]
                          VOLUME_CONTROL, channel, 2U);

  return status;
 8009ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <USBH_AUDIO_FrequencySet>:
  * @brief  The function informs user that Settings have been changed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_FrequencySet(USBH_HandleTypeDef *phost)
{
 8009eb2:	b480      	push	{r7}
 8009eb4:	b083      	sub	sp, #12
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009eba:	bf00      	nop
 8009ebc:	370c      	adds	r7, #12
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <USBH_AUDIO_BufferEmptyCallback>:
  * @brief  The function informs user that User data are processed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_BufferEmptyCallback(USBH_HandleTypeDef *phost)
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b083      	sub	sp, #12
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009ece:	bf00      	nop
 8009ed0:	370c      	adds	r7, #12
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr

08009eda <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b084      	sub	sp, #16
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	60f8      	str	r0, [r7, #12]
 8009ee2:	60b9      	str	r1, [r7, #8]
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d101      	bne.n	8009ef2 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009eee:	2302      	movs	r3, #2
 8009ef0:	e029      	b.n	8009f46 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	79fa      	ldrb	r2, [r7, #7]
 8009ef6:	f883 249c 	strb.w	r2, [r3, #1180]	@ 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c
  phost->ClassNumber = 0U;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f8c3 2450 	str.w	r2, [r3, #1104]	@ 0x450

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f000 f81f 	bl	8009f4e <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d003      	beq.n	8009f3e <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	68ba      	ldr	r2, [r7, #8]
 8009f3a:	f8c3 24a4 	str.w	r2, [r3, #1188]	@ 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	f001 fe0e 	bl	800bb60 <USBH_LL_Init>

  return USBH_OK;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}

08009f4e <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b084      	sub	sp, #16
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009f56:	2300      	movs	r3, #0
 8009f58:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	60fb      	str	r3, [r7, #12]
 8009f5e:	e00a      	b.n	8009f76 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	4413      	add	r3, r2
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	3301      	adds	r3, #1
 8009f74:	60fb      	str	r3, [r7, #12]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2b0f      	cmp	r3, #15
 8009f7a:	d9f1      	bls.n	8009f60 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	60fb      	str	r3, [r7, #12]
 8009f80:	e009      	b.n	8009f96 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	4413      	add	r3, r2
 8009f88:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	3301      	adds	r3, #1
 8009f94:	60fb      	str	r3, [r7, #12]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f9c:	d3f1      	bcc.n	8009f82 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2201      	movs	r2, #1
 8009fae:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f8c3 2494 	str.w	r2, [r3, #1172]	@ 0x494

  phost->Control.state = CTRL_SETUP;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2240      	movs	r2, #64	@ 0x40
 8009fc2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	331c      	adds	r3, #28
 8009fee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f002 f877 	bl	800c0e8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a000:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a004:	2100      	movs	r1, #0
 800a006:	4618      	mov	r0, r3
 800a008:	f002 f86e 	bl	800c0e8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a012:	2212      	movs	r2, #18
 800a014:	2100      	movs	r1, #0
 800a016:	4618      	mov	r0, r3
 800a018:	f002 f866 	bl	800c0e8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a022:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 800a026:	2100      	movs	r1, #0
 800a028:	4618      	mov	r0, r3
 800a02a:	f002 f85d 	bl	800c0e8 <memset>

  return USBH_OK;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3710      	adds	r7, #16
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a042:	2300      	movs	r3, #0
 800a044:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d017      	beq.n	800a07c <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 3450 	ldr.w	r3, [r3, #1104]	@ 0x450
 800a052:	2b00      	cmp	r3, #0
 800a054:	d10f      	bne.n	800a076 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 3450 	ldr.w	r3, [r3, #1104]	@ 0x450
 800a05c:	1c59      	adds	r1, r3, #1
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	f8c2 1450 	str.w	r1, [r2, #1104]	@ 0x450
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	f503 7389 	add.w	r3, r3, #274	@ 0x112
 800a06a:	6839      	ldr	r1, [r7, #0]
 800a06c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a070:	2300      	movs	r3, #0
 800a072:	73fb      	strb	r3, [r7, #15]
 800a074:	e004      	b.n	800a080 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a076:	2302      	movs	r3, #2
 800a078:	73fb      	strb	r3, [r7, #15]
 800a07a:	e001      	b.n	800a080 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a07c:	2302      	movs	r3, #2
 800a07e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a080:	7bfb      	ldrb	r3, [r7, #15]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a08e:	b480      	push	{r7}
 800a090:	b087      	sub	sp, #28
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	4608      	mov	r0, r1
 800a098:	4611      	mov	r1, r2
 800a09a:	461a      	mov	r2, r3
 800a09c:	4603      	mov	r3, r0
 800a09e:	70fb      	strb	r3, [r7, #3]
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	70bb      	strb	r3, [r7, #2]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a0b6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a0b8:	e025      	b.n	800a106 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a0ba:	7dfb      	ldrb	r3, [r7, #23]
 800a0bc:	221a      	movs	r2, #26
 800a0be:	fb02 f303 	mul.w	r3, r2, r3
 800a0c2:	3308      	adds	r3, #8
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	3302      	adds	r3, #2
 800a0ca:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	795b      	ldrb	r3, [r3, #5]
 800a0d0:	78fa      	ldrb	r2, [r7, #3]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d002      	beq.n	800a0dc <USBH_FindInterface+0x4e>
 800a0d6:	78fb      	ldrb	r3, [r7, #3]
 800a0d8:	2bff      	cmp	r3, #255	@ 0xff
 800a0da:	d111      	bne.n	800a100 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a0e0:	78ba      	ldrb	r2, [r7, #2]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d002      	beq.n	800a0ec <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a0e6:	78bb      	ldrb	r3, [r7, #2]
 800a0e8:	2bff      	cmp	r3, #255	@ 0xff
 800a0ea:	d109      	bne.n	800a100 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a0f0:	787a      	ldrb	r2, [r7, #1]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d002      	beq.n	800a0fc <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a0f6:	787b      	ldrb	r3, [r7, #1]
 800a0f8:	2bff      	cmp	r3, #255	@ 0xff
 800a0fa:	d101      	bne.n	800a100 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a0fc:	7dfb      	ldrb	r3, [r7, #23]
 800a0fe:	e006      	b.n	800a10e <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a100:	7dfb      	ldrb	r3, [r7, #23]
 800a102:	3301      	adds	r3, #1
 800a104:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a106:	7dfb      	ldrb	r3, [r7, #23]
 800a108:	2b09      	cmp	r3, #9
 800a10a:	d9d6      	bls.n	800a0ba <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a10c:	23ff      	movs	r3, #255	@ 0xff
}
 800a10e:	4618      	mov	r0, r3
 800a110:	371c      	adds	r7, #28
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr

0800a11a <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 800a11a:	b480      	push	{r7}
 800a11c:	b087      	sub	sp, #28
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
 800a122:	460b      	mov	r3, r1
 800a124:	70fb      	strb	r3, [r7, #3]
 800a126:	4613      	mov	r3, r2
 800a128:	70bb      	strb	r3, [r7, #2]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a12a:	2300      	movs	r3, #0
 800a12c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a12e:	2300      	movs	r3, #0
 800a130:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a138:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a13a:	e017      	b.n	800a16c <USBH_FindInterfaceIndex+0x52>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a13c:	7dfb      	ldrb	r3, [r7, #23]
 800a13e:	221a      	movs	r2, #26
 800a140:	fb02 f303 	mul.w	r3, r2, r3
 800a144:	3308      	adds	r3, #8
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	4413      	add	r3, r2
 800a14a:	3302      	adds	r3, #2
 800a14c:	613b      	str	r3, [r7, #16]
    if ((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	789b      	ldrb	r3, [r3, #2]
 800a152:	78fa      	ldrb	r2, [r7, #3]
 800a154:	429a      	cmp	r2, r3
 800a156:	d106      	bne.n	800a166 <USBH_FindInterfaceIndex+0x4c>
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	78db      	ldrb	r3, [r3, #3]
 800a15c:	78ba      	ldrb	r2, [r7, #2]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d101      	bne.n	800a166 <USBH_FindInterfaceIndex+0x4c>
    {
      return  if_ix;
 800a162:	7dfb      	ldrb	r3, [r7, #23]
 800a164:	e006      	b.n	800a174 <USBH_FindInterfaceIndex+0x5a>
    }
    if_ix++;
 800a166:	7dfb      	ldrb	r3, [r7, #23]
 800a168:	3301      	adds	r3, #1
 800a16a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a16c:	7dfb      	ldrb	r3, [r7, #23]
 800a16e:	2b09      	cmp	r3, #9
 800a170:	d9e4      	bls.n	800a13c <USBH_FindInterfaceIndex+0x22>
  }
  return 0xFFU;
 800a172:	23ff      	movs	r3, #255	@ 0xff
}
 800a174:	4618      	mov	r0, r3
 800a176:	371c      	adds	r7, #28
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr

0800a180 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f001 fd25 	bl	800bbd8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a18e:	2101      	movs	r1, #1
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f001 fe2b 	bl	800bdec <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a196:	2300      	movs	r3, #0
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3708      	adds	r7, #8
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b088      	sub	sp, #32
 800a1a4:	af04      	add	r7, sp, #16
 800a1a6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a1a8:	2302      	movs	r3, #2
 800a1aa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d102      	bne.n	800a1c2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2203      	movs	r2, #3
 800a1c0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	2b0b      	cmp	r3, #11
 800a1ca:	f200 81bd 	bhi.w	800a548 <USBH_Process+0x3a8>
 800a1ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a1d4 <USBH_Process+0x34>)
 800a1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d4:	0800a205 	.word	0x0800a205
 800a1d8:	0800a237 	.word	0x0800a237
 800a1dc:	0800a29f 	.word	0x0800a29f
 800a1e0:	0800a4e3 	.word	0x0800a4e3
 800a1e4:	0800a549 	.word	0x0800a549
 800a1e8:	0800a33f 	.word	0x0800a33f
 800a1ec:	0800a489 	.word	0x0800a489
 800a1f0:	0800a375 	.word	0x0800a375
 800a1f4:	0800a395 	.word	0x0800a395
 800a1f8:	0800a3b3 	.word	0x0800a3b3
 800a1fc:	0800a3f7 	.word	0x0800a3f7
 800a200:	0800a4cb 	.word	0x0800a4cb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	f000 819d 	beq.w	800a54c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2201      	movs	r2, #1
 800a216:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a218:	20c8      	movs	r0, #200	@ 0xc8
 800a21a:	f001 fe31 	bl	800be80 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f001 fd37 	bl	800bc92 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a234:	e18a      	b.n	800a54c <USBH_Process+0x3ac>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d107      	bne.n	800a250 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2202      	movs	r2, #2
 800a24c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a24e:	e18c      	b.n	800a56a <USBH_Process+0x3ca>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 800a256:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a25a:	d914      	bls.n	800a286 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a262:	3301      	adds	r3, #1
 800a264:	b2da      	uxtb	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a272:	2b03      	cmp	r3, #3
 800a274:	d903      	bls.n	800a27e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	220d      	movs	r2, #13
 800a27a:	701a      	strb	r2, [r3, #0]
      break;
 800a27c:	e175      	b.n	800a56a <USBH_Process+0x3ca>
            phost->gState = HOST_IDLE;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	701a      	strb	r2, [r3, #0]
      break;
 800a284:	e171      	b.n	800a56a <USBH_Process+0x3ca>
          phost->Timeout += 10U;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 800a28c:	f103 020a 	add.w	r2, r3, #10
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
          USBH_Delay(10U);
 800a296:	200a      	movs	r0, #10
 800a298:	f001 fdf2 	bl	800be80 <USBH_Delay>
      break;
 800a29c:	e165      	b.n	800a56a <USBH_Process+0x3ca>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d005      	beq.n	800a2b4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 800a2ae:	2104      	movs	r1, #4
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a2b4:	2064      	movs	r0, #100	@ 0x64
 800a2b6:	f001 fde3 	bl	800be80 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f001 fcc2 	bl	800bc44 <USBH_LL_GetSpeed>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2205      	movs	r2, #5
 800a2ce:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f001 fa98 	bl	800b808 <USBH_AllocPipe>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	461a      	mov	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a2e0:	2180      	movs	r1, #128	@ 0x80
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f001 fa90 	bl	800b808 <USBH_AllocPipe>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	7919      	ldrb	r1, [r3, #4]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a304:	9202      	str	r2, [sp, #8]
 800a306:	2200      	movs	r2, #0
 800a308:	9201      	str	r2, [sp, #4]
 800a30a:	9300      	str	r3, [sp, #0]
 800a30c:	4603      	mov	r3, r0
 800a30e:	2280      	movs	r2, #128	@ 0x80
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f001 fa4a 	bl	800b7aa <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	7959      	ldrb	r1, [r3, #5]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a32a:	9202      	str	r2, [sp, #8]
 800a32c:	2200      	movs	r2, #0
 800a32e:	9201      	str	r2, [sp, #4]
 800a330:	9300      	str	r3, [sp, #0]
 800a332:	4603      	mov	r3, r0
 800a334:	2200      	movs	r2, #0
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f001 fa37 	bl	800b7aa <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a33c:	e115      	b.n	800a56a <USBH_Process+0x3ca>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 f918 	bl	800a574 <USBH_HandleEnum>
 800a344:	4603      	mov	r3, r0
 800a346:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a348:	7bbb      	ldrb	r3, [r7, #14]
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f040 80ff 	bne.w	800a550 <USBH_Process+0x3b0>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800a360:	2b01      	cmp	r3, #1
 800a362:	d103      	bne.n	800a36c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2208      	movs	r2, #8
 800a368:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a36a:	e0f1      	b.n	800a550 <USBH_Process+0x3b0>
          phost->gState = HOST_INPUT;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2207      	movs	r2, #7
 800a370:	701a      	strb	r2, [r3, #0]
      break;
 800a372:	e0ed      	b.n	800a550 <USBH_Process+0x3b0>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	f000 80ea 	beq.w	800a554 <USBH_Process+0x3b4>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 800a386:	2101      	movs	r1, #1
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2208      	movs	r2, #8
 800a390:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a392:	e0df      	b.n	800a554 <USBH_Process+0x3b4>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a39a:	4619      	mov	r1, r3
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 fc3c 	bl	800ac1a <USBH_SetCfg>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f040 80d7 	bne.w	800a558 <USBH_Process+0x3b8>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2209      	movs	r2, #9
 800a3ae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a3b0:	e0d2      	b.n	800a558 <USBH_Process+0x3b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a3b8:	f003 0320 	and.w	r3, r3, #32
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d016      	beq.n	800a3ee <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a3c0:	2101      	movs	r1, #1
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 fc73 	bl	800acae <USBH_SetFeature>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a3cc:	7bbb      	ldrb	r3, [r7, #14]
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d103      	bne.n	800a3dc <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	220a      	movs	r2, #10
 800a3d8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a3da:	e0bf      	b.n	800a55c <USBH_Process+0x3bc>
        else if (status == USBH_NOT_SUPPORTED)
 800a3dc:	7bbb      	ldrb	r3, [r7, #14]
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	2b03      	cmp	r3, #3
 800a3e2:	f040 80bb 	bne.w	800a55c <USBH_Process+0x3bc>
          phost->gState = HOST_CHECK_CLASS;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	220a      	movs	r2, #10
 800a3ea:	701a      	strb	r2, [r3, #0]
      break;
 800a3ec:	e0b6      	b.n	800a55c <USBH_Process+0x3bc>
        phost->gState = HOST_CHECK_CLASS;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	220a      	movs	r2, #10
 800a3f2:	701a      	strb	r2, [r3, #0]
      break;
 800a3f4:	e0b2      	b.n	800a55c <USBH_Process+0x3bc>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8d3 3450 	ldr.w	r3, [r3, #1104]	@ 0x450
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	f000 80af 	beq.w	800a560 <USBH_Process+0x3c0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a40a:	2300      	movs	r3, #0
 800a40c:	73fb      	strb	r3, [r7, #15]
 800a40e:	e018      	b.n	800a442 <USBH_Process+0x2a2>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a410:	7bfa      	ldrb	r2, [r7, #15]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f502 7289 	add.w	r2, r2, #274	@ 0x112
 800a418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a41c:	791a      	ldrb	r2, [r3, #4]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a424:	429a      	cmp	r2, r3
 800a426:	d109      	bne.n	800a43c <USBH_Process+0x29c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a428:	7bfa      	ldrb	r2, [r7, #15]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f502 7289 	add.w	r2, r2, #274	@ 0x112
 800a430:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c
            break;
 800a43a:	e005      	b.n	800a448 <USBH_Process+0x2a8>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a43c:	7bfb      	ldrb	r3, [r7, #15]
 800a43e:	3301      	adds	r3, #1
 800a440:	73fb      	strb	r3, [r7, #15]
 800a442:	7bfb      	ldrb	r3, [r7, #15]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d0e3      	beq.n	800a410 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d016      	beq.n	800a480 <USBH_Process+0x2e0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	4798      	blx	r3
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d109      	bne.n	800a478 <USBH_Process+0x2d8>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2206      	movs	r2, #6
 800a468:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 800a470:	2103      	movs	r1, #3
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a476:	e073      	b.n	800a560 <USBH_Process+0x3c0>
            phost->gState = HOST_ABORT_STATE;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	220d      	movs	r2, #13
 800a47c:	701a      	strb	r2, [r3, #0]
      break;
 800a47e:	e06f      	b.n	800a560 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	220d      	movs	r2, #13
 800a484:	701a      	strb	r2, [r3, #0]
      break;
 800a486:	e06b      	b.n	800a560 <USBH_Process+0x3c0>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d017      	beq.n	800a4c2 <USBH_Process+0x322>
      {
        status = phost->pActiveClass->Requests(phost);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800a498:	691b      	ldr	r3, [r3, #16]
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	4798      	blx	r3
 800a49e:	4603      	mov	r3, r0
 800a4a0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a4a2:	7bbb      	ldrb	r3, [r7, #14]
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d103      	bne.n	800a4b2 <USBH_Process+0x312>
        {
          phost->gState = HOST_CLASS;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	220b      	movs	r2, #11
 800a4ae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a4b0:	e058      	b.n	800a564 <USBH_Process+0x3c4>
        else if (status == USBH_FAIL)
 800a4b2:	7bbb      	ldrb	r3, [r7, #14]
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d154      	bne.n	800a564 <USBH_Process+0x3c4>
          phost->gState = HOST_ABORT_STATE;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	220d      	movs	r2, #13
 800a4be:	701a      	strb	r2, [r3, #0]
      break;
 800a4c0:	e050      	b.n	800a564 <USBH_Process+0x3c4>
        phost->gState = HOST_ABORT_STATE;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	220d      	movs	r2, #13
 800a4c6:	701a      	strb	r2, [r3, #0]
      break;
 800a4c8:	e04c      	b.n	800a564 <USBH_Process+0x3c4>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d049      	beq.n	800a568 <USBH_Process+0x3c8>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800a4da:	695b      	ldr	r3, [r3, #20]
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	4798      	blx	r3
      }
      break;
 800a4e0:	e042      	b.n	800a568 <USBH_Process+0x3c8>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f7ff fd2f 	bl	8009f4e <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d009      	beq.n	800a50e <USBH_Process+0x36e>
      {
        phost->pActiveClass->DeInit(phost);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c
      }

      if (phost->pUser != NULL)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 800a514:	2b00      	cmp	r3, #0
 800a516:	d005      	beq.n	800a524 <USBH_Process+0x384>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 800a51e:	2105      	movs	r1, #5
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d107      	bne.n	800a540 <USBH_Process+0x3a0>
      {
        phost->device.is_ReEnumerated = 0U;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f7ff fe21 	bl	800a180 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a53e:	e014      	b.n	800a56a <USBH_Process+0x3ca>
        (void)USBH_LL_Start(phost);
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f001 fb49 	bl	800bbd8 <USBH_LL_Start>
      break;
 800a546:	e010      	b.n	800a56a <USBH_Process+0x3ca>

    case HOST_ABORT_STATE:
    default :
      break;
 800a548:	bf00      	nop
 800a54a:	e00e      	b.n	800a56a <USBH_Process+0x3ca>
      break;
 800a54c:	bf00      	nop
 800a54e:	e00c      	b.n	800a56a <USBH_Process+0x3ca>
      break;
 800a550:	bf00      	nop
 800a552:	e00a      	b.n	800a56a <USBH_Process+0x3ca>
    break;
 800a554:	bf00      	nop
 800a556:	e008      	b.n	800a56a <USBH_Process+0x3ca>
      break;
 800a558:	bf00      	nop
 800a55a:	e006      	b.n	800a56a <USBH_Process+0x3ca>
      break;
 800a55c:	bf00      	nop
 800a55e:	e004      	b.n	800a56a <USBH_Process+0x3ca>
      break;
 800a560:	bf00      	nop
 800a562:	e002      	b.n	800a56a <USBH_Process+0x3ca>
      break;
 800a564:	bf00      	nop
 800a566:	e000      	b.n	800a56a <USBH_Process+0x3ca>
      break;
 800a568:	bf00      	nop
  }
  return USBH_OK;
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3710      	adds	r7, #16
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b088      	sub	sp, #32
 800a578:	af04      	add	r7, sp, #16
 800a57a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a57c:	2301      	movs	r3, #1
 800a57e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a580:	2301      	movs	r3, #1
 800a582:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	785b      	ldrb	r3, [r3, #1]
 800a588:	2b07      	cmp	r3, #7
 800a58a:	f200 81bd 	bhi.w	800a908 <USBH_HandleEnum+0x394>
 800a58e:	a201      	add	r2, pc, #4	@ (adr r2, 800a594 <USBH_HandleEnum+0x20>)
 800a590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a594:	0800a5b5 	.word	0x0800a5b5
 800a598:	0800a66f 	.word	0x0800a66f
 800a59c:	0800a6d9 	.word	0x0800a6d9
 800a5a0:	0800a763 	.word	0x0800a763
 800a5a4:	0800a7cd 	.word	0x0800a7cd
 800a5a8:	0800a83d 	.word	0x0800a83d
 800a5ac:	0800a883 	.word	0x0800a883
 800a5b0:	0800a8c9 	.word	0x0800a8c9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a5b4:	2108      	movs	r1, #8
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fa4c 	bl	800aa54 <USBH_Get_DevDesc>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a5c0:	7bbb      	ldrb	r3, [r7, #14]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d12e      	bne.n	800a624 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	7919      	ldrb	r1, [r3, #4]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a5ea:	9202      	str	r2, [sp, #8]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	9201      	str	r2, [sp, #4]
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2280      	movs	r2, #128	@ 0x80
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f001 f8d7 	bl	800b7aa <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	7959      	ldrb	r1, [r3, #5]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a610:	9202      	str	r2, [sp, #8]
 800a612:	2200      	movs	r2, #0
 800a614:	9201      	str	r2, [sp, #4]
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	4603      	mov	r3, r0
 800a61a:	2200      	movs	r2, #0
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f001 f8c4 	bl	800b7aa <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a622:	e173      	b.n	800a90c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a624:	7bbb      	ldrb	r3, [r7, #14]
 800a626:	2b03      	cmp	r3, #3
 800a628:	f040 8170 	bne.w	800a90c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a632:	3301      	adds	r3, #1
 800a634:	b2da      	uxtb	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a642:	2b03      	cmp	r3, #3
 800a644:	d903      	bls.n	800a64e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	220d      	movs	r2, #13
 800a64a:	701a      	strb	r2, [r3, #0]
      break;
 800a64c:	e15e      	b.n	800a90c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	795b      	ldrb	r3, [r3, #5]
 800a652:	4619      	mov	r1, r3
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f001 f8f9 	bl	800b84c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	791b      	ldrb	r3, [r3, #4]
 800a65e:	4619      	mov	r1, r3
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f001 f8f3 	bl	800b84c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	701a      	strb	r2, [r3, #0]
      break;
 800a66c:	e14e      	b.n	800a90c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a66e:	2112      	movs	r1, #18
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 f9ef 	bl	800aa54 <USBH_Get_DevDesc>
 800a676:	4603      	mov	r3, r0
 800a678:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a67a:	7bbb      	ldrb	r3, [r7, #14]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d103      	bne.n	800a688 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2202      	movs	r2, #2
 800a684:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a686:	e143      	b.n	800a910 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a688:	7bbb      	ldrb	r3, [r7, #14]
 800a68a:	2b03      	cmp	r3, #3
 800a68c:	f040 8140 	bne.w	800a910 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a696:	3301      	adds	r3, #1
 800a698:	b2da      	uxtb	r2, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a6a6:	2b03      	cmp	r3, #3
 800a6a8:	d903      	bls.n	800a6b2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	220d      	movs	r2, #13
 800a6ae:	701a      	strb	r2, [r3, #0]
      break;
 800a6b0:	e12e      	b.n	800a910 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	795b      	ldrb	r3, [r3, #5]
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f001 f8c7 	bl	800b84c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	791b      	ldrb	r3, [r3, #4]
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f001 f8c1 	bl	800b84c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	701a      	strb	r2, [r3, #0]
      break;
 800a6d6:	e11b      	b.n	800a910 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a6d8:	2101      	movs	r1, #1
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 fa79 	bl	800abd2 <USBH_SetAddress>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a6e4:	7bbb      	ldrb	r3, [r7, #14]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d130      	bne.n	800a74c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a6ea:	2002      	movs	r0, #2
 800a6ec:	f001 fbc8 	bl	800be80 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2203      	movs	r2, #3
 800a6fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	7919      	ldrb	r1, [r3, #4]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a712:	9202      	str	r2, [sp, #8]
 800a714:	2200      	movs	r2, #0
 800a716:	9201      	str	r2, [sp, #4]
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	4603      	mov	r3, r0
 800a71c:	2280      	movs	r2, #128	@ 0x80
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f001 f843 	bl	800b7aa <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	7959      	ldrb	r1, [r3, #5]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a738:	9202      	str	r2, [sp, #8]
 800a73a:	2200      	movs	r2, #0
 800a73c:	9201      	str	r2, [sp, #4]
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	4603      	mov	r3, r0
 800a742:	2200      	movs	r2, #0
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f001 f830 	bl	800b7aa <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a74a:	e0e3      	b.n	800a914 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a74c:	7bbb      	ldrb	r3, [r7, #14]
 800a74e:	2b03      	cmp	r3, #3
 800a750:	f040 80e0 	bne.w	800a914 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	220d      	movs	r2, #13
 800a758:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	705a      	strb	r2, [r3, #1]
      break;
 800a760:	e0d8      	b.n	800a914 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a762:	2109      	movs	r1, #9
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 f9a1 	bl	800aaac <USBH_Get_CfgDesc>
 800a76a:	4603      	mov	r3, r0
 800a76c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a76e:	7bbb      	ldrb	r3, [r7, #14]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d103      	bne.n	800a77c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2204      	movs	r2, #4
 800a778:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a77a:	e0cd      	b.n	800a918 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a77c:	7bbb      	ldrb	r3, [r7, #14]
 800a77e:	2b03      	cmp	r3, #3
 800a780:	f040 80ca 	bne.w	800a918 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a78a:	3301      	adds	r3, #1
 800a78c:	b2da      	uxtb	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a79a:	2b03      	cmp	r3, #3
 800a79c:	d903      	bls.n	800a7a6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	220d      	movs	r2, #13
 800a7a2:	701a      	strb	r2, [r3, #0]
      break;
 800a7a4:	e0b8      	b.n	800a918 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	795b      	ldrb	r3, [r3, #5]
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f001 f84d 	bl	800b84c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	791b      	ldrb	r3, [r3, #4]
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f001 f847 	bl	800b84c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	701a      	strb	r2, [r3, #0]
      break;
 800a7ca:	e0a5      	b.n	800a918 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 f969 	bl	800aaac <USBH_Get_CfgDesc>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a7de:	7bbb      	ldrb	r3, [r7, #14]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d103      	bne.n	800a7ec <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2205      	movs	r2, #5
 800a7e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a7ea:	e097      	b.n	800a91c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a7ec:	7bbb      	ldrb	r3, [r7, #14]
 800a7ee:	2b03      	cmp	r3, #3
 800a7f0:	f040 8094 	bne.w	800a91c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	b2da      	uxtb	r2, r3
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a80a:	2b03      	cmp	r3, #3
 800a80c:	d903      	bls.n	800a816 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	220d      	movs	r2, #13
 800a812:	701a      	strb	r2, [r3, #0]
      break;
 800a814:	e082      	b.n	800a91c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	795b      	ldrb	r3, [r3, #5]
 800a81a:	4619      	mov	r1, r3
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f001 f815 	bl	800b84c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	791b      	ldrb	r3, [r3, #4]
 800a826:	4619      	mov	r1, r3
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f001 f80f 	bl	800b84c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2200      	movs	r2, #0
 800a838:	701a      	strb	r2, [r3, #0]
      break;
 800a83a:	e06f      	b.n	800a91c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800a842:	2b00      	cmp	r3, #0
 800a844:	d019      	beq.n	800a87a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a852:	23ff      	movs	r3, #255	@ 0xff
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 f953 	bl	800ab00 <USBH_Get_StringDesc>
 800a85a:	4603      	mov	r3, r0
 800a85c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a85e:	7bbb      	ldrb	r3, [r7, #14]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d103      	bne.n	800a86c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2206      	movs	r2, #6
 800a868:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a86a:	e059      	b.n	800a920 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a86c:	7bbb      	ldrb	r3, [r7, #14]
 800a86e:	2b03      	cmp	r3, #3
 800a870:	d156      	bne.n	800a920 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2206      	movs	r2, #6
 800a876:	705a      	strb	r2, [r3, #1]
      break;
 800a878:	e052      	b.n	800a920 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2206      	movs	r2, #6
 800a87e:	705a      	strb	r2, [r3, #1]
      break;
 800a880:	e04e      	b.n	800a920 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d019      	beq.n	800a8c0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a898:	23ff      	movs	r3, #255	@ 0xff
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f930 	bl	800ab00 <USBH_Get_StringDesc>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a8a4:	7bbb      	ldrb	r3, [r7, #14]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d103      	bne.n	800a8b2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2207      	movs	r2, #7
 800a8ae:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a8b0:	e038      	b.n	800a924 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8b2:	7bbb      	ldrb	r3, [r7, #14]
 800a8b4:	2b03      	cmp	r3, #3
 800a8b6:	d135      	bne.n	800a924 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2207      	movs	r2, #7
 800a8bc:	705a      	strb	r2, [r3, #1]
      break;
 800a8be:	e031      	b.n	800a924 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2207      	movs	r2, #7
 800a8c4:	705a      	strb	r2, [r3, #1]
      break;
 800a8c6:	e02d      	b.n	800a924 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d017      	beq.n	800a902 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a8de:	23ff      	movs	r3, #255	@ 0xff
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 f90d 	bl	800ab00 <USBH_Get_StringDesc>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a8ea:	7bbb      	ldrb	r3, [r7, #14]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d102      	bne.n	800a8f6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a8f4:	e018      	b.n	800a928 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8f6:	7bbb      	ldrb	r3, [r7, #14]
 800a8f8:	2b03      	cmp	r3, #3
 800a8fa:	d115      	bne.n	800a928 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	73fb      	strb	r3, [r7, #15]
      break;
 800a900:	e012      	b.n	800a928 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800a902:	2300      	movs	r3, #0
 800a904:	73fb      	strb	r3, [r7, #15]
      break;
 800a906:	e00f      	b.n	800a928 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800a908:	bf00      	nop
 800a90a:	e00e      	b.n	800a92a <USBH_HandleEnum+0x3b6>
      break;
 800a90c:	bf00      	nop
 800a90e:	e00c      	b.n	800a92a <USBH_HandleEnum+0x3b6>
      break;
 800a910:	bf00      	nop
 800a912:	e00a      	b.n	800a92a <USBH_HandleEnum+0x3b6>
      break;
 800a914:	bf00      	nop
 800a916:	e008      	b.n	800a92a <USBH_HandleEnum+0x3b6>
      break;
 800a918:	bf00      	nop
 800a91a:	e006      	b.n	800a92a <USBH_HandleEnum+0x3b6>
      break;
 800a91c:	bf00      	nop
 800a91e:	e004      	b.n	800a92a <USBH_HandleEnum+0x3b6>
      break;
 800a920:	bf00      	nop
 800a922:	e002      	b.n	800a92a <USBH_HandleEnum+0x3b6>
      break;
 800a924:	bf00      	nop
 800a926:	e000      	b.n	800a92a <USBH_HandleEnum+0x3b6>
      break;
 800a928:	bf00      	nop
  }
  return Status;
 800a92a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3710      	adds	r7, #16
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	683a      	ldr	r2, [r7, #0]
 800a942:	f8c3 2494 	str.w	r2, [r3, #1172]	@ 0x494
}
 800a946:	bf00      	nop
 800a948:	370c      	adds	r7, #12
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr

0800a952 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a952:	b580      	push	{r7, lr}
 800a954:	b082      	sub	sp, #8
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800a960:	1c5a      	adds	r2, r3, #1
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8c3 2494 	str.w	r2, [r3, #1172]	@ 0x494
  USBH_HandleSof(phost);
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 f804 	bl	800a976 <USBH_HandleSof>
}
 800a96e:	bf00      	nop
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b082      	sub	sp, #8
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	b2db      	uxtb	r3, r3
 800a984:	2b0b      	cmp	r3, #11
 800a986:	d10a      	bne.n	800a99e <USBH_HandleSof+0x28>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d005      	beq.n	800a99e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800a998:	699b      	ldr	r3, [r3, #24]
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	4798      	blx	r3
  }
}
 800a99e:	bf00      	nop
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a9a6:	b480      	push	{r7}
 800a9a8:	b083      	sub	sp, #12
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a9b6:	bf00      	nop
}
 800a9b8:	370c      	adds	r7, #12
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr

0800a9c2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a9c2:	b480      	push	{r7}
 800a9c4:	b083      	sub	sp, #12
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800a9d2:	bf00      	nop
}
 800a9d4:	370c      	adds	r7, #12
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr

0800a9de <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a9de:	b480      	push	{r7}
 800a9e0:	b083      	sub	sp, #12
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a9fe:	2300      	movs	r3, #0
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	370c      	adds	r7, #12
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f001 f8ee 	bl	800bc0e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	791b      	ldrb	r3, [r3, #4]
 800aa36:	4619      	mov	r1, r3
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 ff07 	bl	800b84c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	795b      	ldrb	r3, [r3, #5]
 800aa42:	4619      	mov	r1, r3
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 ff01 	bl	800b84c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3708      	adds	r7, #8
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b086      	sub	sp, #24
 800aa58:	af02      	add	r7, sp, #8
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800aa60:	887b      	ldrh	r3, [r7, #2]
 800aa62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa66:	d901      	bls.n	800aa6c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800aa68:	2303      	movs	r3, #3
 800aa6a:	e01b      	b.n	800aaa4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800aa72:	887b      	ldrh	r3, [r7, #2]
 800aa74:	9300      	str	r3, [sp, #0]
 800aa76:	4613      	mov	r3, r2
 800aa78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 f872 	bl	800ab68 <USBH_GetDescriptor>
 800aa84:	4603      	mov	r3, r0
 800aa86:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800aa88:	7bfb      	ldrb	r3, [r7, #15]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d109      	bne.n	800aaa2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800aa94:	887a      	ldrh	r2, [r7, #2]
 800aa96:	4619      	mov	r1, r3
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 f92d 	bl	800acf8 <USBH_ParseDevDesc>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aaa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3710      	adds	r7, #16
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b086      	sub	sp, #24
 800aab0:	af02      	add	r7, sp, #8
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	460b      	mov	r3, r1
 800aab6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	331c      	adds	r3, #28
 800aabc:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800aabe:	887b      	ldrh	r3, [r7, #2]
 800aac0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aac4:	d901      	bls.n	800aaca <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800aac6:	2303      	movs	r3, #3
 800aac8:	e016      	b.n	800aaf8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800aaca:	887b      	ldrh	r3, [r7, #2]
 800aacc:	9300      	str	r3, [sp, #0]
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aad4:	2100      	movs	r1, #0
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 f846 	bl	800ab68 <USBH_GetDescriptor>
 800aadc:	4603      	mov	r3, r0
 800aade:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800aae0:	7bfb      	ldrb	r3, [r7, #15]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d107      	bne.n	800aaf6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800aae6:	887b      	ldrh	r3, [r7, #2]
 800aae8:	461a      	mov	r2, r3
 800aaea:	68b9      	ldr	r1, [r7, #8]
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f9b3 	bl	800ae58 <USBH_ParseCfgDesc>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aaf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3710      	adds	r7, #16
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b088      	sub	sp, #32
 800ab04:	af02      	add	r7, sp, #8
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	607a      	str	r2, [r7, #4]
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	72fb      	strb	r3, [r7, #11]
 800ab10:	4613      	mov	r3, r2
 800ab12:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800ab14:	893b      	ldrh	r3, [r7, #8]
 800ab16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab1a:	d802      	bhi.n	800ab22 <USBH_Get_StringDesc+0x22>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d101      	bne.n	800ab26 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ab22:	2303      	movs	r3, #3
 800ab24:	e01c      	b.n	800ab60 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800ab26:	7afb      	ldrb	r3, [r7, #11]
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800ab2e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ab36:	893b      	ldrh	r3, [r7, #8]
 800ab38:	9300      	str	r3, [sp, #0]
 800ab3a:	460b      	mov	r3, r1
 800ab3c:	2100      	movs	r1, #0
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f000 f812 	bl	800ab68 <USBH_GetDescriptor>
 800ab44:	4603      	mov	r3, r0
 800ab46:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ab48:	7dfb      	ldrb	r3, [r7, #23]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d107      	bne.n	800ab5e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ab54:	893a      	ldrh	r2, [r7, #8]
 800ab56:	6879      	ldr	r1, [r7, #4]
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f000 fb91 	bl	800b280 <USBH_ParseStringDesc>
  }

  return status;
 800ab5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3718      	adds	r7, #24
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	607b      	str	r3, [r7, #4]
 800ab72:	460b      	mov	r3, r1
 800ab74:	72fb      	strb	r3, [r7, #11]
 800ab76:	4613      	mov	r3, r2
 800ab78:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	789b      	ldrb	r3, [r3, #2]
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d11c      	bne.n	800abbc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ab82:	7afb      	ldrb	r3, [r7, #11]
 800ab84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ab88:	b2da      	uxtb	r2, r3
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2206      	movs	r2, #6
 800ab92:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	893a      	ldrh	r2, [r7, #8]
 800ab98:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ab9a:	893b      	ldrh	r3, [r7, #8]
 800ab9c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800aba0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aba4:	d104      	bne.n	800abb0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f240 4209 	movw	r2, #1033	@ 0x409
 800abac:	829a      	strh	r2, [r3, #20]
 800abae:	e002      	b.n	800abb6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2200      	movs	r2, #0
 800abb4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	8b3a      	ldrh	r2, [r7, #24]
 800abba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800abbc:	8b3b      	ldrh	r3, [r7, #24]
 800abbe:	461a      	mov	r2, r3
 800abc0:	6879      	ldr	r1, [r7, #4]
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f000 fba9 	bl	800b31a <USBH_CtlReq>
 800abc8:	4603      	mov	r3, r0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b082      	sub	sp, #8
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
 800abda:	460b      	mov	r3, r1
 800abdc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	789b      	ldrb	r3, [r3, #2]
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d10f      	bne.n	800ac06 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2205      	movs	r2, #5
 800abf0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800abf2:	78fb      	ldrb	r3, [r7, #3]
 800abf4:	b29a      	uxth	r2, r3
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2200      	movs	r2, #0
 800ac04:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ac06:	2200      	movs	r2, #0
 800ac08:	2100      	movs	r1, #0
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fb85 	bl	800b31a <USBH_CtlReq>
 800ac10:	4603      	mov	r3, r0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3708      	adds	r7, #8
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b082      	sub	sp, #8
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
 800ac22:	460b      	mov	r3, r1
 800ac24:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	789b      	ldrb	r3, [r3, #2]
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d10e      	bne.n	800ac4c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2209      	movs	r2, #9
 800ac38:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	887a      	ldrh	r2, [r7, #2]
 800ac3e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	2100      	movs	r1, #0
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 fb62 	bl	800b31a <USBH_CtlReq>
 800ac56:	4603      	mov	r3, r0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3708      	adds	r7, #8
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <USBH_SetInterface>:
  * @param  phost: Host Handle
  * @param  altSetting: Interface value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetInterface(USBH_HandleTypeDef *phost, uint8_t ep_num, uint8_t altSetting)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	460b      	mov	r3, r1
 800ac6a:	70fb      	strb	r3, [r7, #3]
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	789b      	ldrb	r3, [r3, #2]
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d110      	bne.n	800ac9a <USBH_SetInterface+0x3a>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	220b      	movs	r2, #11
 800ac82:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = altSetting;
 800ac84:	78bb      	ldrb	r3, [r7, #2]
 800ac86:	b29a      	uxth	r2, r3
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ac8c:	78fb      	ldrb	r3, [r7, #3]
 800ac8e:	b29a      	uxth	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 fb3b 	bl	800b31a <USBH_CtlReq>
 800aca4:	4603      	mov	r3, r0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b082      	sub	sp, #8
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
 800acb6:	460b      	mov	r3, r1
 800acb8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	789b      	ldrb	r3, [r3, #2]
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d10f      	bne.n	800ace2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2203      	movs	r2, #3
 800accc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800acce:	78fb      	ldrb	r3, [r7, #3]
 800acd0:	b29a      	uxth	r2, r3
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2200      	movs	r2, #0
 800acda:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ace2:	2200      	movs	r2, #0
 800ace4:	2100      	movs	r1, #0
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 fb17 	bl	800b31a <USBH_CtlReq>
 800acec:	4603      	mov	r3, r0
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3708      	adds	r7, #8
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
	...

0800acf8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b087      	sub	sp, #28
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	4613      	mov	r3, r2
 800ad04:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800ad0c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d101      	bne.n	800ad1c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800ad18:	2302      	movs	r3, #2
 800ad1a:	e094      	b.n	800ae46 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	781a      	ldrb	r2, [r3, #0]
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	785a      	ldrb	r2, [r3, #1]
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	3302      	adds	r3, #2
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	461a      	mov	r2, r3
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	3303      	adds	r3, #3
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	021b      	lsls	r3, r3, #8
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	b29a      	uxth	r2, r3
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	791a      	ldrb	r2, [r3, #4]
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	795a      	ldrb	r2, [r3, #5]
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	799a      	ldrb	r2, [r3, #6]
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	79da      	ldrb	r2, [r3, #7]
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d004      	beq.n	800ad7a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d11b      	bne.n	800adb2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	79db      	ldrb	r3, [r3, #7]
 800ad7e:	2b20      	cmp	r3, #32
 800ad80:	dc0f      	bgt.n	800ada2 <USBH_ParseDevDesc+0xaa>
 800ad82:	2b08      	cmp	r3, #8
 800ad84:	db0f      	blt.n	800ada6 <USBH_ParseDevDesc+0xae>
 800ad86:	3b08      	subs	r3, #8
 800ad88:	4a32      	ldr	r2, [pc, #200]	@ (800ae54 <USBH_ParseDevDesc+0x15c>)
 800ad8a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad8e:	f003 0301 	and.w	r3, r3, #1
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	bf14      	ite	ne
 800ad96:	2301      	movne	r3, #1
 800ad98:	2300      	moveq	r3, #0
 800ad9a:	b2db      	uxtb	r3, r3
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d106      	bne.n	800adae <USBH_ParseDevDesc+0xb6>
 800ada0:	e001      	b.n	800ada6 <USBH_ParseDevDesc+0xae>
 800ada2:	2b40      	cmp	r3, #64	@ 0x40
 800ada4:	d003      	beq.n	800adae <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	2208      	movs	r2, #8
 800adaa:	71da      	strb	r2, [r3, #7]
        break;
 800adac:	e000      	b.n	800adb0 <USBH_ParseDevDesc+0xb8>
        break;
 800adae:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800adb0:	e00e      	b.n	800add0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800adb8:	2b02      	cmp	r3, #2
 800adba:	d107      	bne.n	800adcc <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	79db      	ldrb	r3, [r3, #7]
 800adc0:	2b08      	cmp	r3, #8
 800adc2:	d005      	beq.n	800add0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	2208      	movs	r2, #8
 800adc8:	71da      	strb	r2, [r3, #7]
 800adca:	e001      	b.n	800add0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800adcc:	2303      	movs	r3, #3
 800adce:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800add0:	88fb      	ldrh	r3, [r7, #6]
 800add2:	2b08      	cmp	r3, #8
 800add4:	d936      	bls.n	800ae44 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	3308      	adds	r3, #8
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	461a      	mov	r2, r3
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	3309      	adds	r3, #9
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	021b      	lsls	r3, r3, #8
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	4313      	orrs	r3, r2
 800adea:	b29a      	uxth	r2, r3
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	330a      	adds	r3, #10
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	461a      	mov	r2, r3
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	330b      	adds	r3, #11
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	021b      	lsls	r3, r3, #8
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	4313      	orrs	r3, r2
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	330c      	adds	r3, #12
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	461a      	mov	r2, r3
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	330d      	adds	r3, #13
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	021b      	lsls	r3, r3, #8
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	b29a      	uxth	r2, r3
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	7b9a      	ldrb	r2, [r3, #14]
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	7bda      	ldrb	r2, [r3, #15]
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	7c1a      	ldrb	r2, [r3, #16]
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	7c5a      	ldrb	r2, [r3, #17]
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800ae44:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	371c      	adds	r7, #28
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	01000101 	.word	0x01000101

0800ae58 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b08c      	sub	sp, #48	@ 0x30
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	4613      	mov	r3, r2
 800ae64:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800ae6c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ae74:	2300      	movs	r3, #0
 800ae76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d101      	bne.n	800ae8a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800ae86:	2302      	movs	r3, #2
 800ae88:	e0da      	b.n	800b040 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	781a      	ldrb	r2, [r3, #0]
 800ae92:	6a3b      	ldr	r3, [r7, #32]
 800ae94:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	785a      	ldrb	r2, [r3, #1]
 800ae9a:	6a3b      	ldr	r3, [r7, #32]
 800ae9c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	3302      	adds	r3, #2
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	461a      	mov	r2, r3
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	3303      	adds	r3, #3
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	021b      	lsls	r3, r3, #8
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aeb8:	bf28      	it	cs
 800aeba:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800aebe:	b29a      	uxth	r2, r3
 800aec0:	6a3b      	ldr	r3, [r7, #32]
 800aec2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	791a      	ldrb	r2, [r3, #4]
 800aec8:	6a3b      	ldr	r3, [r7, #32]
 800aeca:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	795a      	ldrb	r2, [r3, #5]
 800aed0:	6a3b      	ldr	r3, [r7, #32]
 800aed2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	799a      	ldrb	r2, [r3, #6]
 800aed8:	6a3b      	ldr	r3, [r7, #32]
 800aeda:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	79da      	ldrb	r2, [r3, #7]
 800aee0:	6a3b      	ldr	r3, [r7, #32]
 800aee2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	7a1a      	ldrb	r2, [r3, #8]
 800aee8:	6a3b      	ldr	r3, [r7, #32]
 800aeea:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800aeec:	6a3b      	ldr	r3, [r7, #32]
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	2b09      	cmp	r3, #9
 800aef2:	d002      	beq.n	800aefa <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800aef4:	6a3b      	ldr	r3, [r7, #32]
 800aef6:	2209      	movs	r2, #9
 800aef8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800aefa:	88fb      	ldrh	r3, [r7, #6]
 800aefc:	2b09      	cmp	r3, #9
 800aefe:	f240 809d 	bls.w	800b03c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800af02:	2309      	movs	r3, #9
 800af04:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800af06:	2300      	movs	r3, #0
 800af08:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800af0a:	e081      	b.n	800b010 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800af0c:	f107 0316 	add.w	r3, r7, #22
 800af10:	4619      	mov	r1, r3
 800af12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af14:	f000 f9e7 	bl	800b2e6 <USBH_GetNextDesc>
 800af18:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800af1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af1c:	785b      	ldrb	r3, [r3, #1]
 800af1e:	2b04      	cmp	r3, #4
 800af20:	d176      	bne.n	800b010 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800af22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	2b09      	cmp	r3, #9
 800af28:	d002      	beq.n	800af30 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800af2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af2c:	2209      	movs	r2, #9
 800af2e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800af30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af34:	221a      	movs	r2, #26
 800af36:	fb02 f303 	mul.w	r3, r2, r3
 800af3a:	3308      	adds	r3, #8
 800af3c:	6a3a      	ldr	r2, [r7, #32]
 800af3e:	4413      	add	r3, r2
 800af40:	3302      	adds	r3, #2
 800af42:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800af44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af46:	69f8      	ldr	r0, [r7, #28]
 800af48:	f000 f87e 	bl	800b048 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800af4c:	2300      	movs	r3, #0
 800af4e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800af52:	2300      	movs	r3, #0
 800af54:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800af56:	e043      	b.n	800afe0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800af58:	f107 0316 	add.w	r3, r7, #22
 800af5c:	4619      	mov	r1, r3
 800af5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af60:	f000 f9c1 	bl	800b2e6 <USBH_GetNextDesc>
 800af64:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800af66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af68:	785b      	ldrb	r3, [r3, #1]
 800af6a:	2b05      	cmp	r3, #5
 800af6c:	d138      	bne.n	800afe0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	795b      	ldrb	r3, [r3, #5]
 800af72:	2b01      	cmp	r3, #1
 800af74:	d113      	bne.n	800af9e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800af76:	69fb      	ldr	r3, [r7, #28]
 800af78:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800af7a:	2b02      	cmp	r3, #2
 800af7c:	d003      	beq.n	800af86 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	799b      	ldrb	r3, [r3, #6]
 800af82:	2b03      	cmp	r3, #3
 800af84:	d10b      	bne.n	800af9e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800af86:	69fb      	ldr	r3, [r7, #28]
 800af88:	79db      	ldrb	r3, [r3, #7]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d10b      	bne.n	800afa6 <USBH_ParseCfgDesc+0x14e>
 800af8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	2b09      	cmp	r3, #9
 800af94:	d007      	beq.n	800afa6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800af96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af98:	2209      	movs	r2, #9
 800af9a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800af9c:	e003      	b.n	800afa6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800af9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa0:	2207      	movs	r2, #7
 800afa2:	701a      	strb	r2, [r3, #0]
 800afa4:	e000      	b.n	800afa8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800afa6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800afa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800afac:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800afb0:	3201      	adds	r2, #1
 800afb2:	00d2      	lsls	r2, r2, #3
 800afb4:	211a      	movs	r1, #26
 800afb6:	fb01 f303 	mul.w	r3, r1, r3
 800afba:	4413      	add	r3, r2
 800afbc:	3308      	adds	r3, #8
 800afbe:	6a3a      	ldr	r2, [r7, #32]
 800afc0:	4413      	add	r3, r2
 800afc2:	3304      	adds	r3, #4
 800afc4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800afc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afc8:	69b9      	ldr	r1, [r7, #24]
 800afca:	68f8      	ldr	r0, [r7, #12]
 800afcc:	f000 f870 	bl	800b0b0 <USBH_ParseEPDesc>
 800afd0:	4603      	mov	r3, r0
 800afd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800afd6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800afda:	3301      	adds	r3, #1
 800afdc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800afe0:	69fb      	ldr	r3, [r7, #28]
 800afe2:	791b      	ldrb	r3, [r3, #4]
 800afe4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800afe8:	429a      	cmp	r2, r3
 800afea:	d204      	bcs.n	800aff6 <USBH_ParseCfgDesc+0x19e>
 800afec:	6a3b      	ldr	r3, [r7, #32]
 800afee:	885a      	ldrh	r2, [r3, #2]
 800aff0:	8afb      	ldrh	r3, [r7, #22]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d8b0      	bhi.n	800af58 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	791b      	ldrb	r3, [r3, #4]
 800affa:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800affe:	429a      	cmp	r2, r3
 800b000:	d201      	bcs.n	800b006 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800b002:	2303      	movs	r3, #3
 800b004:	e01c      	b.n	800b040 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800b006:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b00a:	3301      	adds	r3, #1
 800b00c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b010:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b014:	2b09      	cmp	r3, #9
 800b016:	d805      	bhi.n	800b024 <USBH_ParseCfgDesc+0x1cc>
 800b018:	6a3b      	ldr	r3, [r7, #32]
 800b01a:	885a      	ldrh	r2, [r3, #2]
 800b01c:	8afb      	ldrh	r3, [r7, #22]
 800b01e:	429a      	cmp	r2, r3
 800b020:	f63f af74 	bhi.w	800af0c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b024:	6a3b      	ldr	r3, [r7, #32]
 800b026:	791b      	ldrb	r3, [r3, #4]
 800b028:	2b0a      	cmp	r3, #10
 800b02a:	bf28      	it	cs
 800b02c:	230a      	movcs	r3, #10
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b034:	429a      	cmp	r2, r3
 800b036:	d201      	bcs.n	800b03c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800b038:	2303      	movs	r3, #3
 800b03a:	e001      	b.n	800b040 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800b03c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b040:	4618      	mov	r0, r3
 800b042:	3730      	adds	r7, #48	@ 0x30
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800b048:	b480      	push	{r7}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	781a      	ldrb	r2, [r3, #0]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	785a      	ldrb	r2, [r3, #1]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	789a      	ldrb	r2, [r3, #2]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	78da      	ldrb	r2, [r3, #3]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	3304      	adds	r3, #4
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	2b02      	cmp	r3, #2
 800b07a:	bf28      	it	cs
 800b07c:	2302      	movcs	r3, #2
 800b07e:	b2da      	uxtb	r2, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	795a      	ldrb	r2, [r3, #5]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	799a      	ldrb	r2, [r3, #6]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	79da      	ldrb	r2, [r3, #7]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	7a1a      	ldrb	r2, [r3, #8]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	721a      	strb	r2, [r3, #8]
}
 800b0a4:	bf00      	nop
 800b0a6:	370c      	adds	r7, #12
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b087      	sub	sp, #28
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	781a      	ldrb	r2, [r3, #0]
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	785a      	ldrb	r2, [r3, #1]
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	789a      	ldrb	r2, [r3, #2]
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	78da      	ldrb	r2, [r3, #3]
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	3304      	adds	r3, #4
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	3305      	adds	r3, #5
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	021b      	lsls	r3, r3, #8
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	b29a      	uxth	r2, r3
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	799a      	ldrb	r2, [r3, #6]
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	889b      	ldrh	r3, [r3, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d009      	beq.n	800b11e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b10e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b112:	d804      	bhi.n	800b11e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b11c:	d901      	bls.n	800b122 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800b11e:	2303      	movs	r3, #3
 800b120:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d136      	bne.n	800b19a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	78db      	ldrb	r3, [r3, #3]
 800b130:	f003 0303 	and.w	r3, r3, #3
 800b134:	2b02      	cmp	r3, #2
 800b136:	d108      	bne.n	800b14a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	889b      	ldrh	r3, [r3, #4]
 800b13c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b140:	f240 8097 	bls.w	800b272 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b144:	2303      	movs	r3, #3
 800b146:	75fb      	strb	r3, [r7, #23]
 800b148:	e093      	b.n	800b272 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	78db      	ldrb	r3, [r3, #3]
 800b14e:	f003 0303 	and.w	r3, r3, #3
 800b152:	2b00      	cmp	r3, #0
 800b154:	d107      	bne.n	800b166 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	889b      	ldrh	r3, [r3, #4]
 800b15a:	2b40      	cmp	r3, #64	@ 0x40
 800b15c:	f240 8089 	bls.w	800b272 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b160:	2303      	movs	r3, #3
 800b162:	75fb      	strb	r3, [r7, #23]
 800b164:	e085      	b.n	800b272 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	78db      	ldrb	r3, [r3, #3]
 800b16a:	f003 0303 	and.w	r3, r3, #3
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d005      	beq.n	800b17e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	78db      	ldrb	r3, [r3, #3]
 800b176:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b17a:	2b03      	cmp	r3, #3
 800b17c:	d10a      	bne.n	800b194 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	799b      	ldrb	r3, [r3, #6]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d003      	beq.n	800b18e <USBH_ParseEPDesc+0xde>
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	799b      	ldrb	r3, [r3, #6]
 800b18a:	2b10      	cmp	r3, #16
 800b18c:	d970      	bls.n	800b270 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800b18e:	2303      	movs	r3, #3
 800b190:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b192:	e06d      	b.n	800b270 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b194:	2303      	movs	r3, #3
 800b196:	75fb      	strb	r3, [r7, #23]
 800b198:	e06b      	b.n	800b272 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d13c      	bne.n	800b21e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	78db      	ldrb	r3, [r3, #3]
 800b1a8:	f003 0303 	and.w	r3, r3, #3
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	d005      	beq.n	800b1bc <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	78db      	ldrb	r3, [r3, #3]
 800b1b4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d106      	bne.n	800b1ca <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	889b      	ldrh	r3, [r3, #4]
 800b1c0:	2b40      	cmp	r3, #64	@ 0x40
 800b1c2:	d956      	bls.n	800b272 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b1c4:	2303      	movs	r3, #3
 800b1c6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b1c8:	e053      	b.n	800b272 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	78db      	ldrb	r3, [r3, #3]
 800b1ce:	f003 0303 	and.w	r3, r3, #3
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d10e      	bne.n	800b1f4 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	799b      	ldrb	r3, [r3, #6]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d007      	beq.n	800b1ee <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800b1e2:	2b10      	cmp	r3, #16
 800b1e4:	d803      	bhi.n	800b1ee <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800b1ea:	2b40      	cmp	r3, #64	@ 0x40
 800b1ec:	d941      	bls.n	800b272 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b1ee:	2303      	movs	r3, #3
 800b1f0:	75fb      	strb	r3, [r7, #23]
 800b1f2:	e03e      	b.n	800b272 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	78db      	ldrb	r3, [r3, #3]
 800b1f8:	f003 0303 	and.w	r3, r3, #3
 800b1fc:	2b03      	cmp	r3, #3
 800b1fe:	d10b      	bne.n	800b218 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	799b      	ldrb	r3, [r3, #6]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d004      	beq.n	800b212 <USBH_ParseEPDesc+0x162>
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	889b      	ldrh	r3, [r3, #4]
 800b20c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b210:	d32f      	bcc.n	800b272 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b212:	2303      	movs	r3, #3
 800b214:	75fb      	strb	r3, [r7, #23]
 800b216:	e02c      	b.n	800b272 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b218:	2303      	movs	r3, #3
 800b21a:	75fb      	strb	r3, [r7, #23]
 800b21c:	e029      	b.n	800b272 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b224:	2b02      	cmp	r3, #2
 800b226:	d120      	bne.n	800b26a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	78db      	ldrb	r3, [r3, #3]
 800b22c:	f003 0303 	and.w	r3, r3, #3
 800b230:	2b00      	cmp	r3, #0
 800b232:	d106      	bne.n	800b242 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	889b      	ldrh	r3, [r3, #4]
 800b238:	2b08      	cmp	r3, #8
 800b23a:	d01a      	beq.n	800b272 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b23c:	2303      	movs	r3, #3
 800b23e:	75fb      	strb	r3, [r7, #23]
 800b240:	e017      	b.n	800b272 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	78db      	ldrb	r3, [r3, #3]
 800b246:	f003 0303 	and.w	r3, r3, #3
 800b24a:	2b03      	cmp	r3, #3
 800b24c:	d10a      	bne.n	800b264 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	799b      	ldrb	r3, [r3, #6]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d003      	beq.n	800b25e <USBH_ParseEPDesc+0x1ae>
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	889b      	ldrh	r3, [r3, #4]
 800b25a:	2b08      	cmp	r3, #8
 800b25c:	d909      	bls.n	800b272 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b25e:	2303      	movs	r3, #3
 800b260:	75fb      	strb	r3, [r7, #23]
 800b262:	e006      	b.n	800b272 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b264:	2303      	movs	r3, #3
 800b266:	75fb      	strb	r3, [r7, #23]
 800b268:	e003      	b.n	800b272 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b26a:	2303      	movs	r3, #3
 800b26c:	75fb      	strb	r3, [r7, #23]
 800b26e:	e000      	b.n	800b272 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b270:	bf00      	nop
  }

  return status;
 800b272:	7dfb      	ldrb	r3, [r7, #23]
}
 800b274:	4618      	mov	r0, r3
 800b276:	371c      	adds	r7, #28
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b280:	b480      	push	{r7}
 800b282:	b087      	sub	sp, #28
 800b284:	af00      	add	r7, sp, #0
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	60b9      	str	r1, [r7, #8]
 800b28a:	4613      	mov	r3, r2
 800b28c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	3301      	adds	r3, #1
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	2b03      	cmp	r3, #3
 800b296:	d120      	bne.n	800b2da <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	1e9a      	subs	r2, r3, #2
 800b29e:	88fb      	ldrh	r3, [r7, #6]
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	bf28      	it	cs
 800b2a4:	4613      	movcs	r3, r2
 800b2a6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	3302      	adds	r3, #2
 800b2ac:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	82fb      	strh	r3, [r7, #22]
 800b2b2:	e00b      	b.n	800b2cc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b2b4:	8afb      	ldrh	r3, [r7, #22]
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	781a      	ldrb	r2, [r3, #0]
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b2c6:	8afb      	ldrh	r3, [r7, #22]
 800b2c8:	3302      	adds	r3, #2
 800b2ca:	82fb      	strh	r3, [r7, #22]
 800b2cc:	8afa      	ldrh	r2, [r7, #22]
 800b2ce:	8abb      	ldrh	r3, [r7, #20]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d3ef      	bcc.n	800b2b4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	701a      	strb	r2, [r3, #0]
  }
}
 800b2da:	bf00      	nop
 800b2dc:	371c      	adds	r7, #28
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr

0800b2e6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b2e6:	b480      	push	{r7}
 800b2e8:	b085      	sub	sp, #20
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
 800b2ee:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	881b      	ldrh	r3, [r3, #0]
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	7812      	ldrb	r2, [r2, #0]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	b29a      	uxth	r2, r3
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	4413      	add	r3, r2
 800b30a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b30c:	68fb      	ldr	r3, [r7, #12]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3714      	adds	r7, #20
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b086      	sub	sp, #24
 800b31e:	af00      	add	r7, sp, #0
 800b320:	60f8      	str	r0, [r7, #12]
 800b322:	60b9      	str	r1, [r7, #8]
 800b324:	4613      	mov	r3, r2
 800b326:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b328:	2301      	movs	r3, #1
 800b32a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	789b      	ldrb	r3, [r3, #2]
 800b330:	2b01      	cmp	r3, #1
 800b332:	d002      	beq.n	800b33a <USBH_CtlReq+0x20>
 800b334:	2b02      	cmp	r3, #2
 800b336:	d00f      	beq.n	800b358 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b338:	e027      	b.n	800b38a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	88fa      	ldrh	r2, [r7, #6]
 800b344:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2201      	movs	r2, #1
 800b34a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2202      	movs	r2, #2
 800b350:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b352:	2301      	movs	r3, #1
 800b354:	75fb      	strb	r3, [r7, #23]
      break;
 800b356:	e018      	b.n	800b38a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b358:	68f8      	ldr	r0, [r7, #12]
 800b35a:	f000 f81b 	bl	800b394 <USBH_HandleControl>
 800b35e:	4603      	mov	r3, r0
 800b360:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b362:	7dfb      	ldrb	r3, [r7, #23]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d002      	beq.n	800b36e <USBH_CtlReq+0x54>
 800b368:	7dfb      	ldrb	r3, [r7, #23]
 800b36a:	2b03      	cmp	r3, #3
 800b36c:	d106      	bne.n	800b37c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2201      	movs	r2, #1
 800b372:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2200      	movs	r2, #0
 800b378:	761a      	strb	r2, [r3, #24]
      break;
 800b37a:	e005      	b.n	800b388 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b37c:	7dfb      	ldrb	r3, [r7, #23]
 800b37e:	2b02      	cmp	r3, #2
 800b380:	d102      	bne.n	800b388 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2201      	movs	r2, #1
 800b386:	709a      	strb	r2, [r3, #2]
      break;
 800b388:	bf00      	nop
  }
  return status;
 800b38a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3718      	adds	r7, #24
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b086      	sub	sp, #24
 800b398:	af02      	add	r7, sp, #8
 800b39a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b39c:	2301      	movs	r3, #1
 800b39e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	7e1b      	ldrb	r3, [r3, #24]
 800b3a8:	3b01      	subs	r3, #1
 800b3aa:	2b0a      	cmp	r3, #10
 800b3ac:	f200 8156 	bhi.w	800b65c <USBH_HandleControl+0x2c8>
 800b3b0:	a201      	add	r2, pc, #4	@ (adr r2, 800b3b8 <USBH_HandleControl+0x24>)
 800b3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b6:	bf00      	nop
 800b3b8:	0800b3e5 	.word	0x0800b3e5
 800b3bc:	0800b3ff 	.word	0x0800b3ff
 800b3c0:	0800b469 	.word	0x0800b469
 800b3c4:	0800b48f 	.word	0x0800b48f
 800b3c8:	0800b4c7 	.word	0x0800b4c7
 800b3cc:	0800b4f1 	.word	0x0800b4f1
 800b3d0:	0800b543 	.word	0x0800b543
 800b3d4:	0800b565 	.word	0x0800b565
 800b3d8:	0800b5a1 	.word	0x0800b5a1
 800b3dc:	0800b5c7 	.word	0x0800b5c7
 800b3e0:	0800b605 	.word	0x0800b605
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f103 0110 	add.w	r1, r3, #16
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	795b      	ldrb	r3, [r3, #5]
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 f943 	bl	800b67c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2202      	movs	r2, #2
 800b3fa:	761a      	strb	r2, [r3, #24]
      break;
 800b3fc:	e139      	b.n	800b672 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	795b      	ldrb	r3, [r3, #5]
 800b402:	4619      	mov	r1, r3
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 fcde 	bl	800bdc6 <USBH_LL_GetURBState>
 800b40a:	4603      	mov	r3, r0
 800b40c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b40e:	7bbb      	ldrb	r3, [r7, #14]
 800b410:	2b01      	cmp	r3, #1
 800b412:	d11e      	bne.n	800b452 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	7c1b      	ldrb	r3, [r3, #16]
 800b418:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b41c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	8adb      	ldrh	r3, [r3, #22]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d00a      	beq.n	800b43c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b426:	7b7b      	ldrb	r3, [r7, #13]
 800b428:	2b80      	cmp	r3, #128	@ 0x80
 800b42a:	d103      	bne.n	800b434 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2203      	movs	r2, #3
 800b430:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b432:	e115      	b.n	800b660 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2205      	movs	r2, #5
 800b438:	761a      	strb	r2, [r3, #24]
      break;
 800b43a:	e111      	b.n	800b660 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b43c:	7b7b      	ldrb	r3, [r7, #13]
 800b43e:	2b80      	cmp	r3, #128	@ 0x80
 800b440:	d103      	bne.n	800b44a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2209      	movs	r2, #9
 800b446:	761a      	strb	r2, [r3, #24]
      break;
 800b448:	e10a      	b.n	800b660 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2207      	movs	r2, #7
 800b44e:	761a      	strb	r2, [r3, #24]
      break;
 800b450:	e106      	b.n	800b660 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b452:	7bbb      	ldrb	r3, [r7, #14]
 800b454:	2b04      	cmp	r3, #4
 800b456:	d003      	beq.n	800b460 <USBH_HandleControl+0xcc>
 800b458:	7bbb      	ldrb	r3, [r7, #14]
 800b45a:	2b02      	cmp	r3, #2
 800b45c:	f040 8100 	bne.w	800b660 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	220b      	movs	r2, #11
 800b464:	761a      	strb	r2, [r3, #24]
      break;
 800b466:	e0fb      	b.n	800b660 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800b46e:	b29a      	uxth	r2, r3
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6899      	ldr	r1, [r3, #8]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	899a      	ldrh	r2, [r3, #12]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	791b      	ldrb	r3, [r3, #4]
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 f93a 	bl	800b6fa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2204      	movs	r2, #4
 800b48a:	761a      	strb	r2, [r3, #24]
      break;
 800b48c:	e0f1      	b.n	800b672 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	791b      	ldrb	r3, [r3, #4]
 800b492:	4619      	mov	r1, r3
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 fc96 	bl	800bdc6 <USBH_LL_GetURBState>
 800b49a:	4603      	mov	r3, r0
 800b49c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b49e:	7bbb      	ldrb	r3, [r7, #14]
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d102      	bne.n	800b4aa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2209      	movs	r2, #9
 800b4a8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b4aa:	7bbb      	ldrb	r3, [r7, #14]
 800b4ac:	2b05      	cmp	r3, #5
 800b4ae:	d102      	bne.n	800b4b6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b4b0:	2303      	movs	r3, #3
 800b4b2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b4b4:	e0d6      	b.n	800b664 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b4b6:	7bbb      	ldrb	r3, [r7, #14]
 800b4b8:	2b04      	cmp	r3, #4
 800b4ba:	f040 80d3 	bne.w	800b664 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	220b      	movs	r2, #11
 800b4c2:	761a      	strb	r2, [r3, #24]
      break;
 800b4c4:	e0ce      	b.n	800b664 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6899      	ldr	r1, [r3, #8]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	899a      	ldrh	r2, [r3, #12]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	795b      	ldrb	r3, [r3, #5]
 800b4d2:	2001      	movs	r0, #1
 800b4d4:	9000      	str	r0, [sp, #0]
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 f8ea 	bl	800b6b0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800b4e2:	b29a      	uxth	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2206      	movs	r2, #6
 800b4ec:	761a      	strb	r2, [r3, #24]
      break;
 800b4ee:	e0c0      	b.n	800b672 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	795b      	ldrb	r3, [r3, #5]
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 fc65 	bl	800bdc6 <USBH_LL_GetURBState>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b500:	7bbb      	ldrb	r3, [r7, #14]
 800b502:	2b01      	cmp	r3, #1
 800b504:	d103      	bne.n	800b50e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2207      	movs	r2, #7
 800b50a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b50c:	e0ac      	b.n	800b668 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b50e:	7bbb      	ldrb	r3, [r7, #14]
 800b510:	2b05      	cmp	r3, #5
 800b512:	d105      	bne.n	800b520 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	220c      	movs	r2, #12
 800b518:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b51a:	2303      	movs	r3, #3
 800b51c:	73fb      	strb	r3, [r7, #15]
      break;
 800b51e:	e0a3      	b.n	800b668 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b520:	7bbb      	ldrb	r3, [r7, #14]
 800b522:	2b02      	cmp	r3, #2
 800b524:	d103      	bne.n	800b52e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2205      	movs	r2, #5
 800b52a:	761a      	strb	r2, [r3, #24]
      break;
 800b52c:	e09c      	b.n	800b668 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b52e:	7bbb      	ldrb	r3, [r7, #14]
 800b530:	2b04      	cmp	r3, #4
 800b532:	f040 8099 	bne.w	800b668 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	220b      	movs	r2, #11
 800b53a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b53c:	2302      	movs	r3, #2
 800b53e:	73fb      	strb	r3, [r7, #15]
      break;
 800b540:	e092      	b.n	800b668 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	791b      	ldrb	r3, [r3, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	2100      	movs	r1, #0
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 f8d5 	bl	800b6fa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800b556:	b29a      	uxth	r2, r3
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2208      	movs	r2, #8
 800b560:	761a      	strb	r2, [r3, #24]

      break;
 800b562:	e086      	b.n	800b672 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	791b      	ldrb	r3, [r3, #4]
 800b568:	4619      	mov	r1, r3
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 fc2b 	bl	800bdc6 <USBH_LL_GetURBState>
 800b570:	4603      	mov	r3, r0
 800b572:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b574:	7bbb      	ldrb	r3, [r7, #14]
 800b576:	2b01      	cmp	r3, #1
 800b578:	d105      	bne.n	800b586 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	220d      	movs	r2, #13
 800b57e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b580:	2300      	movs	r3, #0
 800b582:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b584:	e072      	b.n	800b66c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b586:	7bbb      	ldrb	r3, [r7, #14]
 800b588:	2b04      	cmp	r3, #4
 800b58a:	d103      	bne.n	800b594 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	220b      	movs	r2, #11
 800b590:	761a      	strb	r2, [r3, #24]
      break;
 800b592:	e06b      	b.n	800b66c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b594:	7bbb      	ldrb	r3, [r7, #14]
 800b596:	2b05      	cmp	r3, #5
 800b598:	d168      	bne.n	800b66c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b59a:	2303      	movs	r3, #3
 800b59c:	73fb      	strb	r3, [r7, #15]
      break;
 800b59e:	e065      	b.n	800b66c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	795b      	ldrb	r3, [r3, #5]
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	9200      	str	r2, [sp, #0]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 f87f 	bl	800b6b0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800b5b8:	b29a      	uxth	r2, r3
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	220a      	movs	r2, #10
 800b5c2:	761a      	strb	r2, [r3, #24]
      break;
 800b5c4:	e055      	b.n	800b672 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	795b      	ldrb	r3, [r3, #5]
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 fbfa 	bl	800bdc6 <USBH_LL_GetURBState>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b5d6:	7bbb      	ldrb	r3, [r7, #14]
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d105      	bne.n	800b5e8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	220d      	movs	r2, #13
 800b5e4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b5e6:	e043      	b.n	800b670 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b5e8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ea:	2b02      	cmp	r3, #2
 800b5ec:	d103      	bne.n	800b5f6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2209      	movs	r2, #9
 800b5f2:	761a      	strb	r2, [r3, #24]
      break;
 800b5f4:	e03c      	b.n	800b670 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b5f6:	7bbb      	ldrb	r3, [r7, #14]
 800b5f8:	2b04      	cmp	r3, #4
 800b5fa:	d139      	bne.n	800b670 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	220b      	movs	r2, #11
 800b600:	761a      	strb	r2, [r3, #24]
      break;
 800b602:	e035      	b.n	800b670 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	7e5b      	ldrb	r3, [r3, #25]
 800b608:	3301      	adds	r3, #1
 800b60a:	b2da      	uxtb	r2, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	765a      	strb	r2, [r3, #25]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	7e5b      	ldrb	r3, [r3, #25]
 800b614:	2b02      	cmp	r3, #2
 800b616:	d806      	bhi.n	800b626 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2201      	movs	r2, #1
 800b61c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2201      	movs	r2, #1
 800b622:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b624:	e025      	b.n	800b672 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 800b62c:	2106      	movs	r1, #6
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	795b      	ldrb	r3, [r3, #5]
 800b63c:	4619      	mov	r1, r3
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 f904 	bl	800b84c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	791b      	ldrb	r3, [r3, #4]
 800b648:	4619      	mov	r1, r3
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 f8fe 	bl	800b84c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b656:	2302      	movs	r3, #2
 800b658:	73fb      	strb	r3, [r7, #15]
      break;
 800b65a:	e00a      	b.n	800b672 <USBH_HandleControl+0x2de>

    default:
      break;
 800b65c:	bf00      	nop
 800b65e:	e008      	b.n	800b672 <USBH_HandleControl+0x2de>
      break;
 800b660:	bf00      	nop
 800b662:	e006      	b.n	800b672 <USBH_HandleControl+0x2de>
      break;
 800b664:	bf00      	nop
 800b666:	e004      	b.n	800b672 <USBH_HandleControl+0x2de>
      break;
 800b668:	bf00      	nop
 800b66a:	e002      	b.n	800b672 <USBH_HandleControl+0x2de>
      break;
 800b66c:	bf00      	nop
 800b66e:	e000      	b.n	800b672 <USBH_HandleControl+0x2de>
      break;
 800b670:	bf00      	nop
  }

  return status;
 800b672:	7bfb      	ldrb	r3, [r7, #15]
}
 800b674:	4618      	mov	r0, r3
 800b676:	3710      	adds	r7, #16
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b088      	sub	sp, #32
 800b680:	af04      	add	r7, sp, #16
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	4613      	mov	r3, r2
 800b688:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b68a:	79f9      	ldrb	r1, [r7, #7]
 800b68c:	2300      	movs	r3, #0
 800b68e:	9303      	str	r3, [sp, #12]
 800b690:	2308      	movs	r3, #8
 800b692:	9302      	str	r3, [sp, #8]
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	9301      	str	r3, [sp, #4]
 800b698:	2300      	movs	r3, #0
 800b69a:	9300      	str	r3, [sp, #0]
 800b69c:	2300      	movs	r3, #0
 800b69e:	2200      	movs	r2, #0
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f000 fb5f 	bl	800bd64 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b6a6:	2300      	movs	r3, #0
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3710      	adds	r7, #16
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b088      	sub	sp, #32
 800b6b4:	af04      	add	r7, sp, #16
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	4611      	mov	r1, r2
 800b6bc:	461a      	mov	r2, r3
 800b6be:	460b      	mov	r3, r1
 800b6c0:	80fb      	strh	r3, [r7, #6]
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d001      	beq.n	800b6d4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b6d4:	7979      	ldrb	r1, [r7, #5]
 800b6d6:	7e3b      	ldrb	r3, [r7, #24]
 800b6d8:	9303      	str	r3, [sp, #12]
 800b6da:	88fb      	ldrh	r3, [r7, #6]
 800b6dc:	9302      	str	r3, [sp, #8]
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	9301      	str	r3, [sp, #4]
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	9300      	str	r3, [sp, #0]
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	68f8      	ldr	r0, [r7, #12]
 800b6ec:	f000 fb3a 	bl	800bd64 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b6f0:	2300      	movs	r3, #0
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b088      	sub	sp, #32
 800b6fe:	af04      	add	r7, sp, #16
 800b700:	60f8      	str	r0, [r7, #12]
 800b702:	60b9      	str	r1, [r7, #8]
 800b704:	4611      	mov	r1, r2
 800b706:	461a      	mov	r2, r3
 800b708:	460b      	mov	r3, r1
 800b70a:	80fb      	strh	r3, [r7, #6]
 800b70c:	4613      	mov	r3, r2
 800b70e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b710:	7979      	ldrb	r1, [r7, #5]
 800b712:	2300      	movs	r3, #0
 800b714:	9303      	str	r3, [sp, #12]
 800b716:	88fb      	ldrh	r3, [r7, #6]
 800b718:	9302      	str	r3, [sp, #8]
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	9301      	str	r3, [sp, #4]
 800b71e:	2301      	movs	r3, #1
 800b720:	9300      	str	r3, [sp, #0]
 800b722:	2300      	movs	r3, #0
 800b724:	2201      	movs	r2, #1
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f000 fb1c 	bl	800bd64 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b72c:	2300      	movs	r3, #0

}
 800b72e:	4618      	mov	r0, r3
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b088      	sub	sp, #32
 800b73a:	af04      	add	r7, sp, #16
 800b73c:	60f8      	str	r0, [r7, #12]
 800b73e:	60b9      	str	r1, [r7, #8]
 800b740:	4611      	mov	r1, r2
 800b742:	461a      	mov	r2, r3
 800b744:	460b      	mov	r3, r1
 800b746:	71fb      	strb	r3, [r7, #7]
 800b748:	4613      	mov	r3, r2
 800b74a:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b74c:	79fb      	ldrb	r3, [r7, #7]
 800b74e:	b29b      	uxth	r3, r3
 800b750:	79b9      	ldrb	r1, [r7, #6]
 800b752:	2200      	movs	r2, #0
 800b754:	9203      	str	r2, [sp, #12]
 800b756:	9302      	str	r3, [sp, #8]
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	9301      	str	r3, [sp, #4]
 800b75c:	2301      	movs	r3, #1
 800b75e:	9300      	str	r3, [sp, #0]
 800b760:	2303      	movs	r3, #3
 800b762:	2201      	movs	r2, #1
 800b764:	68f8      	ldr	r0, [r7, #12]
 800b766:	f000 fafd 	bl	800bd64 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800b76a:	2300      	movs	r3, #0
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3710      	adds	r7, #16
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint32_t length,
                                     uint8_t pipe_num)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b088      	sub	sp, #32
 800b778:	af04      	add	r7, sp, #16
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	607a      	str	r2, [r7, #4]
 800b780:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	b29b      	uxth	r3, r3
 800b786:	78f9      	ldrb	r1, [r7, #3]
 800b788:	2200      	movs	r2, #0
 800b78a:	9203      	str	r2, [sp, #12]
 800b78c:	9302      	str	r3, [sp, #8]
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	9301      	str	r3, [sp, #4]
 800b792:	2301      	movs	r3, #1
 800b794:	9300      	str	r3, [sp, #0]
 800b796:	2301      	movs	r3, #1
 800b798:	2200      	movs	r2, #0
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f000 fae2 	bl	800bd64 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b086      	sub	sp, #24
 800b7ae:	af04      	add	r7, sp, #16
 800b7b0:	6078      	str	r0, [r7, #4]
 800b7b2:	4608      	mov	r0, r1
 800b7b4:	4611      	mov	r1, r2
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	70fb      	strb	r3, [r7, #3]
 800b7bc:	460b      	mov	r3, r1
 800b7be:	70bb      	strb	r3, [r7, #2]
 800b7c0:	4613      	mov	r3, r2
 800b7c2:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b7c4:	7878      	ldrb	r0, [r7, #1]
 800b7c6:	78ba      	ldrb	r2, [r7, #2]
 800b7c8:	78f9      	ldrb	r1, [r7, #3]
 800b7ca:	8b3b      	ldrh	r3, [r7, #24]
 800b7cc:	9302      	str	r3, [sp, #8]
 800b7ce:	7d3b      	ldrb	r3, [r7, #20]
 800b7d0:	9301      	str	r3, [sp, #4]
 800b7d2:	7c3b      	ldrb	r3, [r7, #16]
 800b7d4:	9300      	str	r3, [sp, #0]
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 fa75 	bl	800bcc8 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b7de:	2300      	movs	r3, #0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3708      	adds	r7, #8
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b7f4:	78fb      	ldrb	r3, [r7, #3]
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f000 fa94 	bl	800bd26 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b7fe:	2300      	movs	r3, #0
}
 800b800:	4618      	mov	r0, r3
 800b802:	3708      	adds	r7, #8
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	460b      	mov	r3, r1
 800b812:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 f839 	bl	800b88c <USBH_GetFreePipe>
 800b81a:	4603      	mov	r3, r0
 800b81c:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b81e:	89fb      	ldrh	r3, [r7, #14]
 800b820:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b824:	4293      	cmp	r3, r2
 800b826:	d00b      	beq.n	800b840 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b828:	78fa      	ldrb	r2, [r7, #3]
 800b82a:	89fb      	ldrh	r3, [r7, #14]
 800b82c:	f003 030f 	and.w	r3, r3, #15
 800b830:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b834:	6879      	ldr	r1, [r7, #4]
 800b836:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	440b      	add	r3, r1
 800b83e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b840:	89fb      	ldrh	r3, [r7, #14]
 800b842:	b2db      	uxtb	r3, r3
}
 800b844:	4618      	mov	r0, r3
 800b846:	3710      	adds	r7, #16
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b083      	sub	sp, #12
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	460b      	mov	r3, r1
 800b856:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b858:	78fb      	ldrb	r3, [r7, #3]
 800b85a:	2b0f      	cmp	r3, #15
 800b85c:	d80f      	bhi.n	800b87e <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b85e:	78fb      	ldrb	r3, [r7, #3]
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	4413      	add	r3, r2
 800b86a:	685a      	ldr	r2, [r3, #4]
 800b86c:	78fb      	ldrb	r3, [r7, #3]
 800b86e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b872:	6879      	ldr	r1, [r7, #4]
 800b874:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	440b      	add	r3, r1
 800b87c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b085      	sub	sp, #20
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b894:	2300      	movs	r3, #0
 800b896:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b898:	2300      	movs	r3, #0
 800b89a:	73fb      	strb	r3, [r7, #15]
 800b89c:	e010      	b.n	800b8c0 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b89e:	7bfb      	ldrb	r3, [r7, #15]
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	4413      	add	r3, r2
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d102      	bne.n	800b8ba <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 800b8b4:	7bfb      	ldrb	r3, [r7, #15]
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	e007      	b.n	800b8ca <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b8ba:	7bfb      	ldrb	r3, [r7, #15]
 800b8bc:	3301      	adds	r3, #1
 800b8be:	73fb      	strb	r3, [r7, #15]
 800b8c0:	7bfb      	ldrb	r3, [r7, #15]
 800b8c2:	2b0f      	cmp	r3, #15
 800b8c4:	d9eb      	bls.n	800b89e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b8c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3714      	adds	r7, #20
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr
	...

0800b8d8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b8dc:	2201      	movs	r2, #1
 800b8de:	490e      	ldr	r1, [pc, #56]	@ (800b918 <MX_USB_HOST_Init+0x40>)
 800b8e0:	480e      	ldr	r0, [pc, #56]	@ (800b91c <MX_USB_HOST_Init+0x44>)
 800b8e2:	f7fe fafa 	bl	8009eda <USBH_Init>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d001      	beq.n	800b8f0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b8ec:	f7f5 fd4a 	bl	8001384 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_AUDIO_CLASS) != USBH_OK)
 800b8f0:	490b      	ldr	r1, [pc, #44]	@ (800b920 <MX_USB_HOST_Init+0x48>)
 800b8f2:	480a      	ldr	r0, [pc, #40]	@ (800b91c <MX_USB_HOST_Init+0x44>)
 800b8f4:	f7fe fba0 	bl	800a038 <USBH_RegisterClass>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d001      	beq.n	800b902 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b8fe:	f7f5 fd41 	bl	8001384 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b902:	4806      	ldr	r0, [pc, #24]	@ (800b91c <MX_USB_HOST_Init+0x44>)
 800b904:	f7fe fc3c 	bl	800a180 <USBH_Start>
 800b908:	4603      	mov	r3, r0
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d001      	beq.n	800b912 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b90e:	f7f5 fd39 	bl	8001384 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b912:	bf00      	nop
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	0800b939 	.word	0x0800b939
 800b91c:	2000025c 	.word	0x2000025c
 800b920:	2000001c 	.word	0x2000001c

0800b924 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b928:	4802      	ldr	r0, [pc, #8]	@ (800b934 <MX_USB_HOST_Process+0x10>)
 800b92a:	f7fe fc39 	bl	800a1a0 <USBH_Process>
}
 800b92e:	bf00      	nop
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	2000025c 	.word	0x2000025c

0800b938 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b938:	b480      	push	{r7}
 800b93a:	b083      	sub	sp, #12
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	460b      	mov	r3, r1
 800b942:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b944:	78fb      	ldrb	r3, [r7, #3]
 800b946:	3b01      	subs	r3, #1
 800b948:	2b04      	cmp	r3, #4
 800b94a:	d819      	bhi.n	800b980 <USBH_UserProcess+0x48>
 800b94c:	a201      	add	r2, pc, #4	@ (adr r2, 800b954 <USBH_UserProcess+0x1c>)
 800b94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b952:	bf00      	nop
 800b954:	0800b981 	.word	0x0800b981
 800b958:	0800b971 	.word	0x0800b971
 800b95c:	0800b981 	.word	0x0800b981
 800b960:	0800b979 	.word	0x0800b979
 800b964:	0800b969 	.word	0x0800b969
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b968:	4b09      	ldr	r3, [pc, #36]	@ (800b990 <USBH_UserProcess+0x58>)
 800b96a:	2203      	movs	r2, #3
 800b96c:	701a      	strb	r2, [r3, #0]
  break;
 800b96e:	e008      	b.n	800b982 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b970:	4b07      	ldr	r3, [pc, #28]	@ (800b990 <USBH_UserProcess+0x58>)
 800b972:	2202      	movs	r2, #2
 800b974:	701a      	strb	r2, [r3, #0]
  break;
 800b976:	e004      	b.n	800b982 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b978:	4b05      	ldr	r3, [pc, #20]	@ (800b990 <USBH_UserProcess+0x58>)
 800b97a:	2201      	movs	r2, #1
 800b97c:	701a      	strb	r2, [r3, #0]
  break;
 800b97e:	e000      	b.n	800b982 <USBH_UserProcess+0x4a>

  default:
  break;
 800b980:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b982:	bf00      	nop
 800b984:	370c      	adds	r7, #12
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr
 800b98e:	bf00      	nop
 800b990:	20000704 	.word	0x20000704

0800b994 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b0ae      	sub	sp, #184	@ 0xb8
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b99c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	601a      	str	r2, [r3, #0]
 800b9a4:	605a      	str	r2, [r3, #4]
 800b9a6:	609a      	str	r2, [r3, #8]
 800b9a8:	60da      	str	r2, [r3, #12]
 800b9aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b9ac:	f107 0318 	add.w	r3, r7, #24
 800b9b0:	228c      	movs	r2, #140	@ 0x8c
 800b9b2:	2100      	movs	r1, #0
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f000 fb97 	bl	800c0e8 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b9c2:	d173      	bne.n	800baac <HAL_HCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b9c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b9c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800b9ca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b9ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800b9da:	2318      	movs	r3, #24
 800b9dc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800b9de:	2302      	movs	r3, #2
 800b9e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800b9e2:	2302      	movs	r3, #2
 800b9e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800b9e6:	2302      	movs	r3, #2
 800b9e8:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800b9ea:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b9ee:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b9f0:	f107 0318 	add.w	r3, r7, #24
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7f8 fe2f 	bl	8004658 <HAL_RCCEx_PeriphCLKConfig>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d001      	beq.n	800ba04 <HAL_HCD_MspInit+0x70>
    {
      Error_Handler();
 800ba00:	f7f5 fcc0 	bl	8001384 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba04:	4b2b      	ldr	r3, [pc, #172]	@ (800bab4 <HAL_HCD_MspInit+0x120>)
 800ba06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba08:	4a2a      	ldr	r2, [pc, #168]	@ (800bab4 <HAL_HCD_MspInit+0x120>)
 800ba0a:	f043 0301 	orr.w	r3, r3, #1
 800ba0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ba10:	4b28      	ldr	r3, [pc, #160]	@ (800bab4 <HAL_HCD_MspInit+0x120>)
 800ba12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba14:	f003 0301 	and.w	r3, r3, #1
 800ba18:	617b      	str	r3, [r7, #20]
 800ba1a:	697b      	ldr	r3, [r7, #20]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800ba1c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800ba20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba24:	2302      	movs	r3, #2
 800ba26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba30:	2303      	movs	r3, #3
 800ba32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ba36:	230a      	movs	r3, #10
 800ba38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba3c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800ba40:	4619      	mov	r1, r3
 800ba42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ba46:	f7f6 f8c1 	bl	8001bcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ba4a:	4b1a      	ldr	r3, [pc, #104]	@ (800bab4 <HAL_HCD_MspInit+0x120>)
 800ba4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba4e:	4a19      	ldr	r2, [pc, #100]	@ (800bab4 <HAL_HCD_MspInit+0x120>)
 800ba50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ba54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ba56:	4b17      	ldr	r3, [pc, #92]	@ (800bab4 <HAL_HCD_MspInit+0x120>)
 800ba58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ba5e:	613b      	str	r3, [r7, #16]
 800ba60:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ba62:	4b14      	ldr	r3, [pc, #80]	@ (800bab4 <HAL_HCD_MspInit+0x120>)
 800ba64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d114      	bne.n	800ba98 <HAL_HCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba6e:	4b11      	ldr	r3, [pc, #68]	@ (800bab4 <HAL_HCD_MspInit+0x120>)
 800ba70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba72:	4a10      	ldr	r2, [pc, #64]	@ (800bab4 <HAL_HCD_MspInit+0x120>)
 800ba74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba78:	6593      	str	r3, [r2, #88]	@ 0x58
 800ba7a:	4b0e      	ldr	r3, [pc, #56]	@ (800bab4 <HAL_HCD_MspInit+0x120>)
 800ba7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba82:	60fb      	str	r3, [r7, #12]
 800ba84:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800ba86:	f7f7 ff89 	bl	800399c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800ba8a:	4b0a      	ldr	r3, [pc, #40]	@ (800bab4 <HAL_HCD_MspInit+0x120>)
 800ba8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba8e:	4a09      	ldr	r2, [pc, #36]	@ (800bab4 <HAL_HCD_MspInit+0x120>)
 800ba90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ba94:	6593      	str	r3, [r2, #88]	@ 0x58
 800ba96:	e001      	b.n	800ba9c <HAL_HCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800ba98:	f7f7 ff80 	bl	800399c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	2100      	movs	r1, #0
 800baa0:	2043      	movs	r0, #67	@ 0x43
 800baa2:	f7f5 ffde 	bl	8001a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800baa6:	2043      	movs	r0, #67	@ 0x43
 800baa8:	f7f5 fff7 	bl	8001a9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800baac:	bf00      	nop
 800baae:	37b8      	adds	r7, #184	@ 0xb8
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	40021000 	.word	0x40021000

0800bab8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7fe ff43 	bl	800a952 <USBH_LL_IncTimer>
}
 800bacc:	bf00      	nop
 800bace:	3708      	adds	r7, #8
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7fe ff7b 	bl	800a9de <USBH_LL_Connect>
}
 800bae8:	bf00      	nop
 800baea:	3708      	adds	r7, #8
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7fe ff84 	bl	800aa0c <USBH_LL_Disconnect>
}
 800bb04:	bf00      	nop
 800bb06:	3708      	adds	r7, #8
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	460b      	mov	r3, r1
 800bb16:	70fb      	strb	r3, [r7, #3]
 800bb18:	4613      	mov	r3, r2
 800bb1a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800bb1c:	bf00      	nop
 800bb1e:	370c      	adds	r7, #12
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7fe ff35 	bl	800a9a6 <USBH_LL_PortEnabled>
}
 800bb3c:	bf00      	nop
 800bb3e:	3708      	adds	r7, #8
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7fe ff35 	bl	800a9c2 <USBH_LL_PortDisabled>
}
 800bb58:	bf00      	nop
 800bb5a:	3708      	adds	r7, #8
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f893 349c 	ldrb.w	r3, [r3, #1180]	@ 0x49c
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d12a      	bne.n	800bbc8 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bb72:	4a18      	ldr	r2, [pc, #96]	@ (800bbd4 <USBH_LL_Init+0x74>)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
  phost->pData = &hhcd_USB_OTG_FS;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	4a15      	ldr	r2, [pc, #84]	@ (800bbd4 <USBH_LL_Init+0x74>)
 800bb7e:	f8c3 24a0 	str.w	r2, [r3, #1184]	@ 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bb82:	4b14      	ldr	r3, [pc, #80]	@ (800bbd4 <USBH_LL_Init+0x74>)
 800bb84:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bb88:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800bb8a:	4b12      	ldr	r3, [pc, #72]	@ (800bbd4 <USBH_LL_Init+0x74>)
 800bb8c:	220c      	movs	r2, #12
 800bb8e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800bb90:	4b10      	ldr	r3, [pc, #64]	@ (800bbd4 <USBH_LL_Init+0x74>)
 800bb92:	2201      	movs	r2, #1
 800bb94:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bb96:	4b0f      	ldr	r3, [pc, #60]	@ (800bbd4 <USBH_LL_Init+0x74>)
 800bb98:	2200      	movs	r2, #0
 800bb9a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800bb9c:	4b0d      	ldr	r3, [pc, #52]	@ (800bbd4 <USBH_LL_Init+0x74>)
 800bb9e:	2202      	movs	r2, #2
 800bba0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bba2:	4b0c      	ldr	r3, [pc, #48]	@ (800bbd4 <USBH_LL_Init+0x74>)
 800bba4:	2200      	movs	r2, #0
 800bba6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800bba8:	480a      	ldr	r0, [pc, #40]	@ (800bbd4 <USBH_LL_Init+0x74>)
 800bbaa:	f7f6 f9dc 	bl	8001f66 <HAL_HCD_Init>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d001      	beq.n	800bbb8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800bbb4:	f7f5 fbe6 	bl	8001384 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800bbb8:	4806      	ldr	r0, [pc, #24]	@ (800bbd4 <USBH_LL_Init+0x74>)
 800bbba:	f7f6 fddb 	bl	8002774 <HAL_HCD_GetCurrentFrame>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f7fe feb6 	bl	800a934 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bbc8:	2300      	movs	r3, #0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3708      	adds	r7, #8
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	20000708 	.word	0x20000708

0800bbd8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7f6 fd5d 	bl	80026ae <HAL_HCD_Start>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bbf8:	7bfb      	ldrb	r3, [r7, #15]
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f000 f94c 	bl	800be98 <USBH_Get_USB_Status>
 800bc00:	4603      	mov	r3, r0
 800bc02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc04:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b084      	sub	sp, #16
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc16:	2300      	movs	r3, #0
 800bc18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7f6 fd65 	bl	80026f4 <HAL_HCD_Stop>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bc2e:	7bfb      	ldrb	r3, [r7, #15]
 800bc30:	4618      	mov	r0, r3
 800bc32:	f000 f931 	bl	800be98 <USBH_Get_USB_Status>
 800bc36:	4603      	mov	r3, r0
 800bc38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3710      	adds	r7, #16
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7f6 fd9a 	bl	8002790 <HAL_HCD_GetCurrentSpeed>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2b02      	cmp	r3, #2
 800bc60:	d00c      	beq.n	800bc7c <USBH_LL_GetSpeed+0x38>
 800bc62:	2b02      	cmp	r3, #2
 800bc64:	d80d      	bhi.n	800bc82 <USBH_LL_GetSpeed+0x3e>
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d002      	beq.n	800bc70 <USBH_LL_GetSpeed+0x2c>
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	d003      	beq.n	800bc76 <USBH_LL_GetSpeed+0x32>
 800bc6e:	e008      	b.n	800bc82 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bc70:	2300      	movs	r3, #0
 800bc72:	73fb      	strb	r3, [r7, #15]
    break;
 800bc74:	e008      	b.n	800bc88 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800bc76:	2301      	movs	r3, #1
 800bc78:	73fb      	strb	r3, [r7, #15]
    break;
 800bc7a:	e005      	b.n	800bc88 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800bc7c:	2302      	movs	r3, #2
 800bc7e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc80:	e002      	b.n	800bc88 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800bc82:	2301      	movs	r3, #1
 800bc84:	73fb      	strb	r3, [r7, #15]
    break;
 800bc86:	bf00      	nop
  }
  return  speed;
 800bc88:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3710      	adds	r7, #16
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}

0800bc92 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800bc92:	b580      	push	{r7, lr}
 800bc94:	b084      	sub	sp, #16
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f7f6 fd40 	bl	800272e <HAL_HCD_ResetPort>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bcb2:	7bfb      	ldrb	r3, [r7, #15]
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f000 f8ef 	bl	800be98 <USBH_Get_USB_Status>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3710      	adds	r7, #16
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bcc8:	b590      	push	{r4, r7, lr}
 800bcca:	b089      	sub	sp, #36	@ 0x24
 800bccc:	af04      	add	r7, sp, #16
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	4608      	mov	r0, r1
 800bcd2:	4611      	mov	r1, r2
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	70fb      	strb	r3, [r7, #3]
 800bcda:	460b      	mov	r3, r1
 800bcdc:	70bb      	strb	r3, [r7, #2]
 800bcde:	4613      	mov	r3, r2
 800bce0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bce2:	2300      	movs	r3, #0
 800bce4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bce6:	2300      	movs	r3, #0
 800bce8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	@ 0x4a0
 800bcf0:	787c      	ldrb	r4, [r7, #1]
 800bcf2:	78ba      	ldrb	r2, [r7, #2]
 800bcf4:	78f9      	ldrb	r1, [r7, #3]
 800bcf6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bcf8:	9302      	str	r3, [sp, #8]
 800bcfa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bcfe:	9301      	str	r3, [sp, #4]
 800bd00:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd04:	9300      	str	r3, [sp, #0]
 800bd06:	4623      	mov	r3, r4
 800bd08:	f7f6 f98f 	bl	800202a <HAL_HCD_HC_Init>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bd10:	7bfb      	ldrb	r3, [r7, #15]
 800bd12:	4618      	mov	r0, r3
 800bd14:	f000 f8c0 	bl	800be98 <USBH_Get_USB_Status>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3714      	adds	r7, #20
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd90      	pop	{r4, r7, pc}

0800bd26 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bd26:	b580      	push	{r7, lr}
 800bd28:	b084      	sub	sp, #16
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
 800bd2e:	460b      	mov	r3, r1
 800bd30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd32:	2300      	movs	r3, #0
 800bd34:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd36:	2300      	movs	r3, #0
 800bd38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 800bd40:	78fa      	ldrb	r2, [r7, #3]
 800bd42:	4611      	mov	r1, r2
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7f6 fa12 	bl	800216e <HAL_HCD_HC_Halt>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bd4e:	7bfb      	ldrb	r3, [r7, #15]
 800bd50:	4618      	mov	r0, r3
 800bd52:	f000 f8a1 	bl	800be98 <USBH_Get_USB_Status>
 800bd56:	4603      	mov	r3, r0
 800bd58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3710      	adds	r7, #16
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bd64:	b590      	push	{r4, r7, lr}
 800bd66:	b089      	sub	sp, #36	@ 0x24
 800bd68:	af04      	add	r7, sp, #16
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	4608      	mov	r0, r1
 800bd6e:	4611      	mov	r1, r2
 800bd70:	461a      	mov	r2, r3
 800bd72:	4603      	mov	r3, r0
 800bd74:	70fb      	strb	r3, [r7, #3]
 800bd76:	460b      	mov	r3, r1
 800bd78:	70bb      	strb	r3, [r7, #2]
 800bd7a:	4613      	mov	r3, r2
 800bd7c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd82:	2300      	movs	r3, #0
 800bd84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	@ 0x4a0
 800bd8c:	787c      	ldrb	r4, [r7, #1]
 800bd8e:	78ba      	ldrb	r2, [r7, #2]
 800bd90:	78f9      	ldrb	r1, [r7, #3]
 800bd92:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800bd96:	9303      	str	r3, [sp, #12]
 800bd98:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bd9a:	9302      	str	r3, [sp, #8]
 800bd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9e:	9301      	str	r3, [sp, #4]
 800bda0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bda4:	9300      	str	r3, [sp, #0]
 800bda6:	4623      	mov	r3, r4
 800bda8:	f7f6 fa04 	bl	80021b4 <HAL_HCD_HC_SubmitRequest>
 800bdac:	4603      	mov	r3, r0
 800bdae:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bdb0:	7bfb      	ldrb	r3, [r7, #15]
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f000 f870 	bl	800be98 <USBH_Get_USB_Status>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3714      	adds	r7, #20
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd90      	pop	{r4, r7, pc}

0800bdc6 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b082      	sub	sp, #8
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	6078      	str	r0, [r7, #4]
 800bdce:	460b      	mov	r3, r1
 800bdd0:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 800bdd8:	78fa      	ldrb	r2, [r7, #3]
 800bdda:	4611      	mov	r1, r2
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7f6 fcb4 	bl	800274a <HAL_HCD_HC_GetURBState>
 800bde2:	4603      	mov	r3, r0
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3708      	adds	r7, #8
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f893 349c 	ldrb.w	r3, [r3, #1180]	@ 0x49c
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	d103      	bne.n	800be0a <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800be02:	78fb      	ldrb	r3, [r7, #3]
 800be04:	4618      	mov	r0, r3
 800be06:	f000 f873 	bl	800bef0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800be0a:	20c8      	movs	r0, #200	@ 0xc8
 800be0c:	f7f5 fd2a 	bl	8001864 <HAL_Delay>
  return USBH_OK;
 800be10:	2300      	movs	r3, #0
}
 800be12:	4618      	mov	r0, r3
 800be14:	3708      	adds	r7, #8
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}

0800be1a <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800be1a:	b480      	push	{r7}
 800be1c:	b085      	sub	sp, #20
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
 800be22:	460b      	mov	r3, r1
 800be24:	70fb      	strb	r3, [r7, #3]
 800be26:	4613      	mov	r3, r2
 800be28:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 800be30:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800be32:	78fa      	ldrb	r2, [r7, #3]
 800be34:	68f9      	ldr	r1, [r7, #12]
 800be36:	4613      	mov	r3, r2
 800be38:	005b      	lsls	r3, r3, #1
 800be3a:	4413      	add	r3, r2
 800be3c:	011b      	lsls	r3, r3, #4
 800be3e:	440b      	add	r3, r1
 800be40:	333b      	adds	r3, #59	@ 0x3b
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00a      	beq.n	800be5e <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800be48:	78fa      	ldrb	r2, [r7, #3]
 800be4a:	68f9      	ldr	r1, [r7, #12]
 800be4c:	4613      	mov	r3, r2
 800be4e:	005b      	lsls	r3, r3, #1
 800be50:	4413      	add	r3, r2
 800be52:	011b      	lsls	r3, r3, #4
 800be54:	440b      	add	r3, r1
 800be56:	3358      	adds	r3, #88	@ 0x58
 800be58:	78ba      	ldrb	r2, [r7, #2]
 800be5a:	701a      	strb	r2, [r3, #0]
 800be5c:	e009      	b.n	800be72 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800be5e:	78fa      	ldrb	r2, [r7, #3]
 800be60:	68f9      	ldr	r1, [r7, #12]
 800be62:	4613      	mov	r3, r2
 800be64:	005b      	lsls	r3, r3, #1
 800be66:	4413      	add	r3, r2
 800be68:	011b      	lsls	r3, r3, #4
 800be6a:	440b      	add	r3, r1
 800be6c:	3359      	adds	r3, #89	@ 0x59
 800be6e:	78ba      	ldrb	r2, [r7, #2]
 800be70:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800be72:	2300      	movs	r3, #0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3714      	adds	r7, #20
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f7f5 fceb 	bl	8001864 <HAL_Delay>
}
 800be8e:	bf00      	nop
 800be90:	3708      	adds	r7, #8
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
	...

0800be98 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800be98:	b480      	push	{r7}
 800be9a:	b085      	sub	sp, #20
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	4603      	mov	r3, r0
 800bea0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bea2:	2300      	movs	r3, #0
 800bea4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bea6:	79fb      	ldrb	r3, [r7, #7]
 800bea8:	2b03      	cmp	r3, #3
 800beaa:	d817      	bhi.n	800bedc <USBH_Get_USB_Status+0x44>
 800beac:	a201      	add	r2, pc, #4	@ (adr r2, 800beb4 <USBH_Get_USB_Status+0x1c>)
 800beae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beb2:	bf00      	nop
 800beb4:	0800bec5 	.word	0x0800bec5
 800beb8:	0800becb 	.word	0x0800becb
 800bebc:	0800bed1 	.word	0x0800bed1
 800bec0:	0800bed7 	.word	0x0800bed7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bec4:	2300      	movs	r3, #0
 800bec6:	73fb      	strb	r3, [r7, #15]
    break;
 800bec8:	e00b      	b.n	800bee2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800beca:	2302      	movs	r3, #2
 800becc:	73fb      	strb	r3, [r7, #15]
    break;
 800bece:	e008      	b.n	800bee2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bed0:	2301      	movs	r3, #1
 800bed2:	73fb      	strb	r3, [r7, #15]
    break;
 800bed4:	e005      	b.n	800bee2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bed6:	2302      	movs	r3, #2
 800bed8:	73fb      	strb	r3, [r7, #15]
    break;
 800beda:	e002      	b.n	800bee2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bedc:	2302      	movs	r3, #2
 800bede:	73fb      	strb	r3, [r7, #15]
    break;
 800bee0:	bf00      	nop
  }
  return usb_status;
 800bee2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3714      	adds	r7, #20
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	4603      	mov	r3, r0
 800bef8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800befa:	79fb      	ldrb	r3, [r7, #7]
 800befc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800befe:	79fb      	ldrb	r3, [r7, #7]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d102      	bne.n	800bf0a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800bf04:	2300      	movs	r3, #0
 800bf06:	73fb      	strb	r3, [r7, #15]
 800bf08:	e001      	b.n	800bf0e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 800bf0e:	7bfb      	ldrb	r3, [r7, #15]
 800bf10:	461a      	mov	r2, r3
 800bf12:	2140      	movs	r1, #64	@ 0x40
 800bf14:	4803      	ldr	r0, [pc, #12]	@ (800bf24 <MX_DriverVbusFS+0x34>)
 800bf16:	f7f5 ffeb 	bl	8001ef0 <HAL_GPIO_WritePin>
}
 800bf1a:	bf00      	nop
 800bf1c:	3710      	adds	r7, #16
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	48001800 	.word	0x48001800

0800bf28 <malloc>:
 800bf28:	4b02      	ldr	r3, [pc, #8]	@ (800bf34 <malloc+0xc>)
 800bf2a:	4601      	mov	r1, r0
 800bf2c:	6818      	ldr	r0, [r3, #0]
 800bf2e:	f000 b82d 	b.w	800bf8c <_malloc_r>
 800bf32:	bf00      	nop
 800bf34:	2000003c 	.word	0x2000003c

0800bf38 <free>:
 800bf38:	4b02      	ldr	r3, [pc, #8]	@ (800bf44 <free+0xc>)
 800bf3a:	4601      	mov	r1, r0
 800bf3c:	6818      	ldr	r0, [r3, #0]
 800bf3e:	f000 b917 	b.w	800c170 <_free_r>
 800bf42:	bf00      	nop
 800bf44:	2000003c 	.word	0x2000003c

0800bf48 <sbrk_aligned>:
 800bf48:	b570      	push	{r4, r5, r6, lr}
 800bf4a:	4e0f      	ldr	r6, [pc, #60]	@ (800bf88 <sbrk_aligned+0x40>)
 800bf4c:	460c      	mov	r4, r1
 800bf4e:	6831      	ldr	r1, [r6, #0]
 800bf50:	4605      	mov	r5, r0
 800bf52:	b911      	cbnz	r1, 800bf5a <sbrk_aligned+0x12>
 800bf54:	f000 f8d0 	bl	800c0f8 <_sbrk_r>
 800bf58:	6030      	str	r0, [r6, #0]
 800bf5a:	4621      	mov	r1, r4
 800bf5c:	4628      	mov	r0, r5
 800bf5e:	f000 f8cb 	bl	800c0f8 <_sbrk_r>
 800bf62:	1c43      	adds	r3, r0, #1
 800bf64:	d103      	bne.n	800bf6e <sbrk_aligned+0x26>
 800bf66:	f04f 34ff 	mov.w	r4, #4294967295
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	bd70      	pop	{r4, r5, r6, pc}
 800bf6e:	1cc4      	adds	r4, r0, #3
 800bf70:	f024 0403 	bic.w	r4, r4, #3
 800bf74:	42a0      	cmp	r0, r4
 800bf76:	d0f8      	beq.n	800bf6a <sbrk_aligned+0x22>
 800bf78:	1a21      	subs	r1, r4, r0
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	f000 f8bc 	bl	800c0f8 <_sbrk_r>
 800bf80:	3001      	adds	r0, #1
 800bf82:	d1f2      	bne.n	800bf6a <sbrk_aligned+0x22>
 800bf84:	e7ef      	b.n	800bf66 <sbrk_aligned+0x1e>
 800bf86:	bf00      	nop
 800bf88:	20000a4c 	.word	0x20000a4c

0800bf8c <_malloc_r>:
 800bf8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf90:	1ccd      	adds	r5, r1, #3
 800bf92:	f025 0503 	bic.w	r5, r5, #3
 800bf96:	3508      	adds	r5, #8
 800bf98:	2d0c      	cmp	r5, #12
 800bf9a:	bf38      	it	cc
 800bf9c:	250c      	movcc	r5, #12
 800bf9e:	2d00      	cmp	r5, #0
 800bfa0:	4606      	mov	r6, r0
 800bfa2:	db01      	blt.n	800bfa8 <_malloc_r+0x1c>
 800bfa4:	42a9      	cmp	r1, r5
 800bfa6:	d904      	bls.n	800bfb2 <_malloc_r+0x26>
 800bfa8:	230c      	movs	r3, #12
 800bfaa:	6033      	str	r3, [r6, #0]
 800bfac:	2000      	movs	r0, #0
 800bfae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c088 <_malloc_r+0xfc>
 800bfb6:	f000 f869 	bl	800c08c <__malloc_lock>
 800bfba:	f8d8 3000 	ldr.w	r3, [r8]
 800bfbe:	461c      	mov	r4, r3
 800bfc0:	bb44      	cbnz	r4, 800c014 <_malloc_r+0x88>
 800bfc2:	4629      	mov	r1, r5
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	f7ff ffbf 	bl	800bf48 <sbrk_aligned>
 800bfca:	1c43      	adds	r3, r0, #1
 800bfcc:	4604      	mov	r4, r0
 800bfce:	d158      	bne.n	800c082 <_malloc_r+0xf6>
 800bfd0:	f8d8 4000 	ldr.w	r4, [r8]
 800bfd4:	4627      	mov	r7, r4
 800bfd6:	2f00      	cmp	r7, #0
 800bfd8:	d143      	bne.n	800c062 <_malloc_r+0xd6>
 800bfda:	2c00      	cmp	r4, #0
 800bfdc:	d04b      	beq.n	800c076 <_malloc_r+0xea>
 800bfde:	6823      	ldr	r3, [r4, #0]
 800bfe0:	4639      	mov	r1, r7
 800bfe2:	4630      	mov	r0, r6
 800bfe4:	eb04 0903 	add.w	r9, r4, r3
 800bfe8:	f000 f886 	bl	800c0f8 <_sbrk_r>
 800bfec:	4581      	cmp	r9, r0
 800bfee:	d142      	bne.n	800c076 <_malloc_r+0xea>
 800bff0:	6821      	ldr	r1, [r4, #0]
 800bff2:	1a6d      	subs	r5, r5, r1
 800bff4:	4629      	mov	r1, r5
 800bff6:	4630      	mov	r0, r6
 800bff8:	f7ff ffa6 	bl	800bf48 <sbrk_aligned>
 800bffc:	3001      	adds	r0, #1
 800bffe:	d03a      	beq.n	800c076 <_malloc_r+0xea>
 800c000:	6823      	ldr	r3, [r4, #0]
 800c002:	442b      	add	r3, r5
 800c004:	6023      	str	r3, [r4, #0]
 800c006:	f8d8 3000 	ldr.w	r3, [r8]
 800c00a:	685a      	ldr	r2, [r3, #4]
 800c00c:	bb62      	cbnz	r2, 800c068 <_malloc_r+0xdc>
 800c00e:	f8c8 7000 	str.w	r7, [r8]
 800c012:	e00f      	b.n	800c034 <_malloc_r+0xa8>
 800c014:	6822      	ldr	r2, [r4, #0]
 800c016:	1b52      	subs	r2, r2, r5
 800c018:	d420      	bmi.n	800c05c <_malloc_r+0xd0>
 800c01a:	2a0b      	cmp	r2, #11
 800c01c:	d917      	bls.n	800c04e <_malloc_r+0xc2>
 800c01e:	1961      	adds	r1, r4, r5
 800c020:	42a3      	cmp	r3, r4
 800c022:	6025      	str	r5, [r4, #0]
 800c024:	bf18      	it	ne
 800c026:	6059      	strne	r1, [r3, #4]
 800c028:	6863      	ldr	r3, [r4, #4]
 800c02a:	bf08      	it	eq
 800c02c:	f8c8 1000 	streq.w	r1, [r8]
 800c030:	5162      	str	r2, [r4, r5]
 800c032:	604b      	str	r3, [r1, #4]
 800c034:	4630      	mov	r0, r6
 800c036:	f000 f82f 	bl	800c098 <__malloc_unlock>
 800c03a:	f104 000b 	add.w	r0, r4, #11
 800c03e:	1d23      	adds	r3, r4, #4
 800c040:	f020 0007 	bic.w	r0, r0, #7
 800c044:	1ac2      	subs	r2, r0, r3
 800c046:	bf1c      	itt	ne
 800c048:	1a1b      	subne	r3, r3, r0
 800c04a:	50a3      	strne	r3, [r4, r2]
 800c04c:	e7af      	b.n	800bfae <_malloc_r+0x22>
 800c04e:	6862      	ldr	r2, [r4, #4]
 800c050:	42a3      	cmp	r3, r4
 800c052:	bf0c      	ite	eq
 800c054:	f8c8 2000 	streq.w	r2, [r8]
 800c058:	605a      	strne	r2, [r3, #4]
 800c05a:	e7eb      	b.n	800c034 <_malloc_r+0xa8>
 800c05c:	4623      	mov	r3, r4
 800c05e:	6864      	ldr	r4, [r4, #4]
 800c060:	e7ae      	b.n	800bfc0 <_malloc_r+0x34>
 800c062:	463c      	mov	r4, r7
 800c064:	687f      	ldr	r7, [r7, #4]
 800c066:	e7b6      	b.n	800bfd6 <_malloc_r+0x4a>
 800c068:	461a      	mov	r2, r3
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	42a3      	cmp	r3, r4
 800c06e:	d1fb      	bne.n	800c068 <_malloc_r+0xdc>
 800c070:	2300      	movs	r3, #0
 800c072:	6053      	str	r3, [r2, #4]
 800c074:	e7de      	b.n	800c034 <_malloc_r+0xa8>
 800c076:	230c      	movs	r3, #12
 800c078:	6033      	str	r3, [r6, #0]
 800c07a:	4630      	mov	r0, r6
 800c07c:	f000 f80c 	bl	800c098 <__malloc_unlock>
 800c080:	e794      	b.n	800bfac <_malloc_r+0x20>
 800c082:	6005      	str	r5, [r0, #0]
 800c084:	e7d6      	b.n	800c034 <_malloc_r+0xa8>
 800c086:	bf00      	nop
 800c088:	20000a50 	.word	0x20000a50

0800c08c <__malloc_lock>:
 800c08c:	4801      	ldr	r0, [pc, #4]	@ (800c094 <__malloc_lock+0x8>)
 800c08e:	f000 b86d 	b.w	800c16c <__retarget_lock_acquire_recursive>
 800c092:	bf00      	nop
 800c094:	20000b90 	.word	0x20000b90

0800c098 <__malloc_unlock>:
 800c098:	4801      	ldr	r0, [pc, #4]	@ (800c0a0 <__malloc_unlock+0x8>)
 800c09a:	f000 b868 	b.w	800c16e <__retarget_lock_release_recursive>
 800c09e:	bf00      	nop
 800c0a0:	20000b90 	.word	0x20000b90

0800c0a4 <siprintf>:
 800c0a4:	b40e      	push	{r1, r2, r3}
 800c0a6:	b510      	push	{r4, lr}
 800c0a8:	b09d      	sub	sp, #116	@ 0x74
 800c0aa:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c0ac:	9002      	str	r0, [sp, #8]
 800c0ae:	9006      	str	r0, [sp, #24]
 800c0b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c0b4:	480a      	ldr	r0, [pc, #40]	@ (800c0e0 <siprintf+0x3c>)
 800c0b6:	9107      	str	r1, [sp, #28]
 800c0b8:	9104      	str	r1, [sp, #16]
 800c0ba:	490a      	ldr	r1, [pc, #40]	@ (800c0e4 <siprintf+0x40>)
 800c0bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0c0:	9105      	str	r1, [sp, #20]
 800c0c2:	2400      	movs	r4, #0
 800c0c4:	a902      	add	r1, sp, #8
 800c0c6:	6800      	ldr	r0, [r0, #0]
 800c0c8:	9301      	str	r3, [sp, #4]
 800c0ca:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c0cc:	f000 f8f6 	bl	800c2bc <_svfiprintf_r>
 800c0d0:	9b02      	ldr	r3, [sp, #8]
 800c0d2:	701c      	strb	r4, [r3, #0]
 800c0d4:	b01d      	add	sp, #116	@ 0x74
 800c0d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0da:	b003      	add	sp, #12
 800c0dc:	4770      	bx	lr
 800c0de:	bf00      	nop
 800c0e0:	2000003c 	.word	0x2000003c
 800c0e4:	ffff0208 	.word	0xffff0208

0800c0e8 <memset>:
 800c0e8:	4402      	add	r2, r0
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d100      	bne.n	800c0f2 <memset+0xa>
 800c0f0:	4770      	bx	lr
 800c0f2:	f803 1b01 	strb.w	r1, [r3], #1
 800c0f6:	e7f9      	b.n	800c0ec <memset+0x4>

0800c0f8 <_sbrk_r>:
 800c0f8:	b538      	push	{r3, r4, r5, lr}
 800c0fa:	4d06      	ldr	r5, [pc, #24]	@ (800c114 <_sbrk_r+0x1c>)
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	4604      	mov	r4, r0
 800c100:	4608      	mov	r0, r1
 800c102:	602b      	str	r3, [r5, #0]
 800c104:	f7f5 fac8 	bl	8001698 <_sbrk>
 800c108:	1c43      	adds	r3, r0, #1
 800c10a:	d102      	bne.n	800c112 <_sbrk_r+0x1a>
 800c10c:	682b      	ldr	r3, [r5, #0]
 800c10e:	b103      	cbz	r3, 800c112 <_sbrk_r+0x1a>
 800c110:	6023      	str	r3, [r4, #0]
 800c112:	bd38      	pop	{r3, r4, r5, pc}
 800c114:	20000b8c 	.word	0x20000b8c

0800c118 <__errno>:
 800c118:	4b01      	ldr	r3, [pc, #4]	@ (800c120 <__errno+0x8>)
 800c11a:	6818      	ldr	r0, [r3, #0]
 800c11c:	4770      	bx	lr
 800c11e:	bf00      	nop
 800c120:	2000003c 	.word	0x2000003c

0800c124 <__libc_init_array>:
 800c124:	b570      	push	{r4, r5, r6, lr}
 800c126:	4d0d      	ldr	r5, [pc, #52]	@ (800c15c <__libc_init_array+0x38>)
 800c128:	4c0d      	ldr	r4, [pc, #52]	@ (800c160 <__libc_init_array+0x3c>)
 800c12a:	1b64      	subs	r4, r4, r5
 800c12c:	10a4      	asrs	r4, r4, #2
 800c12e:	2600      	movs	r6, #0
 800c130:	42a6      	cmp	r6, r4
 800c132:	d109      	bne.n	800c148 <__libc_init_array+0x24>
 800c134:	4d0b      	ldr	r5, [pc, #44]	@ (800c164 <__libc_init_array+0x40>)
 800c136:	4c0c      	ldr	r4, [pc, #48]	@ (800c168 <__libc_init_array+0x44>)
 800c138:	f000 fba6 	bl	800c888 <_init>
 800c13c:	1b64      	subs	r4, r4, r5
 800c13e:	10a4      	asrs	r4, r4, #2
 800c140:	2600      	movs	r6, #0
 800c142:	42a6      	cmp	r6, r4
 800c144:	d105      	bne.n	800c152 <__libc_init_array+0x2e>
 800c146:	bd70      	pop	{r4, r5, r6, pc}
 800c148:	f855 3b04 	ldr.w	r3, [r5], #4
 800c14c:	4798      	blx	r3
 800c14e:	3601      	adds	r6, #1
 800c150:	e7ee      	b.n	800c130 <__libc_init_array+0xc>
 800c152:	f855 3b04 	ldr.w	r3, [r5], #4
 800c156:	4798      	blx	r3
 800c158:	3601      	adds	r6, #1
 800c15a:	e7f2      	b.n	800c142 <__libc_init_array+0x1e>
 800c15c:	0800cb90 	.word	0x0800cb90
 800c160:	0800cb90 	.word	0x0800cb90
 800c164:	0800cb90 	.word	0x0800cb90
 800c168:	0800cb94 	.word	0x0800cb94

0800c16c <__retarget_lock_acquire_recursive>:
 800c16c:	4770      	bx	lr

0800c16e <__retarget_lock_release_recursive>:
 800c16e:	4770      	bx	lr

0800c170 <_free_r>:
 800c170:	b538      	push	{r3, r4, r5, lr}
 800c172:	4605      	mov	r5, r0
 800c174:	2900      	cmp	r1, #0
 800c176:	d041      	beq.n	800c1fc <_free_r+0x8c>
 800c178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c17c:	1f0c      	subs	r4, r1, #4
 800c17e:	2b00      	cmp	r3, #0
 800c180:	bfb8      	it	lt
 800c182:	18e4      	addlt	r4, r4, r3
 800c184:	f7ff ff82 	bl	800c08c <__malloc_lock>
 800c188:	4a1d      	ldr	r2, [pc, #116]	@ (800c200 <_free_r+0x90>)
 800c18a:	6813      	ldr	r3, [r2, #0]
 800c18c:	b933      	cbnz	r3, 800c19c <_free_r+0x2c>
 800c18e:	6063      	str	r3, [r4, #4]
 800c190:	6014      	str	r4, [r2, #0]
 800c192:	4628      	mov	r0, r5
 800c194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c198:	f7ff bf7e 	b.w	800c098 <__malloc_unlock>
 800c19c:	42a3      	cmp	r3, r4
 800c19e:	d908      	bls.n	800c1b2 <_free_r+0x42>
 800c1a0:	6820      	ldr	r0, [r4, #0]
 800c1a2:	1821      	adds	r1, r4, r0
 800c1a4:	428b      	cmp	r3, r1
 800c1a6:	bf01      	itttt	eq
 800c1a8:	6819      	ldreq	r1, [r3, #0]
 800c1aa:	685b      	ldreq	r3, [r3, #4]
 800c1ac:	1809      	addeq	r1, r1, r0
 800c1ae:	6021      	streq	r1, [r4, #0]
 800c1b0:	e7ed      	b.n	800c18e <_free_r+0x1e>
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	b10b      	cbz	r3, 800c1bc <_free_r+0x4c>
 800c1b8:	42a3      	cmp	r3, r4
 800c1ba:	d9fa      	bls.n	800c1b2 <_free_r+0x42>
 800c1bc:	6811      	ldr	r1, [r2, #0]
 800c1be:	1850      	adds	r0, r2, r1
 800c1c0:	42a0      	cmp	r0, r4
 800c1c2:	d10b      	bne.n	800c1dc <_free_r+0x6c>
 800c1c4:	6820      	ldr	r0, [r4, #0]
 800c1c6:	4401      	add	r1, r0
 800c1c8:	1850      	adds	r0, r2, r1
 800c1ca:	4283      	cmp	r3, r0
 800c1cc:	6011      	str	r1, [r2, #0]
 800c1ce:	d1e0      	bne.n	800c192 <_free_r+0x22>
 800c1d0:	6818      	ldr	r0, [r3, #0]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	6053      	str	r3, [r2, #4]
 800c1d6:	4408      	add	r0, r1
 800c1d8:	6010      	str	r0, [r2, #0]
 800c1da:	e7da      	b.n	800c192 <_free_r+0x22>
 800c1dc:	d902      	bls.n	800c1e4 <_free_r+0x74>
 800c1de:	230c      	movs	r3, #12
 800c1e0:	602b      	str	r3, [r5, #0]
 800c1e2:	e7d6      	b.n	800c192 <_free_r+0x22>
 800c1e4:	6820      	ldr	r0, [r4, #0]
 800c1e6:	1821      	adds	r1, r4, r0
 800c1e8:	428b      	cmp	r3, r1
 800c1ea:	bf04      	itt	eq
 800c1ec:	6819      	ldreq	r1, [r3, #0]
 800c1ee:	685b      	ldreq	r3, [r3, #4]
 800c1f0:	6063      	str	r3, [r4, #4]
 800c1f2:	bf04      	itt	eq
 800c1f4:	1809      	addeq	r1, r1, r0
 800c1f6:	6021      	streq	r1, [r4, #0]
 800c1f8:	6054      	str	r4, [r2, #4]
 800c1fa:	e7ca      	b.n	800c192 <_free_r+0x22>
 800c1fc:	bd38      	pop	{r3, r4, r5, pc}
 800c1fe:	bf00      	nop
 800c200:	20000a50 	.word	0x20000a50

0800c204 <__ssputs_r>:
 800c204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c208:	688e      	ldr	r6, [r1, #8]
 800c20a:	461f      	mov	r7, r3
 800c20c:	42be      	cmp	r6, r7
 800c20e:	680b      	ldr	r3, [r1, #0]
 800c210:	4682      	mov	sl, r0
 800c212:	460c      	mov	r4, r1
 800c214:	4690      	mov	r8, r2
 800c216:	d82d      	bhi.n	800c274 <__ssputs_r+0x70>
 800c218:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c21c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c220:	d026      	beq.n	800c270 <__ssputs_r+0x6c>
 800c222:	6965      	ldr	r5, [r4, #20]
 800c224:	6909      	ldr	r1, [r1, #16]
 800c226:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c22a:	eba3 0901 	sub.w	r9, r3, r1
 800c22e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c232:	1c7b      	adds	r3, r7, #1
 800c234:	444b      	add	r3, r9
 800c236:	106d      	asrs	r5, r5, #1
 800c238:	429d      	cmp	r5, r3
 800c23a:	bf38      	it	cc
 800c23c:	461d      	movcc	r5, r3
 800c23e:	0553      	lsls	r3, r2, #21
 800c240:	d527      	bpl.n	800c292 <__ssputs_r+0x8e>
 800c242:	4629      	mov	r1, r5
 800c244:	f7ff fea2 	bl	800bf8c <_malloc_r>
 800c248:	4606      	mov	r6, r0
 800c24a:	b360      	cbz	r0, 800c2a6 <__ssputs_r+0xa2>
 800c24c:	6921      	ldr	r1, [r4, #16]
 800c24e:	464a      	mov	r2, r9
 800c250:	f000 fad6 	bl	800c800 <memcpy>
 800c254:	89a3      	ldrh	r3, [r4, #12]
 800c256:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c25a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c25e:	81a3      	strh	r3, [r4, #12]
 800c260:	6126      	str	r6, [r4, #16]
 800c262:	6165      	str	r5, [r4, #20]
 800c264:	444e      	add	r6, r9
 800c266:	eba5 0509 	sub.w	r5, r5, r9
 800c26a:	6026      	str	r6, [r4, #0]
 800c26c:	60a5      	str	r5, [r4, #8]
 800c26e:	463e      	mov	r6, r7
 800c270:	42be      	cmp	r6, r7
 800c272:	d900      	bls.n	800c276 <__ssputs_r+0x72>
 800c274:	463e      	mov	r6, r7
 800c276:	6820      	ldr	r0, [r4, #0]
 800c278:	4632      	mov	r2, r6
 800c27a:	4641      	mov	r1, r8
 800c27c:	f000 faa6 	bl	800c7cc <memmove>
 800c280:	68a3      	ldr	r3, [r4, #8]
 800c282:	1b9b      	subs	r3, r3, r6
 800c284:	60a3      	str	r3, [r4, #8]
 800c286:	6823      	ldr	r3, [r4, #0]
 800c288:	4433      	add	r3, r6
 800c28a:	6023      	str	r3, [r4, #0]
 800c28c:	2000      	movs	r0, #0
 800c28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c292:	462a      	mov	r2, r5
 800c294:	f000 fac2 	bl	800c81c <_realloc_r>
 800c298:	4606      	mov	r6, r0
 800c29a:	2800      	cmp	r0, #0
 800c29c:	d1e0      	bne.n	800c260 <__ssputs_r+0x5c>
 800c29e:	6921      	ldr	r1, [r4, #16]
 800c2a0:	4650      	mov	r0, sl
 800c2a2:	f7ff ff65 	bl	800c170 <_free_r>
 800c2a6:	230c      	movs	r3, #12
 800c2a8:	f8ca 3000 	str.w	r3, [sl]
 800c2ac:	89a3      	ldrh	r3, [r4, #12]
 800c2ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2b2:	81a3      	strh	r3, [r4, #12]
 800c2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b8:	e7e9      	b.n	800c28e <__ssputs_r+0x8a>
	...

0800c2bc <_svfiprintf_r>:
 800c2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c0:	4698      	mov	r8, r3
 800c2c2:	898b      	ldrh	r3, [r1, #12]
 800c2c4:	061b      	lsls	r3, r3, #24
 800c2c6:	b09d      	sub	sp, #116	@ 0x74
 800c2c8:	4607      	mov	r7, r0
 800c2ca:	460d      	mov	r5, r1
 800c2cc:	4614      	mov	r4, r2
 800c2ce:	d510      	bpl.n	800c2f2 <_svfiprintf_r+0x36>
 800c2d0:	690b      	ldr	r3, [r1, #16]
 800c2d2:	b973      	cbnz	r3, 800c2f2 <_svfiprintf_r+0x36>
 800c2d4:	2140      	movs	r1, #64	@ 0x40
 800c2d6:	f7ff fe59 	bl	800bf8c <_malloc_r>
 800c2da:	6028      	str	r0, [r5, #0]
 800c2dc:	6128      	str	r0, [r5, #16]
 800c2de:	b930      	cbnz	r0, 800c2ee <_svfiprintf_r+0x32>
 800c2e0:	230c      	movs	r3, #12
 800c2e2:	603b      	str	r3, [r7, #0]
 800c2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e8:	b01d      	add	sp, #116	@ 0x74
 800c2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ee:	2340      	movs	r3, #64	@ 0x40
 800c2f0:	616b      	str	r3, [r5, #20]
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2f6:	2320      	movs	r3, #32
 800c2f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c300:	2330      	movs	r3, #48	@ 0x30
 800c302:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c4a0 <_svfiprintf_r+0x1e4>
 800c306:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c30a:	f04f 0901 	mov.w	r9, #1
 800c30e:	4623      	mov	r3, r4
 800c310:	469a      	mov	sl, r3
 800c312:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c316:	b10a      	cbz	r2, 800c31c <_svfiprintf_r+0x60>
 800c318:	2a25      	cmp	r2, #37	@ 0x25
 800c31a:	d1f9      	bne.n	800c310 <_svfiprintf_r+0x54>
 800c31c:	ebba 0b04 	subs.w	fp, sl, r4
 800c320:	d00b      	beq.n	800c33a <_svfiprintf_r+0x7e>
 800c322:	465b      	mov	r3, fp
 800c324:	4622      	mov	r2, r4
 800c326:	4629      	mov	r1, r5
 800c328:	4638      	mov	r0, r7
 800c32a:	f7ff ff6b 	bl	800c204 <__ssputs_r>
 800c32e:	3001      	adds	r0, #1
 800c330:	f000 80a7 	beq.w	800c482 <_svfiprintf_r+0x1c6>
 800c334:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c336:	445a      	add	r2, fp
 800c338:	9209      	str	r2, [sp, #36]	@ 0x24
 800c33a:	f89a 3000 	ldrb.w	r3, [sl]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	f000 809f 	beq.w	800c482 <_svfiprintf_r+0x1c6>
 800c344:	2300      	movs	r3, #0
 800c346:	f04f 32ff 	mov.w	r2, #4294967295
 800c34a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c34e:	f10a 0a01 	add.w	sl, sl, #1
 800c352:	9304      	str	r3, [sp, #16]
 800c354:	9307      	str	r3, [sp, #28]
 800c356:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c35a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c35c:	4654      	mov	r4, sl
 800c35e:	2205      	movs	r2, #5
 800c360:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c364:	484e      	ldr	r0, [pc, #312]	@ (800c4a0 <_svfiprintf_r+0x1e4>)
 800c366:	f7f3 ff4b 	bl	8000200 <memchr>
 800c36a:	9a04      	ldr	r2, [sp, #16]
 800c36c:	b9d8      	cbnz	r0, 800c3a6 <_svfiprintf_r+0xea>
 800c36e:	06d0      	lsls	r0, r2, #27
 800c370:	bf44      	itt	mi
 800c372:	2320      	movmi	r3, #32
 800c374:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c378:	0711      	lsls	r1, r2, #28
 800c37a:	bf44      	itt	mi
 800c37c:	232b      	movmi	r3, #43	@ 0x2b
 800c37e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c382:	f89a 3000 	ldrb.w	r3, [sl]
 800c386:	2b2a      	cmp	r3, #42	@ 0x2a
 800c388:	d015      	beq.n	800c3b6 <_svfiprintf_r+0xfa>
 800c38a:	9a07      	ldr	r2, [sp, #28]
 800c38c:	4654      	mov	r4, sl
 800c38e:	2000      	movs	r0, #0
 800c390:	f04f 0c0a 	mov.w	ip, #10
 800c394:	4621      	mov	r1, r4
 800c396:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c39a:	3b30      	subs	r3, #48	@ 0x30
 800c39c:	2b09      	cmp	r3, #9
 800c39e:	d94b      	bls.n	800c438 <_svfiprintf_r+0x17c>
 800c3a0:	b1b0      	cbz	r0, 800c3d0 <_svfiprintf_r+0x114>
 800c3a2:	9207      	str	r2, [sp, #28]
 800c3a4:	e014      	b.n	800c3d0 <_svfiprintf_r+0x114>
 800c3a6:	eba0 0308 	sub.w	r3, r0, r8
 800c3aa:	fa09 f303 	lsl.w	r3, r9, r3
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	9304      	str	r3, [sp, #16]
 800c3b2:	46a2      	mov	sl, r4
 800c3b4:	e7d2      	b.n	800c35c <_svfiprintf_r+0xa0>
 800c3b6:	9b03      	ldr	r3, [sp, #12]
 800c3b8:	1d19      	adds	r1, r3, #4
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	9103      	str	r1, [sp, #12]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	bfbb      	ittet	lt
 800c3c2:	425b      	neglt	r3, r3
 800c3c4:	f042 0202 	orrlt.w	r2, r2, #2
 800c3c8:	9307      	strge	r3, [sp, #28]
 800c3ca:	9307      	strlt	r3, [sp, #28]
 800c3cc:	bfb8      	it	lt
 800c3ce:	9204      	strlt	r2, [sp, #16]
 800c3d0:	7823      	ldrb	r3, [r4, #0]
 800c3d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3d4:	d10a      	bne.n	800c3ec <_svfiprintf_r+0x130>
 800c3d6:	7863      	ldrb	r3, [r4, #1]
 800c3d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3da:	d132      	bne.n	800c442 <_svfiprintf_r+0x186>
 800c3dc:	9b03      	ldr	r3, [sp, #12]
 800c3de:	1d1a      	adds	r2, r3, #4
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	9203      	str	r2, [sp, #12]
 800c3e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3e8:	3402      	adds	r4, #2
 800c3ea:	9305      	str	r3, [sp, #20]
 800c3ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c4b0 <_svfiprintf_r+0x1f4>
 800c3f0:	7821      	ldrb	r1, [r4, #0]
 800c3f2:	2203      	movs	r2, #3
 800c3f4:	4650      	mov	r0, sl
 800c3f6:	f7f3 ff03 	bl	8000200 <memchr>
 800c3fa:	b138      	cbz	r0, 800c40c <_svfiprintf_r+0x150>
 800c3fc:	9b04      	ldr	r3, [sp, #16]
 800c3fe:	eba0 000a 	sub.w	r0, r0, sl
 800c402:	2240      	movs	r2, #64	@ 0x40
 800c404:	4082      	lsls	r2, r0
 800c406:	4313      	orrs	r3, r2
 800c408:	3401      	adds	r4, #1
 800c40a:	9304      	str	r3, [sp, #16]
 800c40c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c410:	4824      	ldr	r0, [pc, #144]	@ (800c4a4 <_svfiprintf_r+0x1e8>)
 800c412:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c416:	2206      	movs	r2, #6
 800c418:	f7f3 fef2 	bl	8000200 <memchr>
 800c41c:	2800      	cmp	r0, #0
 800c41e:	d036      	beq.n	800c48e <_svfiprintf_r+0x1d2>
 800c420:	4b21      	ldr	r3, [pc, #132]	@ (800c4a8 <_svfiprintf_r+0x1ec>)
 800c422:	bb1b      	cbnz	r3, 800c46c <_svfiprintf_r+0x1b0>
 800c424:	9b03      	ldr	r3, [sp, #12]
 800c426:	3307      	adds	r3, #7
 800c428:	f023 0307 	bic.w	r3, r3, #7
 800c42c:	3308      	adds	r3, #8
 800c42e:	9303      	str	r3, [sp, #12]
 800c430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c432:	4433      	add	r3, r6
 800c434:	9309      	str	r3, [sp, #36]	@ 0x24
 800c436:	e76a      	b.n	800c30e <_svfiprintf_r+0x52>
 800c438:	fb0c 3202 	mla	r2, ip, r2, r3
 800c43c:	460c      	mov	r4, r1
 800c43e:	2001      	movs	r0, #1
 800c440:	e7a8      	b.n	800c394 <_svfiprintf_r+0xd8>
 800c442:	2300      	movs	r3, #0
 800c444:	3401      	adds	r4, #1
 800c446:	9305      	str	r3, [sp, #20]
 800c448:	4619      	mov	r1, r3
 800c44a:	f04f 0c0a 	mov.w	ip, #10
 800c44e:	4620      	mov	r0, r4
 800c450:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c454:	3a30      	subs	r2, #48	@ 0x30
 800c456:	2a09      	cmp	r2, #9
 800c458:	d903      	bls.n	800c462 <_svfiprintf_r+0x1a6>
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d0c6      	beq.n	800c3ec <_svfiprintf_r+0x130>
 800c45e:	9105      	str	r1, [sp, #20]
 800c460:	e7c4      	b.n	800c3ec <_svfiprintf_r+0x130>
 800c462:	fb0c 2101 	mla	r1, ip, r1, r2
 800c466:	4604      	mov	r4, r0
 800c468:	2301      	movs	r3, #1
 800c46a:	e7f0      	b.n	800c44e <_svfiprintf_r+0x192>
 800c46c:	ab03      	add	r3, sp, #12
 800c46e:	9300      	str	r3, [sp, #0]
 800c470:	462a      	mov	r2, r5
 800c472:	4b0e      	ldr	r3, [pc, #56]	@ (800c4ac <_svfiprintf_r+0x1f0>)
 800c474:	a904      	add	r1, sp, #16
 800c476:	4638      	mov	r0, r7
 800c478:	f3af 8000 	nop.w
 800c47c:	1c42      	adds	r2, r0, #1
 800c47e:	4606      	mov	r6, r0
 800c480:	d1d6      	bne.n	800c430 <_svfiprintf_r+0x174>
 800c482:	89ab      	ldrh	r3, [r5, #12]
 800c484:	065b      	lsls	r3, r3, #25
 800c486:	f53f af2d 	bmi.w	800c2e4 <_svfiprintf_r+0x28>
 800c48a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c48c:	e72c      	b.n	800c2e8 <_svfiprintf_r+0x2c>
 800c48e:	ab03      	add	r3, sp, #12
 800c490:	9300      	str	r3, [sp, #0]
 800c492:	462a      	mov	r2, r5
 800c494:	4b05      	ldr	r3, [pc, #20]	@ (800c4ac <_svfiprintf_r+0x1f0>)
 800c496:	a904      	add	r1, sp, #16
 800c498:	4638      	mov	r0, r7
 800c49a:	f000 f879 	bl	800c590 <_printf_i>
 800c49e:	e7ed      	b.n	800c47c <_svfiprintf_r+0x1c0>
 800c4a0:	0800cb54 	.word	0x0800cb54
 800c4a4:	0800cb5e 	.word	0x0800cb5e
 800c4a8:	00000000 	.word	0x00000000
 800c4ac:	0800c205 	.word	0x0800c205
 800c4b0:	0800cb5a 	.word	0x0800cb5a

0800c4b4 <_printf_common>:
 800c4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4b8:	4616      	mov	r6, r2
 800c4ba:	4698      	mov	r8, r3
 800c4bc:	688a      	ldr	r2, [r1, #8]
 800c4be:	690b      	ldr	r3, [r1, #16]
 800c4c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	bfb8      	it	lt
 800c4c8:	4613      	movlt	r3, r2
 800c4ca:	6033      	str	r3, [r6, #0]
 800c4cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c4d0:	4607      	mov	r7, r0
 800c4d2:	460c      	mov	r4, r1
 800c4d4:	b10a      	cbz	r2, 800c4da <_printf_common+0x26>
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	6033      	str	r3, [r6, #0]
 800c4da:	6823      	ldr	r3, [r4, #0]
 800c4dc:	0699      	lsls	r1, r3, #26
 800c4de:	bf42      	ittt	mi
 800c4e0:	6833      	ldrmi	r3, [r6, #0]
 800c4e2:	3302      	addmi	r3, #2
 800c4e4:	6033      	strmi	r3, [r6, #0]
 800c4e6:	6825      	ldr	r5, [r4, #0]
 800c4e8:	f015 0506 	ands.w	r5, r5, #6
 800c4ec:	d106      	bne.n	800c4fc <_printf_common+0x48>
 800c4ee:	f104 0a19 	add.w	sl, r4, #25
 800c4f2:	68e3      	ldr	r3, [r4, #12]
 800c4f4:	6832      	ldr	r2, [r6, #0]
 800c4f6:	1a9b      	subs	r3, r3, r2
 800c4f8:	42ab      	cmp	r3, r5
 800c4fa:	dc26      	bgt.n	800c54a <_printf_common+0x96>
 800c4fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c500:	6822      	ldr	r2, [r4, #0]
 800c502:	3b00      	subs	r3, #0
 800c504:	bf18      	it	ne
 800c506:	2301      	movne	r3, #1
 800c508:	0692      	lsls	r2, r2, #26
 800c50a:	d42b      	bmi.n	800c564 <_printf_common+0xb0>
 800c50c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c510:	4641      	mov	r1, r8
 800c512:	4638      	mov	r0, r7
 800c514:	47c8      	blx	r9
 800c516:	3001      	adds	r0, #1
 800c518:	d01e      	beq.n	800c558 <_printf_common+0xa4>
 800c51a:	6823      	ldr	r3, [r4, #0]
 800c51c:	6922      	ldr	r2, [r4, #16]
 800c51e:	f003 0306 	and.w	r3, r3, #6
 800c522:	2b04      	cmp	r3, #4
 800c524:	bf02      	ittt	eq
 800c526:	68e5      	ldreq	r5, [r4, #12]
 800c528:	6833      	ldreq	r3, [r6, #0]
 800c52a:	1aed      	subeq	r5, r5, r3
 800c52c:	68a3      	ldr	r3, [r4, #8]
 800c52e:	bf0c      	ite	eq
 800c530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c534:	2500      	movne	r5, #0
 800c536:	4293      	cmp	r3, r2
 800c538:	bfc4      	itt	gt
 800c53a:	1a9b      	subgt	r3, r3, r2
 800c53c:	18ed      	addgt	r5, r5, r3
 800c53e:	2600      	movs	r6, #0
 800c540:	341a      	adds	r4, #26
 800c542:	42b5      	cmp	r5, r6
 800c544:	d11a      	bne.n	800c57c <_printf_common+0xc8>
 800c546:	2000      	movs	r0, #0
 800c548:	e008      	b.n	800c55c <_printf_common+0xa8>
 800c54a:	2301      	movs	r3, #1
 800c54c:	4652      	mov	r2, sl
 800c54e:	4641      	mov	r1, r8
 800c550:	4638      	mov	r0, r7
 800c552:	47c8      	blx	r9
 800c554:	3001      	adds	r0, #1
 800c556:	d103      	bne.n	800c560 <_printf_common+0xac>
 800c558:	f04f 30ff 	mov.w	r0, #4294967295
 800c55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c560:	3501      	adds	r5, #1
 800c562:	e7c6      	b.n	800c4f2 <_printf_common+0x3e>
 800c564:	18e1      	adds	r1, r4, r3
 800c566:	1c5a      	adds	r2, r3, #1
 800c568:	2030      	movs	r0, #48	@ 0x30
 800c56a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c56e:	4422      	add	r2, r4
 800c570:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c574:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c578:	3302      	adds	r3, #2
 800c57a:	e7c7      	b.n	800c50c <_printf_common+0x58>
 800c57c:	2301      	movs	r3, #1
 800c57e:	4622      	mov	r2, r4
 800c580:	4641      	mov	r1, r8
 800c582:	4638      	mov	r0, r7
 800c584:	47c8      	blx	r9
 800c586:	3001      	adds	r0, #1
 800c588:	d0e6      	beq.n	800c558 <_printf_common+0xa4>
 800c58a:	3601      	adds	r6, #1
 800c58c:	e7d9      	b.n	800c542 <_printf_common+0x8e>
	...

0800c590 <_printf_i>:
 800c590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c594:	7e0f      	ldrb	r7, [r1, #24]
 800c596:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c598:	2f78      	cmp	r7, #120	@ 0x78
 800c59a:	4691      	mov	r9, r2
 800c59c:	4680      	mov	r8, r0
 800c59e:	460c      	mov	r4, r1
 800c5a0:	469a      	mov	sl, r3
 800c5a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c5a6:	d807      	bhi.n	800c5b8 <_printf_i+0x28>
 800c5a8:	2f62      	cmp	r7, #98	@ 0x62
 800c5aa:	d80a      	bhi.n	800c5c2 <_printf_i+0x32>
 800c5ac:	2f00      	cmp	r7, #0
 800c5ae:	f000 80d1 	beq.w	800c754 <_printf_i+0x1c4>
 800c5b2:	2f58      	cmp	r7, #88	@ 0x58
 800c5b4:	f000 80b8 	beq.w	800c728 <_printf_i+0x198>
 800c5b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c5bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c5c0:	e03a      	b.n	800c638 <_printf_i+0xa8>
 800c5c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c5c6:	2b15      	cmp	r3, #21
 800c5c8:	d8f6      	bhi.n	800c5b8 <_printf_i+0x28>
 800c5ca:	a101      	add	r1, pc, #4	@ (adr r1, 800c5d0 <_printf_i+0x40>)
 800c5cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5d0:	0800c629 	.word	0x0800c629
 800c5d4:	0800c63d 	.word	0x0800c63d
 800c5d8:	0800c5b9 	.word	0x0800c5b9
 800c5dc:	0800c5b9 	.word	0x0800c5b9
 800c5e0:	0800c5b9 	.word	0x0800c5b9
 800c5e4:	0800c5b9 	.word	0x0800c5b9
 800c5e8:	0800c63d 	.word	0x0800c63d
 800c5ec:	0800c5b9 	.word	0x0800c5b9
 800c5f0:	0800c5b9 	.word	0x0800c5b9
 800c5f4:	0800c5b9 	.word	0x0800c5b9
 800c5f8:	0800c5b9 	.word	0x0800c5b9
 800c5fc:	0800c73b 	.word	0x0800c73b
 800c600:	0800c667 	.word	0x0800c667
 800c604:	0800c6f5 	.word	0x0800c6f5
 800c608:	0800c5b9 	.word	0x0800c5b9
 800c60c:	0800c5b9 	.word	0x0800c5b9
 800c610:	0800c75d 	.word	0x0800c75d
 800c614:	0800c5b9 	.word	0x0800c5b9
 800c618:	0800c667 	.word	0x0800c667
 800c61c:	0800c5b9 	.word	0x0800c5b9
 800c620:	0800c5b9 	.word	0x0800c5b9
 800c624:	0800c6fd 	.word	0x0800c6fd
 800c628:	6833      	ldr	r3, [r6, #0]
 800c62a:	1d1a      	adds	r2, r3, #4
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	6032      	str	r2, [r6, #0]
 800c630:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c634:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c638:	2301      	movs	r3, #1
 800c63a:	e09c      	b.n	800c776 <_printf_i+0x1e6>
 800c63c:	6833      	ldr	r3, [r6, #0]
 800c63e:	6820      	ldr	r0, [r4, #0]
 800c640:	1d19      	adds	r1, r3, #4
 800c642:	6031      	str	r1, [r6, #0]
 800c644:	0606      	lsls	r6, r0, #24
 800c646:	d501      	bpl.n	800c64c <_printf_i+0xbc>
 800c648:	681d      	ldr	r5, [r3, #0]
 800c64a:	e003      	b.n	800c654 <_printf_i+0xc4>
 800c64c:	0645      	lsls	r5, r0, #25
 800c64e:	d5fb      	bpl.n	800c648 <_printf_i+0xb8>
 800c650:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c654:	2d00      	cmp	r5, #0
 800c656:	da03      	bge.n	800c660 <_printf_i+0xd0>
 800c658:	232d      	movs	r3, #45	@ 0x2d
 800c65a:	426d      	negs	r5, r5
 800c65c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c660:	4858      	ldr	r0, [pc, #352]	@ (800c7c4 <_printf_i+0x234>)
 800c662:	230a      	movs	r3, #10
 800c664:	e011      	b.n	800c68a <_printf_i+0xfa>
 800c666:	6821      	ldr	r1, [r4, #0]
 800c668:	6833      	ldr	r3, [r6, #0]
 800c66a:	0608      	lsls	r0, r1, #24
 800c66c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c670:	d402      	bmi.n	800c678 <_printf_i+0xe8>
 800c672:	0649      	lsls	r1, r1, #25
 800c674:	bf48      	it	mi
 800c676:	b2ad      	uxthmi	r5, r5
 800c678:	2f6f      	cmp	r7, #111	@ 0x6f
 800c67a:	4852      	ldr	r0, [pc, #328]	@ (800c7c4 <_printf_i+0x234>)
 800c67c:	6033      	str	r3, [r6, #0]
 800c67e:	bf14      	ite	ne
 800c680:	230a      	movne	r3, #10
 800c682:	2308      	moveq	r3, #8
 800c684:	2100      	movs	r1, #0
 800c686:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c68a:	6866      	ldr	r6, [r4, #4]
 800c68c:	60a6      	str	r6, [r4, #8]
 800c68e:	2e00      	cmp	r6, #0
 800c690:	db05      	blt.n	800c69e <_printf_i+0x10e>
 800c692:	6821      	ldr	r1, [r4, #0]
 800c694:	432e      	orrs	r6, r5
 800c696:	f021 0104 	bic.w	r1, r1, #4
 800c69a:	6021      	str	r1, [r4, #0]
 800c69c:	d04b      	beq.n	800c736 <_printf_i+0x1a6>
 800c69e:	4616      	mov	r6, r2
 800c6a0:	fbb5 f1f3 	udiv	r1, r5, r3
 800c6a4:	fb03 5711 	mls	r7, r3, r1, r5
 800c6a8:	5dc7      	ldrb	r7, [r0, r7]
 800c6aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c6ae:	462f      	mov	r7, r5
 800c6b0:	42bb      	cmp	r3, r7
 800c6b2:	460d      	mov	r5, r1
 800c6b4:	d9f4      	bls.n	800c6a0 <_printf_i+0x110>
 800c6b6:	2b08      	cmp	r3, #8
 800c6b8:	d10b      	bne.n	800c6d2 <_printf_i+0x142>
 800c6ba:	6823      	ldr	r3, [r4, #0]
 800c6bc:	07df      	lsls	r7, r3, #31
 800c6be:	d508      	bpl.n	800c6d2 <_printf_i+0x142>
 800c6c0:	6923      	ldr	r3, [r4, #16]
 800c6c2:	6861      	ldr	r1, [r4, #4]
 800c6c4:	4299      	cmp	r1, r3
 800c6c6:	bfde      	ittt	le
 800c6c8:	2330      	movle	r3, #48	@ 0x30
 800c6ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c6ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c6d2:	1b92      	subs	r2, r2, r6
 800c6d4:	6122      	str	r2, [r4, #16]
 800c6d6:	f8cd a000 	str.w	sl, [sp]
 800c6da:	464b      	mov	r3, r9
 800c6dc:	aa03      	add	r2, sp, #12
 800c6de:	4621      	mov	r1, r4
 800c6e0:	4640      	mov	r0, r8
 800c6e2:	f7ff fee7 	bl	800c4b4 <_printf_common>
 800c6e6:	3001      	adds	r0, #1
 800c6e8:	d14a      	bne.n	800c780 <_printf_i+0x1f0>
 800c6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ee:	b004      	add	sp, #16
 800c6f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6f4:	6823      	ldr	r3, [r4, #0]
 800c6f6:	f043 0320 	orr.w	r3, r3, #32
 800c6fa:	6023      	str	r3, [r4, #0]
 800c6fc:	4832      	ldr	r0, [pc, #200]	@ (800c7c8 <_printf_i+0x238>)
 800c6fe:	2778      	movs	r7, #120	@ 0x78
 800c700:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c704:	6823      	ldr	r3, [r4, #0]
 800c706:	6831      	ldr	r1, [r6, #0]
 800c708:	061f      	lsls	r7, r3, #24
 800c70a:	f851 5b04 	ldr.w	r5, [r1], #4
 800c70e:	d402      	bmi.n	800c716 <_printf_i+0x186>
 800c710:	065f      	lsls	r7, r3, #25
 800c712:	bf48      	it	mi
 800c714:	b2ad      	uxthmi	r5, r5
 800c716:	6031      	str	r1, [r6, #0]
 800c718:	07d9      	lsls	r1, r3, #31
 800c71a:	bf44      	itt	mi
 800c71c:	f043 0320 	orrmi.w	r3, r3, #32
 800c720:	6023      	strmi	r3, [r4, #0]
 800c722:	b11d      	cbz	r5, 800c72c <_printf_i+0x19c>
 800c724:	2310      	movs	r3, #16
 800c726:	e7ad      	b.n	800c684 <_printf_i+0xf4>
 800c728:	4826      	ldr	r0, [pc, #152]	@ (800c7c4 <_printf_i+0x234>)
 800c72a:	e7e9      	b.n	800c700 <_printf_i+0x170>
 800c72c:	6823      	ldr	r3, [r4, #0]
 800c72e:	f023 0320 	bic.w	r3, r3, #32
 800c732:	6023      	str	r3, [r4, #0]
 800c734:	e7f6      	b.n	800c724 <_printf_i+0x194>
 800c736:	4616      	mov	r6, r2
 800c738:	e7bd      	b.n	800c6b6 <_printf_i+0x126>
 800c73a:	6833      	ldr	r3, [r6, #0]
 800c73c:	6825      	ldr	r5, [r4, #0]
 800c73e:	6961      	ldr	r1, [r4, #20]
 800c740:	1d18      	adds	r0, r3, #4
 800c742:	6030      	str	r0, [r6, #0]
 800c744:	062e      	lsls	r6, r5, #24
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	d501      	bpl.n	800c74e <_printf_i+0x1be>
 800c74a:	6019      	str	r1, [r3, #0]
 800c74c:	e002      	b.n	800c754 <_printf_i+0x1c4>
 800c74e:	0668      	lsls	r0, r5, #25
 800c750:	d5fb      	bpl.n	800c74a <_printf_i+0x1ba>
 800c752:	8019      	strh	r1, [r3, #0]
 800c754:	2300      	movs	r3, #0
 800c756:	6123      	str	r3, [r4, #16]
 800c758:	4616      	mov	r6, r2
 800c75a:	e7bc      	b.n	800c6d6 <_printf_i+0x146>
 800c75c:	6833      	ldr	r3, [r6, #0]
 800c75e:	1d1a      	adds	r2, r3, #4
 800c760:	6032      	str	r2, [r6, #0]
 800c762:	681e      	ldr	r6, [r3, #0]
 800c764:	6862      	ldr	r2, [r4, #4]
 800c766:	2100      	movs	r1, #0
 800c768:	4630      	mov	r0, r6
 800c76a:	f7f3 fd49 	bl	8000200 <memchr>
 800c76e:	b108      	cbz	r0, 800c774 <_printf_i+0x1e4>
 800c770:	1b80      	subs	r0, r0, r6
 800c772:	6060      	str	r0, [r4, #4]
 800c774:	6863      	ldr	r3, [r4, #4]
 800c776:	6123      	str	r3, [r4, #16]
 800c778:	2300      	movs	r3, #0
 800c77a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c77e:	e7aa      	b.n	800c6d6 <_printf_i+0x146>
 800c780:	6923      	ldr	r3, [r4, #16]
 800c782:	4632      	mov	r2, r6
 800c784:	4649      	mov	r1, r9
 800c786:	4640      	mov	r0, r8
 800c788:	47d0      	blx	sl
 800c78a:	3001      	adds	r0, #1
 800c78c:	d0ad      	beq.n	800c6ea <_printf_i+0x15a>
 800c78e:	6823      	ldr	r3, [r4, #0]
 800c790:	079b      	lsls	r3, r3, #30
 800c792:	d413      	bmi.n	800c7bc <_printf_i+0x22c>
 800c794:	68e0      	ldr	r0, [r4, #12]
 800c796:	9b03      	ldr	r3, [sp, #12]
 800c798:	4298      	cmp	r0, r3
 800c79a:	bfb8      	it	lt
 800c79c:	4618      	movlt	r0, r3
 800c79e:	e7a6      	b.n	800c6ee <_printf_i+0x15e>
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	4632      	mov	r2, r6
 800c7a4:	4649      	mov	r1, r9
 800c7a6:	4640      	mov	r0, r8
 800c7a8:	47d0      	blx	sl
 800c7aa:	3001      	adds	r0, #1
 800c7ac:	d09d      	beq.n	800c6ea <_printf_i+0x15a>
 800c7ae:	3501      	adds	r5, #1
 800c7b0:	68e3      	ldr	r3, [r4, #12]
 800c7b2:	9903      	ldr	r1, [sp, #12]
 800c7b4:	1a5b      	subs	r3, r3, r1
 800c7b6:	42ab      	cmp	r3, r5
 800c7b8:	dcf2      	bgt.n	800c7a0 <_printf_i+0x210>
 800c7ba:	e7eb      	b.n	800c794 <_printf_i+0x204>
 800c7bc:	2500      	movs	r5, #0
 800c7be:	f104 0619 	add.w	r6, r4, #25
 800c7c2:	e7f5      	b.n	800c7b0 <_printf_i+0x220>
 800c7c4:	0800cb65 	.word	0x0800cb65
 800c7c8:	0800cb76 	.word	0x0800cb76

0800c7cc <memmove>:
 800c7cc:	4288      	cmp	r0, r1
 800c7ce:	b510      	push	{r4, lr}
 800c7d0:	eb01 0402 	add.w	r4, r1, r2
 800c7d4:	d902      	bls.n	800c7dc <memmove+0x10>
 800c7d6:	4284      	cmp	r4, r0
 800c7d8:	4623      	mov	r3, r4
 800c7da:	d807      	bhi.n	800c7ec <memmove+0x20>
 800c7dc:	1e43      	subs	r3, r0, #1
 800c7de:	42a1      	cmp	r1, r4
 800c7e0:	d008      	beq.n	800c7f4 <memmove+0x28>
 800c7e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c7ea:	e7f8      	b.n	800c7de <memmove+0x12>
 800c7ec:	4402      	add	r2, r0
 800c7ee:	4601      	mov	r1, r0
 800c7f0:	428a      	cmp	r2, r1
 800c7f2:	d100      	bne.n	800c7f6 <memmove+0x2a>
 800c7f4:	bd10      	pop	{r4, pc}
 800c7f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c7fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c7fe:	e7f7      	b.n	800c7f0 <memmove+0x24>

0800c800 <memcpy>:
 800c800:	440a      	add	r2, r1
 800c802:	4291      	cmp	r1, r2
 800c804:	f100 33ff 	add.w	r3, r0, #4294967295
 800c808:	d100      	bne.n	800c80c <memcpy+0xc>
 800c80a:	4770      	bx	lr
 800c80c:	b510      	push	{r4, lr}
 800c80e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c812:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c816:	4291      	cmp	r1, r2
 800c818:	d1f9      	bne.n	800c80e <memcpy+0xe>
 800c81a:	bd10      	pop	{r4, pc}

0800c81c <_realloc_r>:
 800c81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c820:	4607      	mov	r7, r0
 800c822:	4614      	mov	r4, r2
 800c824:	460d      	mov	r5, r1
 800c826:	b921      	cbnz	r1, 800c832 <_realloc_r+0x16>
 800c828:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c82c:	4611      	mov	r1, r2
 800c82e:	f7ff bbad 	b.w	800bf8c <_malloc_r>
 800c832:	b92a      	cbnz	r2, 800c840 <_realloc_r+0x24>
 800c834:	f7ff fc9c 	bl	800c170 <_free_r>
 800c838:	4625      	mov	r5, r4
 800c83a:	4628      	mov	r0, r5
 800c83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c840:	f000 f81a 	bl	800c878 <_malloc_usable_size_r>
 800c844:	4284      	cmp	r4, r0
 800c846:	4606      	mov	r6, r0
 800c848:	d802      	bhi.n	800c850 <_realloc_r+0x34>
 800c84a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c84e:	d8f4      	bhi.n	800c83a <_realloc_r+0x1e>
 800c850:	4621      	mov	r1, r4
 800c852:	4638      	mov	r0, r7
 800c854:	f7ff fb9a 	bl	800bf8c <_malloc_r>
 800c858:	4680      	mov	r8, r0
 800c85a:	b908      	cbnz	r0, 800c860 <_realloc_r+0x44>
 800c85c:	4645      	mov	r5, r8
 800c85e:	e7ec      	b.n	800c83a <_realloc_r+0x1e>
 800c860:	42b4      	cmp	r4, r6
 800c862:	4622      	mov	r2, r4
 800c864:	4629      	mov	r1, r5
 800c866:	bf28      	it	cs
 800c868:	4632      	movcs	r2, r6
 800c86a:	f7ff ffc9 	bl	800c800 <memcpy>
 800c86e:	4629      	mov	r1, r5
 800c870:	4638      	mov	r0, r7
 800c872:	f7ff fc7d 	bl	800c170 <_free_r>
 800c876:	e7f1      	b.n	800c85c <_realloc_r+0x40>

0800c878 <_malloc_usable_size_r>:
 800c878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c87c:	1f18      	subs	r0, r3, #4
 800c87e:	2b00      	cmp	r3, #0
 800c880:	bfbc      	itt	lt
 800c882:	580b      	ldrlt	r3, [r1, r0]
 800c884:	18c0      	addlt	r0, r0, r3
 800c886:	4770      	bx	lr

0800c888 <_init>:
 800c888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c88a:	bf00      	nop
 800c88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c88e:	bc08      	pop	{r3}
 800c890:	469e      	mov	lr, r3
 800c892:	4770      	bx	lr

0800c894 <_fini>:
 800c894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c896:	bf00      	nop
 800c898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c89a:	bc08      	pop	{r3}
 800c89c:	469e      	mov	lr, r3
 800c89e:	4770      	bx	lr
